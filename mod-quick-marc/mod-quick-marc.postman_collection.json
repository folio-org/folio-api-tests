{
	"info": {
		"_postman_id": "77ec20a5-2388-4603-ac98-d6292cc49985",
		"name": "mod-quick-marc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13374566-ffbd-4823-837c-c52223f33d19",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bcfcbb2e-3a95-41a6-aa2f-b88f475405d8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d6b521ba-b7ed-4016-92dd-02b24985de18",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d433fe2d-4e61-41f2-9e27-f4640a8e530d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-quick-marc\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a1e0d843-c817-4af7-92db-8bfcd268d837",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a4e243f-8855-4bc5-8205-95cfb82d651b",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c47e78b-1518-41e0-a831-bd345d6ae394",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10518dfd-86aa-48f0-a872-496f94f7bad9",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc8cefd6-b354-4e09-b6f9-daf313936e5c",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e49684d8-8528-42aa-9da5-852f68852710",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3763ece8-3228-4623-9b4c-051b2f7a92bf",
										"exec": [
											"eval(globals.loadUtils).sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fcfbf21e-6879-4b79-b507-0d4b8d1516d4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "47232144-197d-41c7-8559-bb4f9e7c359a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"mod-authtoken is enabled\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63a4f054-b2d8-4ccd-9ef4-b53061f746e2",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4767f60-4dde-4274-9727-e42471df225a",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2969c2f5-5017-4d97-95d4-82eb41fcafcd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dad4c28e-d50c-49b4-a5b0-6311c7e45423",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e08f911-0c3a-49b4-91fa-3c7e79ddf8d2",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4030eff-894b-4c82-a346-ac97f605da84",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Define permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4459acc9-6658-4cf6-8c4d-469caefaa910",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56b54fe7-c09e-4163-82bb-fbb53354de89",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acd96801-8d1d-442f-8046-e056ca8214f4",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a276b30f-c740-4965-8769-fa7d53e17dc8",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d263d9b-57f7-4706-bc5c-7dfd57fc9d81",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modQuickMarcId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aacb1228-77b3-4eda-bd0c-30a3e5abb838",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-quick-marc';\r",
											"\r",
											"pm.sendRequest(utils.buildOkapiUrl('/_/proxy/tenants/' + pm.variables.get(\"testTenant\") + '/modules?provides=jsonSchemas'), (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function () {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"        console.log(\"Module id: \" + moduleId);\r",
											"    \tpm.variables.set(\"modQuickMarcId\", moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modQuickMarcId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e1c04aa-5fbe-467f-86d3-3f0c68802d2b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23842766-4a1d-4cd1-b593-9667f6298a4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare SRS record",
					"item": [
						{
							"name": "Create snapshot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1e684d52-a381-46e2-99e0-05dbd9c9b378",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set('srsSnapshotId', uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "31d81b08-00f6-4b4a-8958-b68efc269acf",
										"exec": [
											"pm.test(\"Snapshot creation status\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.have.jsonBody(\"jobExecutionId\", pm.variables.get('srsSnapshotId'));",
											"",
											"    // Set the fromDate param value as current time",
											"    storeFromDate();",
											"});",
											"",
											"function storeFromDate() {",
											"    // Set the fromDate param value as current time",
											"    let moment = require('moment');",
											"    let metadata = pm.response.json().metadata;",
											"    // Get time from metadata to work with server time",
											"    let currentDateTime = metadata ? moment(metadata.createdDate) : moment();",
											"    pm.environment.set(\"fromDate\", currentDateTime.utc().subtract(1, 'seconds').format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));",
											"    console.log(\"From date: \" + pm.environment.get(\"fromDate\"));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jobExecutionId\": \"{{srsSnapshotId}}\",\n  \"status\": \"PARSING_IN_PROGRESS\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/snapshots",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"snapshots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2257a151-e9ab-4a57-a850-9f7e1174a837",
										"exec": [
											"pm.test(\"Record created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let recordId = pm.response.json().id;",
											"    let instanceId = pm.response.json().externalIdsHolder.instanceId;",
											"    pm.expect(recordId, \"The record id is missing but required for API test\").to.not.be.empty;",
											"    let metadata = pm.response.json().metadata;",
											"    pm.expect(metadata, \"The metadata is empty but required for API test\").to.not.be.empty;",
											"    // Remember created record id",
											"    pm.variables.set(\"recordId\", recordId);",
											"    pm.variables.set(\"instanceId\", instanceId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2521f552-ff9f-4067-b372-91465db5b93f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"marcRecordsResourceUrl\"), (err, res) => {",
											"    let parsedRecords  = res.json();",
											"    let parsedRecord = parsedRecords[0];",
											"    console.log(parsedRecord);",
											"    ",
											"    pm.variables.set(\"parsedRecordContent\", JSON.stringify(parsedRecord));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"snapshotId\": \"{{srsSnapshotId}}\",\r\n  \"matchedId\": \"{{$guid}}\",\r\n  \"recordType\": \"MARC\",\r\n  \"rawRecord\": {\r\n    \"content\": \"marc data goes here\"\r\n  },\r\n  \"externalIdsHolder\": {\r\n     \"instanceId\": \"24db5e55-478e-4da1-85b5-3e4ab41987eb\"\r\n  },\r\n  \"parsedRecord\": {\r\n    \"content\": {{parsedRecordContent}}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/records",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check created record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebf6a1dd-e2e1-4ebc-a81b-96f4945f74a8",
										"exec": [
											"pm.test(\"Records result status\", function () {",
											"    pm.response.to.be.ok;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/sourceRecords?query=recordType=MARC and metadata.createdDate>{{fromDate}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"sourceRecords"
									],
									"query": [
										{
											"key": "query",
											"value": "recordType=MARC and metadata.createdDate>{{fromDate}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3213ed33-9743-42d2-b403-f21ea4bec117",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8838f997-7d05-4525-a172-b76a0691b7dd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Get record by instanceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04804254-36ab-4f57-b34d-a63b6452ed82",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"let record = {};",
									"",
									"pm.test(\"Record found\", function () {",
									"    pm.response.to.have.status(200);",
									"    record = pm.response.json();",
									"});",
									"",
									"pm.test(\"Record content is valid\", function() {",
									"    utils.validateQuickMarcJson(record);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "739b36a5-08ad-443f-9ef1-134ae3e8eb7e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records?instanceId={{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records"
							],
							"query": [
								{
									"key": "instanceId",
									"value": "{{instanceId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ab8fdcf-3417-443b-b32a-653431be7c3f",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4d805605-548a-4904-9958-9e9d8ba86774",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date1 = \"2020\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date2 = \"2021\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"035\")].content = \"12345678\";",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId)",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7a6a66b7-ed5b-4648-b612-b8a8c4aa30ee",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1f50ee20-a30f-40aa-ae81-cc403fe669ac",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Get record not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16ef5686-b388-4000-b929-ebb0fa414e34",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"let error = {};",
									"",
									"pm.test(\"Record not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    error = pm.response.json();",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "93a776fd-2c07-4387-b4a6-0db56cbf5808",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records?instanceId=445c41b1-5f0f-4bea-856b-b6459f97949c",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records"
							],
							"query": [
								{
									"key": "instanceId",
									"value": "445c41b1-5f0f-4bea-856b-b6459f97949c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get record bad instanceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1730b01-7ed2-42d0-9086-04673326f3da",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Record instanceId is incorrect\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ecc854c-a765-4c1c-8d03-11283badc25e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records?instanceId=000-111",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records"
							],
							"query": [
								{
									"key": "instanceId",
									"value": "000-111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record wrong fixed field length",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c2851a8-5981-4f2d-9cd7-293c297897ef",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2823de6b-0e70-4792-a0c0-6a11995a108b",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date1 = \"20201\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date2 = \"20211\";",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record with non-existant parsedRecordId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ded8110-4480-41c0-ad8a-dcab9d7a259d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "971f0dfe-c56a-4ddb-ba18-907bc8f0f94d",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    quickMarcJson.parsedRecordId = \"ecf9a6a1-321b-4356-a22f-0d7e8137bf16\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date1 = \"2020\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date2 = \"2021\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"035\")].content = \"12345678\";",
									"    pm.environment.set(\"quickMarcJsonId\", \"ecf9a6a1-321b-4356-a22f-0d7e8137bf16\");",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record Id mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72de5537-e4dd-46fc-b191-b55a64b0a393",
								"exec": [
									"let error = {};",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    error = pm.response.json();",
									"});",
									"",
									"pm.test(\"Got expected error message\", function() {",
									"    pm.expect(error.code).to.eql(\"HTTP_BAD_REQUEST\");",
									"    pm.expect(error.message).to.eql(\"request id and entity id are not equal\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "be4e5112-2a5b-4b2b-b08d-c9c817d1530c",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordDtoId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record missing property",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6e8fcdf-44b5-4803-9133-b48d02863910",
								"exec": [
									"let error = {};",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    error = pm.response.json().errors[0];",
									"});",
									"",
									"pm.test(\"Got expected error message\", function() {",
									"    pm.expect(error.message).to.eql(\"may not be null\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3f2814e6-17bf-4e2f-9dcc-a247fc41cf7e",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    delete quickMarcJson.instanceId;",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record illegal type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4de536cd-d491-4e63-8f1b-b38cefffac65",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5438f259-5d51-4383-b423-b98826c53b9c",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Content = \"Abcd\";",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record bad UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b169240d-ea81-454d-bd0f-d6a0ff03c06f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "754c2023-6ccd-43af-8c77-a9f29881504a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/1234-5678",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"1234-5678"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Cleanup test tenant",
					"item": [
						{
							"name": "Purge and disable all module for created tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f461b1a2-90a9-4d8f-81d5-bb5fca188a33",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
											"    pm.test(\"Preparing request to disable modules\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res.code).to.equal(200);",
											"        let modulesToDisable = res.json();",
											"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"",
											"        console.log(modulesToDisable);",
											"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0b4472f-0d0a-4e56-bf7e-1895dc685214",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Disable all modules for test tenant\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToDisable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									],
									"query": [
										{
											"key": "purge",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b324d8bd-5314-4d09-9fb2-c09f7f606713",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "618c60a5-d74f-42c5-a666-f849a01255c1",
										"exec": [
											"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Remove all created variables",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4e11e954-42de-48fd-a151-ac3717289f54",
				"type": "text/javascript",
				"exec": [
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", {",
					"    // User templates with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-quick-marc-admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Tenant\",",
					"                    \"lastName\": \"Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-quick-marc-admin-user\",",
					"                \"password\": \"mod-quick-marc-admin-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-quick-marc-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"mod-quick-marc\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-quick-marc-user\",",
					"                \"password\": \"mod-quick-marc-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"records-editor.all\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test quickMARC tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"schemas_\";",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res).to.be.ok;",
					"                let modulesArr = res.json();",
					"                pm.expect(modulesArr).to.have.lengthOf.at.least(1);",
					"                bodyHandler(modulesArr[modulesArr.length - 1].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"testData\");",
					"",
					"        pm.environment.unset(\"instanceId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"recordId\");",
					"        pm.environment.unset(\"fromDate\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils.validateQuickMarcJson = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"quick_marc_json.json\")));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"    ",
					"        /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b9d435be-a732-4de7-ba33-8dc64d25aefa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "171a3a9a-25f2-4484-9d11-056b54c2922f",
			"key": "marcRecordsResourceUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-source-record-storage/master/mod-source-record-storage-server/src/main/resources/sampledata/sampleMarcRecords.json",
			"type": "string"
		},
		{
			"id": "4c969d95-d454-4f6d-be41-c0b8378d187d",
			"key": "testTenant",
			"value": "quick_marc_api_tests",
			"type": "string"
		},
		{
			"id": "d75a5bd6-39ce-49b1-acfb-d40f0cca3d82",
			"key": "moduleName",
			"value": "mod-quick-marc",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}