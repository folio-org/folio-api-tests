{
	"info": {
		"_postman_id": "6cb1ac7f-e9f0-42fb-8555-04f8d3231582",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "GET /_/proxy/modules - mod-orders is deployed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"modules exist\", function () {",
									"    pm.expect(jsonData).to.have.length > 1;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://localhost:{{okapiport}}/_/proxy/modules",
							"protocol": "{{protocol}}",
							"host": [
								"localhost"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "GET /orders - get list of orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"pm.environment.set(\"instanceIdMultipleHoldings\", \"7cac8bf1-8f72-4593-bfdb-075f59d12e60\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Multiple holdings exist\", function () {",
									"    pm.expect(jsonData.holdings).to.have.lengthOf(2);",
									"});",
									"",
									"pm.test(\"Each holding has required fields\", function(){",
									"    ",
									"    jsonData.holdings.forEach(function(element){",
									"        pm.expect(element.callNumber).to.exist;",
									"        pm.expect(element.id).to.exist;",
									"        pm.expect(element.status).to.exist;",
									"        pm.expect(element.location).to.exist;",
									"    });",
									"});",
									"",
									"pm.test(\"Statuses are \\\"Available\\\" and \\\"Checked out\\\"\", function(){",
									"    ",
									"    console.log(jsonData.holdings);",
									"    ",
									"    jsonData.holdings.forEach(function(element){",
									"        ",
									"        console.log(element);",
									"        ",
									"        if (element.id == \"7cac8bf1-8f72-4593-bfdb-075f59d12e60\"){",
									"            pm.expect(element.status).equal(\"Checked out\");",
									"            pm.expect(element.dueDate).to.exist;",
									"            pm.expect(element.dueDate).equal(\"2018-05-31T17:58:49.198+0000\");",
									"        }",
									"        else if (element.id == \"9e029caf-79c2-4d9c-9f38-89e4e12b75d0\"){",
									"            pm.expect(element.status).equal(\"Available\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"holding.json\", JSON.parse(pm.variables.get(\"schema_holding_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_holdings_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "POST /orders - create empty order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Empty list of notes exist\", function () {",
									"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
									"});",
									"",
									"pm.test(\"Each holding has required fields\", function(){",
									"    pm.expect(id).to.exist;",
									"    pm.expect(notes).to.exist;",
									"    pm.expect(po_number).to.exist;",
									"    pm.expect(po_lines).to.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "POST /orders - create complete order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.environment.set(\"order_id\", jsonData.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"po_lines exist\", function () {",
									"    pm.expect(jsonData.po_lines).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"Each order has these optional fields\", function(){",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.approved).to.exist;",
									"    pm.expect(jsonData.po_number).to.exist;",
									"    pm.expect(jsonData.notes).to.exist;",
									"    pm.expect(jsonData.total_items).to.exist;",
									"    pm.expect(jsonData.vendor).to.exist;",
									"});",
									"",
									"// pm.test(\"Validate schema\", function () {",
									"//      tv4.addSchema(\"holding.json\", JSON.parse(pm.variables.get(\"schema_holding_content\")));",
									"//     pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_holdings_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"//     pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{$guid}}\",\n    \"approved\": true,\n    \"assigned_to\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"created\": \"2010-10-08T03:53:00.000+0000\",\n    \"created_by\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"po_number\": \"1805BAFF55F\",\n    \"order_type\": \"Ongoing\",\n    \"re_encumber\": false,\n    \"total_estimated_price\": 49.98,\n    \"total_items\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflow_status\": \"Open\",\n    \"po_lines\": [\n    {\n      \"id\": \"{{$guid}}\",\n      \"acquisition_method\": \"Purchase At Vendor System\",\n      \"adjustment\": {\n        \"id\": \"{{$guid}}\",\n        \"credit\": 0.0,\n        \"discount\": 0.0,\n        \"insurance\": 0.0,\n        \"invoice_id\": \"8c23a54c-78f3-4fcc-bd56-0738d63bd27d\",\n        \"overhead\": 0.0,\n        \"shipment\": 0.0,\n        \"tax_1\": 0.0,\n        \"tax_2\": 0.0,\n        \"use_pro_rate\": false,\n        \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n      },\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\",\n          \"id\": \"9a665b22-9fe5-4c95-b4ee-837a5433c95d\",\n          \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n        }\n      ],\n      \"cancellation_restriction\": false,\n      \"cancellation_restriction_note\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"id\": \"f7d7d4e4-255e-46dc-9f08-b953fb1e872d\",\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30,\n          \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributor_type\": \"fbdd42a8-e47d-4694-b448-cc571d1b44c3\"\n        }\n      ],\n      \"cost\": {\n        \"list_price\": 24.99,\n        \"id\": \"{{$guid}}\",\n        \"currency\": \"USD\",\n        \"quantity_physical\": 1,\n        \"quantity_electronic\": 1,\n        \"po_line_estimated_price\": 49.98,\n        \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"id\": \"{{$guid}}\",\n        \"receiving_note\": \"ABCDEFGHIJKL\",\n        \"product_ids\": [\n          {\n            \"product_id\": \"9780764354113\",\n            \"product_id_type\": \"ISBN\"\n          }\n        ],\n        \"material_types\": [\n          \"f7e72403-2a13-43a4-a069-aaabe6c9dea8\"\n        ],\n        \"subscription_from\": \"2018-10-09T00:00:00.000Z\",\n        \"subscription_interval\": 824,\n        \"subscription_to\": \"2020-10-09T00:00:00.000Z\",\n        \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"eresource\": {\n        \"id\": \"{{$guid}}\",\n        \"activated\": false,\n        \"activation_due\": 10,\n        \"create_inventory\": true,\n        \"trial\": false,\n        \"expected_activation\": \"2018-10-09T00:00:00.000Z\",\n        \"user_limit\": 10,\n        \"access_provider\": \"ba3f3d45-247d-41f6-8dc9-6488adcad329\",\n        \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\",\n        \"license\": \"7c063655-b384-4a6f-b367-3c2f95f7a49c\"\n      },\n      \"fund_distribution\": [\n        {\n          \"id\": \"64774a83-fd1d-469e-a4d9-ed4033082799\", \n          \"code\": \"HIST\",\n          \"percentage\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\",\n          \"po_line_id\": \"c0d08448-347b-418a-8c2f-5fb50248d67e\"\n        },\n        {\n          \"id\": \"0d1b2d39-512f-4e0f-a497-b89eba6ecae9\",\n          \"code\": \"GENRL\",\n          \"percentage\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\",\n          \"po_line_id\": \"c0d08448-347b-418a-8c2f-5fb50248d67e\"\n        } \n      ],\n      \"location\": {\n        \"id\": \"{{$guid}}\",\n        \"location_id\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantity\": 2,\n        \"quantity_electronic\": 1,\n        \"quantity_physical\": 1,\n        \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n      },\n      \"order_format\": \"Physical Resource\",\n      \"owner\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n      \"payment_status\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": 1,\n        \"id\": \"{{$guid}}\",\n        \"material_supplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receipt_due\": \"2018-10-10T00:00:00.000Z\",\n        \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n      },\n      \"po_line_description\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"po_line_number\": \"268758-03\",\n      \"po_line_workflow_status\": \"Open\",\n      \"publication_date\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"purchase_order_id\": \"d79b0bcc-DcAD-1E4E-Abb7-DbFcaD5BB3bb\",\n      \"receipt_date\": \"2018-10-09T00:00:00.000Z\",\n      \"receipt_status\": \"Awaiting Receipt\",\n      \"renewal\": {\n        \"interval\": 182,\n        \"id\": \"{{$guid}}\",\n        \"cycle\": \"6 Months\",\n        \"manual_renewal\": true,\n        \"review_period\": 30,\n        \"renewal_date\": \"2019-04-09T00:00:00.000Z\",\n        \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n      }, \n      \"reporting_codes\": [\n        {\n          \"code\": \"CODE1\",\n          \"id\": \"{{$guid}}\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"id\": \"{{$guid}}\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"id\": \"{{$guid}}\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": {\n        \"code\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n        \"id\": \"{{$guid}}\",\n        \"description\": \"ABCDEFGHIJKLMNO\"\n      },\n      \"tags\": [\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFG\",\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFGHIJKLMNO\"\n      ],\n      \"title\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendor_detail\": {\n        \"id\": \"{{$guid}}\",\n        \"instructions\": \"ABCDEFG\",\n        \"note_from_vendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"ref_number\": \"123456-78\",\n        \"ref_number_type\": \"Supplier's unique order line reference number\",\n        \"vendor_account\": \"8910-10\",\n        \"po_line_id\": \"8c778aee-97fa-4586-b131-3ea588a728e2\"\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "GET /orders/id - get orders by order id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"//pm.environment.set(\"instanceIdMultipleHoldings\", \"7cac8bf1-8f72-4593-bfdb-075f59d12e60\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Multiple notes exist\", function () {",
									"    pm.expect(jsonData.notes).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test(\"Test if optional fields exists\", function(){",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.expect(jsonData.po_number).to.exist;",
									"    pm.expect(jsonData.order_type).to.exist;",
									"    pm.expect(jsonData.total_items).to.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{order_id}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "/orders/id - bad ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
								"exec": [
									"pm.test(\"Status code is 404 - resource does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error string in response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fb40b2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/fb40b2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"fb40b2"
							]
						},
						"description": "GET /orders/id requests that returns 404"
					},
					"response": []
				},
				{
					"name": "/orders/{{order_id}} - valid token, invalid tenant - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ea0cb79-8f57-490d-b2a9-c368ac95914a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "fs12345678"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{order_id}}"
							]
						},
						"description": "GET /orders/id requests that return 400"
					},
					"response": []
				},
				{
					"name": "/orders/{{order_id}} - valid token, missing tenant - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "63145320-5160-4511-b040-bd72005f8468",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// pm.test(\"holdings data returned despite missing tentant, because the token contains the tenant ID\", function () {",
									"//         pm.expect(jsonData.holdings).to.have.lengthOf(1);",
									"//         pm.expect(jsonData.holdings[0].callNumber).to.equal(\"163d51fd-633f-40d3-aa5d-d5e39951409b\");",
									"//         pm.expect(jsonData.holdings[0].status).to.equal(\"Checked out\");",
									"//         pm.expect(jsonData.holdings[0].id).to.equal(\"6cd4aa93-72d3-41b8-a0b2-97de03b9798d\");",
									"//         pm.expect(jsonData.holdings[0].location).to.equal(\"Annex\");",
									"// });",
									"",
									"// pm.test(\"Validate schema\", function () {",
									"//      tv4.addSchema(\"holding.json\", JSON.parse(pm.variables.get(\"schema_holding_content\")));",
									"//     pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_holdings_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"//     pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{order_id}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "/orders/{{order_id}} - invalid token - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e41e5c9e-c396-4f1e-81ff-10b79f737233",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{order_id}}"
							]
						},
						"description": "GET /orders/id request that return 401"
					},
					"response": []
				},
				{
					"name": "/orders/id - invalid order ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c51240b-34ce-4a8b-9db1-a1150320f0fe",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{$guid}}"
							]
						},
						"description": "GET /orders/id requests that return 404"
					},
					"response": []
				},
				{
					"name": "/orders/ - empty order ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								""
							]
						},
						"description": "GET /orders/ requests that return 404"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c5fb7b5c-7672-4ac1-9e38-623cba90d999",
			"key": "mod_name",
			"value": "mod-rtac",
			"type": "string"
		},
		{
			"id": "fb3452b5-a4c8-468a-bd05-ff5a1e910852",
			"key": "schema_holding",
			"value": "holding.json",
			"type": "string"
		},
		{
			"id": "c68aa57b-410d-4aea-a9d2-290e4281f4ff",
			"key": "schema_holdings",
			"value": "holdings.json",
			"type": "string"
		},
		{
			"id": "59896a55-7b6f-4be3-b2f3-a2e07992ff99",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "859f07aa-eb9c-4c7d-96db-296ad8f215f8",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "69e76006-8617-437b-afff-95a5edec5bf0",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		}
	]
}