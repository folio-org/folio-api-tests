{
	"info": {
		"_postman_id": "fa661ce8-df54-4dda-b9b3-08fbb72fe079",
		"name": "mod-organizations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18165e27-5caf-4884-8e49-6c33da50f51b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "22dd1776-59b9-425c-89c3-dceba4f17bdf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30a8b528-ee61-40eb-a3f3-1f859bf3e75e",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e74802b-1c7c-451a-a476-2d9d426e7bf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-organizations-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-organizations\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-orders-storage\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\": moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"\tpm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db599b47-3e35-4ce8-ade7-7fff6931dc38",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "db1bd288-f0d5-4d82-a7b3-7dd6c93b6fb6",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45f02014-7790-4243-aacc-bcf429a3ed79",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fc9c306-5a79-4108-9150-98aedbedc3ef",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1617af4a-a956-4de8-8b35-16504dc6b5bc",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f65a9206-4a1d-4f33-8eb1-219b0714492c",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71b13ed7-c4f3-48f8-83f5-316b0c866dca",
										"exec": [
											"eval(globals.loadUtils).sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1e3a4597-3380-4467-899d-cd73fca6ab3a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c99753b5-9619-4272-8de2-e77f4f30099f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"mod-authtoken is enabled\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9be47b1-77cb-46b0-8294-a984b82850ca",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d941dde-d42b-43c2-b9ea-d907b23fb57a",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "92fd2df0-f931-45d5-9149-4b710ae86a97",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "20fbee88-5636-4e97-9067-f2703709b2e9",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    ",
											"    pm.variables.set(\"userId\", globals.testData.users.regular.user.id);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a05b02f-f4ee-447d-8cac-454f7ea05b9d",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01fe9bc3-3a41-4f3e-909e-0bcbab35c6ef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Define permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0a3413b-8f86-4d21-907b-17248c1d8d88",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "015d9120-c01b-4544-aacf-42c3b68fa853",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8eddb23f-a2a0-4cb0-befe-b75b3aa3f98d",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92a131f0-c0e5-4a9d-b453-e24e20e40f16",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d44f4eb1-f4f7-4f65-83a6-8ba8f3ad8cf3",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modOrgsId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fcaf21b1-200c-4a9a-87d2-8bfd564b0d6d",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-organizations-storage';\r",
											"\r",
											"pm.sendRequest(utils.buildOkapiUrl('/_/proxy/tenants/' + pm.variables.get(\"testTenant\") + '/interfaces/_jsonSchemas'), (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function () {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"    \tpm.variables.set('modOrgsId', moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modOrgsId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8d28637-4f3f-4329-bb64-7f4b102cf652",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccf65d3c-3fb6-4a7f-bf6c-5a3ddaa02760",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Acqusitions Units",
							"item": [
								{
									"name": "Prepare test entities",
									"item": [
										{
											"name": "Create read-open acquisitions unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d2d02bf5-4af2-4a03-b6e1-6bfd786f703e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnit = {};",
															"",
															"pm.test(\"Acq.unit is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnit = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"readOnlyAcqUnitId\", acqUnit.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d435e3b3-a5e5-4ab5-8b9a-b49d33e49edc",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"read only\";",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = false;",
															"body.protectUpdate = true;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create update-open acquisitions unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "394e0ad7-cab8-48cc-9cc2-41c89c95a9ca",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnit = {};",
															"",
															"pm.test(\"Acq.unit is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnit = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"updateOnlyAcqUnitId\", acqUnit.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4057ef93-4b48-48d6-b2cd-0d4f736a30d1",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"update only\";",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = true;",
															"body.protectUpdate = false;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create full-protected acquisitions unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5062b41b-bab0-4967-b4ed-ad24b9d2400b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnit = {};",
															"",
															"pm.test(\"Acq.unit is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnit = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"fullProtectedAcqUnitId\", acqUnit.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "de58cb3d-1c2a-4dba-ab03-d912ef727f5b",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"full protected\";",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = true;",
															"body.protectUpdate = true;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create no-acq org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a90aa0b6-596e-4765-bd9c-974689d4e594",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organization is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function() {",
															"    pm.expect(organization.id).to.exist;",
															"    pm.environment.set(\"noAcqOrganizationId\", organization.id); ",
															"",
															"    utils.validateOrganization(organization);",
															"    pm.expect(organization.status).to.eql(\"Active\");",
															"    pm.expect(organization.name).to.contain(\"for API Test\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f0c748a6-336b-4e75-9760-71e1d8c1f353",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
															"    let org = res.json();",
															"    delete org.id;",
															"    org.name = \"Active org for API Test\";",
															"    org.status = \"Active\";",
															"    org.code = \"NO_ACQ_ORG\";",
															"    org.acqUnitIds = [];",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a0e1452-5d90-43cc-a7ca-d9dc9e123dbf",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organization is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function() {",
															"    pm.expect(organization.id).to.exist;",
															"    pm.environment.set(\"readOnlyOrganizationId\", organization.id); ",
															"",
															"    utils.validateOrganization(organization);",
															"    pm.expect(organization.status).to.eql(\"Active\");",
															"    pm.expect(organization.name).to.contain(\"for API Test\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b4da9c3a-fccb-4b45-a196-33717d79695b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
															"    let org = res.json();",
															"    delete org.id;",
															"    org.name = \"Active org for API Test\";",
															"    org.status = \"Active\";",
															"    org.code = \"READ_ONLY_ORG\";",
															"    org.acqUnitIds = [pm.variables.get(\"readOnlyAcqUnitId\")];",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e1305f9-1932-4a5f-8beb-89606c71c9bc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organization is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function() {",
															"    pm.expect(organization.id).to.exist;",
															"    pm.environment.set(\"updateOnlyOrganizationId\", organization.id); ",
															"",
															"    utils.validateOrganization(organization);",
															"    pm.expect(organization.status).to.eql(\"Active\");",
															"    pm.expect(organization.name).to.contain(\"for API Test\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b75a5d7c-1af1-4d30-b6ab-1addabe53ce5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
															"    let org = res.json();",
															"    delete org.id;",
															"    org.name = \"Active org for API Test\";",
															"    org.status = \"Active\";",
															"    org.code = \"UPDATE_ONLY_ORG\";",
															"    org.acqUnitIds = [pm.variables.get(\"updateOnlyAcqUnitId\")];",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create full-protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "866ebd15-ee5b-4330-a155-761088c9a732",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organization is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function() {",
															"    pm.expect(organization.id).to.exist;",
															"    pm.environment.set(\"fullProtectedOrganizationId\", organization.id); ",
															"",
															"    utils.validateOrganization(organization);",
															"    pm.expect(organization.status).to.eql(\"Active\");",
															"    pm.expect(organization.name).to.contain(\"for API Test\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "11a76079-3f7f-42fd-b5e7-254f754fb51f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
															"    let org = res.json();",
															"    delete org.id;",
															"    org.name = \"Active org for API Test\";",
															"    org.status = \"Active\";",
															"    org.code = \"FULL_PROTECTED_ORG\";",
															"    org.acqUnitIds = [pm.variables.get(\"fullProtectedAcqUnitId\")];",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "GET",
									"item": [
										{
											"name": "Get not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fd4eadc-1057-4e64-b3d5-1c0b7486d650",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"noAcqOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d1e6a03f-ba56-4d4e-b4ab-0e469d7f7920",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d42e01e6-e4c7-417f-bafc-742827edbf67",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"readOnlyOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "da5603a2-b1d0-4025-b27e-faf52f0ec7ea",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db932395-1d8b-45cb-80e3-938f97399634",
														"exec": [
															"pm.test(\"Organization can not be viewed\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "62703c19-fcad-46bc-8ccb-50e800d1529a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6545bdb6-0222-4fbc-a4a8-6b867ea53eb7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organizations = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organizations = pm.response.json();",
															"});",
															"",
															"pm.test(\"2 open for read organizations should be found\", function () {",
															"    pm.expect(organizations.totalRecords).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "028b538d-8998-455f-976f-575b401cc430",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations?limit=10",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to read-open unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6902ef1c-d7a7-4ac4-9e11-1b1c035d4d2a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnitMembership = {};",
															"",
															"pm.test(\"Membership is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnitMembership = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"acqMembershipId\", acqUnitMembership.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5a1a034c-fa6d-43cb-8286-21a5aa8e3338",
														"exec": [
															"let body = {};",
															"",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"readOnlyAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3833e16d-caed-4608-b687-70552fc9c977",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"noAcqOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "34e7ce2a-5360-41a5-aa24-4f99e0adec43",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8671f9e9-afad-4546-a4cb-664473e7f4fa",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"readOnlyOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d311c0c0-7006-448c-998d-31a8dbb761a9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d39ea0d9-6984-4ab8-8458-613ccb00e8d4",
														"exec": [
															"pm.test(\"Operation forbidden\", function () {",
															"    pm.response.to.have.status(403);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "635bd0a2-a6a0-4da1-a9a3-0d8a1f048b0b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d8d352c5-5fdc-43a7-92de-82fb42b232fc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organizations = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organizations = pm.response.json();",
															"});",
															"",
															"pm.test(\"2 open for read organizations should be found\", function () {",
															"    pm.expect(organizations.totalRecords).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "28ae9143-affb-4044-aee0-689c31510ede",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations?limit=10",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to full-protected unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ec89086a-4e88-4c56-bccc-f0eb430caa42",
														"exec": [
															"pm.test(\"Membership was assigned\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8350a340-a45f-47e9-95fd-64d38a55f8e7",
														"exec": [
															"let body = {};",
															"",
															"body.id = pm.variables.get(\"acqMembershipId\");",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"fullProtectedAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships/{{acqMembershipId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships",
														"{{acqMembershipId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cd99ea77-33cf-4a17-afa6-8aedd0b63a5e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"noAcqOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6c3b8c99-3b6a-4d03-8641-b6cffd601b91",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "58935fca-c1b8-4277-a37a-3ddfc05ba714",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"readOnlyOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b7feb75d-242c-4d0f-8c2c-fda0bdd36688",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get full-protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6ddd8661-b2ce-4791-9a2a-c0f92733745a",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "367d2fb4-bb80-48cc-9ddb-7a7f13126299",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f9a05311-f15b-41d1-b005-73c356dd2415",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organizations = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organizations = pm.response.json();",
															"});",
															"",
															"pm.test(\"3 organizations should be found\", function () {",
															"    pm.expect(organizations.totalRecords).to.eql(3);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fa43413e-7f8c-4ccc-b4f3-1b94e96ce152",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations?limit=10",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT",
									"item": [
										{
											"name": "Unassign user from acq. unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "86457b6f-0025-4786-9b5d-a7e0f1bd777c",
														"exec": [
															"pm.test(\"Membership is deleted\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fdb9f4e3-7f43-4d84-9d6c-e911615d184a",
														"exec": [
															"let body = {};",
															"",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"readOnlyAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships/{{acqMembershipId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships",
														"{{acqMembershipId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b2973bf-bca9-4fbe-82a7-4c7c966ace5e",
														"exec": [
															"pm.test(\"Organization is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b20ebd8b-8f97-480e-8601-5f528561a9eb",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"noAcqOrganizationContent\"));",
															"    org.code = \"UPDATED_NO_ACQ\";",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "48c0e37f-f0ee-4b97-a7a9-7a2d864a6381",
														"exec": [
															"pm.test(\"Organization is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "87e5b3cf-b9cd-4aeb-a3d2-25b5128c833f",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"updateOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_UPDATE_ONLY\";",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{updateOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{updateOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-open org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8da0c6c1-e6cd-41cd-9037-438620d3b6d8",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2780414d-390e-4f24-b799-697f203cdcb9",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change read-open acq.unit permissions to read-update-open",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "153e976c-aad6-4cac-ba21-8aa511edc6ff",
														"exec": [
															"pm.test(\"Acq.unit is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d47f2116-9032-4bb2-85a2-069b14202527",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"read and update only\";",
															"body.id = pm.variables.get(\"readOnlyAcqUnitId\");",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = false;",
															"body.protectUpdate = false;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units/{{readOnlyAcqUnitId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units",
														"{{readOnlyAcqUnitId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c4f3188c-2832-43e7-a618-53083356c992",
														"exec": [
															"pm.test(\"Organization is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fdb08639-0f45-48d2-ba68-7044d3c5d088",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change read-update-open acq.unit permissions to read-open",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a0ec1f25-a282-47e5-9275-ae74b2df5d51",
														"exec": [
															"pm.test(\"Acq.unit is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2846178f-ed4f-4436-ac5d-4082f4251aff",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"read only\";",
															"body.id = pm.variables.get(\"readOnlyAcqUnitId\");",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = false;",
															"body.protectUpdate = true;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units/{{readOnlyAcqUnitId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units",
														"{{readOnlyAcqUnitId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5d633291-c522-45c0-9159-8393bb74750f",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1ac5d435-404b-4fd2-ba14-fe2f83eb9a83",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"fullProtectedOrganizationContent\"));",
															"    org.code = \"UPDATED_FULL_PROTECTED\";",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to read-open unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c437a391-eec4-4b61-ae9f-5a4e42590ca3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnitMembership = {};",
															"",
															"pm.test(\"Membership is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnitMembership = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"acqMembershipId\", acqUnitMembership.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6a8ce413-38f7-44af-a444-79adfcc4fb4a",
														"exec": [
															"let body = {};",
															"",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"readOnlyAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2fb56f3b-facb-4cb1-bc17-52f1af3135f2",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8840a1e3-d5a7-4f0b-9e23-1caf593643a9",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"noAcqOrganizationContent\"));",
															"    org.code = \"UPDATED_NO_ACQ\";",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a31ace15-7a84-4f9d-a9fe-319a0a78d9a3",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "69687896-3fad-4db9-a369-d583404180ec",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06614b93-a474-47ab-a401-41eb7ea4b800",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a68ba12d-fd5e-4449-9803-10dce4225863",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"updateOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_UPDATE_ONLY\";",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{updateOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{updateOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1271937d-724b-4097-a7b8-2e56c738cc68",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "654f582d-32aa-4eb0-9dee-a9b0a6198c06",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"fullProtectedOrganizationContent\"));",
															"    org.code = \"UPDATED_FULL_PROTECTED\";",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to update-open unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "09adf402-46c8-4bb2-bcf8-3cfd9308b206",
														"exec": [
															"pm.test(\"Membership was assigned\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8c53e7cc-8ace-4864-8333-7578fe9edeb3",
														"exec": [
															"let body = {};",
															"",
															"body.id = pm.variables.get(\"acqMembershipId\");",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"updateOnlyAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships/{{acqMembershipId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships",
														"{{acqMembershipId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "de15cc52-cb14-44c3-8d2b-5bc721d5a1f3",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "009f1729-4c3a-4322-b345-445f8807922b",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"noAcqOrganizationContent\"));",
															"    org.code = \"UPDATED_NO_ACQ\";",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-open org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "825d86a0-3ac9-4d34-98ac-255ff295abc1",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9ea1450d-0cb3-4e99-81ea-18d7c3242cd2",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8204db25-dc14-40e7-b220-f38962f65dfe",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c7267f3e-6db1-49dd-adc5-b79b9dfc32f6",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"updateOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_UPDATE_ONLY\";",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{updateOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{updateOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "53343484-8283-45ce-8a8e-34dafd8d660b",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d890789f-674b-4ac8-bdd1-c350a715f471",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"fullProtectedOrganizationContent\"));",
															"    org.code = \"UPDATED_FULL_PROTECTED\";",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to full-protected unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7d89b75b-fb0a-4380-9a04-ff61e0c81fbc",
														"exec": [
															"pm.test(\"Membership was assigned\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2a04565b-802b-4e2f-bae3-e28ddadc5dc6",
														"exec": [
															"let body = {};",
															"",
															"body.id = pm.variables.get(\"acqMembershipId\");",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"fullProtectedAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships/{{acqMembershipId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships",
														"{{acqMembershipId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "23e1d78f-664a-4f97-8b52-c0145d2a22a1",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6eb1d744-7c9e-4060-908b-b60f2dd44ca8",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"noAcqOrganizationContent\"));",
															"    org.code = \"UPDATED_NO_ACQ\";",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-open org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "82d8284c-b897-45ff-a36b-ed96f769df00",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9bd139b3-8352-4735-93d3-1e26053ca378",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8d5daf0-6a1b-42d9-b6cf-b87192e84ce2",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "aebf5489-f1ee-4ffa-bbfe-b5016075f750",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"updateOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_UPDATE_ONLY\";",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{updateOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{updateOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update full-protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "587823f3-56d9-454f-b371-802fa61f2c44",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "73c8d7c2-8eb3-4054-bf20-9d5422696095",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"fullProtectedOrganizationContent\"));",
															"    org.code = \"UPDATED_FULL_PROTECTED\";",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create active org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "726a0f54-ed8c-4d3d-b0b1-cf9e5d7b7e2d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let organization = {};",
											"",
											"pm.test(\"Organization is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    organization = pm.response.json();",
											"});",
											"",
											"pm.test(\"Organization content is valid\", function() {",
											"    pm.expect(organization.id).to.exist;",
											"    pm.environment.set(\"activeOrganizationId\", organization.id); ",
											"",
											"    utils.validateOrganization(organization);",
											"    pm.expect(organization.status).to.eql(\"Active\");",
											"    pm.expect(organization.name).to.contain(\"for API Test\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebcc79c8-98f9-46fc-bbbf-109e518df48a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    delete org.id;",
											"    org.name = \"Active org for API Test\";",
											"    org.status = \"Active\";",
											"    org.code = \"ACTIVEORG1\";",
											"    org.accounts[0].acqUnitIds = [];",
											"    org.acqUnitIds = [];",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update active org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ec2f484-4bf9-4208-a374-b7912c9ab668",
										"exec": [
											"pm.test(\"Organization is updated\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "424be760-a9e5-4fb2-ad2c-a1c6df4db024",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    delete org.id;",
											"    org.name = \"Active org for API Test - UPDATED\";",
											"    org.status = \"Active\";",
											"    org.code = \"ACTIVEORG2\";",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{activeOrganizationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"{{activeOrganizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created active org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b18309f2-159c-47e6-a621-1f1e0f94e570",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let organization = {};",
											"",
											"pm.test(\"Organizations found\", function () {",
											"    pm.response.to.have.status(200);",
											"    organization = pm.response.json();",
											"});",
											"",
											"pm.test(\"Organization content is valid\", function () {",
											"    pm.expect(organization.id).to.eql(pm.environment.get(\"activeOrganizationId\"));",
											"    utils.validateOrganization(organization);",
											"    pm.expect(organization.code).to.eql(\"ACTIVEORG2\");",
											"    pm.expect(organization.status).to.eql(\"Active\");",
											"    pm.expect(organization.name).to.contain(\"Active org for API Test - UPDATED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c0276b7-102b-4570-8be2-12688b50d482",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{activeOrganizationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"{{activeOrganizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete active org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de5e6fee-9387-4e02-a602-ff0758f27bad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Organization is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c04bfa56-67fb-4365-a98a-65f24b6b58f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{activeOrganizationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"{{activeOrganizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create inactive org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82e801f0-76ce-4d72-86a8-21cc93342ff0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let organization = {};",
											"",
											"pm.test(\"Organization is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    organization = pm.response.json();",
											"});",
											"",
											"pm.test(\"Organization content is valid\", function() {",
											"    pm.expect(organization.id).to.exist;",
											"    pm.environment.set(\"inactiveOrganizationId\", organization.id); ",
											"",
											"    utils.validateOrganization(organization);",
											"    pm.expect(organization.status).to.eql(\"Inactive\");",
											"    pm.expect(organization.isVendor).to.be.false;",
											"    pm.expect(organization.name).to.contain(\"for API Test\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8b0123d-e43b-416f-87b0-9f7d1dc2c0b0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    delete org.id;",
											"    org.name = \"Inactive for API Test\";",
											"    org.status = \"Inactive\";",
											"    org.code = \"INACTIVEORG\";",
											"    org.isVendor = false;",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created orgs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "814da7f0-323c-414f-807e-e1b724e6364d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let organization = [];",
											"",
											"pm.test(\"Organizations found\", function () {",
											"    pm.response.to.have.status(200);",
											"    organizations = pm.response.json().organizations;",
											"});",
											"",
											"pm.test(\"Organization content is valid\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.equal(1);",
											"    organizations.forEach(org => utils.validateOrganization(org));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f41de233-7b1d-45a6-8b88-194b4d95f071",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations?query=name=\"Inactive for API Test\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations"
									],
									"query": [
										{
											"key": "query",
											"value": "name=\"Inactive for API Test\""
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Addresses",
					"item": [
						{
							"name": "Create address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ce8b15d5-347d-4b6f-8bc4-26d615f45231",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"addressContent\", JSON.stringify(utils.buildAddress()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "49610497-6dcd-4fe2-8972-7cea43e94f77",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = {};",
											"",
											"pm.test(\"Address is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    address = pm.response.json();",
											"});",
											"",
											"pm.test(\"Address content is valid\", function() {",
											"    pm.expect(address.id).to.exist;",
											"    pm.environment.set(\"addressId\", address.id); ",
											"    ",
											"    utils.validateAddress(address);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{addressContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create another address for filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bafe1bea-d222-4cc4-a11f-2f5af5541296",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = JSON.stringify(utils.buildAddress());",
											"let add = JSON.parse(address);",
											"add.addressLine1 = \"Api Test\"",
											"",
											"pm.variables.set(\"addressContentForFilter\", JSON.stringify(add));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "019702f0-b14c-4675-a15b-a208aedade4b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = {};",
											"",
											"pm.test(\"Address is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    address = pm.response.json();",
											"});",
											"",
											"pm.test(\"Address content is valid\", function() {",
											"    pm.expect(address.id).to.exist;",
											"    pm.environment.set(\"addressForFilterId\", address.id); ",
											"    ",
											"    utils.validateAddress(address);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{addressContentForFilter}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update address with new country",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "75eb3577-cd59-41c0-8ba6-57cf8d88b9e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = JSON.stringify(utils.buildAddress());",
											"let add = JSON.parse(address);",
											"let country = \"UUU\" + add.country;",
											"",
											"add.country = country;",
											"pm.variables.set(\"updatedCountry\", country);",
											"pm.variables.set(\"updatedAddress\", JSON.stringify(add));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c432e5e-e1be-4205-90a2-6bce8432de8b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/organizations-storage/addresses/\" + environment.addressId, (err, res) => {",
											"        pm.test(\"Verify address updated with new country\", () => pm.expect(res.json().country).to.equal(pm.variables.get(\"updatedCountry\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedAddress}}\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d795132-50ee-48aa-b54a-ed945e9f436d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = {};",
											"",
											"pm.test(\"Address found\", function () {",
											"    pm.response.to.have.status(200);",
											"    address = pm.response.json();",
											"});",
											"",
											"pm.test(\"Addrress content is valid\", function() {",
											"    pm.expect(address.id).to.eql(pm.environment.get(\"addressId\"));",
											"    utils.validateAddress(address);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23abac2-78ad-4e65-8b87-4a1fec7f1db6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let addresses = [];",
											"",
											"pm.test(\"Addresses found\", function () {",
											"    pm.response.to.have.status(200);",
											"    addresses = pm.response.json().addresses;",
											"});",
											"",
											"pm.test(\"Addresses content is valid\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.be.equal(1);",
											"    addresses.forEach(address => utils.validateAddress(address));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses?query=addressLine1==API Test",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses"
									],
									"query": [
										{
											"key": "query",
											"value": "addressLine1==API Test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38a4de77-9ec5-46ca-9097-5fe6d9c6ad3a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Address is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Interfaces",
					"item": [
						{
							"name": "Create interface",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "efe7da73-0481-4e2a-b609-ca3970604a0a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/interfaces/acso_interface.json\", function (err, res) {",
											"    let testInterface = res.json();",
											"    delete testInterface.id;",
											"    pm.variables.set(\"interfaceContent\", JSON.stringify(testInterface));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fa2fb647-ee4a-43c2-80a3-0d56a37a20f7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Interface is created\", function() {",
											"    pm.response.to.have.status(201);",
											"",
											"    let testInterface = pm.response.json();",
											"    pm.expect(testInterface.id).to.exist;",
											"    pm.variables.set(\"interfaceId\", testInterface.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{interfaceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interface credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c7c3b65-a56b-4182-8538-07427e6cc4d2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let interfaceCredential = {};",
											"",
											"pm.test(\"Interface credential is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    interfaceCredential = pm.response.json();",
											"});",
											"",
											"pm.test(\"Interface credential content is valid\", function() {",
											"    pm.expect(interfaceCredential.id).to.exist;",
											"    pm.expect(interfaceCredential.interfaceId).to.be.equal(pm.variables.get(\"interfaceId\"));",
											"",
											"    pm.variables.set(\"createdInterfaceCredential\", JSON.stringify(interfaceCredential));",
											"    pm.variables.set(\"createdInterfaceCredentialId\", interfaceCredential.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17e98662-086c-4eea-ba00-a54c1abe0757",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/interface_credentials/alexs_interface_credential.json\", function (err, res) {",
											"    let interfaceCredential = res.json();",
											"    delete interfaceCredential.id;",
											"    interfaceCredential.interfaceId = pm.variables.get(\"interfaceId\");",
											"    pm.variables.set(\"interfaceCredentialContent\", JSON.stringify(interfaceCredential));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{interfaceCredentialContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interface credential with new password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a68f3aa5-cdc6-4f53-a90b-5f9962e944ab",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let interfaceCredentialForUpdate = JSON.parse(pm.variables.get(\"createdInterfaceCredential\"));",
											"interfaceCredentialForUpdate.password = \"NEW_PASSWORD_123\";",
											"pm.variables.set(\"interfaceCredentialContent\", JSON.stringify(interfaceCredentialForUpdate));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a4faf71a-fe02-4c6a-aed1-06a58abe3d1f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/organizations-storage/interfaces/\" + pm.variables.get(\"interfaceId\") + \"/credentials\", (err, res) => {",
											"        pm.test(\"Verify password updated\", () => pm.expect(res.json().password).to.equal(\"NEW_PASSWORD_123\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{interfaceCredentialContent}}\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get interface credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cc218ae-9af2-48a2-a484-e8f500afc709",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let interfaceCredential = {};",
											"",
											"pm.test(\"Interface credential found\", function() {",
											"    pm.response.to.have.status(200);",
											"    interfaceCredential = pm.response.json();",
											"});",
											"",
											"pm.test(\"Interface credential content is valid\", function() {",
											"    pm.expect(interfaceCredential.interfaceId).to.eql(pm.variables.get(\"interfaceId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete interface credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14b347f6-fe1b-4948-bbb9-fa3b56e5ee2b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Address is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a9440e8-814a-4c66-bd81-6e2e20762321",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Address is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "74b81a07-34d8-472d-b17e-e1fbb48e9739",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c36c4ef5-089f-44fb-955c-74ac0315678c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Get org - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d25b381-6947-4a9c-b56a-8016fe3cc02a",
										"exec": [
											"pm.test(\"Organization not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/28cccf6f-599d-4cce-afeb-18d042717508",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"28cccf6f-599d-4cce-afeb-18d042717508"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update org - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d502d22-592a-45ba-93b0-26c86e88e3e1",
										"exec": [
											"pm.test(\"Organization updating not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46c565d6-b483-4781-bd1e-a12a578e91cb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    delete org.id;",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/28cccf6f-599d-4cce-afeb-18d042717508",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"28cccf6f-599d-4cce-afeb-18d042717508"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update org - id mismatch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11203a12-986d-47c8-8ca6-f4a8a83425f0",
										"exec": [
											"pm.test(\"Organization updating id mismatch\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17e5b0ad-6214-421d-903b-40feb793bc90",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    org.id = \"28cccf6f-599d-4cce-afeb-18d042717507\";",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/28cccf6f-599d-4cce-afeb-18d042717508",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"28cccf6f-599d-4cce-afeb-18d042717508"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete org - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f6c468e-f793-4c6f-bd7e-a68f034aa213",
										"exec": [
											"pm.test(\"Organization delete not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/28cccf6f-599d-4cce-afeb-18d042717508",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"28cccf6f-599d-4cce-afeb-18d042717508"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Addresses",
					"item": [
						{
							"name": "Get address - bad ID 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7242f9a0-0c94-486a-98fc-b5d732ae76b0",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get address - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "254e635a-de15-47b8-ada6-a6a42e84fb06",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "fs12345678",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get address - bad token format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6503297f-541c-4cf7-88dc-e28c811647ab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "bad-token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get address - invalid token - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d93cc529-76c9-4da1-8159-345d503c8805",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{testTenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address with invalid ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1bf8300e-0a7f-42fd-a310-f320d7156e9a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = JSON.stringify(utils.buildAddress());",
											"let add = JSON.parse(address);",
											"add.id = \"123-345\"",
											"",
											"pm.variables.set(\"addressContent\", JSON.stringify(add));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d8181496-9e26-4d1c-a829-421edf601fb0",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{addressContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update address - bad ID 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bbe8e7eb-262f-41d8-93b1-9f2bf16b7998",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"addressBody\", JSON.stringify(utils.buildAddress()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6ed39c8-1677-4e18-badb-ac0df08d13c0",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{addressBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete address - bad ID 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3d33b09d-40e5-4318-993c-d48081231b8d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c582eaaa-b383-458d-9bd2-8fc532fd1989",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f9e5530-b3ac-4e52-8f8a-9818f416bcaf",
										"exec": [
											"pm.test(\"Address is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete address by random ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "482fe032-7a46-4c0a-81e9-7a21d73c8ea3",
										"exec": [
											"pm.test(\"Address is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{$guid}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Cleanup test tenant",
					"item": [
						{
							"name": "Purge and disable all module for created tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1341b02f-d773-4811-9d31-d0ed7b600e32",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
											"    pm.test(\"Preparing request to disable modules\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res.code).to.equal(200);",
											"        let modulesToDisable = res.json();",
											"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"",
											"        console.log(modulesToDisable);",
											"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef7682ca-3591-45f4-8a88-17782a69afc2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Disable all modules for test tenant\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToDisable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									],
									"query": [
										{
											"key": "purge",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "67bbb530-7c89-4663-9391-9d253042f733",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "971bd891-f207-4401-bab1-37299f38db86",
										"exec": [
											"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Remove all created variables",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b819cf62-caec-48d6-8785-8fa22611b6e5",
				"type": "text/javascript",
				"exec": [
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", {",
					"    // User templates with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orgs-admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Tenant\",",
					"                    \"lastName\": \"Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orgs-admin-user\",",
					"                \"password\": \"mod-orgs-admin-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": []",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orgs-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"mod-organizations-storage\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orgs-user\",",
					"                \"password\": \"mod-orgs-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders-storage.module.all\",",
					"                    \"organizations-storage.module.all\",",
					"                    \"organizations.module.all\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test organizations tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"orgs_schema_\";",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function (path) {",
					"        return new Promise((resolve) => {",
					"            utils.sendDeleteRequest(path, (err, response) => resolve(response.code));",
					"        });",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res).to.be.ok;",
					"                let modulesArr = res.json();",
					"                pm.expect(modulesArr).to.have.lengthOf.at.least(1);",
					"                bodyHandler(modulesArr[modulesArr.length - 1].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function (code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function () {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function (path, method) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"testData\");",
					"",
					"        pm.environment.unset(\"addressId\");",
					"        pm.environment.unset(\"addressForFilterId\");",
					"        pm.environment.unset(\"activeOrganizationId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"inactiveOrganizationId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils.validateOrganization = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"organization.json\")));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils.validateAddress = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"address.json\")));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to build address",
					"     */",
					"    utils.buildAddress = function () {",
					"        return {",
					"            \"addressLine1\": \"10 Estes Street\",",
					"            \"addressLine2\": \"\",",
					"            \"city\": \"Ipswich\",",
					"            \"stateRegion\": \"MA\",",
					"            \"zipCode\": \"01938\",",
					"            \"country\": \"USA\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "159e01ab-4f3a-4cad-92c0-5d037944806a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ab83bc16-8cad-48b9-8cd5-9b7205f3de0c",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-organizations-storage/master/src/main/resources/data"
		},
		{
			"id": "4b5e3ff3-69e4-48d9-96ed-a63f9c6dcc6e",
			"key": "testTenant",
			"value": "orgs_api_tests"
		}
	],
	"protocolProfileBehavior": {}
}