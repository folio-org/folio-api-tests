{
	"info": {
		"_postman_id": "d3f72c8f-0425-4222-a7a1-24018c414bf2",
		"name": "mod-gobi",
		"description": "Tests for mod-gobi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Setup",
			"item": [
				{
					"name": "/authn/login (OKAPI)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae86997-5a37-4acf-9c37-1a431c0c75da",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = postman.getResponseHeader(\"x-okapi-token\");",
									"pm.globals.set(\"xokapitoken\", token);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d75a59b9-367d-4055-86c6-0b6c1cf9b86c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf46482a-5904-4297-a271-fa22d682771c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Vendor was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.globals.set(\"vendor\", pm.response.json());"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"GOBI Library Systems\",\n  \"code\": \"GOBI\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/vendor",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"vendor"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a666e96-205a-4f75-ad7b-3a7a17add0b9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"user record was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"akott\",\n\t\"id\": \"{{noPrivUserId}}\",\n\t\"personal\": {\n\t\t\"firstName\": \"Arnie\",\n\t\t\"lastName\": \"Kott\"\n\t},\n\t\"active\": true\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							]
						},
						"description": "Create a user with insufficient privs to negative testing"
					},
					"response": []
				},
				{
					"name": "/authn/credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9ba7aa8-154a-4a65-b9f9-798b979d3649",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"credentials record was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.globals.set(\"noPrivCredId\", pm.response.json().id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"akott\",\n\t\"userId\": \"{{noPrivUserId}}\",\n\t\"password\": \"{{noPrivPassword}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"credentials"
							]
						},
						"description": "Create a user with insufficient privs to negative testing"
					},
					"response": []
				},
				{
					"name": "/perms/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddd81f71-ec55-4957-a05e-79b37b9a0ee8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"credentials record was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{noPrivPermId}}\",\n\t\"userId\": \"{{noPrivUserId}}\",\n\t\"permissions\": []\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users"
							]
						},
						"description": "Create a user with insufficient privs to negative testing"
					},
					"response": []
				},
				{
					"name": "/authn/login (OKAPI) - NoPrivUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99aa0e9b-1d64-41b9-811c-094b4b6d419f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = postman.getResponseHeader(\"x-okapi-token\");",
									"pm.globals.set(\"noPrivXOkapiToken\", token);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d75a59b9-367d-4055-86c6-0b6c1cf9b86c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"akott\",\"password\":\"{{noPrivPassword}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "/validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6566d89-e8ea-4fca-a388-d40938eb27f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07624dc-c22d-4952-8d93-b85401f7458c",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d36fe8-71fe-4b6b-9f1e-32cef766ef90",
								"type": "text/javascript",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed electronic monograph)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba67fd6b-2941-4f3d-a167-c4154a58e13d",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdb8eea7-15e1-4b4e-921b-b645972bffe5",
								"type": "text/javascript",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed print serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "97bf73f4-bcfb-4f68-8b67-c65ffc12120c",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_serial\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ce0cff0-60aa-4941-b876-854cc9456c97",
								"type": "text/javascript",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed electronic serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4951c45a-52cc-47b3-b1d0-d5267dd1c1b2",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_serial\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb8d424d-e53e-46a0-bc72-75d5aabcdd65",
								"type": "text/javascript",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (unlisted print monograph)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4d0c278-0d94-4672-a0ff-404ec22de58e",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_unlisted_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_unlisted_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3a5cc5c1-f90f-4a64-90d7-b6e9b7e6dd98",
								"type": "text/javascript",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_unlisted_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (unlisted print serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad293aeb-90c0-4785-ba61-05f0f2b81556",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_unlisted_print_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_unlisted_print_serial\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad69215a-c9b8-49b5-8f40-bdbcff98c8ea",
								"type": "text/javascript",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_unlisted_print_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "/validate - user with no permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4173f87a-ccce-4068-9df5-56e1b067aa28",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Passing in a token that's associated with a user who doesn't have permission\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c43b37e9-f824-4875-8ca3-9a0d7a79ec64",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{noPrivXOkapiToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/validate - with no Okapi token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbb18ac2-ef0d-4155-b224-f05522eab603",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Calling gobi/validate without a token\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.text()).to.equal(\"Access requires permission: gobi.item.post\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (bad data)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac0fafac-c88b-45ac-9664-3deaf5a5b3b4",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_monograph_bad_data.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_monograph_bad_data\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6dfc9c54-13d6-4415-9c5a-fd3209c02b5c",
								"type": "text/javascript",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"Error XML is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('Error');",
									"    pm.expect(jsonData.Response.Error).to.have.property('Code', 'INVALID_XML');",
									"    pm.expect(jsonData.Response.Error).to.have.property('Message');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_monograph_bad_data}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders - with no Okapi token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81ca7881-c4c6-4c35-8d27-009082f8a66a",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "745213f3-d4b6-41bc-8fcc-41e67da9981f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Calling gobi/orders without a token\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.text()).to.equal(\"Access requires permission: gobi.item.post\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders - user with no permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4173f87a-ccce-4068-9df5-56e1b067aa28",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Passing in a token that's associated with a user who doesn't have permission\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b92b6f80-4b2a-4c45-934d-a44f741eb324",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "x-okapi-token",
								"value": "{{noPrivXOkapiToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tenant Configuration Tests",
			"item": [
				{
					"name": "/configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a666e96-205a-4f75-ad7b-3a7a17add0b9",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"configuration_id\", jsonData.id);",
									"",
									"pm.test(\"Configuration Entry was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"module\": \"GOBI\",\r\n  \"configName\": \"orderMappings\",\r\n  \"code\": \"gobi.order.ListedPrintMonograph\",\r\n  \"description\": \"Order Mappings for types\",\r\n  \"default\": true,\r\n  \"enabled\": true,\r\n  \"value\": \"{      \\\"orderType\\\": \\\"ListedPrintMonograph\\\",      \\\"mappings\\\": [        {          \\\"field\\\": \\\"NOTES\\\",          \\\"dataSource\\\": {\\\"default\\\": \\\"Notes from tenant configuration\\\"}}]}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						},
						"description": "Create a user with insufficient privs to negative testing"
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed print monograph) with overrides",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07624dc-c22d-4952-8d93-b85401f7458c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d36fe8-71fe-4b6b-9f1e-32cef766ef90",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"     pm.globals.set(\"po_listed_print_monograph_poLineNumber\", polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/po_line get Purchase order Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6566d89-e8ea-4fca-a388-d40938eb27f0",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"po_lines exist\", function () {",
									"    pm.expect(jsonData.po_lines).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"purchase_order_id exist\", function () {",
									"    pm.expect(jsonData.po_lines[0].purchase_order_id).to.exist;",
									"      pm.globals.set(\"po_listed_print_monograph_purchaseid\", jsonData.po_lines[0].purchase_order_id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/po_line?limit=999&query=po_line_number={{po_listed_print_monograph_poLineNumber}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"po_line"
							],
							"query": [
								{
									"key": "limit",
									"value": "999"
								},
								{
									"key": "query",
									"value": "po_line_number={{po_listed_print_monograph_poLineNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/orders/{{id}} validate Override Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6566d89-e8ea-4fca-a388-d40938eb27f0",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"notes exist\", function () {",
									"    pm.expect(jsonData.notes).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"notes text is fetched from tenant configuration\", function () {",
									"    pm.expect(jsonData.notes[0]).to.eql(\"Notes from tenant configuration\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{po_listed_print_monograph_purchaseid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{po_listed_print_monograph_purchaseid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "/vendor/id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffb3bd27-ba00-40e0-90ac-7a1558cf2552",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"vendorId\", pm.globals.get(\"vendor\").id);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d4319f2-d27b-4c84-b26e-d6480ed7e508",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /vendor/<vendorId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/vendor/{{vendorId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"vendor",
								"{{vendorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a817d5db-abfb-454c-972f-cbdb12256d7d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /user/<userId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "64352879-ad3e-44db-9612-2ef653c484e9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{noPrivUserId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"{{noPrivUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64073c7d-6f22-4ca9-8ffa-210269d652ee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /perms/users/<permId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{noPrivPermId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{noPrivPermId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/authn/credentials/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e417c8bd-cda7-4722-9e4f-9402ee8b56e6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /authn/credentials/<credId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "64352879-ad3e-44db-9612-2ef653c484e9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{noPrivCredId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"credentials",
								"{{noPrivCredId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/configuration/entries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{configuration_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{configuration_id}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9745ccee-c50b-415f-a1f6-946d624e246b",
			"key": "testdataBaseURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-gobi/master/src/test/resources/GOBIIntegrationServiceResourceImpl/",
			"type": "string"
		},
		{
			"id": "06eca5e6-bf96-40e0-8def-b4e39308b24b",
			"key": "noPrivUserId",
			"value": "a4539309-1cb2-47c2-bfc4-4a2a0ed7a303",
			"type": "string"
		},
		{
			"id": "f7b759be-631d-431a-8c09-6e5babe0723b",
			"key": "noPrivPassword",
			"value": "Manfred",
			"type": "string"
		},
		{
			"id": "ae585a98-ee97-4ea4-b0d5-dab65a809be8",
			"key": "noPrivPermId",
			"value": "95501006-82a3-4368-ad72-bd7f2d7ec417",
			"type": "string"
		}
	]
}
