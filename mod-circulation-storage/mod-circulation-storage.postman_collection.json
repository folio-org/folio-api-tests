{
	"info": {
		"_postman_id": "fd705ce6-2322-4a54-a171-af87fa18fe91",
		"name": "mod-circulation-storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_metadata_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_metadata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_metadata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "parameters.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad455e26-7dc6-4d08-a023-8910e4368b53",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_parameters_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_parameters}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_parameters}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loans.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "568864fa-8195-4f4d-b493-e89d1000cd02",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loans_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_loans}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_loans}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d61b853-1f82-44a4-844a-3734a758a26b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_loan}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_loan}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "fixed-due-date-schedule.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edd7c2f2-0dd8-4519-b514-48d363c78e4e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_fixed-due-date-schedule_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_fixed-due-date-schedule}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_fixed-due-date-schedule}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "fixed-due-date-schedules.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5db734b-a838-4037-b743-01273f1f71c2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_fixed-due-date-schedules_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_fixed-due-date-schedules}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_fixed-due-date-schedules}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan-policy.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cdbbdad-101b-408c-b33b-64bd4b71f374",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-policy_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_loan-policy}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_loan-policy}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan-policies.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f734fe62-2099-4ebe-8f5f-fc2184eaebf8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-policies_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_loan-policies}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_loan-policies}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee262032-8630-4ed3-918f-447e91da1e92",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_requests_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_requests}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_requests}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "request.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51ae954e-38b7-4f42-a992-3b30a6016460",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_request_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_request}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_request}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schedule.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0308e0c-adcd-451d-befe-fb046c4898af",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_schedule_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_schedule}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_schedule}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "period.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aed6b63a-772b-4424-8717-d5c7b9b9b8a8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_period_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_period}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_period}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c7d7898-4217-46d0-867d-d66f57fb4072",
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"// pm.test(\"'x-okapi-permissions-required' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-permissions-required\");",
									"// });",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"// pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-user-id\");",
									"// });",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "setting test data",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0983c0c-4fd5-4db9-bba4-d2b190ae1755",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let len = response.users.length;",
									"if(len > 0){",
									"    pm.environment.set(\"circ_storage_test_userid\", response.users[len-1].id);",
									"}   ",
									"else {",
									"       console.log('NO USERS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN TESTS');",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users?=limit=10",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "",
									"value": "limit=10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57d3de9-b466-47c1-bba3-0a6a0ff839f9",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"let len = response.items.length;",
									"",
									"if(len > 0){",
									"    pm.environment.set(\"circ_storage_test_itemid\", response.items[len-1].id);",
									"}",
									"else {",
									"      console.log('NO ITEMS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items?limit=10&query=(status.name=Available*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "query",
									"value": "(status.name=Available*)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "loan-storage/loans",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "/loan-storage/loans",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2431528-b9bd-4025-b425-88c60184a2f7",
										"type": "text/javascript",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loans",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans - closed loans",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ada07f07-80d3-4f25-ad03-803654cdefce",
										"type": "text/javascript",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loans?query=status =\"Closed\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loans"
									],
									"query": [
										{
											"key": "query",
											"value": "status =\"Closed\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans - by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c0612b3-af4e-4e8d-9981-91123c35e058",
										"type": "text/javascript",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loans?query=userId={{circ_storage_test_userid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loans"
									],
									"query": [
										{
											"key": "query",
											"value": "userId={{circ_storage_test_userid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans - by itemId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cf4d1d1-ee7e-457d-9f8f-103ab06cb7c2",
										"type": "text/javascript",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loans?query=itemId={{circ_storage_test_itemid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loans"
									],
									"query": [
										{
											"key": "query",
											"value": "itemId={{circ_storage_test_itemid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans - required fields only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5642a1a-97b3-4f19-9f66-38dd6a68f5d7",
										"type": "text/javascript",
										"exec": [
											"let  response = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"newloanstorageid\", response.id);",
											"pm.test(\"New loan was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											" pm.response.to.be.withBody;",
											" pm.response.to.be.json; ",
											" }); ",
											"  ",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "14cd3b3d-308d-4e6e-8091-23a4794070ac",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_storage_test_userid}}\",\n\"itemId\": \"{{circ_storage_test_itemid}}\",\n\"loanDate\": \"2018-01-12\",\n\"action\": \"checkedout\",\n\"status\": {\n  \"name\": \"Open\"\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loans",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans/{{newloanstorageid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdc81180-b5c3-4193-990e-c51251e72e3b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"The loan was updated. Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "550e0893-cf8a-4048-8a0f-1233f40f6218",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_storage_test_userid}}\",\n\"itemId\": \"{{circ_storage_test_itemid}}\",\n\"loanDate\": \"2018-01-12T13:12:16Z\",\n\"action\": \"checkedin\",\n\"status\": {\n  \"name\": \"Closed\"\n  }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loans/{{newloanstorageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loans",
										"{{newloanstorageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history?query=itemId={{newloanstorageitemid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22edf770-4cf5-48f2-aeda-6b07b8979c0c",
										"type": "text/javascript",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"//setting some test data",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain newly created loan-storage\", function () {",
											"    pm.expect(response.loans[0].id).to.be.equal(pm.environment.get(\"newloanstorageid\"));",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?query=id={{newloanstorageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "query",
											"value": "id={{newloanstorageid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2666f7e5-ca48-48f3-b125-bf50ce34b3fa",
										"type": "text/javascript",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"//setting some test data",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var loansCount=pm.environment.set(\"loansCount\",pm.response.json().totalRecords);",
											"if(loansCount>0)",
											"{",
											"    pm.environment.set(\"limitRecords\",loansCount-1);",
											"}",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - limit/offset defaults",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c95d055-62f1-46a8-83d6-af3bf74f2cdc",
										"type": "text/javascript",
										"exec": [
											"//verify that with the query parameter the limit and offset are taking default values",
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											"pm.test(\"Results count must match default limit and offset of 10 and 0\",function(){",
											"    if(response.totalRecords>10)",
											"    {",
											"        pm.expect(response.loans.length).to.equal(10);",
											"    }",
											"    else",
											"    {",
											"        pm.expect(response.loans.length).to.equal(response.totalRecords);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									]
								},
								"description": "Even when the query parameter is not specified the limit and offset parameters must use default values\nAPI tests for fix CIRCSTORE-58"
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - offset valid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ec93e87-3702-4f22-a346-255701fb9a3e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must have results from the defined offset\",function(){",
											"    if(pm.response.totalRecords>0)",
											"    {",
											"        pm.expect(pm.response.json().loans.length).to.equal(1);",
											"    }",
											"    else",
											"    {",
											"     console.log(\"Not enough records to test\");",
											"    }",
											"});",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c4554ae6-57cb-4292-be87-fdeca0345cc5",
										"type": "text/javascript",
										"exec": [
											"if(pm.environment.get(\"loansCount\") > 0)",
											"{",
											"    pm.environment.set(\"limitRecords\",pm.environment.get(\"loansCount\")-1);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?offset={{limitRecords}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "offset",
											"value": "{{limitRecords}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - limit valid value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8744c9ca-8365-4808-a644-c288bd9400b6",
										"type": "text/javascript",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must have results equal to the defined limit\",function(){",
											"    if(pm.response.json().totalRecords>0)",
											"    {",
											"        pm.expect(pm.response.json().loans.length).to.equal(101);",
											"    }",
											"    else",
											"    {",
											"     console.log(\"Not enough records to test\");",
											"    }",
											"});",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a023239d-b486-4a63-8e5b-67ba08f7a7ff",
										"type": "text/javascript",
										"exec": [
											"// console.log(pm.environment.get(\"loansCount\"))",
											"if(pm.environment.get(\"loansCount\") > 0)",
											"{",
											"    pm.environment.set(\"envlimit\",pm.environment.get(\"loansCount\")-1);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?limit=101",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "limit",
											"value": "101"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history?query=id={{newloanstorageid}} - limit/offset defaults",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "927aaa30-413a-4390-aea1-b3d6b622fef5",
										"type": "text/javascript",
										"exec": [
											"//verify that with the query parameter the limit and offset are taking default values",
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											"pm.test(\"Results count must match default limit and offset of 10 and 0\",function(){",
											"    if(response.totalRecords>10)",
											"    {",
											"        pm.expect(response.loans.length).to.equal(10);",
											"    }",
											"    else",
											"    {",
											"        pm.expect(response.loans.length).to.equal(response.totalRecords);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?query=id={{newloanstorageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "query",
											"value": "id={{newloanstorageid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history?query=id={{newloanstorageid}} - all parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccf53708-428e-4a30-ab6f-a84e6a4303ad",
										"type": "text/javascript",
										"exec": [
											"//verify that with the query parameter the limit and offset are taking default values",
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											"pm.test(\"Results count must match the given limit and offset values\",function(){",
											"    if(response.totalRecords>0)",
											"    {",
											"        pm.expect(response.loans.length).to.equal(1);",
											"    }",
											"});",
											"",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
											"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"",
											"});",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?query=status=closed&limit=1&offset=0",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "query",
											"value": "status=closed"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans/{{newloanstorageid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f56cec57-5e2a-42b9-b5c0-e61b7089c496",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"X-Okapi-Trace header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{url}}:9130/loan-storage/loans/{{newloanstorageid}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "9130",
									"path": [
										"loan-storage",
										"loans",
										"{{newloanstorageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans/nonexistentloan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6729157f-a984-42ab-9eab-a6fb15ccd800",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"X-Okapi-Trace header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{url}}:9130/loan-storage/loans/foo",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "9130",
									"path": [
										"loan-storage",
										"loans",
										"foo"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "803870cd-9750-41b0-938e-d4373fa17ffd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "62f02d16-843a-4aa0-ba41-47cc78658b5c",
								"type": "text/javascript",
								"exec": [
									"//verify headers",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									" });",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "/loan-storage/loan-history - limit negative value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5972112e-72a2-4983-b4c8-534c95206b53",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 400-negative limit\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response having negative limit parameter error message\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.have.body('\\n \\'limit\\' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0');",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - limit - Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c022f91a-c3fe-4fdd-85b2-87b92df90ca5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 400-invalid Alpha characters\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response having invalid Alpha characters error message\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?limit=abcd",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "limit",
											"value": "abcd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - limit - SpecialCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73dd14aa-d8cf-4038-a207-2e610971a005",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 400-invalid special characters\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response having invalid special characters error message\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?limit={/)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "limit",
											"value": "{/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - limit max value exceeded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe5758b5-6412-4c6b-ba55-eb47ded6d821",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 400-more than max limit\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?limit=2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "limit",
											"value": "2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - offset negative value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f09886a3-6287-44fe-b5be-3de6ae7771e1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 400- negative offset\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response having negative offset parameter error message\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.have.body('\\n \\'offset\\' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - offset - Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76a4ce51-eef3-46a1-a5f1-5b70f0d55988",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 400-invalid Alpha characters\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response having invalid Alpha characters error message\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?offset=abcd",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "offset",
											"value": "abcd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - offset - SpecialCharacters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73dd14aa-d8cf-4038-a207-2e610971a005",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 400-invalid special characters\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response having invalid special characters error message\", function () {",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?offset={/)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "offset",
											"value": "{/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history - offset max value exceeded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "554b2939-b4e5-43d7-bae8-1e45abb43ef0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 400-more than max offset\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-storage/loan-history?offset=2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-storage",
										"loan-history"
									],
									"query": [
										{
											"key": "offset",
											"value": "2147483649"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1323ce0a-e3c4-4cf1-b963-3ff2280c3597",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a30feb7-23a0-4f66-81f1-62b8e399b46e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9263a166-b532-4458-861d-6a74a7ef35d1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ccc0c2cf-280d-400b-8c4a-9fbeac529fcd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "loan-policy-storage",
			"item": [
				{
					"name": "/loan-policy-storage/loan-policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c95e940-930a-40c4-94b0-c85bd94bd871",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"period.json\", JSON.parse(pm.environment.get(\"schema_period_content\")));",
									"   tv4.addSchema(\"loan-policy.json\", JSON.parse(pm.environment.get(\"schema_loan-policy_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policies_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/loan-policy-storage/loan-policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75c1304c-3d49-413f-8f94-7addb52bd814",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newloanpolicyid\", response.id);",
									"pm.test(\"New loan was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									" pm.response.to.be.withBody;",
									" pm.response.to.be.json; ",
									" }); ",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"period.json\", JSON.parse(pm.environment.get(\"schema_period_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"                ",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "729764ff-1429-4d36-a622-bdbebbc3c38a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"FSE testing Loan Policy\",\r\n  \"description\": \"An example loan policy\",\r\n  \"loanable\": true,\r\n  \"loansPolicy\": {\r\n    \"profileId\": \"ROLLING\",\r\n    \"period\": {\r\n      \"duration\": 1,\r\n      \"intervalId\": \"Months\"\r\n    },\r\n    \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\r\n      \"gracePeriod\": {\r\n      \"duration\": 7,\r\n      \"intervalId\": \"Days\"\r\n    }\r\n  },\r\n  \"renewable\": true,\r\n  \"renewalsPolicy\": {\r\n    \"unlimited\": true,\r\n    \"renewFromId\": \"CURRENT_DUE_DATE\",\r\n    \"differentPeriod\": true,\r\n    \"period\": {\r\n      \"duration\": 30,\r\n      \"intervalId\": \"Days\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3f404d2-0ab7-460f-b850-fdd6845713a1",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"//setting some test data",
									"// pm.environment.set(\"loanuserid\", response.loans[0].userId)",
									"// pm.environment.set(\"loanitemid\", response.loans[0].itemId)",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"period.json\", JSON.parse(pm.environment.get(\"schema_period_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{newloanpolicyid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45e12dd5-2dd9-4199-ac12-c6afbd9fd05d",
								"exec": [
									"",
									"pm.test(\"New loan policy was created. Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "729764ff-1429-4d36-a622-bdbebbc3c38a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"FSE testing Loan Policy\",\r\n  \"description\": \"An example loan policy\",\r\n  \"loanable\": true,\r\n  \"loansPolicy\": {\r\n    \"profileId\": \"INDEFINITE\",\r\n    \"period\": {\r\n      \"duration\": 1,\r\n      \"intervalId\": \"Months\"\r\n    },\r\n    \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\r\n    \"gracePeriod\": {\r\n      \"duration\": 7,\r\n      \"intervalId\": \"Days\"\r\n    }\r\n  },\r\n  \"renewable\": true,\r\n  \"renewalsPolicy\": {\r\n    \"unlimited\": true,\r\n    \"renewFromId\": \"CURRENT_DUE_DATE\",\r\n    \"differentPeriod\": true,\r\n    \"period\": {\r\n      \"duration\": 30,\r\n      \"intervalId\": \"Days\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{newloanpolicyid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b64f8da-4226-462f-a4ac-d1b9cab2b941",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{url}}:9130/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "9130",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{newloanpolicyid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "65cf37cc-53e0-4a6d-a2cb-bff1b19cb09c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e0adf7d-d014-479b-adb0-ba46b06b429a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "request-storage",
			"item": [
				{
					"name": "/request-storage/requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00007477-3c4a-4fa4-9678-5b85716fbeae",
								"type": "text/javascript",
								"exec": [
									"///Set test data",
									"let response = JSON.parse(responseBody);",
									"",
									"if(response.requests.length >0){",
									"pm.environment.set(\"existingrequesstoragetid\", response.requests[0].id);",
									"}",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"request.json\", JSON.parse(pm.environment.get(\"schema_request_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_requests_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									" });",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"request-storage",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "/request-storage/requests - item does not exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "600de9d7-2a8a-4ce9-8031-2605484c1133",
								"type": "text/javascript",
								"exec": [
									"",
									"//invalid id error",
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test('Response contains correct error message', function() {",
									"  pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"itemId\");",
									"  pm.expect(pm.response.json().errors[0].parameters[0].value).to.eql(\"invaliditemid\");",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"requestType\": \"Recall\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_storage_test_userid}}\",\r\n  \"itemId\": \"invaliditemid\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2017-07-25\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"request-storage",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "/request-storage/requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23270090-400a-4ddc-a477-3ca09626b709",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newrequeststorageid\", response.id);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_request_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"  });",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3cbde4eb-a56e-47af-b033-c738e933cc41",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"requestType\": \"Hold\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_storage_test_userid}}\",\r\n  \"itemId\": \"{{circ_storage_test_itemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2018-07-08\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"request-storage",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "/request-storage/requests{{newrequeststorageid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5a35970-d9be-4268-89ad-916cf323963b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_request_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests/{{newrequeststorageid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"request-storage",
								"requests",
								"{{newrequeststorageid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/request-storage/requests{{newrequeststorageid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "baf81d51-cfc9-40b3-8d95-0190b72dd876",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{newrequeststorageid}}\",\r\n  \"requestType\": \"Page\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_storage_test_userid}}\",\r\n  \"itemId\": \"{{circ_storage_test_itemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2017-07-25\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests/{{newrequeststorageid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"request-storage",
								"requests",
								"{{newrequeststorageid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/request-storage/requests/{{newrequestid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5f9ee36-e5a3-438b-8384-c07b2c951e0b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests/{{newrequeststorageid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"request-storage",
								"requests",
								"{{newrequeststorageid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "505752bf-8f51-4dd9-b022-7d3235a394fe",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dba431a3-c4ed-4077-aa75-2afba04dd74c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "fixed-due-date-schedule",
			"item": [
				{
					"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8fb1d71-6a08-4f4b-8867-240f32cc112e",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"fixed-due-date-schedule.json\", JSON.parse(pm.environment.get(\"schema_fixed-due-date-schedule_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_fixed-due-date-schedules_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/fixed-due-date-schedule-storage/fixed-due-date-schedules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"fixed-due-date-schedule-storage",
								"fixed-due-date-schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules - required only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91e428da-d516-44ce-bcef-1f8d727cc426",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"fixedduedateid\", response.id);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_fixed-due-date-schedule_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3cbde4eb-a56e-47af-b033-c738e933cc41",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"FSE Testing Due Date Schedule\"\r\n  \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/fixed-due-date-schedule-storage/fixed-due-date-schedules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"fixed-due-date-schedule-storage",
								"fixed-due-date-schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7916d623-9c8b-4703-891b-020576c4d850",
								"type": "text/javascript",
								"exec": [
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_fixed-due-date-schedule_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"fixed-due-date-schedule-storage",
								"fixed-due-date-schedules",
								"{{fixedduedateid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22276d44-b837-4542-84f0-fb7fe5dfbdf3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"fixed-due-date-schedule-storage",
								"fixed-due-date-schedules",
								"{{fixedduedateid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5add6ab5-e146-46ec-bab5-ca31258c8c27",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"fixedduedateid\", response.id);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"schedule.json\", JSON.parse(pm.variables.get(\"schema_schedule_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_fixed-due-date-schedule_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3cbde4eb-a56e-47af-b033-c738e933cc41",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"FSE Testing Due Date Schedule\",\r\n  \"description\": \"API tests are good for you\",\r\n  \"schedules\": [\r\n    {\r\n      \"from\": \"2018-08-17\",\r\n      \"to\": \"2018-12-15\",\r\n      \"due\": \"2018-12-23\"\r\n    }\r\n  ]\r\n  \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/fixed-due-date-schedule-storage/fixed-due-date-schedules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"fixed-due-date-schedule-storage",
								"fixed-due-date-schedules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23f29631-a392-4ed9-8b30-ec52a7741d45",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"fixed-due-date-schedule-storage",
								"fixed-due-date-schedules",
								"{{fixedduedateid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules - bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0092936a-776d-4873-b1d1-63c5cd83baad",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3cbde4eb-a56e-47af-b033-c738e933cc41",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"FSE Testing Due Date Schedule\",\r\n  \"description\": \"API tests are good for you\",\r\n  \"schedules\": [\r\n    {\r\n      \"from\": \"2018-08-17\"\r\n      \"to\": \"2018-12-15\",\r\n      \"due\": \"2018-12-23\"\r\n    }\r\n  ]\r\n  \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/fixed-due-date-schedule-storage/fixed-due-date-schedules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"fixed-due-date-schedule-storage",
								"fixed-due-date-schedules"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "260b5602-a6fc-47af-8425-b6eb7b34195a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "524b77f6-c17a-418a-8417-20899cc12e35",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fd264575-86c6-428d-997b-1b85ea37429f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "84d6524b-d5ad-443d-830d-a411c3a7a1ad",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "298fd33a-7ac3-4246-8f36-5b2235095f6e",
			"key": "mod_name",
			"value": "mod-circulation-storage",
			"type": "string"
		},
		{
			"id": "414799df-5fe9-4f3c-b008-db53fe358e7c",
			"key": "mod_version",
			"value": "master",
			"type": "string"
		},
		{
			"id": "ddbd8254-9944-4939-b117-e0ead2ba5b7e",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "b0a27376-0075-4e15-b6ee-ed7d488b4d6c",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "a544ec93-e05c-46bf-87a3-2042cea32313",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "ec2f4a16-a6f1-4896-be28-a480b206166a",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "d5f70e07-b684-4b01-95ae-8256b7b49b52",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "18df1007-f905-480b-911c-98d8c0b9549b",
			"key": "schema_loans",
			"value": "loans.json",
			"type": "string"
		},
		{
			"id": "3a0f516c-4847-4393-b9f9-21f47498b1bd",
			"key": "schema_loan",
			"value": "loan.json",
			"type": "string"
		},
		{
			"id": "e92851de-9d34-40be-8b5c-5e615a730be9",
			"key": "schema_loan-rules",
			"value": "loan-rules.json",
			"type": "string"
		},
		{
			"id": "a4405a15-e23a-45b9-9eb2-e0497dbfcd4d",
			"key": "schema_loan-policies",
			"value": "loan-policies.json",
			"type": "string"
		},
		{
			"id": "35aa205a-a452-423a-b877-dce4a959cfa7",
			"key": "schema_loan-policy",
			"value": "loan-policy.json",
			"type": "string"
		},
		{
			"id": "52d599a5-3fad-4ed0-bfd6-b61f9c51519c",
			"key": "schema_requests",
			"value": "requests.json",
			"type": "string"
		},
		{
			"id": "a7c6d1d8-805d-4d82-afcd-ce297621d046",
			"key": "schema_request",
			"value": "request.json",
			"type": "string"
		},
		{
			"id": "6b24201e-f766-48fe-ba15-050def1cbb77",
			"key": "schema_fixed-due-date-schedules",
			"value": "fixed-due-date-schedules.json",
			"type": "string"
		},
		{
			"id": "b8b7584d-8d1d-4975-abaa-75dcdcc26b52",
			"key": "schema_fixed-due-date-schedule",
			"value": "fixed-due-date-schedule.json",
			"type": "string"
		},
		{
			"id": "fea8f6e3-0784-4281-8a0e-c00bd92c416f",
			"key": "schema_schedule",
			"value": "schedule.json",
			"type": "string"
		},
		{
			"id": "5f0b048a-c5d3-40b6-99a2-e44ecd372629",
			"key": "schema_period",
			"value": "period.json",
			"type": "string"
		},
		{
			"id": "81df074f-e345-4eb8-9f95-495204e808b8",
			"key": "schema_commit",
			"value": "8b276ef8cd5852adec92c65db4e6bcd61324dbca",
			"type": "string"
		}
	]
}