{
	"info": {
		"_postman_id": "77914a57-c456-4ca5-8623-37399d7ee91e",
		"name": "mod-invoice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01b703e9-1cb8-4715-bf88-ccf1932b2974",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5b5a3a47-f7d5-40af-8aa7-ebeb094e273b",
										"exec": [
											"pm.test(\"Preparing request to create test tenant. Tenant creation might take up to 1 minute...\", () => {",
											"    pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a9324ce9-0c20-4c0f-959b-a4c8fb1cb34e",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - created (201) or already exists (400 with Duplicate tenant id error)\", () => {",
											"    pm.expect(pm.response.code).be.oneOf([201, 400]);",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response.text()).to.include(\"Duplicate tenant id\");",
											"        purgeMudulesData();",
											"    } else {",
											"        // All is okay, running further requests",
											"        postman.setNextRequest();",
											"    }",
											"});",
											"",
											"function purgeMudulesData() {",
											"    let utils = eval(globals.loadUtils);",
											"    let tenantBaseUrl = utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\"));",
											"    pm.sendRequest(tenantBaseUrl + \"/modules\", (err, res) => {",
											"        let modulesToDisable = null;",
											"        pm.test(\"Preparing request to disable modules if any installed before...\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res.code).to.equal(200);",
											"",
											"            modulesToDisable = res.json();",
											"            modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"            console.log(modulesToDisable);",
											"        });",
											"",
											"        if (modulesToDisable !== null) {",
											"            // In case the response indicates that there are some modules are already installed, their data have to be purged first",
											"            if (modulesToDisable.length > 0) {",
											"                pm.sendRequest({",
											"                    url: tenantBaseUrl + \"/install?purge=true\",",
											"                    method: \"POST\",",
											"                    header: {",
											"                        \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\"),",
											"                        \"Content-type\": \"application/json\"",
											"                    },",
											"                    body: JSON.stringify(modulesToDisable)",
											"                }, (error, response) => {",
											"                    pm.test(\"Purging the data for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                        pm.expect(error).to.equal(null);",
											"                        pm.expect(response).to.be.ok;",
											"                        // All the data have been purged. Now wait for a minute and run next request",
											"                        setTimeout(() => postman.setNextRequest(), 61000);",
											"                    });",
											"                });",
											"            } else {",
											"                pm.test(\"No modules to purge for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                    // Run next request",
											"                    postman.setNextRequest();",
											"                });",
											"            }",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a32c26d7-1ca7-4316-92ea-e62ac4c5a78d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-invoice\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52b90da4-9531-47ce-9198-bf697094f30d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aaf0d659-8160-45dc-b23c-7554703986fe",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "17b81ade-7ad9-4942-af87-d23e50fa0b59",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a25a967-cb0e-46b0-96cd-c09cd78dfe4a",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e607ee4f-3b64-43d5-9770-8aa6496f4ce2",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "909c8da4-6935-4045-bcfa-9fea790ef61d",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d560eba0-ea21-4a04-810f-d3cda1ee58b7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiUrl('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "daba8d58-fb88-4089-a843-2ea56695263c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "343e0195-c9a7-484c-94a6-e38e7edf5a0f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35497293-b681-4ac1-a95d-3241608a4271",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "57ba5b2c-3e2b-441e-82bd-30ee0943a8f7",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e52019c8-cb5c-4648-a205-3a843c3499c8",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d6a97ffd-775a-4dd8-b878-7bdd6c750268",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d61141a-f645-4a21-a20d-216b619221aa",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61b39a1b-9e97-4d87-b9dd-2f42ad069195",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add invoice permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "baff65d3-e75e-4046-9f97-b5e783fe26b5",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79be7632-5843-497f-ba8f-0bd72b61d267",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4de2bad9-2f6a-4b54-be2f-2c673a60fe60",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c50e5214-4d74-4552-924c-29620f2d06d1",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check invoice configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8346f42f-b92a-4704-88e4-1b87276d8024",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.invoicesConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-invoices-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
											"}",
											"// Store current version of configs",
											"pm.environment.set(\"current-invoices-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "484610f6-15c5-45b7-8f82-ed5fc8f7816d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check orders configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58bbf35a-16f6-4db1-8344-0f07b32cb53a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.ordersConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2139efdd-49f1-4509-9121-8a23fd39baae",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5d7c70c-b0bf-4988-8c1d-53fa5e36a4ff",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "708cf73e-ad16-4eac-a827-ee78be7d8d3b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ed680b4-d967-4ff7-bb3c-657b599099c1",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modInvoiceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "902ddf42-8340-4e15-a069-2674a8202609",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-invoice';\r",
											"\r",
											"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"        pm.variables.set('modInvoiceId', moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modInvoiceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f2bfbbc-6317-4bd4-99cd-04aacf39e1b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d95fdcf-cd0d-4a9d-9812-15b35f256009",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare vendors",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d22ad6e-6be3-442f-8003-d7c253b03edf",
										"exec": [
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7901d087-e729-4219-bb43-f84dba2762a3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7c17505-003a-4fa3-9172-9a2d869ccda8",
										"exec": [
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad499c9a-03c4-44e1-a661-c954ffdc3389",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory data",
					"item": [
						{
							"name": "Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc6a2029-aba2-4490-9787-eeb19e538410",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"identifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12547a8b-1906-4a5c-860e-23d169df1d66",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-identifierTypeName}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ISBN Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce184ce7-8763-4903-9184-2e37b87bec3b",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"isbnIdentifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af2f9027-6bde-44f4-9554-67facfc0b2fb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
							},
							"response": []
						},
						{
							"name": "Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8a5545f-6211-459e-9370-50cf03148a63",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c5648b8-5bfe-45ed-98d4-3ce04487dcea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceTypeCode}}\",\r\n  \"name\": \"{{inventory-instanceTypeCode}}\",\r\n  \"source\": \"apiTests\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aceee59e-dc67-475a-ba9c-0634ea218862",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceStatusId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0dfdf5ed-077c-4340-aeea-3156f904971f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceStatusCode}}\",\r\n  \"name\": \"{{inventory-instanceStatusCode}}\",\r\n  \"source\": \"apiTests\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f30543f-ae08-442a-800a-9d966adf196e",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"materialTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a551f53d-3fad-4518-ae46-79bae9917ab4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "FiscalYear",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f3dfa1a-aac6-4d05-b558-bad677e36233",
										"exec": [
											"pm.test(\"Fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fiscYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a9f633ab-032e-4145-82c1-96196bbbb984",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"FY2019\",\n    \"name\": \"Test fiscal year\",\n    \"periodStart\": \"2019-01-01T00:00:00Z\",\n    \"periodEnd\": \"2025-12-30T23:59:59Z\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4acfa6ec-dc55-42d6-ad4f-c0fe4f604da4",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3daee131-37da-47a1-a387-9cda88f4fed1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\",\r\n\t\"fiscalYearOneId\": \"{{fiscYearId}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ff7906f-e260-4327-a9fc-a6c02e9bac28",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fundId\", pm.response.json().fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e28e89e-6f56-40b4-b0cd-0b18f6131a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"code\": \"TST-FND\",\n        \"description\": \"Fund for orders API Tests\",\n        \"externalAccountNo\": \"1111111111111111111111111\",\n        \"fundStatus\": \"Active\",\n        \"ledgerId\": \"{{ledgerId}}\",\n        \"name\": \"Fund for orders API Tests\"\n    },\n    \"groupIds\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d90fe5d-8d59-4056-85df-de099aea5408",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fund2Id\", pm.response.json().fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff1e1606-4ced-417f-b8d0-bd1f59fec976",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"code\": \"TST2-FND\",\n        \"description\": \"2nd Fund for orders API Tests\",\n        \"externalAccountNo\": \"2222222222222222222222222\",\n        \"fundStatus\": \"Active\",\n        \"ledgerId\": \"{{ledgerId}}\",\n        \"name\": \"2nd Fund for orders API Tests\"\n    },\n    \"groupIds\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2564e10-3e7f-4202-92c4-ae5bafedce87",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2032c1c3-aae8-4cd4-ae6f-54bf1ef37199",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allocated\": \"1000000\",\n    \"budgetStatus\": \"Active\",\n    \"name\": \"Budget for invoice API tests\",\n    \"fundId\": \"{{fundId}}\",\n    \"fiscalYearId\": \"{{fiscYearId}}\",\n    \"allowableEncumbrance\": 100,\n    \"allowableExpenditure\": 100\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Budget-2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4ee7718-0bbc-4480-85ce-849ff060d333",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budget2Id\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c6efbd9-6c15-469c-a67d-f8ebd174f9aa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allocated\": \"1000000\",\n    \"budgetStatus\": \"Active\",\n    \"name\": \"Budget 2 for invoice API tests\",\n    \"fundId\": \"{{fund2Id}}\",\n    \"fiscalYearId\": \"{{fiscYearId}}\",\n    \"allowableEncumbrance\": 100,\n    \"allowableExpenditure\": 100\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare orders",
					"item": [
						{
							"name": "Create Pending order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3b509215-5431-4689-ad13-bcfaea16afe2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    delete order.poNumber;",
											"    order.compositePoLines[0].paymentStatus = \"Awaiting Payment\";",
											"    order.compositePoLines[1].paymentStatus = \"Awaiting Payment\";",
											"    // Set retrieved content for further requests",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5f0083e5-2466-47fc-9057-2d658c06d9c1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"completeOrderId\", order.id); ",
											"    pm.globals.set(\"poLine1Id\",  order.compositePoLines[0].id);",
											"    pm.globals.set(\"poLine2Id\",  order.compositePoLines[1].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load mock data",
					"item": [
						{
							"name": "Load mock invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f8d26c5-61da-4973-946c-114ca9486705",
										"exec": [
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec04db41-a620-4a06-a0d3-2beaa664a91a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
											"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
											"",
											"    let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
											"    invoice.note += \" - for batch-group system record delete test\";",
											"    invoice.status = \"Reviewed\";",
											"    delete invoice.adjustments;",
											"    delete invoice.voucherNumber;",
											"    delete invoice.approvalDate;",
											"    delete invoice.approvedBy;",
											"    ",
											"    pm.environment.set(\"mockInvoice\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{mockInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare invoice data",
					"item": [
						{
							"name": "Create batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91894545-de52-46ff-833a-52bc1e963982",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroup = {};",
											"",
											"pm.test(\"Batch-group is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    pm.expect(batchGroup.name).to.exist;",
											"    pm.environment.set(\"batchGroupId\", batchGroup.id);",
											"    ",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2b7d351b-2757-4dde-ae53-8d369b23e845",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.metadata;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0963bfe-e032-42ae-8684-3d5e5f6bec05",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"minInvoiceId\", invoice.id);",
													"    pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    ",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c59e45be-caf8-48bc-9707-98fca9a50cd7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with new vendor invoice number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cb78aa64-0f4c-446f-b3a4-706172aa8ef7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    let number = \"UPD\" + invoice.vendorInvoiceNo;",
													"    invoice.vendorInvoiceNo = number;",
													"    pm.variables.set(\"updatedNumber\", number);",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eb3a8f37-4aa6-4c0c-a09a-74b83e49ce7f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"        pm.test(\"Verify invoice updated with new vendor invoice number\", () => {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.vendorInvoiceNo).to.equal(pm.variables.get(\"updatedNumber\"));",
													"            utils.validateInvoice(invoice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								},
								{
									"name": "Get invoice by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dbb31ed-c7a9-4d01-890f-477c1c50058f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // Validate fields",
													"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"minInvoiceId\"));",
													"    pm.response.to.have.jsonBody(\"folioInvoiceNo\", pm.environment.get(\"folioInvoiceNo\"));",
													"",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "30ee98ce-0bd1-4ffb-b3a0-3fe18275c80f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Filter invoices",
							"item": [
								{
									"name": "Create another invoice for filtering",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cb64821-dc90-45dd-abd1-e8ea87508fc9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"filterInvoiceId\", invoice.id);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "34efbaf5-b6c4-428a-b0ba-5d0db3388b8a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
													"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
													"    let invoice = utils.prepareInvoice(res.json().invoices[1]);",
													"",
													"    invoice.note += \" - filtering\";",
													"",
													"    pm.variables.set(\"invoiceToFilterContent\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceToFilterContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84d22b44-e6ed-4ac1-8bf5-497a64356a6c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.at.least(2);",
													"    invoices = pm.response.json().invoices;",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fd2ccfa0-b260-420d-8867-eaf3ebee4a2c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices filter by query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59ff68d1-44a2-4816-9488-9c6f0bf22fc4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
													"    invoices = pm.response.json().invoices;",
													"    pm.expect(invoices[0].note).to.equal('Invoice for API Tests - filtering');",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20b6d438-65bb-4053-b31d-203df7dbff54",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=1&query=note=\"filtering\" and note=\"Invoice for API Tests\"",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "query",
													"value": "note=\"filtering\" and note=\"Invoice for API Tests\""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Invoice and associated lines",
							"item": [
								{
									"name": "Create invoice for deletion test",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40d7d1a4-1aca-4404-bddb-03602e8b52aa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.environment.set(\"InvoiceIdForDelete\", invoice.id);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "121ed012-bf5d-4553-adf9-fe73463ff546",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceForDelete\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice line for delete with invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee38ad20-13c8-404d-9352-75779412ab7b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"InvoiceIdForDelete\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.environment.set(\"InvoiceLineIdForDelete\", invoiceLine.id);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8408ffa2-9e52-4ec0-8f40-0b1bbb994c42",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"InvoiceIdForDelete\"));",
													"",
													"pm.variables.set(\"InvoiceLineForDelete\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceLineForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete  invoice and associated lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f22a897c-e4a4-4986-b142-2aa192923d15",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"invoce line deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"InvoiceIdForDelete\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoice-lines?query=invoiceId==\" + invoiceId , (err, response) => {",
													"        pm.expect(response).to.have.status(200);",
													"        pm.expect(response.json().invoiceLines.length).to.be.equal(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ccf242a0-e753-418c-bd60-6a45d90382ac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceIdForDelete}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceIdForDelete}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Documents",
							"item": [
								{
									"name": "Create document with url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b90ca1e-3ca4-4df7-9981-9b3da0138e2c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceDocument = pm.response.json();",
													"    pm.environment.set(\"documentWithUrlId\", invoiceDocument.documentMetadata.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12294612-d0f0-47a7-a524-967009024f2f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let sampleFileURL = pm.variables.get(\"resourcesUrl\") + \"/mockdata/documents/10a34f8a-98d1-45af-a9f6-14b7174ceb51.json\";",
													"",
													"pm.sendRequest(sampleFileURL, (err, res) => {",
													"    let invDocumentWithUrl = res.json();",
													"    invDocumentWithUrl.documentMetadata.invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    pm.environment.set(\"documentWithURL\", JSON.stringify(invDocumentWithUrl));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{documentWithURL}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document with base64 content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "000445d1-d552-4818-abc4-f80830bc0cf4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceDocument = pm.response.json();",
													"    pm.environment.set(\"documentWithBase64Id\", invoiceDocument.documentMetadata.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "402a17dc-5638-4cb3-b98a-9fc6e02f5541",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let sampleFileURL = pm.variables.get(\"resourcesUrl\") + \"/mockdata/documents/b3ed45f1-9347-43b7-992d-519048d8041c.json\";",
													"",
													"pm.sendRequest(sampleFileURL, (err, res) => {",
													"    let invDocument = res.json();",
													"    invDocument.documentMetadata.invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    pm.environment.set(\"documentWithBase64Content\", JSON.stringify(invDocument));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{documentWithBase64Content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47ee72ab-d82e-424d-aaa4-016d586809c6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"    pm.expect(invoiceDocument.documents.length, \"document list size\").to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c3e405d-ec7b-4b14-828d-de8c3413e1c8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document list by query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19adc657-b451-48a5-9d38-f57b416dcf07",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"    pm.expect(invoiceDocument.documents.length, \"document list size\").to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9e21b0b8-c7c4-40de-9620-43b8d168c165",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents?query=url<>null",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											],
											"query": [
												{
													"key": "query",
													"value": "url<>null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b467a84-45b0-4eb4-be10-5623cd612db6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "528d9bbb-1f62-44d0-8cac-ff9e816c61d2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithBase64Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithBase64Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document with base64 content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8560d424-e7a2-4398-b350-c3fe17b31290",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Docoment was deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"Verify document was deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    let docId = pm.environment.get(\"documentWithBase64Id\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + invoiceId + \"/documents/\" + docId, (err, response) => {",
													"        pm.expect(response).to.have.status(404);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b8192bd1-8f4b-4063-86bf-abd51a7df110",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithBase64Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithBase64Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document with url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffe683ff-c069-4b77-9e98-60cc270b262a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Verify document was deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    let docId = pm.environment.get(\"documentWithUrlId\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + invoiceId + \"/documents/\" + docId, (err, response) => {",
													"        pm.expect(response).to.have.status(404);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4b40a669-4b01-4e77-a4eb-2032bfa90899",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithUrlId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithUrlId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e280d16b-258a-4d7a-9af2-0a25b910e440",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Invoice content is valid\", function() {",
											"    pm.expect(invoice.id).to.exist;",
											"    pm.expect(invoice.folioInvoiceNo).to.exist;",
											"    pm.environment.set(\"invoiceId\", invoice.id);",
											"    ",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5b6fea3-96f4-4b7e-b56c-62e5d0faa275",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/52fd6ec7-ddc3-4c53-bc26-2779afc27136.json\", function (err, res) {",
											"    pm.variables.set(\"invoiceContent\", JSON.stringify(utils.prepareInvoice(res.json())));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with minimal content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2901d343-6940-46ab-9db3-34deac493856",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8db4dd3e-cb08-4d87-a9f2-b01b3d50ee39",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceId\"), (err, res) => {",
											"        utils.validateInvoiceWithMinimalContent(res.json());",
											"      ",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with invoices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a12c02ea-88fb-42be-9769-4779675a32cd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa873e8c-8e40-4be7-b9f4-06d53b429304",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7c6601c-3856-4bbd-b8ad-a9df7568d81b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"minInvoiceId\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b32af14e-bfc7-4195-b8ec-a070d136c6a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"",
													"pm.variables.set(\"minContentInvoiceLine\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{minContentInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "30735966-8466-41a3-8d29-96d3b96b3060",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "91a67c06-eb6d-4c64-8c64-617d7beec0d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice Line has minimal content\", function () {",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.test(\"Validate schema for invoice_line.json\", function () {",
													"    utils.validateInvoiceLine(invoiceLine);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by empty query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1a4cd10f-4e1b-4c97-a869-c4305fd19a19",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "497d743e-22b0-427c-a623-1457236f6f70",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLines = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(invoiceLines.invoiceLines).to.have.lengthOf.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b44f4224-9aa4-4e54-b1c3-1b5b81afb684",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e67ad20a-66ce-411e-aa1d-3b06b2c73207",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var resp = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    resp = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(resp.invoiceLines).to.have.lengthOf.above(0);",
													"});",
													"",
													"pm.test(\"Validate that response contains lines with proper status\", function () {",
													"    for(var i = 0; i < resp.invoiceLines.length; i++) {",
													"    \tpm.expect(resp.invoiceLines[i].invoiceLineStatus).to.equal(\"Open\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?limit=30&query=invoiceLineStatus==Open",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											],
											"query": [
												{
													"key": "limit",
													"value": "30"
												},
												{
													"key": "query",
													"value": "invoiceLineStatus==Open"
												}
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fc1e3cb-427f-4e18-9bec-d8819e4f385f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.variables.get(\"invoiceLineId\"), function (err, res) {",
													"    pm.expect(err).to.equal(null);",
													"    let invoiceLine  = res.json();",
													"    pm.test(\"Verify updated fields\", function () {",
													"       pm.expect(res.json().description).to.equal(pm.variables.get(\"invLineDescription\"));",
													"       pm.expect(res.json().quantity).to.equal(pm.variables.get(\"invLineQuantity\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3a4f54d8-7643-462e-a5cd-ced85d3957cd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());",
													"",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"invoiceLine.description = \"Updating given description\";",
													"invoiceLine.quantity = 4;",
													"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));",
													"pm.variables.set(\"invLineDescription\",invoiceLine.description);",
													"pm.variables.set(\"invLineQuantity\",invoiceLine.quantity);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete invoice line by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10b92d3f-4f5d-4a09-8f41-ee49d853332f",
												"exec": [
													"pm.test(\"Invoice is deleted\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "adjustments",
							"item": [
								{
									"name": "Create invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cd844f5-6d6f-4b3b-bde2-7c416032acea",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to include only In addition to relation\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(10.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b35b050e-23a0-409e-bccc-b1590d09f260",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoiceLines/e0d08448-343b-118a-8c2f-4fb50248d672.json\", function (err, res) {",
													"    let invoiceLine = res.json();",
													"    delete invoiceLine.id;",
													"    delete invoiceLine.invoiceLineNumber;",
													"    pm.globals.set(\"mock-invoiceLine\",  JSON.stringify(invoiceLine));",
													"    ",
													"    ",
													"    delete invoiceLine.adjustments;",
													"    ",
													"    invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"    invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"    let adjustment1 = utils.buildAdjustmentObject();",
													"    adjustmentsArray.push(adjustment1);",
													"",
													"    let adjustment2 = utils.buildAdjustmentObject();",
													"    adjustment2.relationToTotal = \"Included in\";",
													"    adjustmentsArray.push(adjustment2);",
													"    ",
													"    let adjustment3 = utils.buildAdjustmentObject(12.222, \"Percentage\");",
													"    adjustmentsArray.push(adjustment3);",
													"",
													"    invoiceLine.adjustments = adjustmentsArray;",
													"",
													"    pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Create invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35b99a46-8423-416b-b7ad-e97358fe99e4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"negativeAdjInLineId\",invoiceLine.id)",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.below(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to be negative\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(-28.21);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b08cf74-b6eb-45c6-a55c-e01a8a89a3db",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = utils.getMockInvoiceLine();",
													"delete invoiceLine.id;",
													"delete invoiceLine.invoiceLineNumber;",
													"delete invoiceLine.adjustments;",
													"delete invoiceLine.fundDistribution;",
													"invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"let adjustment1 = utils.buildAdjustmentObject();",
													"adjustment1.value = -13.88;",
													"adjustmentsArray.push(adjustment1);",
													"",
													"let adjustment2 = utils.buildAdjustmentObject();",
													"adjustment2.value = -14.33;",
													"adjustmentsArray.push(adjustment2);",
													"",
													"invoiceLine.adjustments = adjustmentsArray;",
													"",
													" pm.environment.set(\"negativeInvoiceLineContent\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cd7ee94-8670-40db-b053-c4e7cac7342c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82ef487d-e6da-44c7-853d-94fa39000508",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"negativeInvoiceLineContent\"));",
													"invoiceLine.adjustments[0].value = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0de09816-f93d-4ff7-be09-b273d1014060",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is successfully retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total is recalulated\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(0.67);",
													"    pm.expect(invoiceLine.total).to.equal(2.87);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c0e674c-5590-481f-81f2-49c039088faf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										},
										"description": "validate that the adjustments are recalculated after a PUT with adjustment values changed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with invoice lines. The invoices are used from `Invoices` tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fc4c778-b92c-4ee8-9b64-0f5e72b3b873",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "691b5c02-bf10-4295-9730-1284565e13c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice calculated totals",
					"item": [
						{
							"name": "Create invoice with locked total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "290c37df-8127-4f1d-88ef-30e179edb281",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"delete invoice.approvedBy;",
											"delete invoice.approvalDate;",
											"invoice.lockTotal = true;",
											"invoice.total = 12.34;",
											"invoice.note += \" - locked total\";",
											"invoice.status = \"Open\";",
											"",
											"invoice.adjustments = [];",
											"invoice.adjustments.push(utils.buildAdjustmentObject(10));",
											"",
											"pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6d27b1c4-f199-4834-8c50-e466693eaaf1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"invoiceWithLockedTotalId\", invoice.id);",
											"",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(10);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add adjustments to invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c8ac269f-9a26-4fb9-a71b-adcc17ce79a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"",
											"    // The adjustment with fixed amount should affect adjustment total",
											"    invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Amount\"));",
											"    // The adjustment with percentage amount should not affect adjustment total now because there is no any line yet i.e. subTotal is 0",
											"    invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Percentage\"));",
											"",
											"    // The adjustments with 'relationToTotal' other than 'In addition to' do not affect calculated totals",
											"    let adj1 = utils.buildAdjustmentObject(100, \"Amount\");",
											"    adj1.relationToTotal = \"Included in\";",
											"    invoice.adjustments.push(adj1);",
											"",
											"    let adj2 = utils.buildAdjustmentObject(50, \"Amount\");",
											"    adj2.relationToTotal = \"Separate from\";",
											"    invoice.adjustments.push(adj2);",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22b16ca9-f561-4e8e-ad29-06301e0af797",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice without lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "062f3d85-a4c5-418b-8c15-ace2acf6598c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(35);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1118498d-049d-4891-a0e9-347862ba7ebc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Create invoice line with adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5e96102-ccbd-4f7b-b4a3-b7c895162821",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoiceLine = {};",
											"",
											"pm.test(\"Invoice Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoiceLine = pm.response.json();",
											"});",
											"",
											"pm.test(\"Calculated totals\",function(){",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c52ea71-6b0f-4b18-8c76-88c779ab915f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"",
											"invoiceLine.adjustments = [];",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceWithLockedTotalId\");",
											"invoiceLine.subTotal = 54.32;",
											"",
											"let adjustment1 = utils.buildAdjustmentObject(21.35);",
											"invoiceLine.adjustments.push(adjustment1);",
											"",
											"// Should no affect calculations",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Included in\";",
											"invoiceLine.adjustments.push(adjustment2);",
											"",
											"let adjustment3 = utils.buildAdjustmentObject(-11, \"Percentage\");",
											"invoiceLine.adjustments.push(adjustment3);",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Verify invoice line totals persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf44f19d-0ec9-4a54-833a-7ae4bb5e9841",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(1);",
											"    let invoiceLine = lines[0];",
											"",
											"    // validate calculated totals are persisted",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17a5c3d1-40e5-4fd1-8daf-657ea95df84a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "886dc384-423c-458e-bc19-4916453805e5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2612a00-eb08-42c7-9fd4-73340db033a2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice with 1 line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b8b082f-e277-4246-bec1-c195ee7f6667",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a5fe7a6-0fa4-4da1-9eb4-3420ac90e608",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Create second line with adjustment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d1bb80e-2f33-4c51-98c5-4ed248b91c7f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoiceLine = {};",
											"",
											"pm.test(\"Invoice Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoiceLine = pm.response.json();",
											"    pm.environment.set(\"invoiceWithLockedTotalSecondInvoiceLineId\", invoiceLine.id);",
											"});",
											"",
											"pm.test(\"Calculated totals\",function(){",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(6.65);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(15.87);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(22.52);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90cab2c1-171a-4d59-a37f-16316b062f25",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"invoiceLine.adjustments = [];",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceWithLockedTotalId\");",
											"invoiceLine.subTotal = 15.87;",
											"",
											"invoiceLine.adjustments.push(utils.buildAdjustmentObject(6.65));",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Verify invoice lines totals persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daa02eaf-c14a-4ccf-9f20-0c8f52cde973",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(2);",
											"    lines.forEach(invoiceLine => {",
											"        // validate calculated totals are persisted",
											"        pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.be.oneOf([15.37, 6.65]);",
											"        pm.expect(invoiceLine.subTotal, \"subTotal\").to.be.oneOf([54.32, 15.87]);",
											"        pm.expect(invoiceLine.total, \"total\").to.be.oneOf([69.69, 22.52]);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "979fabf1-45dc-4cbc-a278-2fb31fbe5265",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36602362-5990-4b23-82b6-944bede28b0c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.02 + 35 + 17.55);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b61619b6-0513-46a5-99d5-9e3e4d2a8389",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice with 2 lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36bee9de-19d5-4b7b-878b-b6d7594940d7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.02 + 35 + 17.55);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4948ef95-c0c1-4a8e-af91-9f5aa15aa276",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Set invoice's lock total to false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "84c735cd-72a3-43c2-a2f2-df3274a724db",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"",
											"    // Changing lock total to false to verify calculated total",
											"    invoice.lockTotal = false;",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ba539b5-117f-4b0d-beda-59bfcd630644",
										"exec": [
											"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify invoice total is recalculated and persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cf96016-6918-41c9-94e9-71005aa95cdc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(74.57);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(144.76);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7752b96-4347-4a5a-acd7-a793e8adebf8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Get invoice with 2 lines and non locked total",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d695c33-7f23-4161-bb53-4195309579df",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(74.57);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(144.76);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4e60725-8f58-41db-bfa3-d60ebf7ba878",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Update second line removing adjustments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3db2831f-d3e7-4824-a4c5-e9b65ef96525",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.environment.get(\"invoiceWithLockedTotalSecondInvoiceLineId\"), (err, res) => {",
											"    let invoiceLine = res.json();",
											"",
											"    delete invoiceLine.adjustments;",
											"    invoiceLine.subTotal = 8.13;",
											"",
											"    pm.variables.set(\"invoiceLineUpdatedContent\", JSON.stringify(invoiceLine));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66d6f04b-e334-4613-909c-825f5c44fbb3",
										"exec": [
											"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineUpdatedContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceWithLockedTotalSecondInvoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceWithLockedTotalSecondInvoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify second invoice line totals updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00c889b4-956c-4d5b-8b60-7dfc0cff7dee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(2);",
											"    lines.forEach(invoiceLine => {",
											"        // validate calculated totals are persisted",
											"        pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.be.oneOf([15.37, 0.0]);",
											"        pm.expect(invoiceLine.subTotal, \"subTotal\").to.be.oneOf([54.32, 8.13]);",
											"        pm.expect(invoiceLine.total, \"total\").to.be.oneOf([69.69, 8.13]);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11f29903-281b-4160-8201-8437c5b483af",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d5ed138-e501-4c3d-b2a4-727766ab5147",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.98);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(62.45);",
											"    pm.expect(invoice.total, \"total\").to.equal(128.43);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "795340b5-5693-4fa2-8965-cc3a5e5e058e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3d41d32-f081-4be7-a39c-d29bad55b1d5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.98);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(62.45);",
											"    pm.expect(invoice.total, \"total\").to.equal(128.43);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1b7ea36-9d1f-48ce-9e47-54453ae3f711",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Delete second invoice line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df8f9323-93e2-42ae-a567-4b28d1925793",
										"exec": [
											"pm.test(\"Invoice line is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithLockedTotalSecondInvoiceLineId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de62f123-487f-4069-bec8-2d2ec752c6da",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceWithLockedTotalSecondInvoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceWithLockedTotalSecondInvoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice lines for invoice - only one left",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84dd2c75-a572-4dcc-af0d-d199b10aeb18",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(1);",
											"    let invoiceLine = lines[0];",
											"",
											"    // validate calculated totals are persisted",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2179a11e-c694-427b-862e-a353366b85a2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebbfa1b9-29ea-4c01-8780-72e64b22c227",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(118.27);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98a80548-c093-4483-a334-6e37d3d4fec6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice to check totals - by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be5159c1-7f74-4aaa-bf60-56de2588a155",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(118.27);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "138fab97-a20f-4cef-950b-3789798ea1b8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Delete  invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a80f03ef-749f-4488-b3cb-4276acdb3ad9",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithLockedTotalId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30ee75e4-bbcf-40d2-9602-d76f15db8bb8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice with adjustments without lines and verify adjustmentTotal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16434125-7ba9-415d-a9a5-d0e8091e28d5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let inv = utils.buildInvoiceWithMinContent();",
											"inv.status = \"Reviewed\";",
											"inv.adjustments = [];",
											"",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"Not prorated\"));",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"By line\"));",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"By quantity\"));",
											"",
											"pm.variables.set(\"invoiceContent\", JSON.stringify(inv));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cf1f91f9-79be-4cba-bb29-15e894b8de7b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"invoiceWithAdjustmentTotalId\", invoice.id);",
											"",
											"    utils.validateInvoice(invoice);",
											"",
											"    // MODINVOICE-103",
											"    // validate calculated adjustment totals: 10(Not prorate) + 10(By line) = 20 ",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(30);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(30);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Invoice with 1 prorated and 1 not prorated adjustments with no lines - adjustmentTotal should always be calculated irrespective if there are any invoiceLines or not"
							},
							"response": []
						},
						{
							"name": "Delete invoice by id for adjustment total calculation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29cdf22a-3290-48e9-adb3-f9edf932d174",
										"exec": [
											"pm.test(\"Success response expected\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67e9956d-1679-433e-a3c1-0f062a64b63a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithAdjustmentTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithAdjustmentTotalId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests to verify calculated totals of the invoice: [MODINVOICE-52](https://issues.folio.org/browse/MODINVOICE-52).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2b0a21e3-44a6-45cd-a6a4-c5531fe5808c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16d7eac4-2d32-4fec-8b68-25cb68727b37",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prorated adjustments",
					"item": [
						{
							"name": "Invoice without lines and one prorated adjustment",
							"item": [
								{
									"name": "Create invoice with percentage adjustment prorated by line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dea041a-1c5f-4075-a9ae-73089717fdb3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let invoice = utils.prepareInvoice(utils.buildInvoiceWithMinContent(\"MODINVOICE-54\"));",
													"",
													"invoice.note += \" - prorated adjustments\";",
													"invoice.status = \"Open\";",
													"",
													"invoice.adjustments = [utils.buildAdjustmentObject(10, \"Percentage\", \"By line\")];",
													"",
													"pm.variables.set(\"invoiceContentBody\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "625ea711-6426-47cb-a88d-8de09bd1dabe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsId\", invoice.id);",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    // The invoice has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate totals are zero",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContentBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice without lines yet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e8d1221-3a86-40c3-8d0c-8b0cc3eafdee",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"One adjustment and zero totals\", function() {",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"    // The invoice has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b3a2635f-abd7-45ba-b712-1173b6d583a5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add first line",
							"item": [
								{
									"name": "Create invoice line with 1 non prorated adjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0427d38e-5c79-492c-89c7-e0388413885b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsId\", invoiceLine.id);",
													"",
													"    // The invoice line has one non prorated and one prorated adjustments.",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 1);",
													"",
													"    // 2 adjustments. Total adj amount is 10% of 100.15 plus 11.11",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dbfd717-cb0d-46fd-b7b3-a7df54240190",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 100.15;",
													"invoiceLine.quantity = 5;",
													"invoiceLine.adjustments = [utils.buildAdjustmentObject(11.11)];",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify invoice line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfc51337-48e5-4efe-84f7-aff8f143441c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and one prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 1);",
													"",
													"    // 2 adjustments. Total adj amount is 10% of 100.15 plus 11.11",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c9fae2d0-9feb-45dc-a59e-8a1d4bd091f8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with one line and one prorated adj",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3903bf62-e9ef-4f32-894b-f48197715613",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate totals\", function() {",
													"    // The invoice still has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate calculated totals - same as in line",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoice.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bc8d06eb-f019-485b-90cf-3bb62728f811",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add second prorated adjustment",
							"item": [
								{
									"name": "Add fixed amount adjustment prorated by line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7243596e-e0b2-43e0-bbef-269bdc2bf8a1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Amount\", \"By line\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7c5e82b0-37b6-45ad-bdcc-6d358f65d349",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with one line and two prorated adj",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "616609d7-493f-4619-b82b-18916eed5bcb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // The invoice has 2 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - same as in line",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(46.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoice.total, \"total\").to.equal(146.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d491882c-4332-4f75-bd4a-11842f2b658d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d02b61b-e6ef-47a3-b2f5-d7595fe7239d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 10% of 100.15 plus 11.11 plus 25",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(46.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(146.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12986e68-4066-487f-a35b-aad7272f96e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add second line",
							"item": [
								{
									"name": "Create invoice line without non prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aaf59364-f1a3-4d6d-a483-4affcbd329f1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine2WithProratedAdjustmentsId\", invoiceLine.id);",
													"",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // 2 adjustments. Total adj amount is 5% of 200.20 plus 12.5",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.51);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(222.71);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8a7bf43f-e718-44d1-b72f-e3625e6910bb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 200.20;",
													"invoiceLine.quantity = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31a34123-db8e-4704-b0a0-8975638e9b91",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 5% of 200.20 plus 12.5",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.51);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(222.71);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e72de3d-9799-4a35-ba4d-c81c007ec42e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ba3fa21-4ecf-41ce-a89a-572d034ecd48",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 11.11 plus 5% of 100.15 (10% devided by 2) plus 12.5 (25 devided by 2)",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(28.62);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(128.77);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "868988af-bc4c-4f46-b7c0-e88e90ee9ae3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b55b51fa-f6f5-4a88-869f-c8cdfe4a2a6e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 2 prorated adjustments",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(51.13);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(351.48);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e68c2597-9517-40a9-99d8-dc6e299e52ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add third prorated adjustment",
							"item": [
								{
									"name": "Add fixed amount adjustment prorated by amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a343b058-84cc-4dc2-adcb-284f3dcb0e15",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(50, \"Amount\", \"By amount\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "792d5281-1712-47f3-a0b9-a7f2259ea1d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals - 3 prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df7d9532-2523-4d28-8c5c-7f4bee4a88e8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 3 prorated adjustments",
													"    utils.validateInvoiceProratedAdjustments(invoice, 3);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(101.13);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(401.48);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e99d94b2-bec3-4a46-bcf9-24f278aea02f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e926dc5d-a757-4e97-80fc-401229a3ee18",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 3);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 5% of 100.15 (10% devided by 2)",
													"     * 3. 12.5 (25 devided by 2)",
													"     * 4. 16.67 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(45.29);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(145.44);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "adeb1884-450e-4877-ace8-52ea5e3ff2ae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "000f4aeb-1059-4992-8dfa-140680b158f3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 3);",
													"",
													"    // 3 adjustments. Total adj amount is 5% of 200.20 (10% devided by 2) plus 12.5 (25 devided by 2) plus 33.33 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(55.84);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(256.04);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06d7f3ea-027b-4afe-8c27-580d7521de21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add fourth prorated adjustment",
							"item": [
								{
									"name": "Add percentage adjustment prorated by amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d7ab69ae-c4f6-4bfe-8bfb-70f806b4cf0a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(5, \"Percentage\", \"By amount\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "513ca8c9-225b-4ed3-9578-517480904488",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals - 4 prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0149fdaf-fd8d-4d68-82b8-83de5ae39bbe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 4);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(116.15);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(416.50);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6d17b80d-2866-445a-8349-a7a3a3959136",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2722e7aa-4bb8-4ceb-b2a0-f20b69956563",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 5% of 100.15 (10% devided by 2)",
													"     * 3. 12.5 (25 devided by 2)",
													"     * 4. 16.67 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 5. 5% of 100.15 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(50.30);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(150.45);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2ae13f92-5f46-4f89-a09d-63a44983e4c6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91927898-e522-45d7-a9f6-9e3563d4b785",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 5% of 200.20 (10% devided by 2)",
													"     * 2. 12.5 (25 devided by 2)",
													"     * 3. 33.33 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 5% of 200.20 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.85);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(266.05);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7659962d-5974-4d7c-b5f6-a1e6d2647cd0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add third line",
							"item": [
								{
									"name": "Create invoice line without non prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4340be18-5093-418c-97b9-d3ca0095ced6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsId\", invoiceLine.id);",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    invoiceLine.adjustments.forEach(adjustment => pm.expect(adjustment, \"adjustment must have id to invoice's adjustment\").to.exist);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(44.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(244.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "897fcca8-f755-4b6d-96ab-fd2f6bda2bb3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 199.65;",
													"invoiceLine.quantity = 30;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify third line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab206f66-d8e0-46f5-bd5b-1d8e451f670a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(44.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(244.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22c2b42c-ac11-4dfd-8bd5-c7e619851c4b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b22bb33b-9ebc-4c2d-99ee-ba3f85a7b166",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 3.3383333333333329995 i.e. 3.333..% (10% devided by 3) of 100.15",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 10.02 (portion of 50 proportionate to the invoiceLine's (100.15) contribution to the invoice subTotal (500))",
													"     * 5. 5.0075 i.e. 5% of 100.15 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(37.81);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(137.96);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8448465d-a260-46b3-8e8a-cd12ba6697da",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b81405f3-d4d3-44a8-94f2-760acf3bd92a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 20.02 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal (500))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(45.03);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(245.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fcebb388-2d3a-441a-b84c-5ee848a64d6c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9826f164-c855-4492-85cb-a8e9bfb4792c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 4);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(127.78);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(500);",
													"    pm.expect(invoice.total, \"total\").to.equal(627.78);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8525e7ce-479a-47c3-a71d-4b4764544092",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add fifth prorated adjustment",
							"item": [
								{
									"name": "Add amount adjustment prorated by quantity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9e04bae1-dc49-47e8-a982-1eba1858fe4e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(125, \"Amount\", \"By quantity\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c3e4a18b-3b39-44fe-abb8-4065f563354f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd0d2728-daae-47ac-a914-f8e01256d14c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(252.78);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(500);",
													"    pm.expect(invoice.total, \"total\").to.equal(752.78);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b8538424-58c8-4e16-923f-49273b1fb69c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbd10a9a-91b5-4821-a496-5ecd660bc170",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 3.3383333333333329995 i.e. 3.333..% (10% devided by 3) of 100.15",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 10.02 (portion of 50 proportionate to the invoiceLine's (100.15) contribution to the invoice subTotal (500))",
													"     * 5. 5.0075 i.e. 5% of 100.15 (5% adjustment is added to each line)",
													"     * 6. 12.5 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(50.31);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(150.46);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "709e81e0-439d-4636-a230-1b0fe8dba394",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f01aa092-9d1f-4bbd-86e0-b504ca74bece",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 20.02 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal (500))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 37.5 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(82.53);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(282.73);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f79ff671-b2d6-445c-afc1-80bc83d82591",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36c87e6c-d0aa-489a-b085-5359005c9bba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 75 (portion of 125 proportionate to the invoiceLine's quantity (30) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(119.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(319.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cbb915d-eaa2-42df-8e18-fa09ad236c30",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make subTotal of  first line negative",
							"item": [
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1248387e-c5a0-4b89-9641-4a4f17215273",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.subTotal = -399.85;",
													"",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ce474a2b-1234-40c0-ac04-c95e35f72850",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2eb0088a-8f2b-40e2-b642-9c4747e90744",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 13.3283333333333320005 i.e. 3.333..% (10% devided by 3) of abs(-399.85)",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 25 (portion of 50 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 12.5 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(90.26);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-309.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32bb210b-6703-40ba-896e-12c2b201f576",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4d80ac6-42e4-4678-a323-1e8fd1c0a918",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 12.52 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 37.5 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(75.03);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(275.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60c18abb-c1dd-4d3f-9803-d43580455b7e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "854eaffc-d46d-4862-b800-0df3973bc6ba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 12.48 (portion of 50 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (799.7))",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 75 (portion of 125 proportionate to the invoiceLine's quantity (30) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(112.46);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(312.11);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99147d27-f7a7-4f1f-8ff2-981ebf95907c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bffaebfd-3ada-470b-bfe6-d1dd5725c3ee",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(277.75);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(277.75);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2588087a-4857-418b-b390-e7558ffc221f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make adjustments value so that they are not evenly distributed.",
							"item": [
								{
									"name": "Update third line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e0742acb-5450-4ca3-bbaf-e389136cb737",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine3WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.quantity = 11;",
													"",
													"pm.variables.set(\"invoiceLine3WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "45ae47f0-9493-4d21-861f-ed8126a8e563",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine3WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update adjustments value so that they are not evenly distributed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97f7ce22-5f1c-48d3-830c-10c829075279",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"invoice.adjustments.push(utils.buildAdjustmentObject(125, \"Amount\", \"By quantity\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(50.05, \"Amount\", \"By amount\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(26, \"Amount\", \"By line\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "24de20c6-ce51-41b6-9834-a754841e764f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a02f3322-1d64-44b6-bd61-1c0586fb92d9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(278.8);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(278.8);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ef8b8aa8-55e7-42c6-adcc-ea9b6ca125e3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26327d02-c850-4234-ae86-0e798944a5d7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 13.3283333333333320005 i.e. 3.333..% (10% devided by 3) of abs(-399.85)",
													"     * 3. 8.66 (26 devided by 3)",
													"     * 4. 25,02 (portion of 50,05 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 20,16 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (31))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.66);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(25.02);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(20.16);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(98.27);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-301.58);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "619bea63-974c-48d3-aed5-9bbc90d8c8a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47cd2b7c-d8e9-4df7-8f21-affe9fa185d4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.66 (26 devided by 3) + 0.01 extra penny",
													"     * 3. 12.53 (portion of 50.05 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 60,48 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (31))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.67);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(12.53);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(60.48);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(98.36);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(298.56);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e87c16f8-d33a-4ee9-9cd0-1b2ebfd8df4c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "949f7bcb-ab58-4338-abe5-499e71eaf80a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.66 (26 devided by 3) + 0.01 extra penny",
													"     * 3. 12.49 (portion of 50.05 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (799.7)) + extra penny",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 44,35 (portion of 125 proportionate to the invoiceLine's quantity (11) contribution to the total quantity (31)) + 1 extra penny",
													"     */",
													"     ",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.67);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(12.50);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(44.36);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(82.17);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(281.82);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f54696ff-83d8-49e1-9cdd-79c6959bb3ac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete second line",
							"item": [
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "856fc215-f780-416c-9cad-0c7b4c2ec4aa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d44cab3-ce66-498a-8968-80efe5676f44",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fd81df8-37e1-4222-a401-68c60eb4d01b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 19.9925 i.e. 5% (10% devided by 2) of abs(-399.85)",
													"     * 3. 13 (26 devided by 2)",
													"     * 4. 33.38 (portion of 50.05 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (599.5))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 39.06 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (16))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(136.54);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-263.31);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "34d74183-9653-4deb-a259-5221b7c248c2",
												"exec": [
													"// Wait for 1 second before sending request",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify former \"third\" line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb87981d-416f-45e8-ab3b-edf3329fe534",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 9.9825 i.e. 5% of 199.65 (10% devided by 2) ",
													"     * 2. 13 (26 devided by 2)",
													"     * 3. 16.67 (portion of 50.05 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (599.5))",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 85.94 (portion of 125 proportionate to the invoiceLine's quantity (11) contribution to the total quantity (16))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(135.58);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(335.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4846c975-8c54-4dfe-82e0-1f900109ea5e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dab2c14b-9d20-47a6-8bc9-b8b71813df30",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(272.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(-200.20);",
													"    pm.expect(invoice.total, \"total\").to.equal(71.92);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f82b592c-23d7-437e-b17c-4516a9ad7f68",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make adjustments value negative and that they are not evenly distributed.",
							"item": [
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c72a006e-6123-4892-ac93-572f0bd81d68",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 200;",
													"invoiceLine.adjustments = [utils.buildAdjustmentObject(11)];",
													"",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7e45ae83-1950-4977-a3ab-14c403f43fb9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update third line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52dc35ea-f25e-470f-a0f3-16d5467756db",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine3WithProratedAdjustmentsContent\"));",
													"",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 200;",
													"",
													"pm.variables.set(\"invoiceLine3WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a294527c-7700-4ee1-a247-dfd483012c4b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine3WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update adjustments value so that they are not evenly distributed. Set currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "26972576-ed69-4667-a4d3-56c5e2e76894",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-125, \"Amount\", \"By quantity\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-51, \"Amount\", \"By amount\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-25, \"Amount\", \"By line\"));",
													"invoice.currency = \"JPY\";",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "277d895c-fed9-437d-b114-7e3b33986e8d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5c5f61a-db4a-4056-a7b6-0111ba58193b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-150);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(400);",
													"    pm.expect(invoice.total, \"total\").to.equal(250);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ade29502-4b1d-4647-b837-6cb8b3ca4702",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72cf9755-51e7-41e9-a0a2-ef779ceb4009",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11 not prorated adjustment",
													"     * 2. 10 i.e.5% (10% devided by 2) of abs(200)",
													"     * 3. -12 (-25 devided by 2)",
													"     * 4. -25 (portion of -51 proportionate to the invoiceLine's abs(200) contribution to the invoice subTotal by absolute value (400))",
													"     * 5. 10 i.e. 5% of abs(200) (5% adjustment is added to each line)",
													"     * 6. -62 (portion of -125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (10))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(-12);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(-25);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(-62);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-68);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(132);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "287f1d2b-faf3-4ee5-aecf-3b0578cd26f8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87adc882-d38e-42b0-bb3d-d4c9db3bd197",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 10 i.e. 5.% of 200 (10% devided by 2) ",
													"     * 2. -12 (-25 devided by 3) - 1 extra yena",
													"     * 3. -25 (portion of -51 proportionate to the invoiceLine's contribution (200) to the invoice subTotal by absolute value (400)) - extra yena",
													"     * 4. 10 i.e. 5% of 200 (5% adjustment is added to each line)",
													"     * 5. -62 (portion of -125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (10)) - 1 extra yena",
													"     */",
													"     ",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"        pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(-13);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(-26);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(-63);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-82);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(118);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69c7ab87-7cea-4111-9a90-eb9e536f97eb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d91f4155-2fca-48c5-b601-2b3f4f93e441",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "50ad1393-4b04-4296-b689-7d9133511221",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove prorated adjustments with amount value",
							"item": [
								{
									"name": "Update invoice leaving only percentage prorated adjustments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b85fa158-e73d-4073-8f4c-38f8f79b0996",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "10406559-72b8-43fd-bc79-44e00e0aee89",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e11f0596-14d6-4823-995b-e606d8c10d5e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 2 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(51);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(400);",
													"    pm.expect(invoice.total, \"total\").to.equal(451);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d17adee-91d4-4c29-907f-83efb86a0751",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31d30429-b030-455d-bc0c-2091e378624e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 2 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11 (non prorated adjustment)",
													"     * 2. 10 i.e. 5% (10% devided by 2) of abs(200)",
													"     * 3. 10 i.e. 5% of abs(200) (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(31);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(231);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ebd3354-924d-4bc7-87b3-3a81295cbc31",
												"exec": [
													"// Wait for 1 second before sending request",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify former \"third\" line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ea89bad-f1d8-44e0-ae71-8750671e15a9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 10 i.e. 5% of 200 (10% devided by 2) ",
													"     * 2. 10 i.e. 5% of 200 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(20);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(220);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88de5f0b-83fe-4b18-b146-0685cf0e20dc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete  invoice with prorated adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bcc6cf4-22e7-4154-afd6-38e1d1b3c55e",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceWithProratedAdjustmentsContent\");",
											"    pm.environment.unset(\"invoiceLine1WithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceLine1WithProratedAdjustmentsContent\");",
											"    pm.environment.unset(\"invoiceLine2WithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceLine3WithProratedAdjustmentsId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "694f66c9-e540-47b3-8d22-50b10d21c71d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithProratedAdjustmentsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bebd009-9d87-4a8c-aa34-239d0513b498",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Voucher\", function () {",
											"    pm.response.to.have.status(200);",
											"    voucher = pm.response.json();",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    utils.validateVoucher(voucher);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2bc33a0d-57ab-4109-aa84-959689ea551e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/vouchers/vouchers.json\", function (err, res) {",
											"    let voucher = res.json().vouchers[0];",
											"    voucher.invoiceId = pm.environment.get(\"minInvoiceId\");",
											"    delete voucher.id;",
											"    delete voucher.metadata;",
											"    voucher.voucherNumber = \"APITESTS\";",
											"    ",
											"  utils.sendPostRequest(\"/voucher-storage/vouchers\", voucher, function(err,response){",
											"      pm.test(\"voucher is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.environment.set(\"voucherId\", response.json().id);",
											"      });",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get vouchers and filter by query param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86659a3d-d8a9-4d3e-94b5-56da4c2cf3d6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let vouchers = [];",
											"",
											"pm.test(\"Successfully get Vouchers\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    vouchers = pm.response.json().vouchers;",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    vouchers.forEach(voucher => utils.validateVoucher(voucher));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7065d3e-08b5-413d-862b-05d6d4c1f6fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers?query=voucherNumber=APITESTS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers"
									],
									"query": [
										{
											"key": "query",
											"value": "voucherNumber=APITESTS"
										}
									]
								},
								"description": "The test gets list of voucher"
							},
							"response": []
						},
						{
							"name": "Edit voucher editable fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8d20cbd-c95b-4873-b9c8-f95c99b79bed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => utils.validateVoucher(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d17432bd-4463-477d-aa48-1c7fe7a5123f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify editable fields",
											"    voucher.voucherNumber = \"APITESTS123\";",
											"    voucher.disbursementNumber = \"EFT123456\";",
											"    voucher.disbursementDate = \"2020-05-05T00:00:00.000+0000\";",
											"    voucher.disbursementAmount = 4.0;",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf17c6d8-8872-4ec3-b7c3-6eec4ded7d2e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2149ecfc-096a-4998-ae33-fb299dd298c8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch Vouchers",
					"item": [
						{
							"name": "Get batch voucher by id JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab739a70-437a-4fbd-82fc-94e17a85e39d",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fca3bc16-4e30-409c-84ed-fe2b0bfc253f",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVouchers/35657479-83b9-4760-9c39-b58dcd02ee14.json\", function (err, res) {\r",
											"    let batchVoucher = res.json();\r",
											"    delete batchVoucher.id;\r",
											"    \r",
											"  utils.sendPostRequest(\"/batch-voucher-storage/batch-vouchers\", batchVoucher, function(err,response){\r",
											"      pm.test(\"batchVoucher is created in storage\", function(){\r",
											"          pm.expect(err).to.equal(null);\r",
											"          pm.expect(response).to.have.property('code', 201);\r",
											"          pm.environment.set(\"validBatchVoucherId\", response.json().id);\r",
											"      });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get batch voucher by id XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b555c16-efa1-459f-a974-c6c44e2afeba",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(200);",
											"    let jsonData = xml2Json(pm.response.body);",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/xml\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "86df1b54-28d0-4024-80b6-772a7f10ec03",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVouchers/35657479-83b9-4760-9c39-b58dcd02ee14.json\", function (err, res) {\r",
											"    let batchVoucher = res.json();\r",
											"    delete batchVoucher.id;\r",
											"    \r",
											"  utils.sendPostRequest(\"/batch-voucher-storage/batch-vouchers\", batchVoucher, function(err,response){\r",
											"      pm.test(\"batchVoucher is created in storage\", function(){\r",
											"          pm.expect(err).to.equal(null);\r",
											"          pm.expect(response).to.have.property('code', 201);\r",
											"          pm.environment.set(\"validBatchVoucherId\", response.json().id);\r",
											"      });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e59bb87-9f12-4092-a191-27ae6145a3fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "91ef5886-b531-4aef-8056-7edf834720cd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Get voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fb2e1651-aa57-4ca3-8703-5e2269c980a0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/voucherLines/voucher_lines.json\", function (err, res) {",
													"    let voucherLine = res.json().voucherLines[0];",
													"    voucherLine.voucherId = pm.environment.get(\"voucherId\");",
													"    delete voucherLine.id;",
													"    ",
													"  utils.sendPostRequest(\"/voucher-storage/voucher-lines\", voucherLine, function(err,response){",
													"      pm.test(\"voucherLine is created in storage\", function(){",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"voucherLineId\", response.json().id);",
													"      });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e41d6dae-fedd-4475-a206-d11ca1d01c19",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Successfully get Voucher line\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucher = pm.response.json();",
													"});",
													"",
													"pm.test(\"Voucher line content is valid\", function() {",
													"    utils.validateVoucherLine(voucher);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get voucher lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6247cbbc-7563-46cd-80e9-8a4a4da2014a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c65b8564-6d98-4796-b00a-6886b636f3b0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let voucherLines = {};",
													"",
													"pm.test(\"Successfully get Voucher lines\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucherLines = pm.response.json();",
													"    pm.expect(voucherLines.voucherLines.length).to.be.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines"
											]
										},
										"description": "GET /voucher/voucher-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get voucher lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "77f92689-acdc-403c-a50c-a3a269ede7cf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ee7f1f6c-5f85-49fd-91b3-9f88fa194b3e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let voucherLines = {};",
													"",
													"pm.test(\"Successfully get Voucher lines\", function() {",
													"    pm.response.to.have.status(200);",
													"    voucherLines = pm.response.json();",
													"    pm.expect(voucherLines.voucherLines.length).to.be.above(0);",
													"});",
													"",
													"pm.test(\"Voucher line response is valid\", function() {",
													"    voucherLines.voucherLines.forEach(vLine => {",
													"        pm.expect(vLine.amount).to.be.above(30);",
													"        utils.validateVoucherLine(vLine);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=amount>/number 30",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines"
											],
											"query": [
												{
													"key": "query",
													"value": "amount>/number 30"
												}
											]
										},
										"description": "GET /voucher/voucher-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "752a57c8-d7ff-4f34-aa5e-3eca5311df86",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Voucher line and update voucherLineAmount only (MODINVOICE-40)",
													"utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"    let voucherLine  = res.json();",
													"    let updatedVoucherLineAmount = 10.00;",
													"    voucherLine.amount = updatedVoucherLineAmount;",
													"    pm.variables.set(\"updatedVoucherLineAmount\", updatedVoucherLineAmount);",
													"    pm.variables.set(\"updatedVoucherLine\", JSON.stringify(voucherLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8247f258-b605-4a45-a216-1e87c32016dc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeeded",
													"    utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"        pm.test(\"Verify voucher line updated with new VoucherLine Amount\", () => pm.expect(res.json().amount).to.equal(pm.variables.get(\"updatedVoucherLineAmount\")));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedVoucherLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with voucher lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "12fe5949-e48a-485a-9b29-be573cc8e23b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28da2290-e880-4f62-b0e6-afc0b1602101",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(set) current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ca28dfd0-d656-4b87-becf-53c7610648bb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fb3b6c07-1039-471e-bacc-883382b9b668",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully re(set) voucher start value\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "95f84abe-804f-4fd2-a38a-ea415dc3d3f9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d06b069f-74b2-4773-8261-4f07f105599e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully got voucher start value\", function () {",
											"    pm.response.to.have.status(200);",
											"    utils.validateSequenceNumber(pm.response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with voucher number configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6490c67-0e03-49dc-8317-51234519d091",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "94173fa3-c6e1-4ed8-afeb-6a46886999e8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Workflows with configs",
							"item": [
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice with 4 lines, 2 of lines have negative total",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dbbde6a4-8700-4626-83cc-817a4ad2787f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"workflow-invoiceWith4LinesId\", invoice.id);",
															"    pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"    createLines(invoice.id);",
															"  ",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(0);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															"",
															"",
															"function createLines(invoiceId) {",
															" ",
															"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
															"",
															"    // Now creating 4 invoice lines",
															"    for (let i = 1; i < 5; i++) {",
															"        if (i % 2 === 0) {",
															"            invoiceLine.poLineId = pm.globals.get(\"poLine1Id\");",
															"        } else {",
															"            invoiceLine.poLineId = pm.globals.get(\"poLine2Id\");",
															"            invoiceLine.subTotal = -invoiceLine.subTotal;",
															"        }",
															"  ",
															"        invoiceLine.releaseEncumbrance = i === 4;",
															"        ",
															"        utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
															"            pm.test(\"Invoice line #\" + i + \" is created in storage\", () => {",
															"              pm.expect(err).to.equal(null);",
															"              pm.expect(response).to.have.property('code', 201);",
															"            });",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "aa68b452-59b2-4150-b5ad-fd5af5f1a91d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
															"",
															"invoice.note += \" - with 4 lines for transition through workflow\";",
															"invoice.status = \"Open\";",
															"invoice.currency=\"EUR\";",
															"",
															"delete invoice.adjustments;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a4ee5bc4-4767-4d93-8269-98b129b977b5",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "97ccaebf-1cc8-4e1e-a570-868563f0f6a4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Verify that voucher has been created",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"One voucher created\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    let voucher = res.json().vouchers[0];",
															"                    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"                    pm.environment.set(\"workflow-voucherWith4LineId\", voucher.id);",
															"                    let voucherNumberPrefixValue = JSON.parse(pm.variables.get(\"voucherNumber\")).voucherNumberPrefix;",
															"                    pm.expect(voucher.voucherNumber).to.include(voucherNumberPrefixValue);",
															"                    //check acqUnitIds list of invoice and created voucher are equal",
															"                    pm.expect(utils.arraysOfStringsAreEqual(invoice.acqUnitIds, voucher.acqUnitIds)).to.be.true;",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check voucher lines created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f32d2786-f2a9-47e4-abbd-09f2a42d9700",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6a9ed25e-c4ed-4e86-9a69-73c054d6f8ca",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucherLines = {};",
															"",
															"pm.test(\"Successfully get voucher lines\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucherLines = pm.response.json().voucherLines;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of voucher lines\", function() {",
															"",
															"    pm.expect(voucherLines).to.have.length(1);",
															"});",
															"",
															"pm.test(\"Check all lines have amount type distributions\", function() {",
															"    voucherLines[0].fundDistributions.forEach(distr => pm.expect(distr.distributionType).is.to.equal(\"amount\"));",
															"});",
															"",
															"pm.environment.unset(\"workflow-voucherWith4LineId\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=voucherId=={{workflow-voucherWith4LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"voucher-lines"
													],
													"query": [
														{
															"key": "query",
															"value": "voucherId=={{workflow-voucherWith4LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "33052e87-e9a6-4d3c-99a6-dd20829cac5f",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "21da2233-5982-4235-bddb-255c28f3edd2",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Validate voucher",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"Still only one voucher but already Paid\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    pm.expect(res.json().vouchers[0].status).to.eql(\"Paid\");",
															"                });",
															"            });",
															"",
															"            // Validate order lines",
															"            utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
															"                pm.test(\"Associated order lines payment status updated\", function () {",
															"                    res.json().compositePoLines.forEach(poLine => {",
															"                        let expectedStatus = (poLine.id === globals.poLine1Id) ? \"Fully Paid\" : \"Partially Paid\";",
															"                        pm.expect(poLine.paymentStatus).to.equal(expectedStatus);",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check number of payments created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "209c47d5-9106-4849-9dcc-ae76f9fd50fb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f34d9d85-86ca-4f37-bdbe-43c83dd40e1b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of payments\", function() {",
															"",
															"    pm.expect(transactions).to.have.length(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check number of credits created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "467bee24-d840-4670-8465-b8581f23ee01",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3e312080-4f51-4a52-9330-a575c12f9ef9",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of credits\", function() {",
															"    pm.expect(transactions).to.have.length(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Credit",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Credit"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Workflows with empty configs",
							"item": [
								{
									"name": "Delete invoice configs",
									"item": [
										{
											"name": "Get invoice configs and delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35d87fc2-8428-4a07-9a70-251c49271acc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let currentConfigs;",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"",
															"    currentConfigs = pm.response.json().configs;",
															"    console.log(\"Current configs: \", currentConfigs);",
															"});",
															"",
															"let configsToProcess = globals.testData.invoicesConfigs.configNames;",
															"for (var i = 0; i < configsToProcess.length; i++) {",
															"    let configName = configsToProcess[i];",
															"     if (currentConfigs.length > 0) {",
															"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
															"        utils.deleteConfig(configId);",
															"    } else {",
															"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f3f1f205-dba1-4d3a-aeb9-a1c723c9b028",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICE"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4e9ff109-a32f-45f0-995a-b990768dfcb6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineId\", invoice.id);",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(10);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(10);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e3c39aae-47d4-40ad-853b-17208004401e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
															"",
															"invoice.note += \" - with 1 line for transition through workflow\";",
															"invoice.status = \"Open\";",
															"",
															"invoice.adjustments[0].fundDistributions = [{",
															"    \"fundId\": pm.environment.get(\"fund2Id\"),",
															"    \"distributionType\": \"percentage\",",
															"    \"value\": 50",
															"},",
															"{",
															"    \"fundId\": pm.environment.get(\"fundId\"),",
															"    \"distributionType\": \"amount\",",
															"    \"value\": 5",
															"}]",
															"delete invoice.voucherNumber;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create order-summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ad3c18d0-9c9e-4cb9-a610-d1a598169795",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Order transaction summaries line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "10bd21f4-e397-4a1b-8495-89de8246f9ac",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\": \"{{completeOrderId}}\",\n\t\"numTransactions\": 2\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 1st encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b6d93be1-1330-4160-a0a2-ebb86aeba01c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Encumbrance is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    transaction = pm.response.json();",
															"    pm.environment.set(\"encumbranceId1\", transaction.id);",
															"    pm.environment.set(\"encumbrance1\", JSON.stringify(transaction));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7a89c9bb-6fa3-4177-8d75-7b7b3ced816a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 1500,\n  \"currency\": \"USD\",\n  \"description\": \"PO_Line: History of Incas\",\n  \"encumbrance\": {\n    \"amountAwaitingPayment\": 0,\n    \"initialAmountEncumbered\": 1500,\n    \"status\": \"Unreleased\",\n    \"orderType\":  \"Ongoing\",\n    \"subscription\": false,\n    \"reEncumber\": true,\n    \"sourcePurchaseOrderId\": \"{{completeOrderId}}\",\n    \"sourcePoLineId\": \"{{poLine1Id}}\"\n  },\n  \"sourceInvoiceId\": \"{{emptyConfigWorkflow-invoiceWith1LineId}}\",\n  \"fiscalYearId\": \"{{fiscYearId}}\",\n  \"fromFundId\": \"{{fundId}}\",\n  \"source\": \"PoLine\",\n  \"transactionType\": \"Encumbrance\" \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 2nd encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fa35542-4644-40ed-9c8c-8c0ef3dfa6e0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Encumbrance is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    transaction = pm.response.json();",
															"    pm.environment.set(\"encumbranceId2\", transaction.id);",
															"    pm.environment.set(\"encumbrance2\", JSON.stringify(transaction));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "69e16b78-f939-4f22-9fa8-a9a956868ed0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 1000,\n  \"currency\": \"USD\",\n  \"description\": \"PO_Line: History of Incas\",\n  \"encumbrance\": {\n    \"amountAwaitingPayment\": 0,\n    \"initialAmountEncumbered\": 1000,\n    \"status\": \"Unreleased\",\n    \"orderType\":  \"Ongoing\",\n    \"subscription\": false,\n    \"reEncumber\": true,\n    \"sourcePurchaseOrderId\": \"{{completeOrderId}}\",\n    \"sourcePoLineId\": \"{{poLine2Id}}\"\n  },\n  \"sourceInvoiceId\": \"{{emptyConfigWorkflow-invoiceWith1LineId}}\",\n  \"fiscalYearId\": \"{{fiscYearId}}\",\n  \"fromFundId\": \"{{fund2Id}}\",\n  \"source\": \"PoLine\",\n  \"transactionType\": \"Encumbrance\" \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice line without poLineId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7f9eb760-90f3-49f0-b2ef-2911b6681b4c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Invoice line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "be3b7fed-dd65-450d-a5b4-762c7aa5dc9e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"",
															"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"));",
															"    invoiceLine.subTotal = 101;",
															"    invoiceLine.fundDistributions[0].value = 50;",
															"    invoiceLine.fundDistributions[0].encumbrance = pm.environment.get(\"encumbranceId1\");",
															"    let amoutDistribution = {\"fundId\": invoiceLine.fundDistributions[0].fundId, \"distributionType\": \"amount\", \"value\": 55.6, \"encumbrance\" : pm.environment.get(\"encumbranceId2\")};",
															"    invoiceLine.fundDistributions.push(amoutDistribution);",
															"    delete invoiceLine.poLineId;",
															"",
															"pm.variables.set(\"emptyConfigWorkflow-invoiceLineContent\", JSON.stringify(invoiceLine));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceLineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoice-lines"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 1 line",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "254446fb-e72a-4f2e-87ad-61b300429353",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e824a959-b5b6-4c54-89dc-257133e3c7c6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"            ",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"            // Verify that voucher has been created",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"One voucher created\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    let voucher = res.json().vouchers[0];",
															"                    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"                    pm.environment.set(\"emptyConfigWorkflow-voucherWith1LineId\", voucher.id);",
															"                    let voucherNumberPrefixValue = JSON.parse(pm.variables.get(\"voucherNumber\")).voucherNumberPrefix;",
															"                    pm.expect(voucher.voucherNumber).to.not.include(voucherNumberPrefixValue);",
															"                    //check acqUnitIds list of invoice and created voucher are equal",
															"                    pm.expect(utils.arraysOfStringsAreEqual(invoice.acqUnitIds, voucher.acqUnitIds)).to.be.true;",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get voucher lines by query",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bb01e7f6-a11b-4096-9ad0-4611ead84314",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9add60fb-9e5f-4d8d-82e5-4fe4e43f6e5e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucherLines = {};",
															"",
															"pm.test(\"Successfully get Voucher lines\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucherLines = pm.response.json();",
															"    pm.expect(voucherLines.voucherLines.length).to.equal(2);",
															"});",
															"",
															"pm.test(\"Check all lines have amount type distributions\", function() {",
															"   voucherLines.voucherLines.forEach(line => line.fundDistributions.forEach(distr => pm.expect(distr.distributionType).is.to.equal(\"amount\")));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=voucherId=={{emptyConfigWorkflow-voucherWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"voucher-lines"
													],
													"query": [
														{
															"key": "query",
															"value": "voucherId=={{emptyConfigWorkflow-voucherWith1LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Get 1st encumbrance to check is has been updated during Invoice approval",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "44570ff5-8423-4a02-ab30-9ad6de2d7c69",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a0aecdd5-f685-4947-bdc7-5c584f24e7d4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Successfully get encumbrance\", function() {",
															"    pm.response.to.have.status(200);",
															"    transaction = pm.response.json();",
															"});",
															"",
															"pm.test(\"Encumbrance has been updated\", function() {",
															"    var transactionBefore = JSON.parse(pm.environment.get(\"encumbrance1\"));",
															"    pm.expect(transaction.encumbrance.amountAwaitingPayment).to.be.above(transactionBefore.encumbrance.amountAwaitingPayment);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{encumbranceId1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{encumbranceId1}}"
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Get 2nd encumbrance to check is has been updated during Invoice approval",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3a514c43-c4a6-4b66-b91b-213df398a2ef",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b95ab55c-5b6c-4e0e-9fbf-d7b256cae0bd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Successfully get encumbrance\", function() {",
															"    pm.response.to.have.status(200);",
															"    transaction = pm.response.json();",
															"});",
															"",
															"pm.test(\"Encumbrance has been updated\", function() {",
															"    var transactionBefore = JSON.parse(pm.environment.get(\"encumbrance2\"));",
															"    pm.expect(transaction.encumbrance.amountAwaitingPayment).to.be.above(transactionBefore.encumbrance.amountAwaitingPayment);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{encumbranceId2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{encumbranceId2}}"
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with line w/o poLineId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2354d350-360d-4ced-b395-3dc710f9273a",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "de4ed11d-6f8c-4495-b87a-1cdd0a5a15d6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"            // Validate voucher",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"Still only one voucher but already Paid\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    pm.expect(res.json().vouchers[0].status).to.eql(\"Paid\");",
															"                });",
															"            });",
															"",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check number of payments created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "03f10d98-dbf5-4582-b63c-6d4e90641df2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3eb7b097-0c82-45df-8768-51eaa483c7d2",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of payments\", function() {",
															"",
															"    pm.expect(transactions).to.have.length(4);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Restore invoice configs",
									"item": [
										{
											"name": "Check invoice configs and restore",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7cf1277a-1301-4489-b8af-505399763663",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let testConfigs = globals.testData.invoicesConfigs;",
															"",
															"let configs = [];",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"    configs = pm.response.json().configs;",
															"});",
															"",
															"let configNamesToProcess = testConfigs.configNames;",
															"console.log(\"Config codes to process: \" + configNamesToProcess);",
															"",
															"for (var i = 0; i < configNamesToProcess.length; i++) {",
															"    let configName = configNamesToProcess[i];",
															"    let value = pm.variables.get(configName);",
															"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d0fbc113-074f-49cc-a3c8-3c14784ac9e9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICE"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "This directory contains various tests related to transition of the invoices/vouchers through the workflow",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch groups",
					"item": [
						{
							"name": "Get batch-groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab9345f3-aa5b-413d-89ad-7e2ec0581712",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroups = [];",
											"",
											"pm.test(\"Successfully get batch-groups\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    batchGroups = pm.response.json().batchGroups;",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    batchGroups.forEach(batchGroup => utils.validateBatchGroup(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b43fc902-4ad8-4949-b401-b2f9f4693c7a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33abb390-8e62-4110-8a43-df3fae738341",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroup = {};",
											"",
											"pm.test(\"Batch-group is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    pm.expect(batchGroup.name).to.exist;",
											"    pm.environment.set(\"originBatchGroupId\", batchGroup.id);",
											"    ",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae790b34-0360-4f37-89de-0c2ccb9628e6",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.id",
											"    delete batchGroup.metadata;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-group by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5680d2c-f758-4d55-bc5d-24d957f76ae0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Batch-group\", function () {",
											"    pm.response.to.have.status(200);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93f96fea-414e-439a-ba7e-86f56cd30b6c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1577753b-f4c5-4e1f-ae15-25e15d835a1d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-groups/\" + pm.environment.get(\"originBatchGroupId\"), (err, res) => utils.validateBatchGroup(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93bccb24-3225-40ff-bd2d-19ed6cd05270",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    batchGroup.name = \"New Name\";",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c5c32ac-2538-4918-ac2e-e2090e050591",
										"exec": [
											"pm.test(\"Batch-group is deleted\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f0c3c00-b873-4eda-9e68-0e351994b8b1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher exports",
					"item": [
						{
							"name": "Create voucher for batch-voucher-export",
							"item": [
								{
									"name": "Create order One-Time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "873a95a5-e27c-4408-b57e-5beec2dad964",
												"exec": [
													"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
													"if (bePoNumberNum === null) {",
													"    pm.environment.set(\"bePoNumberNum\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2c4497af-3443-420c-8eb4-9c61efaa15cc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrder = pm.response.json();",
													"    pm.environment.set(\"beOrder\", beOrder);",
													"    pm.environment.set(\"beOrderId\", beOrder.id);",
													"    pm.environment.set(\"beOrderNumber\", beOrder.poNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add order lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e90c655-36eb-4c19-8a1a-618a2f7dab15",
												"exec": [
													"console.log(pm.environment.get(\"beOrderId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ad84153a-d162-46de-8d99-6fc0633da45e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrderLine = {};",
													"",
													"pm.test(\"Order line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrderLine = pm.response.json();",
													"    pm.environment.set(\"beOrderLine\", beOrderLine);",
													"    pm.environment.set(\"beOrderLineId\", beOrderLine.id);",
													"});",
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Open order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15cffd96-df09-4d7c-9b83-5cab4066bfd7",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{beOrderId}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{beOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c547ea9-8103-477e-863c-0d15c79a7f61",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"Order after open\", function () {",
													"    beOrder = pm.response.json();",
													"    console.log(beOrder.id);",
													"    pm.environment.set(\"beOrder\", beOrder);",
													"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
													"    pm.environment.set(\"bePOLEncumbrance\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{beOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "39146f64-4472-4c4a-90cc-0645faa3179c",
												"exec": [
													"var beInvoiceNumber = pm.environment.get(\"beInvoiceNumber\");",
													"if (beInvoiceNumber === null) {",
													"    pm.environment.set(\"beInvoiceNumber\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"beInvoiceNumber\", ++beInvoiceNumber);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "660c5751-c26a-4677-aa56-75f311bb8dd3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beInvoice = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beInvoice = pm.response.json();",
													"    pm.environment.set(\"beInvoiceId\", beInvoice.id);",
													"    console.log(\"Invoice after create id : \" + beInvoice.id)",
													"});",
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chkSubscriptionOverlap\": true,\r\n  \"currency\": \"USD\",\r\n  \"source\": \"User\",\r\n  \"batchGroupId\" : \"{{batchGroupId}}\",\r\n  \"adjustments\": [\r\n    \r\n  ],\r\n  \"invoiceDate\": \"2020-04-19\",\r\n  \"accountingCode\": \"G64758-74837\",\r\n  \"vendorId\": \"{{activeVendorId}}\",\r\n  \"vendorInvoiceNo\": \"{{beInvoiceNumber}}\",\r\n  \"paymentMethod\": \"Cash\",\r\n  \"status\": \"Open\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add invoice lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bc02e66d-39aa-4ac7-b5a7-8202b0836de8",
												"exec": [
													"   console.log(\"BE order line id : \" + pm.environment.get(\"beOrderLineId\"));",
													"   console.log(\"bePOLEncumbrance : \" + pm.environment.get(\"bePOLEncumbrance\"));",
													"   console.log(\"fundId : \" + pm.environment.get(\"fundId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46b90a86-4cfc-40ee-8299-043b51ffe0ad",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"invoiceId\": \"{{beInvoiceId}}\",\r\n  \"invoiceLineStatus\": \"Open\",\r\n  \"description\": \"Environment and identity politics in colonial Africa Fulani migrations and land conflict by Emmanuel M. Mbah\",\r\n  \"poLineId\": \"{{beOrderLineId}}\",\r\n  \"fundDistributions\": [\r\n    {\r\n      \"encumbrance\": \"{{bePOLEncumbrance}}\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"distributionType\": \"percentage\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"quantity\": 2,\r\n  \"subTotal\": 0.9,\r\n  \"accountNumber\": \"BRXXXXX-01\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get for the invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7eae6496-74c0-4145-bcd1-d0666abfd380",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beInvoice = {};",
													"",
													"pm.test(\"Order after open\", function () {",
													"    pm.response.to.have.status(200);",
													"    beInvoice = pm.response.json();",
													"    console.log(\"Invoice : \" + beInvoice.id);",
													"    pm.environment.set(\"beInvoice\", beInvoice);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{beInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{beInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve invoice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5ca70581-3232-482a-9c0e-80fb5618a1e7",
												"exec": [
													"    beInvoice = pm.environment.get(\"beInvoice\");",
													"    console.log(\"Udated invoice\" + beInvoice)",
													"    beInvoice.status = \"Approved\";",
													"    pm.environment.set(\"beUpdatedInvoice\", JSON.stringify(beInvoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0843ffca-ace5-4968-8b54-f4fec8ccabae",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{beUpdatedInvoice}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{beInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{beInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "628aef03-af0d-4fc0-9c64-3e6bedd08eb6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchVoucherExports = [];",
											"",
											"pm.test(\"Successfully get batch-voucher-exports\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.exist;",
											"    batchVoucherExports = pm.response.json().batchVoucherExports;",
											"});",
											"",
											"pm.test(\"Batch-voucher-export content is valid\", function() {",
											"    batchVoucherExports.forEach(batchVoucherExports => utils.validateBatchVoucherExport(batchVoucherExports));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09c41112-e30d-4676-99cd-5fdb18ba3c1e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a55c05b-3717-4e40-b5b9-1579e2b4f467",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchVoucherExport = {};",
											"",
											"pm.test(\"Batch-voucher-export is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchVoucherExport = pm.response.json();",
											"    pm.environment.set(\"batchVoucherExportId\", batchVoucherExport.id);",
											"});",
											"",
											"setTimeout(function(){}, 3000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e55817a-2c66-476d-ad39-46228c345bbf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t  \"status\" : \"Pending\",\n      \"message\": \"Batch voucher export message\",\n      \"batchGroupId\": \"{{batchGroupId}}\",\n      \"start\": \"2020-03-16T00:00:00.000+0000\",\n      \"end\": \"2020-08-22T00:00:00.000+0000\",\n      \"metadata\": {\n        \"createdDate\" : \"2020-04-13T00:00:35.222+0000\",\n        \"createdByUserId\" : \"6618f188-4ec9-52e2-88ec-9632793c357e\",\n        \"updatedDate\" : \"2020-04-28T00:01:16.111+0000\",\n        \"updatedByUserId\" : \"6618f188-4ec9-52e2-88ec-9632793c357e\"\n      }\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe5ebbf2-2292-461d-89de-7df865cd004f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully get Batch-voucher-exports\", function () {",
											"    pm.response.to.have.status(200);",
											"    batchVoucherExport = pm.response.json();",
											"    pm.expect(batchVoucherExport.status).to.eql(\"Generated\");",
											"    pm.expect(batchVoucherExport.batchVoucherId).not.eql(null);",
											"     pm.environment.set(\"batchVoucherId\", batchVoucherExport.batchVoucherId);",
											"});",
											"",
											"pm.test(\"Batch-voucher-export content is valid\", function() {",
											"     utils.validateBatchVoucherExport(batchVoucherExport);",
											"});",
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61542527-d6f1-49c5-8c4b-d92c0157f043",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{batchVoucherExportId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{batchVoucherExportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch voucher by id JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d68463bf-2457-43b1-b75d-6fed759dd98b",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9418b4c-178f-4d37-b030-99da9c558f9f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{batchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{batchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Edit batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b55b5b4-bdfe-42f0-b950-872277b6a589",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-voucher/batch-voucher-exports/\" + pm.environment.get(\"batchVoucherExportId\"), (err, res) => utils.validateBatchVoucherExport(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8a281e6-9a90-4ea1-8fb6-f337a2305653",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/batch-voucher/batch-voucher-exports/\" + pm.environment.get(\"batchVoucherExportId\"), function (err, res) {",
											"    let batchVoucherExport = res.json();",
											"    batchVoucherExport.message = \"Updated message\";",
											"    ",
											"    pm.environment.set(\"batchVoucherExportContent\", JSON.stringify(batchVoucherExport));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchVoucherExportContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{batchVoucherExportId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{batchVoucherExportId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2dabc6b7-4f5a-4884-9e2e-a32168d831d8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e550e335-123f-45dd-85d3-5361590ae445",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create invoices for negative tests",
					"item": [
						{
							"name": "Reviewed",
							"item": [
								{
									"name": "Create reviewed invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe3624b9-95fd-4831-877b-60bc7099eef4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeReviewedToApprovedInvoiceId\", invoice.id);",
													"    pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));",
													"",
													"    createLine(invoice.id);",
													"",
													"    // Verify that voucher has not been created",
													"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
													"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
													"    });",
													"});",
													"",
													"function createLine(invoiceId) {",
													"",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
													"",
													"    // Now creating invoice line",
													"    utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
													"        pm.test(\"Invoice line is created in storage\", () => {",
													"          pm.expect(err).to.equal(null);",
													"          pm.expect(response).to.have.property('code', 201);",
													"        });",
													"    });",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e88b152d-423b-41a5-a671-93be7128d248",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Approved\";",
													"invoice.status = \"Reviewed\";",
													"delete invoice.adjustments;",
													"delete invoice.voucherNumber;",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Paid",
							"item": [
								{
									"name": "Create paid invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08229949-82d3-4647-9868-2ebcd5c243b1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativePaidStatusInvoiceId\", invoice.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e587ce8e-209a-4dc0-b5c2-52a76582d97f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Approved\";",
													"invoice.status = \"Paid\";",
													"delete invoice.adjustments;",
													"delete invoice.voucherNumber;",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"",
													"pm.environment.set(\"negativePaidStatusInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativePaidStatusInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Approved 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3fffe9b-5393-4f02-b5ed-54df9d5cf4b1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Required properties are missing\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"",
													"    pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"    pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"    pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26825778-31a4-481e-93ce-69faccab7788",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Approved\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Reviewed 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "699cb09b-7ae7-4bf2-a8f3-5d6d4cefe929",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dbd4dee0-c560-4e43-bb54-fb6c8df62fa0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Reviewed\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Cancelled 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9e7326f-88c8-46b3-a2bb-65e7d211f27b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f9040f2-a613-4e51-b0bd-6bb7c34e8df1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Cancelled\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Open 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1aeef7b9-84cd-4130-95df-c2219f172e1a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "383dea53-b4e0-4868-8aec-39cf91f6b3be",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Open\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b86e9ce-7873-4711-8a7b-2a712c2bbfed",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "319e795e-0e84-41f1-9762-b9e235245f3f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Approved",
							"item": [
								{
									"name": "Create to be approved invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e1cdb38-e355-4148-aef7-58242e6f1db1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeApprovedToPaidInvoice\", invoice.id);",
													"    pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeApprovedToPaidInvoice\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"negativeApprovedToPaidInvoiceLineId\", response.json().id);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8892c3eb-f387-418f-80c8-977b650aa789",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Open\";",
													"",
													"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedToPaidInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with status Approved",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3ad50b1f-cf54-4ad7-8a2d-c2e5179f3643",
												"exec": [
													"let invoice = JSON.parse(globals.negativeApprovedToPaidInvoiceContent);",
													"invoice.status = \"Approved\";",
													"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd686e20-5040-447b-b75c-c1c9f24c6626",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
													"        pm.expect(res.json().status).to.equal(\"Approved\");",
													"        pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(res.json()));",
													"      ",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedToPaidInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedToPaidInvoice}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								},
								{
									"name": "Create approved invoice with locked total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cd347e38-6759-423a-95ac-2e13741059be",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
													"",
													"invoice.lockTotal = true;",
													"invoice.total = 12.34;",
													"invoice.note += \" - locked total\";",
													"invoice.status = \"Open\";",
													"",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"delete invoice.adjustments;",
													"",
													"pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c7e4e483-57cb-4629-9af0-c4dc560285fb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalId\", invoice.id);",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addLine(invoice);",
													"});",
													"",
													"function addLine(invoice) {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoice.id);",
													"    invoiceLine.poLineId = pm.globals.get(\"poLine1Id\");",
													"",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(err).to.equal(null);",
													"          pm.expect(response).to.have.property('code', 201);",
													"          utils.updateInvoiceStatus(invoice, \"Approved\");",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContentLockedTotal}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify invoice with locked total and delete voucher",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2683a3e6-15ee-4754-ad7d-2ac9e72cb408",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a0796b43-8e05-4816-8d73-21b00f521d8b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is Approved\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));",
													"    pm.expect(invoice).to.have.property('status', \"Approved\");",
													"    utils.deleteVouchersForInvoice(invoice.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedInvoiceWithLockedTotalId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create approved invoice with non-existing fund",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fa37c37-228a-4219-a1c4-66eb4eb99824",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeInvoiceWithUnexistingFund\", invoice.id);",
													"    pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeInvoiceWithUnexistingFund\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    invoiceLine.fundDistributions[0].fundId = require('uuid').v4();",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c43c9f5d-7951-4351-9a2b-0e97b50172b4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceWithUnexistingFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create approved invoice with big invoiceLine.total",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e14b0e20-8c80-46ec-833e-da6bd9dc69e0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeInvoiceOwerexpended\", invoice.id);",
													"    pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeInvoiceOwerexpended\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    invoiceLine.subTotal = 2000000000;",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"negativeOwerexpendedInvoiceLineId\", response.json().id);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f0af939-bd8e-4d75-a7b2-48b4a6d25675",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceOwerexpendedContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch Vouchers",
					"item": [
						{
							"name": "Test GET batch voucher by id without Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd53bf0f-32a7-4cd5-b793-b940b95ac5df",
										"exec": [
											"pm.test(\"Error get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82438a41-b4ab-4e4e-ab67-9915b03b5573",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Test GET Non-Existing batch voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d7422d5-42b3-4cb9-95f1-04fcc07992a7",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed202e52-4759-48d0-8464-1a9c8fa56620",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/1cc2d3ec-b239-4f5e-b34e-fc63dea23d98",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"1cc2d3ec-b239-4f5e-b34e-fc63dea23d98"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "30487bee-3332-4e48-a835-6e41a840835e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1b90d349-e372-49bf-b655-d52c37c89c29",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Documents",
					"item": [
						{
							"name": "Update document - PUT metod not implemented",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a31b827d-5abb-493b-9f89-593de195d921",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Method not implemented\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff4fc89d-b54a-4f92-aa3b-f9050d5e0a4c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{documentWithURL}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}/documents/{{documentWithUrlId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeReviewedToApprovedInvoiceId}}",
										"documents",
										"{{documentWithUrlId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Protected Fields Modification",
							"item": [
								{
									"name": "Update Invoice with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "643cdfc3-acfa-4b19-8cb2-c632737e896d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.currency = \"TUGRIK\";",
													"    invoice.total = 100.500;",
													"    pm.variables.set(\"updatedApprovedInvoiceBody\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bc2053ca-1af2-443e-b46e-e4b80a8b2833",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let errors = pm.response.json().errors;",
													"    pm.expect(errors).to.have.lengthOf(1);",
													"    pm.expect(errors[0].message).to.include(\"Field can't be modified\");",
													"    pm.expect(errors[0].code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(errors[0].protectedAndModifiedFields).to.include.members([\"currency\", \"total\"]);",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedApprovedInvoiceBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedToPaidInvoice}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get invoice by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e2e091e-72ea-41e8-bd0b-b739b5a3cf17",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "054fad21-95d1-4ae8-bf1e-ac831c04f6ca",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6663c456-a98b-4804-a713-19d97d21ff43",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "790faa9d-b8a5-4d6d-82d8-4a68d56598b5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cbfa3f7-cc69-44af-80f3-ca12d275943d",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "699a7ec4-e1c4-4627-81bd-c02a3b688750",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e03e6d2-3f2a-4351-ac22-fb14e7bc5849",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6a532fc-ac88-4d8b-b1f1-1f8dd2376f63",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6535af05-e9ca-4c8c-a8af-3aefee149f84",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "020bac03-c07f-4d54-8ec3-3e50a02dc8e1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d3851f7-d566-4f83-84a2-c45be87de342",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05b427df-b019-46f0-91ee-434b00504a56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice with locked total but without total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab5a7a9d-9e6b-4adc-8868-1852b279af51",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"",
											"delete invoice.total;",
											"invoice.lockTotal = true;",
											"",
											"pm.variables.set(\"invoiceBodyWithLockedTotal\", JSON.stringify(invoice));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4325b6f-cb47-495e-a665-bd4049ed2fc2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected creation\", function () {",
											"    pm.response.to.have.status(422);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"invoiceTotalRequired\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceBodyWithLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create empty invoice with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5556b97-89a3-41cb-a27c-b5c269032ec5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be6ece6d-5973-49e5-a325-6828c50b5810",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(7);",
											"",
											"        let requiredProps = utils.getInvoiceSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length - 1);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Update invoice by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b5e508f-3a3f-4d0c-9d4b-b4d6f8a80b97",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b34ff24-2c93-4e03-97c7-17e25c01190e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8122b773-c912-4d56-8781-bd70bb125285",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7fd93a2-0663-4cc9-a6f9-58bdddce9699",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf87ccc5-10e4-4935-8608-502aef8d54fe",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "979b172a-30c3-448d-b74c-990bfc66bc0f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "295dbf62-7f58-44ae-ab00-e108b7ec629c",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4dd75cdd-4198-4f73-9b0c-33c51ada3c8b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with status Piad, and missing poLine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b8782d51-202e-4264-9f3b-d597a6a6e594",
										"exec": [
											"let invoice = JSON.parse(globals.negativeApprovedToPaidInvoiceContent);",
											"invoice.status = \"Paid\";",
											"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0d3b7a3b-078d-4e73-b9c3-e0680d03c786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
											"        pm.expect(res.json().status).to.equal(\"Approved\");",
											"      ",
											"    });",
											"});",
											"",
											"pm.globals.unset(\"negativeApprovedToPaidInvoiceContent\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{negativeApprovedToPaidInvoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedToPaidInvoice}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Update invoice with locked total changing total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b6d0f77b-1e42-4e3b-8d6c-04f5e7f15118",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"    invoice.total += invoice.total;",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5e9f050a-2317-4e5d-9dac-fb5d955252dc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected updates\", function () {",
											"    pm.response.to.have.status(400);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"protectedFieldChanging\");",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"One 'protectedAndModifiedFields' is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].protectedAndModifiedFields[0], \"The only changed property should be 'total'\").to.equal(\"total\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Update invoice with locked total to false and delete total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98a2ce42-56da-4662-be13-a19880b25d06",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"    invoice.lockTotal = false;",
											"    delete invoice.total;",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53cdef7b-1524-42bf-ba16-6e0ab74eae29",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected updates\", function () {",
											"    pm.response.to.have.status(400);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"protectedFieldChanging\");",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"Two elements in 'protectedAndModifiedFields' are expected\").to.have.lengthOf(2);",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"Unexpected changed properties\").to.have.members([\"total\", \"lockTotal\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Delete invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f905821-c854-42b4-8f6f-39e3d98e72d7",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "43bd8b34-f6a7-481a-a917-0c3d860d486b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08269361-bc6a-4a67-963c-bad436d95428",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "396161ce-6018-4c35-bb78-8b8fd73c5802",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21284006-69cc-48bb-b89c-3cd19a1ac88e",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dc96265-eb51-45e6-a573-20f226e4085f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "890596a6-cc5d-4623-a94f-c9c4cf808e6e",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8207cb4d-1bcf-4c04-bec1-319787df0afe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Protected Fields Modification",
							"item": [
								{
									"name": "Update Invoice-Line with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ccc47b10-c078-481c-a7d6-b4dcf58bb929",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.environment.get(\"negativeApprovedToPaidInvoiceLineId\"), (err, res) => {",
													"    let invoiceLine  = res.json();",
													"    invoiceLine.quantity = 10;",
													"    invoiceLine.subTotal = 100.500;",
													"    pm.variables.set(\"updatedApprovedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "269e24e0-2b7e-42be-9d12-1f3101f101d8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let errors = pm.response.json().errors;",
													"    pm.expect(errors).to.have.lengthOf(1);",
													"    pm.expect(errors[0].message).to.include(\"Field can't be modified\");",
													"    pm.expect(errors[0].code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(errors[0].protectedAndModifiedFields).to.include.members([\"quantity\", \"subTotal\"]);",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedApprovedInvoiceInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeApprovedToPaidInvoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeApprovedToPaidInvoiceLineId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create empty invoice-lines with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ece7ea90-9267-45f6-9669-0468860ea158",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12bf8264-13fe-4976-95be-b70d749ac9e3",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"",
											"        requiredObj(errors, \"description\");",
											"        requiredObj(errors, \"invoiceId\");",
											"        requiredObj(errors, \"invoiceLineStatus\");",
											"        requiredObj(errors, \"subTotal\");",
											"        requiredObj(errors, \"quantity\");",
											"",
											"        // releaseEncumbrance is also required but has default value",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Create invoice line - without required fields- 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b17f015c-eb1b-436c-82d5-ac576d3e8a30",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"delete line.invoiceId;",
											"delete line.invoiceLineStatus;",
											"delete line.subTotal;",
											"delete line.quantity;",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c83ef4a0-58e6-4b38-9b2b-db2c3e1e8e07",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    ",
											"});",
											"pm.test(\"4 validation errors\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8c99061-5d34-4d0f-992e-109887ab7454",
										"exec": [
											"pm.test(\"Status code is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0db2af3e-3bf7-417f-9904-4615b6f1f599",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22aa1147-0e7d-4b01-b881-b9d06564cd6a",
										"exec": [
											"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "289e7a1a-262b-4404-8003-8f95a474dcc8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"invoiceLine.invalidProperty = \"invalid\";",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice line by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67240ebd-a5f1-4bae-8b78-03c6572da659",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "693d38d0-efc2-4ced-af06-1594b891767d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invoice Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4913b998-0e83-4686-9428-a8227d1bdc1b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ab7b984-a178-4df8-ab1a-6fe61da24a6c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get invoice lines by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edb53ad7-74f4-4a0d-b6f2-0c72c8e7d21b",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice-line by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d5fcf10-d806-41a1-b1b8-8046d4e8e63f",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3cbbf70a-a225-41d2-b2bc-69ca2c11b00a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice line with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0abf64d-ddbe-456f-a24d-6d8e1a0197a9",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79cc6128-02a0-4917-bab1-3d04abb1b445",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted invoice line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c42c66e4-0e56-4069-b5c0-678afe34c984",
										"exec": [
											"pm.test(\"Invoice line is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65416280-669c-4a20-85db-9631be8e4b81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice-line with invalid adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95f34da5-010b-4c97-a794-1eee28fa7eef",
										"exec": [
											"pm.test(\"Invoice Line creation fails\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2115f434-d0ef-422b-8cd2-015980dea7ab",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let adjustmentsArray = [];",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"delete invoiceLine.adjustments;",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
											"",
											"let adjustment1 = utils.buildAdjustmentObject();",
											"adjustmentsArray.push(adjustment1);",
											"",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Not Included in\";",
											"adjustmentsArray.push(adjustment2);",
											"",
											"invoiceLine.adjustments = adjustmentsArray;",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Create invoice-line for approved invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38eb375d-31f9-4298-ac4a-1a9537805996",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let error = {};",
											"",
											"pm.test(\"Can't add invoice line to the invoice that has been approved\", function () {",
											"    pm.response.to.have.status(500);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.equal(\"prohibitedInvoiceLineCreation\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f9f46d9c-e316-4db6-a084-fceebb118dce",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"negativeApprovedToPaidInvoice\"));",
											"",
											"pm.variables.set(\"approvedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{approvedInvoiceInvoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c257fca3-5249-41be-a4a3-d99b5fc80783",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2efdaa12-ec2f-449e-9ad4-5de31630ef3b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c33e4677-c29d-4a69-bea9-8dc914e6c68c",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update voucher protected fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c10f785-d867-4bd9-8253-adac8a7f4451",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"    pm.expect(pm.response.json().errors[0].protectedAndModifiedFields).to.have.members([\"systemCurrency\", \"exchangeRate\", \"voucherDate\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f837c34-fc2c-4fa3-9edf-1db8c5f1e345",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify protected fields",
											"    voucher.systemCurrency = \"EUR\";",
											"    voucher.exchangeRate = 1.123;",
											"    voucher.voucherDate = \"2020-05-06T00:00:00.000+0000\";",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update voucher bad id format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7154b75f-846e-495e-ad98-3c685168c7c9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d32505bb-7f66-4957-abd9-9764791ef11a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify protected fields",
											"    voucher.systemCurrency = \"EUR\";",
											"    voucher.exchangeRate = 1.123;",
											"    voucher.voucherDate = \"2020-05-06T00:00:00.000+0000\";",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id-format"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Get voucher line by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a65bdcd4-36cc-4bb2-bded-b0df2c7a06cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2d336876-d9c5-444e-8825-f48f2b6241ff",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b246ae43-a8e5-4461-81df-4f88b380e03e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildVoucherLineWithMinContent();",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "726b2d81-3bc6-4ffa-bd23-8c857bd18c05",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher line by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65e1a9a6-c086-461f-a0ee-f57fb55ae74f",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(setting) with negative start value - illegal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a68e947f-191d-4090-bdac-9815919023ba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2699d515-f3e7-496b-bf5f-ffbc59d6b617",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Re(setting) with negative voucher start value not allowed\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/-150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"-150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get start value with wrong lang param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "72211597-2206-45e0-9eb1-eb0fd248f327",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b2a6ba8-a55b-4a9c-8851-93fdd8f7c042",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83225d3c-c182-42bd-b73e-6baa14dc6337",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "efd22225-eaad-4895-92e1-aaa94c1e9ca6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Transition to Approved",
							"item": [
								{
									"name": "Prepare invalid vousherNumberPrefix config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12bac59c-7516-49b3-8914-d671d664754d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function() {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"voucherNumber\";",
													"let value = \"{\\\"voucherNumberPrefix\\\": \\\"invalidPrefix86\\\"}\";",
													"",
													"utils.updateOrCreateInvoicesConfig(configs, configName, value);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "37684b7b-3f50-4a20-8bb3-4a1687eef2d5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE and configName==voucherNumber",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==INVOICE and configName==voucherNumber"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with status Approved",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "745ed6c1-5c5d-4949-b968-5e703dd13e55",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeReviewedToApprovedInvoiceContent\"));",
													"invoice.status = \"Approved\";",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fd2ba6a3-cebc-4def-9744-ed678d3f7ba3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(\"Internal Server Error\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeReviewedToApprovedInvoiceId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function () {",
													"            pm.expect(invoice.status).to.equal(\"Reviewed\");",
													"        });",
													"        pm.test(\"Voucher number not exist\", function () {",
													"             pm.expect(invoice.voucherNumber).to.not.exist;",
													"        });",
													"        ",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"reviewedToApprovedInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeReviewedToApprovedInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Paid",
							"item": [
								{
									"name": "Pay invoice with locked total (no voucher)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ee991e35-f379-41e7-a760-eafc7d87ab72",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e2e1dd97-84e3-4919-aa8e-c19a6e66936d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: voucher is not available\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"voucherNotFound\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
													"        pm.test(\"Invoice status updated\", function () {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.status).to.equal(\"Approved\");",
													"",
													"            // Validate voucher",
													"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
													"                pm.test(\"Still no voucher\", () => pm.expect(res.json().vouchers).to.be.empty);",
													"            });",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedInvoiceWithLockedTotalContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedInvoiceWithLockedTotalId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay invoice with non-existing fund",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e3dd0bc2-3743-4dec-a1d5-d88d65cbe0d8",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeInvoiceWithUnexistingFundContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "129ae1b2-c1e8-4d7c-92b7-19523036f7f6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: fund not found\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"fundsNotFound\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"value\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"key\", \"funds\");",
													"",
													"});",
													"",
													"pm.environment.unset(\"negativeInvoiceWithUnexistingFund\");",
													"pm.environment.unset(\"negativeInvoiceWithUnexistingFundContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceWithUnexistingFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeInvoiceWithUnexistingFund}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeInvoiceWithUnexistingFund}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay invoice with owerexpended line.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "91386c1c-a0ef-43d1-a45c-4e32121a276d",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeInvoiceOwerexpendedContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "053d0d92-34ca-44a8-9880-225e3cf06b1d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: fund not found\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"transactionCreationFailure\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"value\", pm.environment.get(\"negativeOwerexpendedInvoiceLineId\"));",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"key\", \"invoiceLineId\");",
													"    pm.expect(pm.response.json().errors[0].parameters[1]).to.have.property(\"value\", pm.environment.get(\"fundId\"));",
													"    pm.expect(pm.response.json().errors[0].parameters[1]).to.have.property(\"key\", \"fundId\");",
													"",
													"});",
													"",
													"pm.environment.unset(\"negativeOwerexpendedInvoiceLineId\");",
													"pm.environment.unset(\"negativeInvoiceOwerexpended\");",
													"pm.environment.unset(\"negativeInvoiceOwerexpendedContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceOwerexpendedContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeInvoiceOwerexpended}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeInvoiceOwerexpended}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Approved with Empty FundDistributions",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48103eeb-7675-4f78-b1c3-514471e3542d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosId\", invoice.id);",
													"    // pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));",
													"",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"",
													"    utils.validateInvoice(invoice);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "075a7d61-f3ab-4392-8818-8aff48b929d7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0a2c4b3d-71a1-4d04-a22c-94a8800b6c14",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].value=50;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bcf1c1c1-92d5-4d2c-a5d9-6d373d292487",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "72f034de-74dd-40f5-9fd9-d80b827ec110",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dd350b04-0fe3-48fb-835b-909f8349eb42",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update line  FundDistros amount !=invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6096cd2a-a8d2-487c-b467-076925e39862",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].distributionType = \"amount\";",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d0ad73d0-4d35-4d7b-9a59-e8a6908b5ca4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros amount != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5f5b03e5-ba81-44d6-8620-b4d5b85554f8",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db3ab19c-ceeb-48b9-8f8b-00c516673ed4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update line  FundDistros mixed distr type != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "427270f9-15be-453a-94b0-aa0391c3309c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].distributionType = \"amount\";",
													"invoiceLine.fundDistributions[0].value = 50;",
													"let percentageDistr = {\"fundId\":  invoiceLine.fundDistributions[0].fundId, \"distributionType\": \"percentage\", \"value\": 50};",
													"invoiceLine.fundDistributions.push(percentageDistr);",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e6198470-b1d5-476a-b71d-10a18f9b97d0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros mixed type != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0906230c-16a6-4589-8416-834a26016559",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6d2848d7-98f0-4434-ab47-a3db8b8d83d9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line without FundDistributions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe35c532-9c4b-43d1-82bb-e3cf8c350bde",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"delete invoiceLine.fundDistributions;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66aae028-7048-4ef0-84f8-1ac1e7564797",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit ot approved invoice without FundDistros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6becac28-897a-4142-99ea-314b9eced2b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "174af849-6b1f-4171-b4b3-ec86b9fabc1e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"InvoiceWithEmptyFundDistrosContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage = 100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1489864c-4b92-46a6-b1f7-398e8375ac51",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].value=100;",
													"pm.environment.set(\"lineWithFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a41d5844-de37-4f46-a16c-6058d1d8b1c8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "39fb2be4-49a8-43de-a97b-c65c9730ba77",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Percentage\");",
													"adjustment.fundDistributions = [];",
													"let fundDistribution = {",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"percentage\",",
													"        \"value\": 99.99",
													"    };",
													"adjustment.fundDistributions.push(fundDistribution);",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79733495-e350-4878-823d-4c5a7fc348db",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros amount != adjustment total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b2ad9ae1-b0c3-452a-b6fe-801658283c38",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"let fundDistribution = {",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"amount\",",
													"        \"value\": 99.99",
													"    };",
													"adjustment.fundDistributions.push(fundDistribution);",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6d49a539-304b-48cb-b517-65d60060b7a7",
												"exec": [
													"",
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros mixed != adjustment total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67079845-0845-49af-aab4-1683ed465a7b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"",
													"adjustment.fundDistributions.push({",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"amount\",",
													"        \"value\": 99.99",
													"    });",
													"    adjustment.fundDistributions.push({",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"percentage\",",
													"        \"value\": 99.99",
													"    });",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dec2084a-6e0d-48a5-925e-66f52565c71d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment without fundDistr",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9594ef12-977e-46a0-9d4a-042ceeca33a1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fff3921b-f693-43fd-867e-385cf446c7c9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "21b0f350-751e-413c-8ad3-75bfb8aaf7db",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "77c85358-8b0a-45cf-8202-b841e3fd4b04",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice with incompatible fields",
							"item": [
								{
									"name": "Create Open invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "148c513e-4860-4df2-a31d-b9cb7c966961",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(pm.response.json()));",
													"    pm.environment.set(\"incompatibleFieldsInvoiceId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73a7174f-88a8-40c9-96d2-cb17e296c83e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aae9e170-a090-4be0-b869-afe0c961f738",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not updated\", function() {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.environment.unset(\"incompatibleFieldsInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1378602e-43bb-4026-b064-76aa36ad142b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let incompatibleFieldsInvoice = JSON.parse(pm.environment.get(\"incompatibleFieldsInvoiceContent\"));",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{incompatibleFieldsInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{incompatibleFieldsInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16f5a3f4-72ee-4f34-b188-9574a1fd4ece",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "180f5999-9645-4c44-a0ec-1cec55b7e600",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch groups",
					"item": [
						{
							"name": "Create batch-group missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5923f751-28e5-4a10-92c3-eae47ab381b2",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"    batchGroup = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60178ba3-a9a1-47dd-b9ba-2d1fa10df200",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.metadata;",
											"    delete batchGroup.name;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-groupby id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd82527f-1307-450a-b58c-925f31957827",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4dcd4f1-673e-4133-ba71-225bf60e2b30",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-group by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e658070d-d333-41b5-956b-edd40cea98d1",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3696ffaf-a285-4765-8ea5-6764b067920e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b13f4a5c-6e16-428b-a9eb-019418f28e90",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f88edec-0a4a-48be-b3d6-6dbd98502185",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "041496d3-a78e-4516-abef-dc3dc2357c2d",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b830b06c-54ab-4c03-9caa-27b558f36ea1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "419af225-2489-425f-bdc5-5cc886910b4a",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87ebc105-7e31-40f9-b6e0-084f6188ae41",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6aafb80e-0656-44c3-80c1-1c88cc9d50b4",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62eddba2-1f2a-4178-9c1a-059ea12996fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfc55f8f-57e8-40d4-ae74-0982bc80d3cb",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c86c3e06-f6a0-488c-9f81-8c5eb4548df7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "003efc4d-2585-4c90-b998-1fc957dc8a95",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a14fcb08-f449-4d66-9c71-62723a99ff07",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    batchGroup.name = \"New Name\";",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group missing requred fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7a89e31-f858-4871-b8bc-de1315c56e3c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f587456-f62c-4051-9532-34f2e518ab81",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.name;",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{batchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{batchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch group by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1168c47-5eaa-4dcb-b238-b379c5906c34",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7bf10d6e-dfa0-46e3-8db0-3849cb56552e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df6c4381-3597-44e1-bed0-1c4bc04f6e3c",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "abd06f36-ce4c-4cd8-82e8-ff1c836832c8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6498e4e9-6b8d-4d43-805d-367e91754c02",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "164011bb-6bd6-4bb4-971e-c3b92c79459c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee4eb83e-029c-4b68-8d69-5f65c5be164f",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07b8845e-d952-47e6-bc5b-a879d3bd6caf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group with UUID in use",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5002ac7-a2de-4386-9020-0629018b526f",
										"exec": [
											"pm.test(\"Batch-group is in use\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58f26008-8f9e-4da5-be87-73cf3c50663c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{batchGroupSystemRecordId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{batchGroupSystemRecordId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher exports",
					"item": [
						{
							"name": "Create batch-voucher-export missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1503d89-7eca-4c72-a58b-8c705f081b7b",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"    batchGroup = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f8b6402-e6fa-4db1-b26e-704ee61d8f2f",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVoucherExports/batch_voucher_exports_collection.json\", function (err, res) {",
											"    let batchVoucherExport = res.json().batchVoucherExports[0];",
											"    delete batchVoucherExport.batchGroupId;",
											"    pm.environment.set(\"batchVoucherExportContent\", JSON.stringify(batchVoucherExport));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchVoucherExportContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19b0276a-7ada-4f97-a63e-89181c8d1b36",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b58c0845-9e14-4386-b526-6c46f9caf384",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4696494-e179-4f39-b34a-f001d975fc9b",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a7bc886-e24a-4c40-b635-e96ae1e92118",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83d54149-9487-41d6-944f-3eaa3f6289ea",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e35551-5141-41f0-a85a-f1a2c6b5dfcd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79119eed-2ce8-433a-9664-c8a647698bea",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8128c4dc-3967-40e6-9cfc-d8db9454c1dc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "088e2815-9178-48f9-8299-19b1be92d9f0",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b77bba57-bd11-45b6-bb11-cc0d9bd51ae5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "883933b1-113d-4dce-862d-1b79d224e75d",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c97510d-1908-444f-9486-0ced78658c88",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-voucher-export by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "469dccb0-3a93-4888-8c1c-d0c12a552151",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a9412519-2580-4cc0-b6ac-3ee092beafc3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d3b8554-50b3-4ac1-8e26-99eece08c2a3",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6543354f-f3da-4875-b157-26695bc81673",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a34654bc-13f8-4c28-85ff-0d3fd85f2071",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "afff0be9-7a2d-4269-91ee-3a01fcf49342",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "accbba45-03a4-40e1-ab71-48211c60e4df",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d4b1420-ebd5-411f-ace7-2223e508a08c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "781c493b-a7c9-4626-a39b-08389745e954",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5d5a42a-3f7f-45e8-81de-ef62a1b3fe4e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher export configs",
					"item": [
						{
							"name": "Get export config by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9f2df0-fa72-4edc-a555-51a51bdef7a4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ebba16f3-f36a-41a1-8166-060ea4af92ca",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a29750ac-9002-4a81-ac51-120d2285c8e9",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create export config w/ missing required fields - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3c18d03-10d6-4de0-be85-9cf72ab366c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b154490b-d568-425c-9eed-71787a5b4ffd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(1);",
											"",
											"        let requiredProps = utils.getExportConfigSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update export config - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f97fe179-2b91-4bf7-8bb8-6f2514adf72a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d96389a4-14f6-44b3-9c05-366df76296d3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"batchGroupId\": \"075f9308-40a1-41ba-9238-b8a27adc8d39\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/075f9308-40a1-41ba-9238-b8a27adc8d39",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"075f9308-40a1-41ba-9238-b8a27adc8d39"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ffa59c9-eb81-4bfd-8aa4-6e295cda929a",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"batchGroupId\": \"075f9308-40a1-41ba-9238-b8a27adc8d39\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete export config - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a9e3ac5-c10b-4e71-aaee-8c709edf9636",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e3f5c9e5-0a88-431d-8c49-1d5aa51f14e5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe85861a-c645-41fd-8bf5-6338f8c36710",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials",
					"item": [
						{
							"name": "Create credentials missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70d76e1f-1e28-4751-9eb5-8476ea82cd8a",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa9d5266-1a8d-4e62-9e8c-24d8efa6f3f9",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/credentials/574f0791-beca-4470-8037-050660cfb73a.json\", function (err, res) {",
											"    let credentials = res.json();",
											"    delete credentials.exportConfigId;",
											"    delete credentials.username;",
											"    delete credentials.metadata;",
											"    ",
											"    pm.environment.set(\"credentialsBody\", JSON.stringify(credentials));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{credentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63d22399-cf41-4704-bb5f-56060e80d8ba",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ee2f6538-6182-4fb1-b488-145abbc046d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{UUIDDoesNotExists}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{UUIDDoesNotExists}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "535f0695-4263-43e8-9350-f4ac2cd20386",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c10f70db-2885-4e62-a69f-8a1d46988673",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/foo/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"foo",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update credentials - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5648cfd-4bb5-495e-beef-9b9fa89e328d",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37778cf1-05c1-4c30-896f-99c43ddf5f56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update credentials missing requred fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fa57938-35a6-4858-9ddb-4fec05ff0ae6",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83db646d-15d6-4924-bc75-940ea6e04f2f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => {",
											"    let credentials = res.json();",
											"    credentials.password = \"newPassword\";",
											"    delete credentials.username;",
											"    delete credentials.metadata;",
											"    pm.environment.set(\"modifiedCredentialsBody\", JSON.stringify(credentials));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedCredentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4843aafc-44a6-48d9-906e-390afffb3544",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "690a3813-7de1-4753-8f86-b84c5262dbef",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7c670ad-30a6-45d5-9a75-1c7e92073c6d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b9c7b4c0-7fce-48fe-b6bf-84a294dffbe4",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "91d0d902-dafd-4848-9199-6467e213845d",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    invoicesConfigs: {",
					"        configNames: [\"voucherNumber\"],",
					"        bodyTemplate: {",
					"            \"module\": \"INVOICE\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    ordersConfigs: {",
					"        configNames: [",
					"            \"poLines-limit\",",
					"            \"inventory-instanceTypeCode\"",
					"        ],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Invoices API - Admin\",",
					"                    \"lastName\": \"Invoices Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-invoices-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-invoices-user\",",
					"                \"password\": \"mod-invoices-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"invoice.all\",",
					"                    \"orders.all\",",
					"                    \"acquisitions-units.memberships.all\",",
					"                    \"acquisitions-units.units.all\",",
					"                    \"organizations-storage.organizations.all\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test invoices tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.INVOICE_NOTE = \"Invoice for API Tests\";",
					"    utils.schemaPrefix = \"invoices_schema_\";",
					"",
					"    utils.prepareInvoice = function(invoice) {",
					"        delete invoice.id;",
					"        delete invoice.approvedBy;",
					"        delete invoice.approvalDate;",
					"        delete invoice.folioInvoiceNo;",
					"        delete invoice.subTotal;",
					"",
					"        invoice.note = utils.INVOICE_NOTE;",
					"",
					"        return invoice;",
					"    };",
					"",
					"    utils.prepareInvoiceLine = function(invoiceLine, invoiceId) {",
					"        invoiceLine.invoiceId = invoiceId;",
					"",
					"        delete invoiceLine.id;",
					"        delete invoiceLine.metadata;",
					"",
					"        invoiceLine.fundDistributions.forEach(distro => {",
					"            distro.fundId = pm.environment.get(\"fundId\");",
					"            delete distro.encumbrance;",
					"        });",
					"",
					"        return invoiceLine;",
					"    };",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getMockInvoiceLine = function() {",
					"        return JSON.parse(pm.globals.get(\"mock-invoiceLine\"));",
					"    };",
					"",
					"    utils.getMockInvoice = function(i) {",
					"        let invoices = JSON.parse(pm.globals.get(\"mock-invoices\"));",
					"        return invoices.invoices[i];",
					"    };",
					"",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => utils.sendDeleteRequest(path, (err, res) => resolve(res.code)));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"",
					"        for (var i = 0; i < order.compositePoLines.length; i++) {",
					"            utils.preparePoLine(order.compositePoLines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function(poLine) {",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        delete poLine.alerts;",
					"        delete poLine.reportingCodes;",
					"        delete poLine.fundDistribution;",
					"        delete poLine.details;",
					"    ",
					"        return poLine;",
					"    };",
					"",
					"",
					"    /**",
					"     * Adds Invoice line id to `completeInvoicelineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberInvoiceLineId = function(invoiceLine) {",
					"        if (invoiceLine && invoiceLine.id) {",
					"            let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"            completeInvoicelineIds.push(invoiceLine.id);",
					"            pm.environment.set(\"completeInvoicelineIds\", JSON.stringify(completeInvoicelineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completeInvoicelineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastInvoiceLineId = function(withRemoval) {",
					"        let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"        if (completeInvoicelineIds.length > 0) {",
					"            let lineId = completeInvoicelineIds.pop();",
					"            if (withRemoval) {",
					"                pm.environment.set(\"completePolineIds\", JSON.stringify(completeInvoicelineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the Invoice line is empty except line and order ids",
					"     */",
					"    utils.validateInvoiceLineWithMinimalContent = function(invoiceLine) {",
					"        let expectedLine = utils.buildInvoiceLineWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoiceLine.id, \"Invoice line: id expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description does not match to expected\").to.eql(expectedLine.description);",
					"        pm.expect(invoiceLine.invoiceId, \"Invoice line: invoiceId expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineNumber, \"Invoice line: invoiceLineNumber expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus does not match to expected\").to.eql(expectedLine.invoiceLineStatus);",
					"        pm.expect(invoiceLine.metadata, \"Invoice line: metadata expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal  does not match to expected\").to.eql(expectedLine.subTotal);",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity is expected\").to.exist;",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity does not match to expected\").to.eql(expectedLine.quantity);",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance expected\").to.exist;",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance does not match to expected\").to.eql(expectedLine.releaseEncumbrance);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoiceLine.adjustments, \"Invoice line: adjustments as empty array expected\").to.be.an('array').that.is.empty;",
					"        pm.expect(invoiceLine.adjustmentsTotal, \"Invoice line: adjustments total not expected\").to.exist;",
					"        pm.expect(invoiceLine.comment, \"Invoice line: comment is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.poLineId, \"Invoice line: PO line Id is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productId, \"Invoice line: productId not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productIdType, \"Invoice line: productIdType not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionInfo, \"Invoice line: subscriptionInfo not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionStart, \"Invoice line: subscriptionStart not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionEnd, \"Invoice line: subscriptionEnd not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.total, \"Invoice line: total expected\").to.exist;",
					"        pm.expect(invoiceLine.vendorRefNo, \"Invoice line: vendorRefNo not expected\").to.not.exist;",
					"    };",
					"",
					"",
					"    /**",
					"     * Build Invoice line with minimal required fields.",
					"     */",
					"    utils.buildInvoiceLineWithMinContent = function(invoiceId) {",
					"        return {",
					"            \"description\": \"Some description\",",
					"            \"invoiceId\": invoiceId,",
					"            \"invoiceLineStatus\": \"Open\",",
					"            \"subTotal\": 2.20,",
					"            \"quantity\": 3,",
					"            \"releaseEncumbrance\": false",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Voucher line with minimal required fields.",
					"     */",
					"    utils.buildVoucherLineWithMinContent = function() {",
					"        return {",
					"            \"amount\": 33.55,",
					"            \"externalAccountNumber\": \"54321099\",",
					"            \"fundDistributions\": [",
					"                {",
					"                    \"fundId\": pm.environment.get(\"fundId\"),",
					"                    \"distributionType\": \"percentage\",",
					"                    \"value\": 50",
					"                }",
					"            ],",
					"            \"sourceIds\": [\"0726fc17-38c3-4249-81d3-97ffddada92b\"],",
					"            \"voucherId\": \"d384a4c2-9f85-4072-a305-800b3f6f5143\"",
					"        };",
					"    };",
					"",
					"    utils.buildAdjustmentObject = function(amount, type, prorate){",
					"        return {",
					"            \"description\": \"Adjustment for API test\",",
					"            \"type\": type || \"Amount\",",
					"            \"value\": amount || 10,",
					"            \"prorate\": prorate || \"Not prorated\",",
					"            \"relationToTotal\":\"In addition to\"",
					"        };",
					"    };",
					"",
					"    /* === BEGIN - Functions specific to prorated adjustments tests === */",
					"    /**",
					"     * Validates the invoice's prorated adjustments",
					"     */",
					"    utils.validateInvoiceProratedAdjustments = function(invoice, expectedQuantity) {",
					"        let proAdjustments = invoice.adjustments.filter(adjustment => adjustment.prorate !== \"Not prorated\");",
					"        pm.expect(proAdjustments, \"Adjustments size\").to.have.lengthOf(expectedQuantity);",
					"        proAdjustments.forEach(adjustment => {",
					"            pm.expect(adjustment.id, \"Adjustment must have `id` which is going to be referenced by invoice line's adjustment\").to.exist;",
					"            pm.expect(adjustment.adjustmentId, \"`adjustmentId` is not expected\").to.not.exist;",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice line's prorated adjustments",
					"     */",
					"    utils.validateInvoiceLineProratedAdjustments = function(invoiceLine, expectedQuantity) {",
					"        let invoiceAdjustmentIds = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\")).adjustments.map(adj => adj.id);",
					"        let proAdjustments = invoiceLine.adjustments.filter(adjustment => adjustment.prorate !== \"Not prorated\");",
					"",
					"        pm.expect(proAdjustments, \"Adjustments size\").to.have.lengthOf(expectedQuantity);",
					"        proAdjustments.forEach(adjustment => {",
					"            pm.expect(adjustment.adjustmentId, \"Adjustment must have id to invoice's adjustment\").to.be.oneOf(invoiceAdjustmentIds);",
					"            pm.expect(adjustment.id, \"Adjustment id is not expected - only invoice's prorated adjustment can have it\").to.not.exist;",
					"        });",
					"    };",
					"    /* === END - Functions specific to prorated adjustments tests === */",
					"",
					"    utils.updateInvoiceStatus = function(invoice, status) {",
					"        invoice.status = status;",
					"        utils.sendPutRequest(\"/invoice/invoices/\" + invoice.id, invoice, (err,response) => {",
					"            pm.test(\"Invoice is now \" + status, () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(response).to.have.property('code', 204);",
					"            });",
					"        });",
					"    };",
					"",
					"",
					"    utils.deleteVouchersForInvoice = function(invoiceId) {",
					"        utils.getVouchersForInvoice(invoiceId, (err, res) => {",
					"            utils.deleteVouchers(res.json().vouchers);",
					"        });",
					"    };",
					"",
					"    utils.deleteVouchers = function(vouchers) {",
					"        if (vouchers.length !== 0) {",
					"            const timerId = setTimeout(() => {}, 60000);",
					"",
					"            let promises = vouchers.map(voucher => utils.deleteVoucherLines(voucher.id).then(ok => utils.deleteVoucher(voucher.id)));",
					"",
					"            Promise.all(promises)",
					"                .then(result => clearTimeout(timerId))",
					"                .catch(err => {",
					"                    console.log(\"Error happened on voucher record(s) deletion:\", err);",
					"                    clearTimeout(timerId);",
					"                });",
					"        }",
					"    };",
					"",
					"    utils.deleteVoucher = function(voucherId) {",
					"        return utils.processDeleteRequest(\"/voucher-storage/vouchers/\" + voucherId);",
					"    };",
					"",
					"    utils.deleteVoucherLines = function(voucherId) {",
					"        return new Promise((resolve) => {",
					"            utils.getVoucherLines(voucherId, (err, res) => {",
					"                let promises = [];",
					"                res.json().voucherLines.forEach(line => {",
					"                    promises.push(utils.processDeleteRequest(\"/voucher-storage/voucher-lines/\" + line.id));",
					"                });",
					"                Promise.all(promises)",
					"                    .then(ok => resolve())",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on voucher line record(s) deletion:\", err);",
					"                        resolve();",
					"                    });",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.getVouchersForInvoice = function(invoiceId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/vouchers?query=invoiceId==\" + invoiceId, handler);",
					"    };",
					"",
					"    utils.getVoucherLines = function(voucherId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/voucher-lines?query=voucherId==\" + voucherId, handler);",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function() {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function(configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function(configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function(configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function(configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateInvoicesConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.invoicesConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.ordersConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function(err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.environment.unset(\"completeInvoicelineIds\");",
					"        pm.environment.unset(\"current-invoices-configs\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"documentWithURL\");",
					"        pm.environment.unset(\"documentWithUrlId\");",
					"        pm.environment.unset(\"documentWithBase64Content\");",
					"        pm.environment.unset(\"documentWithBase64Id\");",
					"        pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineContent\");",
					"        pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"folioInvoiceNo\");",
					"        pm.environment.unset(\"filterInvoiceId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"incompatibleFieldsInvoiceId\");",
					"        pm.environment.unset(\"InvoiceIdForDelete\");",
					"        pm.environment.unset(\"InvoiceLineIdForDelete\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosContent\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosId\");",
					"        pm.environment.unset(\"invoiceId\");",
					"        pm.environment.unset(\"isbnIdentifierTypeId\");",
					"        pm.environment.unset(\"lineWithoutFundDistros\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"minInvoiceId\");",
					"        pm.environment.unset(\"mod-invoices-configs\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"negativeAdjInLineId\");",
					"        pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalContent\");",
					"        pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoiceLineId\");",
					"        pm.environment.unset(\"negativeInvoiceLineContent\");",
					"        pm.environment.unset(\"negativeReviewedToApprovedInvoiceContent\");",
					"        pm.environment.unset(\"negativeReviewedToApprovedInvoiceId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoice\");",
					"        pm.environment.unset(\"UUIDDoesNotExists\");",
					"        pm.environment.unset(\"voucherId\");",
					"        pm.environment.unset(\"voucherLineId\");",
					"        pm.environment.unset(\"workflow-invoiceWith4LinesContent\");",
					"        pm.environment.unset(\"workflow-invoiceWith4LinesId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"encumbrance1\");",
					"        pm.environment.unset(\"encumbrance2\");",
					"        pm.environment.unset(\"encumbranceId1\");",
					"        pm.environment.unset(\"encumbranceId2\");",
					"        ",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"mock-invoices\");",
					"        pm.globals.unset(\"mock-invoiceLine\");",
					"        pm.globals.unset(\"poLine1Id\");",
					"        pm.globals.unset(\"poLine2Id\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        console.log(\"Starting validating against schemas\");",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice against schema",
					"     */",
					"    utils.validateInvoice = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceSchema());",
					"    };",
					"",
					"    utils.getInvoiceSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice line against schema",
					"     */",
					"    utils.validateInvoiceLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceLineSchema());",
					"    };",
					"",
					"    utils.getInvoiceLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher against schema",
					"     */",
					"    utils.validateVoucher = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherSchema());",
					"    };",
					"",
					"    utils.getVoucherSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher line against schema",
					"     */",
					"    utils.validateVoucherLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherLineSchema());",
					"    };",
					"",
					"    utils.getVoucherLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates batch voucher export config against schema",
					"     */",
					"    utils.validateExportConfig = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getExportConfigSchema());",
					"    }",
					"",
					"    utils.getExportConfigSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"export_configuration.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch voucher export config collection against schema",
					"     */",
					"    utils.validateExportConfigCollection = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getExportConfigCollectionSchema());",
					"    }",
					"",
					"    utils.getExportConfigCollectionSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"export_configuration_collection.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice is empty except required fields, invoice id and folioInvoiceNo",
					"     */",
					"    utils.validateInvoiceWithMinimalContent = function(invoice) {",
					"        let expectedInvoice = utils.buildInvoiceWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoice.id, \"Invoice id expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total not expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total should be zero\").to.eql(0);",
					"        pm.expect(invoice.currency, \"Invoice currency expected\").to.exist;",
					"        pm.expect(invoice.currency, \"Invoice currency does not match to expected\").to.eql(expectedInvoice.currency);",
					"        pm.expect(invoice.invoiceDate, \"Invoice date expected\").to.exist;",
					"        pm.expect(invoice.invoiceDate, \"Invoice date does not match to expected\").to.eql(expectedInvoice.invoiceDate);",
					"        pm.expect(invoice.lockTotal, \"Invoice lock total does not match to expected\").to.eql(false);",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method expected\").to.exist;",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method does not match to expected\").to.eql(expectedInvoice.paymentMethod);",
					"        pm.expect(invoice.status, \"Invoice status expected\").to.exist;",
					"        pm.expect(invoice.status, \"Invoice status does not match to expected\").to.eql(expectedInvoice.status);",
					"        pm.expect(invoice.folioInvoiceNo, \"Folio Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.metadata, \"Invoice metadata expected\").to.exist;",
					"        pm.expect(invoice.note, \"Invoice note\").to.equal(utils.INVOICE_NOTE);",
					"        pm.expect(invoice.source, \"Invoice source does not match to expected\").to.eql(expectedInvoice.source);",
					"        pm.expect(invoice.subTotal, \"Invoice subTotal not expected\").to.exist;",
					"        pm.expect(invoice.subTotal, \"Invoice subtotal should be zero\").to.eql(0);",
					"        pm.expect(invoice.total, \"Invoice total not expected\").to.exist;",
					"        pm.expect(invoice.total, \"Invoice total should be zero\").to.eql(0);",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice number does not match to expected\").to.eql(expectedInvoice.vendorInvoiceNo);",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id does not match to expected\").to.eql(expectedInvoice.vendorId);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoice.adjustments, \"Invoice adjustments expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.acquisitionsUnit, \"Invoice acquisitions unit not expected\").to.not.exist;",
					"        pm.expect(invoice.approvedBy, \"Invoice approved by not expected\").to.not.exist;",
					"        pm.expect(invoice.approvalDate, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.chkSubscriptionOverlap, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementNumber, \"Invoice disbursement number not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementDate, \"Invoice disbursement date not expected\").to.not.exist;",
					"        pm.expect(invoice.manualPayment, \"Invoice manual payment not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentDue, \"Invoice payment due not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentId, \"Invoice payment id not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentTerms, \"Invoice payment terms not expected\").to.not.exist;",
					"        pm.expect(invoice.poNumbers, \"Invoice PO numbers expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.voucherNumber, \"Invoice voucher number not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Build invoice with minimal required fields.",
					"     */",
					"    utils.buildInvoiceWithMinContent = function(vendorInvoiceNo) {",
					"        return {",
					"            \"currency\": \"USD\",",
					"            \"invoiceDate\": \"2018-07-20T00:00:00.000+0000\",",
					"            \"paymentMethod\": \"EFT\",",
					"            \"status\": \"Open\",",
					"            \"source\": \"API\",",
					"            \"vendorInvoiceNo\": vendorInvoiceNo || \"YK75851\",",
					"            \"vendorId\": \"168f8a63-d612-406e-813f-c7527f241ac3\",",
					"            \"note\": utils.INVOICE_NOTE",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, body, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"",
					"    /**",
					"     * Check if two arrays are equal",
					"     */",
					"    utils.arraysOfStringsAreEqual = function(array1, array2) {",
					"        return JSON.stringify(array1)==JSON.stringify(array2);",
					"    };",
					"    ",
					"    /**",
					"     * Build batch-group.",
					"     */",
					"    utils.buildBatchGroup = function() {",
					"        return {",
					"            \"id\": \"5082b4c2-1504-421e-9da0-0ee8c9e8b07d\",",
					"            \"name\": \"Marx Library\",",
					"            \"description\": \"University of South Alabama\"",
					"            ",
					"        };",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch-voucher-export against schema",
					"     */",
					"    utils.validateBatchVoucherExport = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getBatchVoucherExportSchema());",
					"    };",
					"",
					"    utils.getBatchVoucherExportSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"batch_voucher_export.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch-group against schema",
					"     */",
					"    utils.validateBatchGroup = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getBatchGroupSchema());",
					"    };",
					"",
					"    utils.getBatchGroupSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"batch_group.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates export configuration credentials against schema",
					"     */",
					"    utils.validateCredentials = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getCredentials());",
					"    };",
					"",
					"    utils.getCredentials = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"credentials.json\"));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines for Fund Distribution.",
					"     */",
					"    utils.prepareOrderFundDistri = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLineFundDistri(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"    ",
					"        /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data for Fund Distribution.",
					"     */",
					"    utils.preparePoLineFundDistri = function(poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }        ",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }        ",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"    ",
					"        /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function(productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"    ",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "37f98924-2fb9-48c8-b063-a658d848d389",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "05010f61-c4b8-4b15-8d3e-8eab3cbbb74c",
			"key": "testTenant",
			"value": "invoice_api_tests",
			"type": "string"
		},
		{
			"id": "2dd0ae03-0c4f-4267-8dee-40741432bb8a",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-invoice/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "e5101718-f056-4b5a-8714-6e16a7071071",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "85ec482a-77b1-410d-ab06-2a5874861ca3",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		},
		{
			"id": "32e2d3c2-62cb-472c-ad18-cfdf061e8a15",
			"key": "inventory-instanceTypeCode",
			"value": "invoicingApiTestsIdentifierType",
			"type": "string"
		},
		{
			"id": "e10cbc54-3c06-48a8-b366-feced8fbbfa6",
			"key": "finance-ledgerCode",
			"value": "invoicingApiTests",
			"type": "string"
		},
		{
			"id": "ac19ba60-8d34-43a9-8727-c50b870546ee",
			"key": "finance-fundCode",
			"value": "invoicingApiTests",
			"type": "string"
		},
		{
			"id": "90a3a74f-a960-4ff7-bf39-391c614a3e86",
			"key": "voucherNumber",
			"value": "{\"voucherNumberPrefix\": \"testPrefix\"}",
			"type": "string"
		},
		{
			"id": "e04aeb67-0b1b-431a-a13f-307c967cde94",
			"key": "batchGroupSystemRecordId",
			"value": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}