{
	"info": {
		"_postman_id": "4794b7c2-bf39-4c4d-b6bb-6dea1140e1e0",
		"name": "Smoke_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "health",
			"item": [
				{
					"name": "GET _/discovery/health",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e0e4445-100d-419a-a3af-3c4b0c0ae9e7",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.response.json().forEach(function(element){",
									"    pm.test(\"Health check for \" + element.srvcId + \" modules passes\", function () {",
									"    pm.expect(element.healthMessage).to.equal(\"OK\");",
									"    pm.expect(element.healthStatus).to.equal(true);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-okapi-tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/_/discovery/health",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"_",
								"discovery",
								"health"
							]
						}
					},
					"response": []
				}
			],
			"description": "All tests for testing the health path within Okapi discovery service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5d463879-3484-4745-8b69-8f33bd185a6c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3c135bd4-b3d6-4e4f-bdec-7f0e5846a3fc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45a916bb-dc72-427a-90c1-72986fa8d093",
								"exec": [
									"let token = postman.getResponseHeader(\"x-okapi-token\");",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "mod-circulation",
			"item": [
				{
					"name": "setting test data",
					"item": [
						{
							"name": "/users -active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49d30306-1952-4c72-a37b-99e44888d5b8",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let len = response.users.length;",
											"if(len > 0){",
											"    pm.environment.set(\"circ_test_userid\", response.users[len-1].id);",
											"     pm.environment.set(\"circ_test_userbarcode\", response.users[len-1].barcode);",
											"}   ",
											"else {",
											"       console.log('NO USERS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN TESTS');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/users?limit=10&query=active=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "query",
											"value": "active=true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/users -test user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18ff6ffb-488d-4912-bf15-615f0a666abd",
										"exec": [
											"",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    console.log(pm.response.json());",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/users/{{circ_test_userid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"users",
										"{{circ_test_userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/items - available book",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbe131d7-7106-45d2-9cf8-c264a50ffd12",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let len = response.items.length;",
											"",
											"if(len > 0){",
											"    pm.environment.set(\"circ_test_itemid\", response.items[len-1].id);",
											"    pm.environment.set(\"circ_test_itembarcode\", response.items[len-1].barcode);",
											"}",
											"else {",
											"      console.log('NO ITEMS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/items?limit=10&query=(status.name=Available* and materialType.name=book)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"items"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "query",
											"value": "(status.name=Available* and materialType.name=book)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/items - test item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d10c5f84-7646-43f5-bcf2-85b1d333a7b9",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    console.log(pm.response.json());",
											"});",
											"",
											"",
											"let len = response.items.length;",
											"",
											"if(len > 0){",
											"    pm.environment.set(\"circ_test_itemid\", response.items[len-1].id);",
											"    pm.environment.set(\"circ_test_itembarcode\", response.items[len-1].barcode);",
											"}",
											"else {",
											"      console.log('NO ITEMS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/items?limit=10&query=(barcode={{circ_test_itembarcode}})",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"items"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "query",
											"value": "(barcode={{circ_test_itembarcode}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/service-points",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91a0b3ac-3342-46a6-9517-e4f5a5b13e4e",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let len = response.servicepoints.length;",
											"",
											"if(len > 0){",
											"    pm.environment.set(\"circ_test_servicepointid\", response.servicepoints[len-1].id);",
											"}",
											"else {",
											"      console.log('NO SERVICE POINTS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/service-points",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"service-points"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "circulation/check-out-by-barcode",
					"item": [
						{
							"name": "check-out-by-barcode - required fields only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a52014ae-ccf7-46e7-a7bc-f04b860d59ae",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\",\n\"servicePointId\": \"{{circ_test_servicepointid}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"checkinServicePointId\": \"{{circ_test_servicepointid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1460b0e8-601b-4a61-b70f-6d94d3e14f57",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "circulation/renew-by-barcode",
					"item": [
						{
							"name": "check-out-by-barcode - setting up the loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73cbdea5-51a0-417c-9372-e100ebf61ccd",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\",\n\"servicePointId\": \"{{circ_test_servicepointid}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"name": "renew-by-barcode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78d7cd9e-0ca5-4244-a98a-46233f5bf9f5",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"    pm.expect(response.action).to.equal(\"renewed\");",
											"    pm.expect(response.renewalCount).to.equal(1);",
											"     ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\",\n\"servicePointId\": \"{{circ_test_servicepointid}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/renew-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"renew-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"checkinServicePointId\": \"{{circ_test_servicepointid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e4e395c-6a1d-481c-94e0-c5c30758ee39",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "157bef13-e6c4-455d-9c31-9d276215ee39",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6de4d878-f472-4bc3-98da-fca0ca9f2065",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "circulation/renew-by-id",
					"item": [
						{
							"name": "check-out-by-barcode - setting up the loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcfb66ef-d97f-4665-ac0f-90345b528c0e",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\",\n\"servicePointId\": \"{{circ_test_servicepointid}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"name": "renew-by-id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5273f425-6db9-4e41-952a-a205691734df",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"    pm.expect(response.action).to.equal(\"renewed\");",
											"    pm.expect(response.renewalCount).to.equal(1);",
											"     ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"servicePointId\": \"{{circ_test_servicepointid}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/renew-by-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"renew-by-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"checkinServicePointId\": \"{{circ_test_servicepointid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b7f004f-fe84-418a-b593-76e1ad1a9723",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "157bef13-e6c4-455d-9c31-9d276215ee39",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6de4d878-f472-4bc3-98da-fca0ca9f2065",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "circulation/loans",
					"item": [
						{
							"name": "/circulation/loans",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0eaa3e58-5334-4045-a2f6-838f9c170877",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "531fb774-242a-443f-8685-0bb7bdd02de3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans - required fields only + status Closed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efc5d299-5e98-467e-b25f-2eb2df9ca1e2",
										"exec": [
											"//the scenario should not be possible.  If the user checks in the item, the status should not be closed because as a result the user will have item listed as checked out when in fact the item is checked in.",
											"",
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"generic_loanid\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"checkinServicePointId\": \"{{circ_test_servicepointid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ae02267-e206-436e-9b5c-03a70940eb1f",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contain correct data\", function(){",
											"    pm.expect(response.id).to.equal(pm.environment.get(\"generic_loanid\"));",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\"));",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{generic_loanid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{generic_loanid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02a3193e-3be7-482f-b14b-f111d61e3219",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "834355ba-7b25-43ea-90a7-352cf885e629",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"id\" : \"dupajas\",\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"checkinServicePointId\": \"{{circ_test_servicepointid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkout\",\n\"status\": {\n        \"name\": \"Open\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{generic_loanid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{generic_loanid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/loans/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "620c9245-436f-43cd-af48-ed7dd1c47bd8",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/loans/{{generic_loanid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"loans",
										"{{generic_loanid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "circulation/rules",
					"item": [
						{
							"name": "/circulation/rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5481587f-12ab-4c8d-84d2-970ba7af22ca",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/rules",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/rules/loan-policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd8eae2f-000f-47b5-aea8-7ae839bda1af",
										"exec": [
											"//This is really strange behavior  -it always return the same record - event though the provided parameters are invalid",
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "daa27d22-2b50-4f5d-b865-28a8dece4be1",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"okapiurl\") + \"/locations\",",
											"    method: 'GET',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'accept': 'application/json',",
											"        'x-okapi-tenant': pm.variables.get(\"xokapitenant\"),",
											"        'x-okapi-token': pm.variables.get(\"xokapitoken\")",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"existingLocationId\", res.json().locations[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/rules/loan-policy?item_type_id={{$guid}}&loan_type_id={{$guid}}&patron_type_id={{$guid}}&location_id={{existingLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"rules",
										"loan-policy"
									],
									"query": [
										{
											"key": "item_type_id",
											"value": "{{$guid}}"
										},
										{
											"key": "loan_type_id",
											"value": "{{$guid}}"
										},
										{
											"key": "patron_type_id",
											"value": "{{$guid}}"
										},
										{
											"key": "location_id",
											"value": "{{existingLocationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/rules/loan-policy-all",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95352ff5-b7d0-454f-8102-9dfb2e53a6df",
										"exec": [
											"//This is really strange behavior  -it always return the same record - event though the provided parameters are invalid",
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "89fd70b9-cbc5-4e00-9579-7b9b3c273e31",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"okapiurl\") + \"/locations\",",
											"    method: 'GET',",
											"    header: {",
											"        'content-type': 'application/json',",
											"        'accept': 'application/json',",
											"        'x-okapi-tenant': pm.variables.get(\"xokapitenant\"),",
											"        'x-okapi-token': pm.variables.get(\"xokapitoken\")",
											"    }",
											"}, function (err, res) {",
											"    pm.environment.set(\"existingLocationId\", res.json().locations[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/rules/loan-policy-all?item_type_id={{$guid}}&loan_type_id={{$guid}}&patron_type_id={{$guid}}&location_id={{existingLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"rules",
										"loan-policy-all"
									],
									"query": [
										{
											"key": "item_type_id",
											"value": "{{$guid}}"
										},
										{
											"key": "loan_type_id",
											"value": "{{$guid}}"
										},
										{
											"key": "patron_type_id",
											"value": "{{$guid}}"
										},
										{
											"key": "location_id",
											"value": "{{existingLocationId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "circulation/requests",
					"item": [
						{
							"name": "/circulation/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d7b17e7-7b64-4441-acad-58f1a418b397",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/requests",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "550e04f0-15a2-42f9-9f4a-96c88dddc4c6",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"newrequestid\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f8dfafc-387e-4388-be01-b4b8a76325a4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requestType\": \"Hold\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_test_userid}}\",\r\n  \"itemId\": \"{{circ_test_itemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2018-07-25\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/requests",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/requests/{{newrequestid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10874fad-e48e-4301-b242-f0dc6cb86244",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/requests/{{newrequestid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"requests",
										"{{newrequestid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/requests{{newrequestid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "686a3118-cfc5-430b-8b08-07ae5de27c3e",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{newrequestid}}\",\r\n  \"requestType\": \"Page\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_test_userid}}\",\r\n  \"itemId\": \"{{circ_test_itemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2017-07-25\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/requests/{{newrequestid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"requests",
										"{{newrequestid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/requests/{{newrequestid}} - verify update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad9f1689-3570-4e84-8c44-86c063eb2795",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Correct data is returned\", function () {",
											"    pm.expect(response.requestType).to.equal(\"Page\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/requests/{{newrequestid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"requests",
										"{{newrequestid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/circulation/requests/{{newrequestid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cf78ce9-7c9f-46d6-aa41-64d0d55f135e",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{existingrequestid}}\",\r\n  \"requestType\": \"Page\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{loanuserid}}\",\r\n  \"itemId\": \"{{loanitemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2017-07-25\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/circulation/requests/{{newrequestid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"circulation",
										"requests",
										"{{newrequestid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "mod-circulation-storage",
			"item": [
				{
					"name": "setting test data",
					"item": [
						{
							"name": "/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0983c0c-4fd5-4db9-bba4-d2b190ae1755",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let len = response.users.length;",
											"if(len > 0){",
											"    pm.environment.set(\"circ_storage_test_userid\", response.users[len-1].id);",
											"}   ",
											"else {",
											"       console.log('NO USERS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN TESTS');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/users?=limit=10",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "",
											"value": "limit=10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f57d3de9-b466-47c1-bba3-0a6a0ff839f9",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"let len = response.items.length;",
											"",
											"if(len > 0){",
											"    pm.environment.set(\"circ_storage_test_itemid\", response.items[len-1].id);",
											"}",
											"else {",
											"      console.log('NO ITEMS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/items?limit=10&query=(status.name=Available*)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"items"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "query",
											"value": "(status.name=Available*)"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "loan-storage/loans",
					"item": [
						{
							"name": "/loan-storage/loans",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3c9cbed-e024-46b6-962a-82bf50331828",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-storage/loans",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-storage",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans - required fields only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd25fd64-e8cb-45c1-8b43-6e3b6b3e413d",
										"exec": [
											"let  response = JSON.parse(responseBody);",
											"",
											"pm.environment.set(\"newloanstorageid\", response.id);",
											"pm.test(\"New loan was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											" pm.response.to.be.withBody;",
											" pm.response.to.be.json; ",
											" }); ",
											"  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "14cd3b3d-308d-4e6e-8091-23a4794070ac",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_storage_test_userid}}\",\n\"itemId\": \"{{circ_storage_test_itemid}}\",\n\"loanDate\": \"2018-01-12\",\n\"action\": \"checkedout\",\n\"status\": {\n  \"name\": \"Open\"\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-storage/loans",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-storage",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans/{{newloanstorageid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdc81180-b5c3-4193-990e-c51251e72e3b",
										"exec": [
											"pm.test(\"The loan was updated. Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "550e0893-cf8a-4048-8a0f-1233f40f6218",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_storage_test_userid}}\",\n\"itemId\": \"{{circ_storage_test_itemid}}\",\n\"loanDate\": \"2018-01-12T13:12:16Z\",\n\"action\": \"checkedin\",\n\"status\": {\n  \"name\": \"Closed\"\n  }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-storage/loans/{{newloanstorageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-storage",
										"loans",
										"{{newloanstorageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loan-history",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1ad616f-8846-40e0-840f-96ef95f150a6",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"//setting some test data",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var loansCount=pm.environment.set(\"loansCount\",pm.response.json().totalRecords);",
											"if(loansCount>0)",
											"{",
											"    pm.environment.set(\"limitRecords\",loansCount-1);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-storage/loan-history",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-storage",
										"loan-history"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-storage/loans/{{newloanstorageid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41c0dc36-5cc5-43d0-b7c1-e8e08c586eaf",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-storage/loans/{{newloanstorageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-storage",
										"loans",
										"{{newloanstorageid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9263a166-b532-4458-861d-6a74a7ef35d1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc0c2cf-280d-400b-8c4a-9fbeac529fcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "loan-policy-storage",
					"item": [
						{
							"name": "/loan-policy-storage/loan-policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54624b82-a60b-4fec-b5f2-d5329a55ed44",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-policy-storage/loan-policies",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-policy-storage",
										"loan-policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-policy-storage/loan-policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd46102c-f748-4ddd-a271-bd6608d67400",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"pm.environment.set(\"newloanpolicyid\", response.id);",
											"pm.test(\"New loan was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											" pm.response.to.be.withBody;",
											" pm.response.to.be.json; ",
											" }); ",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "729764ff-1429-4d36-a622-bdbebbc3c38a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"FSE testing Loan Policy\",\r\n  \"description\": \"An example loan policy\",\r\n  \"loanable\": true,\r\n  \"loansPolicy\": {\r\n    \"profileId\": \"ROLLING\",\r\n    \"period\": {\r\n      \"duration\": 1,\r\n      \"intervalId\": \"MONTH\"\r\n    },\r\n    \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\r\n    \"existingRequestsPeriod\": {\r\n      \"duration\": 1,\r\n      \"intervalId\": \"WEEK\"\r\n    },\r\n    \"gracePeriod\": {\r\n      \"duration\": 7,\r\n      \"intervalId\": \"DAYS\"\r\n    }\r\n  },\r\n  \"renewable\": true,\r\n  \"renewalsPolicy\": {\r\n    \"unlimited\": true,\r\n    \"renewFromId\": \"CURRENT_DUE_DATE\",\r\n    \"differentPeriod\": true,\r\n    \"period\": {\r\n      \"duration\": 30,\r\n      \"intervalId\": \"DAYS\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-policy-storage/loan-policies",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-policy-storage",
										"loan-policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08858d12-4990-4d14-8529-58d37c79ef07",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-policy-storage",
										"loan-policies",
										"{{newloanpolicyid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45e12dd5-2dd9-4199-ac12-c6afbd9fd05d",
										"exec": [
											"",
											"pm.test(\"New loan policy was created. Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "729764ff-1429-4d36-a622-bdbebbc3c38a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\": \"FSE testing Loan Policy\",\r\n  \"description\": \"An example loan policy\",\r\n  \"loanable\": true,\r\n  \"loansPolicy\": {\r\n    \"profileId\": \"INDEFINITE\",\r\n    \"period\": {\r\n      \"duration\": 1,\r\n      \"intervalId\": \"MONTH\"\r\n    },\r\n    \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\r\n    \"existingRequestsPeriod\": {\r\n      \"duration\": 1,\r\n      \"intervalId\": \"WEEK\"\r\n    },\r\n    \"gracePeriod\": {\r\n      \"duration\": 7,\r\n      \"intervalId\": \"DAYS\"\r\n    }\r\n  },\r\n  \"renewable\": true,\r\n  \"renewalsPolicy\": {\r\n    \"unlimited\": true,\r\n    \"renewFromId\": \"CURRENT_DUE_DATE\",\r\n    \"differentPeriod\": true,\r\n    \"period\": {\r\n      \"duration\": 30,\r\n      \"intervalId\": \"DAYS\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-policy-storage",
										"loan-policies",
										"{{newloanpolicyid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b64f8da-4226-462f-a4ac-d1b9cab2b941",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-policy-storage/loan-policies/{{newloanpolicyid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-policy-storage",
										"loan-policies",
										"{{newloanpolicyid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65cf37cc-53e0-4a6d-a2cb-bff1b19cb09c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e0adf7d-d014-479b-adb0-ba46b06b429a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "loan-rules-storage",
					"item": [
						{
							"name": "/loan-rules-storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "485ddeea-cdc1-423b-8bad-bebc5f1efe7d",
										"exec": [
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-rules-storage",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-rules-storage"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aabd1094-63d3-4c77-88d0-2541fadaed00",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e3ca77db-1a14-473a-9ebd-dbeb683b5d46",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "request-storage",
					"item": [
						{
							"name": "/request-storage/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e17553-fa2f-44da-a8fd-8cfdb6305bfa",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/request-storage/requests",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"request-storage",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "/request-storage/requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f5d2c52-7578-4a7a-b925-209b67dfc4c7",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"pm.environment.set(\"newrequeststorageid\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3cbde4eb-a56e-47af-b033-c738e933cc41",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requestType\": \"Hold\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_storage_test_userid}}\",\r\n  \"itemId\": \"{{circ_storage_test_itemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2018-07-08\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/request-storage/requests",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"request-storage",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "/request-storage/requests{{newrequeststorageid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac8cf99a-4774-4cb1-af60-de6bb169d989",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/request-storage/requests/{{newrequeststorageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"request-storage",
										"requests",
										"{{newrequeststorageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/request-storage/requests{{newrequeststorageid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3583bca5-74a3-47c7-a861-745b629f6505",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{newrequeststorageid}}\",\r\n  \"requestType\": \"Page\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_storage_test_userid}}\",\r\n  \"itemId\": \"{{circ_storage_test_itemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2017-07-25\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/request-storage/requests/{{newrequeststorageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"request-storage",
										"requests",
										"{{newrequeststorageid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/request-storage/requests/{{newrequestid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67295dc3-15cd-42ee-af9f-2b6d222b3260",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/request-storage/requests/{{newrequeststorageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"request-storage",
										"requests",
										"{{newrequeststorageid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "505752bf-8f51-4dd9-b022-7d3235a394fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dba431a3-c4ed-4077-aa75-2afba04dd74c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "fixed-due-date-schedule",
					"item": [
						{
							"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53c9516d-0104-47a1-9884-d63ef2fe92e3",
										"exec": [
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/fixed-due-date-schedule-storage/fixed-due-date-schedules",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"fixed-due-date-schedule-storage",
										"fixed-due-date-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules - required only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c5496c8-3fec-4082-b32d-5dc1c761967f",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"pm.environment.set(\"fixedduedateid\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3cbde4eb-a56e-47af-b033-c738e933cc41",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"FSE Testing Due Date Schedule\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/fixed-due-date-schedule-storage/fixed-due-date-schedules",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"fixed-due-date-schedule-storage",
										"fixed-due-date-schedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d713a9b-fb94-482d-af74-b9681b24cdc6",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"fixed-due-date-schedule-storage",
										"fixed-due-date-schedules",
										"{{fixedduedateid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22276d44-b837-4542-84f0-fb7fe5dfbdf3",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/fixed-due-date-schedule-storage/fixed-due-date-schedules/{{fixedduedateid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"fixed-due-date-schedule-storage",
										"fixed-due-date-schedules",
										"{{fixedduedateid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "260b5602-a6fc-47af-8425-b6eb7b34195a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "524b77f6-c17a-418a-8417-20899cc12e35",
								"type": "text/javascript",
								"exec": [
									"//verify headers",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "mod-codex-ekb",
			"item": [
				{
					"name": "Setup Configuration",
					"item": [
						{
							"name": "Check if apiURL exists and generate okapi token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5aff341e-ea9b-4b52-aa5d-66a15e9b0326",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"apiUrlFlag\", true);",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"apiUrlFlag\", false);",
											"    //\"Api Url exists -- do not POST\");",
											"    postman.setNextRequest(\"Check if customerId exists\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71913edb-9235-4f27-afb3-b7bb5051e005",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\")+ \"/authn/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
											"    }",
											"}, function(err, res) {",
											"        if (err !== null) {",
											"        console.log(\"Login error: \" + err);",
											"        } else {",
											"            if (res.code === 201) {",
											"                pm.environment.set(\"xokapitoken-codex-ekb\", res.headers.get(\"X-Okapi-Token\"));",
											"            }",
											"            else {",
											"                console.log(\"Could not generate token\" + res.code);",
											"            }",
											"        }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - RM-API URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6900a989-193a-42b8-ac1e-d1b0b185a148",
										"exec": [
											"pm.test(\"success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - configuration entry added successfully through RM-API URL\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"X-Okapi-Module-Id is present\", function () {",
											"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store api id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-url-id\", body.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{modCodexEkb}}",
										"disabled": true
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.url\",\r\n    \"description\": \"EBSCO RM-API URL\",\r\n    \"enabled\": true,\r\n    \"value\": \"https://sandbox.ebsco.io\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									]
								},
								"description": "Create configuration RM API URL"
							},
							"response": []
						},
						{
							"name": "Check if customerId exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cda9635-e356-4ca8-8af4-d6d54d055312",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"customerIdFlag\", true);",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"customerIdFlag\", false);",
											"    //\"Customer Id exists -- do not POST\");",
											"    postman.setNextRequest(\"Check if apiKey exists\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - RM-API customerId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ec4a5e5-bc72-48eb-8774-a365c615954e",
										"exec": [
											"",
											"pm.test(\"Success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - configuration entry successfully created through customerId\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"X-Okapi-Module-Id is present\", function () {",
											"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store api id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-customer-id\", body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{modCodexEkb}}",
										"disabled": true
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.customerId\",\r\n    \"description\": \"EBSCO RM-API Customer ID\",\r\n    \"enabled\": true,\r\n    \"value\": \"apidvgvmt\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									]
								},
								"description": "Create customer id as part of configuration"
							},
							"response": []
						},
						{
							"name": "Check if apiKey exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "107001c3-7c80-47bb-ab6b-f0330ae9b3e6",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"apiKeyFlag\", true);",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"apiKeyFlag\", false);",
											"    //\"Api key exists -- do not POST\");",
											"    postman.setNextRequest(\"Get list of Ekb instances\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - RM-API apiKey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "68e1198a-c696-4a69-ab0c-563d7346e92d",
										"exec": [
											"pm.test(\"success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - apiKey entry successfully created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"X-Okapi-Module-Id is present\", function () {",
											"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store api id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-key-id\", body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{modCodexEkb}}",
										"disabled": true
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.apiKey\",\r\n    \"description\": \"EBSCO RM-API API Key\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rmapi_api_key}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									]
								},
								"description": "Create configuration api key"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7378bc5c-916f-41aa-b57e-b2c274efe3f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a26b4778-0c56-409b-93fe-f848a949171b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "codex-ekb",
					"item": [
						{
							"name": "Get list of Ekb instances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3ad0229a-b11c-402f-bf6e-75b350e97811",
										"exec": [
											"            pm.environment.set(\"xokapitoken-codex-ekb\", pm.environment.get(\"xokapitoken\"));\r",
											"            pm.sendRequest({\r",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/authn/login\",\r",
											"                method: 'POST',\r",
											"                header: {\r",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\r",
											"                    'Content-Type': 'application/json'\r",
											"                },\r",
											"                body: {\r",
											"                    mode: 'raw',\r",
											"                    raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})\r",
											"                }\r",
											"        }, function(err, res) {\r",
											"            //Get list of proxy tenant modules using same token generated above\r",
											"            pm.sendRequest({\r",
											"            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/modules\",\r",
											"            method: 'GET',\r",
											"            header: {\r",
											"                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\r",
											"                'Content-Type': 'application/json',\r",
											"                'X-Okapi-Token': res.headers.get(\"X-Okapi-Token\")\r",
											"            },\r",
											"        }, function(err, res) {\r",
											"        if (err !== null) {\r",
											"            console.log(\"user creation error: \" + err);\r",
											"        } else {\r",
											"            //Get and set latest mod codex ekb id\r",
											"            var jsonData = res.json();\r",
											"            for(var i=0; i< jsonData.length; i++) {\r",
											"                if(jsonData[i].id.startsWith(\"mod-codex-ekb\")) {\r",
											"                    pm.environment.set(\"modCodexEkb\", jsonData[i].id);\r",
											"                    break;\r",
											"            }\r",
											"        }\r",
											"        if(pm.environment.get(\"modCodexEkb\")!== null) {\r",
											"            //Using the mod codex ekb id captured above, use that to retrieve list of mod codex ekb instances\r",
											"            pm.sendRequest({\r",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/codex-instances?query=(publisher=BMJ)\",\r",
											"                method: 'GET',\r",
											"                header: {\r",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\r",
											"                    'X-Okapi-Token': pm.environment.get(\"xokapitoken-codex-ekb\"),\r",
											"                    'X-Okapi-Module-Id': pm.environment.get(\"modCodexEkb\"),\r",
											"                    'Content-Type': 'application/json'\r",
											"                },\r",
											"            }, function(err, res) {\r",
											"                 if (err !== null) {\r",
											"                    console.log(\"codex instance error: \" + err);\r",
											"                } else {\r",
											"                    //Grab few fields from randomly generated mod codex ekb instance and save them in environment variables for testing purpose\r",
											"                    var jsonData = res.json();\r",
											"                    var randomIndex = Math.floor(Math.random()*jsonData.instances.length);\r",
											"                    var storeInstance= {};\r",
											"                    storeInstance.title = jsonData.instances[randomIndex].title;\r",
											"                    storeInstance.type = jsonData.instances[randomIndex].type;\r",
											"                    storeInstance.publisher = jsonData.instances[randomIndex].publisher;\r",
											"                    storeInstance.source = jsonData.instances[randomIndex].source;\r",
											"                    storeInstance.format = jsonData.instances[randomIndex].format;\r",
											"                    pm.environment.set(\"EkbInstanceTitle\", storeInstance.title);\r",
											"                    pm.environment.set(\"EkbInstanceType\", storeInstance.type);\r",
											"                    pm.environment.set(\"EkbInstancePublisher\", storeInstance.publisher);\r",
											"                    pm.environment.set(\"EkbInstanceSource\", storeInstance.source);\r",
											"                    pm.environment.set(\"EkbInstanceFormat\", storeInstance.format);\r",
											"                    pm.environment.set(\"id\", jsonData.instances[randomIndex].id);\r",
											"                }\r",
											"            });\r",
											"        }\r",
											"        else{\r",
											"            console.log(\"Error getting Codex Instances\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a1437dbd-37c3-4086-ac03-fa34fe1ab5d5",
										"exec": [
											"pm.test(\"Success test on json response when title exists\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response status is 200 when title exists\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{modCodexEkb}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/codex-instances?query=(publisher=BMJ)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"codex-instances"
									],
									"query": [
										{
											"key": "query",
											"value": "(publisher=BMJ)"
										}
									]
								},
								"description": "Test Ekb codex-instances listing"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Tear-Down Configuration",
					"item": [
						{
							"name": "Check if apiKey exists to delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87ce7882-a1cf-4799-87dc-71de37093375",
										"exec": [
											"let jsonData = pm.response.json();",
											"let flagApiKeyId = pm.environment.get(\"apiKeyFlag\");",
											"if((jsonData !==null && jsonData.configs.length >0) && !flagApiKeyId) {",
											"    //Api key do not exist -- DO NOT DELETE",
											"    postman.setNextRequest(\"Check if customerId exists to delete\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM-API Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e32fd54e-e57e-45d9-8a69-76fd0c81f95a",
										"exec": [
											"//Clean-up RM API Key configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{rm-api-key-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{rm-api-key-id}}"
									]
								},
								"description": "Clean-up RM-API Key configuration"
							},
							"response": []
						},
						{
							"name": "Check if customerId exists to delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5dbe6aec-56e0-42d8-a316-db054e72f2cf",
										"exec": [
											"let jsonData = pm.response.json();",
											"let flagCustomerId = pm.environment.get(\"customerIdFlag\");",
											"if((jsonData !==null && jsonData.configs.length >0) && !flagCustomerId) {",
											"    //Customer Id do not exists -- do not DELETE",
											"    postman.setNextRequest(\"Check if apiUrl exists to delete\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM-API CustomerId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5272edee-cb6c-40c9-8fc3-ff08585cd210",
										"exec": [
											"//Clean-up RM API customer configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{rm-api-customer-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{rm-api-customer-id}}"
									]
								},
								"description": "Clean-up RM-API CustomerId configuration"
							},
							"response": []
						},
						{
							"name": "Check if apiUrl exists to delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79e2224b-0330-4da2-8119-a4aa8063098f",
										"exec": [
											"let jsonData = pm.response.json();",
											"let flagApiUrl = pm.environment.get(\"apiUrlFlag\");",
											"if((jsonData !==null && jsonData.configs.length >0) && !flagApiUrl) {",
											"    //Api URL do not exists -- do not DELETE\");",
											"    postman.setNextRequest(\"/codex-instances/{id} - invalid token\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM-API URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d171baf7-b7ee-46d9-ac32-eb0a8fa3d38b",
										"exec": [
											"//Clean-up RM API URL configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{rm-api-url-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{rm-api-url-id}}"
									]
								},
								"description": "Clean-up RM-API URL configuration"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1027eea9-68c4-48eb-8193-b4c405e8f182",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "352349d2-1dae-47f1-b9bd-bccbc161503d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "mod-codex-inventory",
			"item": [
				{
					"name": "/codex-instances",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f63f7199-31cd-4dce-9a1d-a9a8eeb4aee0",
								"exec": [
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-instances : 200\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Module-Id is present\", function () {",
									"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/codex-instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"codex-instances"
							]
						},
						"description": "Test codex-instances listing"
					},
					"response": []
				}
			],
			"description": "Tests for the /codex-instances end point.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
						"type": "text/javascript",
						"exec": [
							"//Get okapi token for authn/login",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/authn/login\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"Login error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.environment.set(\"xokapitoken-codex-inventory\", res.headers.get(\"X-Okapi-Token\"));",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/authn/login\",",
							"                method: 'POST',",
							"                header: {",
							"                    'X-Okapi-Tenant': \"supertenant\",",
							"                    'Content-Type': 'application/json'",
							"                },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw : JSON.stringify({ username: pm.environment.get(\"supertenant_username\"), password: pm.environment.get(\"supertenant_password\")})",
							"                }",
							"        }, function(err, res) {",
							"            //Get list of proxy tenant modules using same token generated above",
							"            pm.sendRequest({",
							"            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/modules\",",
							"            method: 'GET',",
							"            header: {",
							"                'X-Okapi-Tenant': \"supertenant\",",
							"                'Content-Type': 'application/json',",
							"                'X-Okapi-Token': res.headers.get(\"X-Okapi-Token\")",
							"            },",
							"        }, function(err, res) {",
							"        if (err !== null) {",
							"            console.log(\"user creation error: \" + err);",
							"        } else {",
							"            //Get and set latest mod codex inventory id",
							"            var jsonData = res.json();",
							"            for(var i=0; i< jsonData.length; i++) {",
							"                if(jsonData[i].id.startsWith(\"mod-codex-inventory\")) {",
							"                    pm.environment.set(\"modCodexInventory\", jsonData[i].id);",
							"                    break;",
							"            }",
							"        }",
							"        if(pm.environment.get(\"modCodexInventory\")!== null) {",
							"            //Using the mod codex inventory id captured above use it to retrieve list of mod codex inventory instances",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/codex-instances\",",
							"                method: 'GET',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': pm.environment.get(\"xokapitoken-codex-inventory\"),",
							"                    'X-Okapi-Module-Id': pm.environment.get(\"modCodexInventory\"),",
							"                    'Content-Type': 'application/json'",
							"                },",
							"            }, function(err, res) {",
							"                 if (err !== null) {",
							"                    console.log(\"codex instance error: \" + err);",
							"                } else {",
							"                    //Grab few fields from randomly generated mod codex inventory instance and save them in environment variables for testing purpose in postman",
							"                    var jsonData = res.json();",
							"                    var randomIndex = Math.floor(Math.random()*jsonData.instances.length);",
							"                    var storeInstance= {};",
							"                    storeInstance.title = jsonData.instances[randomIndex].title;",
							"                    storeInstance.type = jsonData.instances[randomIndex].type;",
							"                    storeInstance.publisher = jsonData.instances[randomIndex].publisher;",
							"                    storeInstance.source = jsonData.instances[randomIndex].source;",
							"                    storeInstance.contributor = jsonData.instances[randomIndex].contributor;",
							"                    pm.environment.set(\"verifyInstanceTitle\", storeInstance.title);",
							"                    pm.environment.set(\"verifyInstanceType\", storeInstance.type);",
							"                    pm.environment.set(\"verifyInstancePublisher\", storeInstance.publisher);",
							"                    pm.environment.set(\"verifyInstanceSource\", storeInstance.source);",
							"                    pm.environment.set(\"verifyInstanceContributor\", storeInstance.contributor);",
							"                    pm.environment.set(\"id\", jsonData.instances[randomIndex].id);",
							"                }",
							"            });",
							"        }",
							"        else{",
							"            console.log(\"Error getting Codex Instances\");",
							"        }",
							"    }",
							"});",
							"});",
							"    } else {",
							"            console.log(\"Login failed: \" + res.reason());",
							"        }",
							"    }",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2235883-a279-492e-94a1-65ef7d482e16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "mod-configuration",
			"item": [
				{
					"name": "/configurations/entries",
					"item": [
						{
							"name": "/configurations/entries",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00b3dcc1-3d3a-4a9e-81bf-45a68407c59a",
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?limit=100",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aafddd89-eff0-4c3b-b06d-28b63fb80cb6",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"newconfigurationid\", response.id);",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"module\": \"CIRCULATION\",\r\n  \"configName\": \"validation_rules\",\r\n  \"code\": \"PATRON_RULE\",\r\n  \"description\": \"for patrons\",\r\n  \"default\": true,\r\n  \"enabled\": true,\r\n  \"value\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/audit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e229d2ed-cf56-455c-a5e2-11b89f8ac7f5",
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/audit?limit=100&query=(id ={{newconfigurationid}})",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"audit"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query",
											"value": "(id ={{newconfigurationid}})"
										},
										{
											"key": null,
											"value": null
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef4d3bec-7730-435c-8291-ed9d90567efa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac42f722-91af-42ab-bb3e-8c6f66532319",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/configurations/entries/{id}",
					"item": [
						{
							"name": "/configurations/entries/{{newconfigurationid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fec9812a-8d27-46c2-a52c-ba1cfc1c340e",
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											"pm.test(\"Response contains added configuration\", function () {",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"newconfigurationid\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{newconfigurationid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{newconfigurationid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries/{{newconfigurationid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa6a86d6-d9a0-4067-8262-e1dac78a0eaf",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"module\": \"CIRCULATION\",\r\n  \"configName\": \"validation_rules\",\r\n  \"code\": \"PATRON_RULE\",\r\n  \"description\": \"for fs patrons\",\r\n  \"default\": false,\r\n  \"enabled\": true,\r\n  \"value\": \"this is my updated value\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{newconfigurationid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{newconfigurationid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries/{{newconfigurationid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1968b2fe-bc6a-4fdd-8451-7d99cc424780",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{newconfigurationid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{newconfigurationid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "41f02bde-2dc9-416f-89fa-7c5c5f742186",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05c4a580-03d8-461b-a033-fa9f22312c1b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/configurations/audit",
					"item": [
						{
							"name": "/configurations/audit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5531fae-1a9a-4df7-8c5a-e175550e67eb",
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/audit?limit=100&query=(id ={{newconfigurationid}})",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"audit"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "query",
											"value": "(id ={{newconfigurationid}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/audit - query by module",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b576e15-68fc-4399-b8b3-fcbd0b04c590",
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function() {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/audit?query=module=SETTINGS",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"audit"
									],
									"query": [
										{
											"key": "query",
											"value": "module=SETTINGS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/audit - query by orig_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e35ef704-d0e9-4a0b-a30b-4307f50352b3",
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/audit?query=orig_id={{newconfigurationid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"audit"
									],
									"query": [
										{
											"key": "query",
											"value": "orig_id={{newconfigurationid}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5270e20f-3697-4204-9f69-445abd4f3842",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "da8e3a38-ce72-4e7f-bb25-7909a0fbf3e7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "mod-feesfines",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2fdfaf16-d8c3-48b6-b4c4-58b4ec0bc0f1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77d99ad7-6b5e-4089-847e-fc27053c5d1e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "mod-finance",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2fdfaf16-d8c3-48b6-b4c4-58b4ec0bc0f1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77d99ad7-6b5e-4089-847e-fc27053c5d1e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "mod-inventory",
			"item": [
				{
					"name": "items",
					"item": [
						{
							"name": "/inventory/items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c44caf26-cafd-42f2-a239-86c9349bea0e",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"inventorytotalrecords\", response.totalRecords);",
											"",
											"if (response.items.count()>0){",
											"    pm.environment.set(\"existingHoldingsRecordId\", response.items[0].holdingsRecordId);",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/items",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e322a68-1431-46d1-b08d-f4cc0d9c38db",
										"exec": [
											"pm.test(\"New inventory item was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1b828d5f-8dbe-4513-9ced-490bb5fc1d08",
										"exec": [
											"let endpointBook = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/material-types?query=(name=book)\";",
											"",
											"let endpointCanCirculate = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/loan-types?query=(name=can circulate)\";",
											"",
											" let tenant = pm.environment.get(\"xokapitenant\");",
											" let token = pm.environment.get(\"xokapitoken\");",
											"",
											"//get material type",
											"pm.sendRequest({",
											"    url: endpointBook,",
											"    method: \"GET\",",
											"    header: {",
											"         \"x-okapi-tenant\":tenant,",
											"         \"x-okapi-token\":token",
											"    }",
											" },",
											" function (err, res) {",
											"    if(res.json().mtypes.length>0){",
											"     pm.environment.set(\"materialtypeid\",  res.json().mtypes[0].id);",
											"    }",
											" }",
											");",
											"",
											"//get loan type",
											"pm.sendRequest({",
											"    url: endpointCanCirculate,",
											"    method: \"GET\",",
											"    header: {",
											"         \"x-okapi-tenant\":tenant,",
											"         \"x-okapi-token\":token",
											"    }",
											" },",
											" function (err, res) {",
											"    if(res.json().loantypes.length>0){",
											"        pm.environment.set(\"loantypeid\", res.json().loantypes[0].id);",
											"    }",
											" }",
											");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"holdingsRecordId\": \"{{existingHoldingsRecordId}}\",\r\n  \"barcode\": \"556303221992\",\r\n  \"status\": {\r\n    \"name\": \"Available\"\r\n  },\r\n  \"materialType\": {\r\n    \"id\": \"{{materialtypeid}}\",\r\n    \"name\": \"Book\"\r\n  },\r\n  \"permanentLoanType\": {\r\n    \"id\": \"{{loantypeid}}\",\r\n    \"name\": \"Can Circulate\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/items",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/items - query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5adb95da-04b3-4aff-a9cd-c0bcb1185cfe",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"// //setting some test data",
											"pm.environment.set(\"newinventoryitemid\", response.items[0].id);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct record\", function () {",
											"",
											"  pm.expect(response.items[0].id).to.be.equal(pm.environment.get(\"newinventoryitemid\"));",
											"  pm.expect(response.items[0].materialType.id).to.be.equal(pm.environment.get(\"materialtypeid\")); ",
											"  pm.expect(response.items[0].permanentLoanType.id).to.be.equal(pm.environment.get(\"loantypeid\"));",
											"",
											"});",
											"  ",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/items?query=barcode=556303221992",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"items"
									],
									"query": [
										{
											"key": "query",
											"value": "barcode=556303221992"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/items/{{newinventoryitemid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72d3b6a8-f090-4a18-b9e5-dbce7dc9c102",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct record\", function () {",
											"  pm.expect(response.id).to.be.equal(pm.environment.get(\"newinventoryitemid\"));",
											"  pm.expect(response.materialType.id).to.be.equal(pm.environment.get(\"materialtypeid\")); ",
											"  pm.expect(response.permanentLoanType.id).to.be.equal(pm.environment.get(\"loantypeid\"));",
											"  pm.expect(response.barcode).to.be.equal('556303221992');",
											"});",
											"  "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/items/{{newinventoryitemid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"items",
										"{{newinventoryitemid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/items/{{newinventoryitemid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54ed8a0e-13fc-4614-af61-488bcca5b9bd",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/items/{{newinventoryitemid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"items",
										"{{newinventoryitemid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "instances",
					"item": [
						{
							"name": "/inventory/instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "066f2a66-5286-49d4-8ed4-b22eaa7cb1a1",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"instancestotalrecords\", response.totalRecords);",
											"",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fe00708-bd94-44c8-a508-51d237c88ad7",
										"exec": [
											"pm.test(\"New inventory instance was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d610978-0213-43f8-86eb-b3c65b4acef0",
										"exec": [
											"var endpointBooks = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") +  \"/instance-types?query=(name=Books)\";",
											"",
											" var tenant = pm.environment.get(\"xokapitenant\");",
											" var token = pm.environment.get(\"xokapitoken\");",
											"",
											"//get material type",
											"pm.sendRequest({",
											"    url: endpointBooks,",
											"    method: \"GET\",",
											"    header: {",
											"         \"x-okapi-tenant\":tenant,",
											"         \"x-okapi-token\":token",
											"    }",
											" },",
											" function (err, res) {",
											"    if(res.json().instanceTypes.length>0){",
											"     pm.environment.set(\"instancetypeid\",  res.json().instanceTypes[0].id);",
											"    }",
											" }",
											");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Przez różową szybkę\",\r\n  \"source\": \"Local\",\r\n  \"instanceTypeId\": \"{{instancetypeid}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/instances - verify post - query by title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30cdfd39-c766-49d7-a92e-1eb94a5f0a37",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"if(response.instances.count()>0) {",
											" pm.environment.set(\"newinventoryinstanceid\", response.instances[0].id);",
											" }",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain the expected number of records\", function () {",
											"  pm.expect(response.instances.length).to.be.equal(1); ",
											" ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/instances?query=title=\"Przez różową szybkę\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"instances"
									],
									"query": [
										{
											"key": "query",
											"value": "title=\"Przez różową szybkę\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/instances/{{newinventoryinstanceid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba9bbb35-f841-44b0-881c-d21b6681ab64",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/instances/{{newinventoryinstanceid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"instances",
										"{{newinventoryinstanceid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/instances/{{newinventoryinstanceid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de02e057-31ff-4d4a-9be7-c7a09a9084c4",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"@context\": \"http://localhost:9130/inventory/instances/context\",\n    \"id\": \"{{newinventoryinstanceid}}\",\n    \"hrid\": \"{{$guid}}\",\n    \"title\": \"Przez różową szybkę - 2nd edition\",\n    \"source\": \"Local\",\n    \"instanceTypeId\": \"{{instancetypeid}}\",\n    \"identifiers\": [],\n    \"contributors\": [],\n    \"links\": {\n        \"self\": \"http://localhost:9130/inventory/instances/cf6c0370-5020-48fd-a11a-c89f9144ae9a\"\n    }\n}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/instances/{{newinventoryinstanceid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"instances",
										"{{newinventoryinstanceid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/instances/{{newinventoryinstanceid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23ddaef-0b29-4fcc-85bf-f6a6153b414e",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/instances/{{newinventoryinstanceid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"instances",
										"{{newinventoryinstanceid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/inventory/instances/context",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83c3918b-b680-4d95-b520-d3de9270b1ea",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/inventory/instances/context",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"inventory",
										"instances",
										"context"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2fdfaf16-d8c3-48b6-b4c4-58b4ec0bc0f1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77d99ad7-6b5e-4089-847e-fc27053c5d1e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "mod-inventory-storage",
			"item": [
				{
					"name": "classification-types",
					"item": [
						{
							"name": "/classification-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6186f8f6-4fbc-4d66-a571-728fec7c74a3",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-classification-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/classification-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"classification-types"
									]
								},
								"description": "Test listing classification types"
							},
							"response": []
						},
						{
							"name": "/classification-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f8005bea-2ab4-4ccb-a3a2-695d6a11b6d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('classificationTypeUUID', uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2358318-904d-407b-a05f-f60db2b17bc6",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"classificationTypeUUID\"));",
											"   pm.response.to.have.jsonBody(\"name\", \"Test classification type: \" + pm.environment.get(\"classificationTypeUUID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-classification-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/classification-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"classification-types"
									]
								},
								"description": "Create a new classification type"
							},
							"response": []
						},
						{
							"name": "/classification-types/{classificationTypeId}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db1038d9-9112-4488-a5c7-2c309bf3a65b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-classification-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/classification-types/{{classificationTypeUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"classification-types",
										"{{classificationTypeUUID}}"
									]
								},
								"description": "Update an existing classification type"
							},
							"response": []
						},
						{
							"name": "/classification-types/{classificationTypeId}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a42237fc-d677-4f02-a77d-9fa628839fa6",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test(\"Validate fields\", function() {",
											"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"classificationTypeUUID\"));",
											"   pm.response.to.have.jsonBody(\"name\", \"Test classification type - modified: \" + pm.environment.get(\"classificationTypeUUID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-classification-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/classification-types/{{classificationTypeUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"classification-types",
										"{{classificationTypeUUID}}"
									]
								},
								"description": "Return an existing classification type"
							},
							"response": []
						},
						{
							"name": "/classification-types/{classificationTypeId}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9de69792-028e-4c29-a837-e32af804f7de",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-classification-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/classification-types/{{classificationTypeUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"classification-types",
										"{{classificationTypeUUID}}"
									]
								},
								"description": "Delete an existing classification type"
							},
							"response": []
						}
					],
					"description": "Tests for the /classification-types end point.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/authn/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"Login error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.environment.set(\"xokapitoken-classification-types\", res.headers.get(\"X-Okapi-Token\"));",
									"        } else {",
									"            console.log(\"Login failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2235883-a279-492e-94a1-65ef7d482e16",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "contributor-name-types",
					"item": [
						{
							"name": "/contributor-name-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0a07f2c1-c690-43e1-afc4-44337e99a4e4",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-name-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-name-types"
									]
								},
								"description": "Test listing contributor name types"
							},
							"response": []
						},
						{
							"name": "/contributor-name-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "51605758-6829-41de-8073-1ec2053fd94c",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('contributorNameTypeUUID', uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "722b016b-9b4c-4d0c-8022-a20c8b7541ee",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test(\"Validate fields\", function() {",
											"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"contributorNameTypeUUID\"));",
											"   pm.response.to.have.jsonBody(\"name\", \"Test contributor name type: \" + pm.environment.get(\"contributorNameTypeUUID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor name type: {{contributorNameTypeUUID}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-name-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-name-types"
									]
								},
								"description": "Create a new contributor name type"
							},
							"response": []
						},
						{
							"name": "/contributor-name-types/{contributorNameTypeId}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "483db408-0c38-48ab-b7be-9a9a2e123d27",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"contributorNameTypeUUID\"));",
											"   pm.response.to.have.jsonBody(\"name\", \"Test contributor name type: \" + pm.environment.get(\"contributorNameTypeUUID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-name-types/{{contributorNameTypeUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-name-types",
										"{{contributorNameTypeUUID}}"
									]
								},
								"description": "Return an existing contributor name type"
							},
							"response": []
						},
						{
							"name": "/contributor-name-types/{contributorNameTypeId}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db1038d9-9112-4488-a5c7-2c309bf3a65b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor name type:modified:{{contributorNameTypeUUID}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-name-types/{{contributorNameTypeUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-name-types",
										"{{contributorNameTypeUUID}}"
									]
								},
								"description": "Update an existing contributor type"
							},
							"response": []
						},
						{
							"name": "/contributor-name-types/{contributorNameTypeId}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9de69792-028e-4c29-a837-e32af804f7de",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-name-types/{{contributorNameTypeUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-name-types",
										"{{contributorNameTypeUUID}}"
									]
								},
								"description": "Delete an existing contributor name type"
							},
							"response": []
						}
					],
					"description": "Tests for the /contributor-name-types end point.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
								"type": "text/javascript",
								"exec": [
									"    pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/authn/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"Login error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.environment.set(\"xokapitoken-contributor-types\", res.headers.get(\"X-Okapi-Token\"));",
									"        } else {",
									"            console.log(\"Login failed: \" + res.reason());",
									"        }",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2235883-a279-492e-94a1-65ef7d482e16",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "contributor-types",
					"item": [
						{
							"name": "/contributor-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d840b38a-8b9e-4b9c-b96f-0d3d92171bc6",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-contributor-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-types"
									]
								},
								"description": "Test listing contributor types"
							},
							"response": []
						},
						{
							"name": "/contributor-types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3c5d6dfd-0a85-4e20-a5eb-dd6099d082e5",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('contributorTypeUUID', uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9f2ef2fe-1993-4ed3-b129-1d7b56da2b6e",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"contributorTypeUUID\"));",
											"   pm.response.to.have.jsonBody(\"name\", \"Test contributor type: \" + pm.environment.get(\"contributorTypeUUID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-contributor-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor type source: {{contributorTypeUUID}}\",\n    \"code\": \"Test contributor type code: {{contributorTypeUUID}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-types"
									]
								},
								"description": "Create a new contributor type"
							},
							"response": []
						},
						{
							"name": "/contributor-types/{contributorTypeId}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db1038d9-9112-4488-a5c7-2c309bf3a65b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-contributor-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor source - modified: {{contributorTypeUUID}}\",\n\t\"code\": \"Test contributor code - modified: {{contributorTypeUUID}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-types/{{contributorTypeUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-types",
										"{{contributorTypeUUID}}"
									]
								},
								"description": "Update an existing contributor type"
							},
							"response": []
						},
						{
							"name": "/contributor-types/{contributorTypeId}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9de69792-028e-4c29-a837-e32af804f7de",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-contributor-types}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/contributor-types/{{contributorTypeUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"contributor-types",
										"{{contributorTypeUUID}}"
									]
								},
								"description": "Delete an existing contributor type"
							},
							"response": []
						}
					],
					"description": "Tests for the /contributor-types end point.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
								"type": "text/javascript",
								"exec": [
									"    pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/authn/login\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"Login error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.environment.set(\"xokapitoken-contributor-types\", res.headers.get(\"X-Okapi-Token\"));",
									"        } else {",
									"            console.log(\"Login failed: \" + res.reason());",
									"        }",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2235883-a279-492e-94a1-65ef7d482e16",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "holdings-storage",
					"item": [
						{
							"name": "holdings-storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3933708a-e421-4ceb-a9b2-5db984663f93",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"if(response.holdingsRecords.length >0) {",
											"    pm.environment.set(\"existingInstanceId\", response.holdingsRecords[0].instanceId);",
											"}",
											"",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/holdings-storage/holdings",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"holdings-storage",
										"holdings"
									]
								}
							},
							"response": []
						},
						{
							"name": "holdings-storage/holdings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22b940ad-c402-44f3-9e64-b01e6612927e",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"newholdingstorage\", response.id);",
											"",
											"pm.test(\"New holding storage was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"instanceId\": \"{{existingInstanceId}}\"\r\n  \r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/holdings-storage/holdings",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"holdings-storage",
										"holdings"
									]
								}
							},
							"response": []
						},
						{
							"name": "/holdings-storage/holdings/{{newholdingstorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3850cc64-4589-4455-83ee-f209b6d478f3",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain instanceId of the new holding storage\", function () {",
											"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newholdingstorage\")); ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/holdings-storage/holdings/{{newholdingstorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"holdings-storage",
										"holdings",
										"{{newholdingstorage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/holdings-storage/holdings/{{newholdingstorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6eb6244f-5e56-423e-8264-8e8f5d4d515f",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\" : \"{{newholdingstorage}}\",\r\n  \"instanceId\" : \"{{existingInstanceId}}\",\r\n  \"holdingsStatements\" :  []\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/holdings-storage/holdings/{{newholdingstorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"holdings-storage",
										"holdings",
										"{{newholdingstorage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/holdings-storage/holdings/{{newholdingstorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6037b2af-0887-4306-ae76-cad8785b1a63",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/holdings-storage/holdings/{{newholdingstorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"holdings-storage",
										"holdings",
										"{{newholdingstorage}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "467a344f-7da8-4611-bf2e-dabc0a958f75",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f09c1a28-4014-4e09-84ae-ac2d9bfe228c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "identifier-types",
					"item": [
						{
							"name": "/identifier-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b39e0ff-f8bf-47a9-8af1-9723af305038",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"identifier-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/identifier-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "284b905e-5270-4044-9da8-68ee2f20a842",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.environment.set(\"identifier-types-uuid\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"TESTING\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"identifier-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/identifier-types/{{uuid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50196220-2684-4d6e-971e-ea2106f610ee",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/identifier-types/{{identifier-types-uuid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"identifier-types",
										"{{identifier-types-uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/identifier-types/{{uuid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "746c5be5-ad50-4bce-88b3-c8dbae6bfaaa",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{uuid}}\",\n\t\"name\": \"UPDATED\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/identifier-types/{{identifier-types-uuid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"identifier-types",
										"{{identifier-types-uuid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/identifier-types/{{uuid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70f0ac9a-5bbe-42fe-a280-9f021b86b664",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/identifier-types/{{identifier-types-uuid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"identifier-types",
										"{{identifier-types-uuid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "instance-formats",
					"item": [
						{
							"name": "/instance-formats",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3ce3730-c63a-4bbf-bde5-12c52d3b6aff",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-relationship-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-relationship-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-formats",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2a68cd8-3730-4438-9831-c1e96f55e4aa",
										"exec": [
											"",
											"var response = JSON.parse(responseBody);",
											"pm.environment.set(\"newinstanceformat\", response.id);",
											"",
											"//",
											"pm.test(\"New instance format was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"maps\",\r\n  \"code\": \"mp\",\r\n  \"source\": \"schneider\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-formats",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-formats"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-formats/{{newinstanceformat}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa40776e-02ed-47da-9e01-13ca457f7474",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain  the new instance format\", function () {",
											"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstanceformat\")); ",
											"    pm.expect(response.name).to.be.equal(\"maps\"); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-formats/{{newinstanceformat}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-formats",
										"{{newinstanceformat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-formats/{{newinstanceformat}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3dbc8a9-9a62-4302-8040-dd37edbe8768",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"id\": \"{{newinstanceformat}}\",\r\n  \"name\":\"geological maps\",\r\n  \"code\": \"gm\",\r\n  \"source\": \"schneider\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-formats/{{newinstanceformat}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-formats",
										"{{newinstanceformat}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-formats/{{newinstanceformat}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5358bb95-dfda-4608-8c4d-e46b68fa746b",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-formats/{{newinstanceformat}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-formats",
										"{{newinstanceformat}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "12185ede-ab97-4edd-ad84-556a7f7f8ec3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aebca9a3-1798-4e62-adb6-4b6f1b409dc7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "instance-storage",
					"item": [
						{
							"name": "/instance-storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a79f82ad-7774-4d51-8bc3-d3e8533d0316",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-storage/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-storage",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-storage/instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb45d244-ac4a-4167-96f4-192e9155d875",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"newinstancestorage\", response.id);",
											"",
											"pm.test(\"New instance storage was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"source\": \"MARC\",\r\n  \"title\": \"Handbuch deutscher historishen Buchbestände\",\r\n  \"instanceTypeId\": \"2b94c631-fca9-a892-c730-03ee529ffe2c\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-storage/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-storage",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-storage/instances/{{newinstancestorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2318b098-3ee6-4556-95ab-134fbd03d7bd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain  the new instance storage\", function () {",
											"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancestorage\")); ",
											"    pm.expect(response.title).to.be.equal(\"Handbuch deutscher historishen Buchbestände\"); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-storage/instances/{{newinstancestorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-storage",
										"instances",
										"{{newinstancestorage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-storage/instances/{{newinstancestorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9cd582c-c336-44ed-b54d-199394490038",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"id\": \"{{newinstancestorage}}\",\r\n  \"source\": \"Local: MARC\",\r\n  \"title\": \"Handbuch deutscher historishen Buchbestände\",\r\n  \"instanceTypeId\": \"2b94c631-fca9-a892-c730-03ee529ffe2c\", \r\n  \"alternativeTitles\":[]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-storage/instances/{{newinstancestorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-storage",
										"instances",
										"{{newinstancestorage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-storage/instances/{{newinstancestorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba70b394-6962-470a-84db-0b408ceeb652",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-storage/instances/{{newinstancestorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-storage",
										"instances",
										"{{newinstancestorage}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4f0c45ce-cbc6-43a3-a0bb-5f3579f3a804",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3adf17a-339b-49bd-9e3d-dc37014e85b2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "instance-types",
					"item": [
						{
							"name": "/instance-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6435788c-c51c-4ac0-b00d-2e418c37023e",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0829b6af-74a6-484e-b34c-53840561e3f1",
										"exec": [
											"",
											"var response = JSON.parse(responseBody);",
											"pm.environment.set(\"newinstancetype\", response.id);",
											"",
											"pm.test(\"New instance type was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"journal article\",\r\n  \"code\": \"ja\",\r\n  \"source\": \"towarzystwo naukowe\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-types/{{newinstancetype}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9caf967-005c-4eda-b3f8-4ce40dc35c76",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain  the new instance type\", function () {",
											"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancetype\")); ",
											"    pm.expect(response.name).to.be.equal(\"journal article\"); ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-types/{{newinstancetype}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-types",
										"{{newinstancetype}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-types/{{newinstancetype}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2106b00e-82fe-425b-a4ba-bf24e2b412fc",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"id\": \"{{newinstancetype}}\",\r\n  \"name\":\"journal and newspaper article\",\r\n  \"code\":\"jna\",\r\n  \"source\":\"towarzystwo naukowe krakowskie\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-types/{{newinstancetype}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-types",
										"{{newinstancetype}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-types/{{newinstancetype}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "776ee37c-a3f0-4440-a6f9-d20dd1da1e8b",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/instance-types/{{newinstancetype}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"instance-types",
										"{{newinstancetype}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "284338b3-7875-435c-bf32-dd18514c3780",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05ffafe7-0f51-44ab-8cde-fdb0fb0f1238",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "item-storage",
					"item": [
						{
							"name": "/item-storage/items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5460dac-5cdd-4e3b-97af-eab1268b714d",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"if(response.items.length>0){",
											"    pm.environment.set(\"existingHoldingsRecordId\", response.items[0].holdingsRecordId);",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if(response.items.length>0){",
											"    pm.environment.set(\"testpermanentloantypeid\", response.items[0].permanentLoanTypeId);",
											"}",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/item-storage/items",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"item-storage",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "/item-storage/items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e938dbcf-b93b-4997-9859-885d55b1aeae",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"newitemstorage\", response.id);",
											"",
											"//",
											"pm.test(\"New item storage was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"holdingsRecordId\": \"{{existingHoldingsRecordId}}\",\r\n  \"materialTypeId\": \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\r\n  \"permanentLoanTypeId\": \"{{testpermanentloantypeid}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/item-storage/items",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"item-storage",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "/item-storage/items/{{newitemstorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a1ad500-a872-4ef2-abe6-4316e36fd80c",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain  the new item storage\", function () {",
											"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newitemstorage\")); ",
											"   });",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/item-storage/items/{{newitemstorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"item-storage",
										"items",
										"{{newitemstorage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/items-storage/items/{{newitemstorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b94ccad1-1329-4778-bf9c-23e38470262a",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{newitemstorage}}\",\n    \"holdingsRecordId\": \"{{existingHoldingsRecordId}}\",\n    \"notes\": [],\n    \"materialTypeId\": \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\n    \"permanentLoanTypeId\": \"{{testpermanentloantypeid}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/item-storage/items/{{newitemstorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"item-storage",
										"items",
										"{{newitemstorage}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/instance-storage/instances/{{newinstancestorage}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "975bb443-e415-44a8-99da-99f6b30111f1",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/item-storage/items/{{newitemstorage}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"item-storage",
										"items",
										"{{newitemstorage}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a6e69d6d-aba8-4a4e-b49d-63e7406629cd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47b403a4-6b8c-41d3-afad-c8076ca5ef91",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "loan-type",
					"item": [
						{
							"name": "/loan-types",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b2a820b-6082-49f2-9435-3c3d37b6de59",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "/loan-types - 'can circulate'",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2258079f-84ef-45d5-b9c0-59f9ec87641c",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/loan-types?query=(name=can circulate)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"loan-types"
									],
									"query": [
										{
											"key": "query",
											"value": "(name=can circulate)"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a640290b-0753-4880-bea4-ee1faeca050d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "62984544-61b4-478d-af6a-c3d77266ed6c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "service-point",
					"item": [
						{
							"name": "/service-points - create",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4e68359-b923-4a4a-85ec-48c111e0c7fd",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 201 - service-point created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain the service point object created\", function () {",
											"    pm.expect(response.id).to.be.equal(pm.environment.get(\"svcptId\"));",
											"    pm.expect(response.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\")); ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ee239b2-d9ea-45d1-95eb-246f049e3900",
										"exec": [
											"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
											"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
											"pm.environment.set(\"svcptCode\", \"cd9\");",
											"pm.environment.set(\"svptName\", \"Circ desk 28\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/service-points",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"service-points"
									]
								}
							},
							"response": []
						},
						{
							"name": "/service-points - get - verify setup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3f12881-cb03-4fea-931f-7cdde3fbc401",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200 - service-points returned\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Response must contain the service point object created\", function () {",
											"    ",
											"    var matchingSvcptFound = false;",
											"    ",
											"    response.servicepoints.forEach( el => {",
											"        if (el.id == pm.environment.get(\"svcptId\")){",
											"            pm.expect(el.id).to.be.equal(pm.environment.get(\"svcptId\"));",
											"            pm.expect(el.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\"));",
											"            pm.expect(el.name).to.be.equal(pm.environment.get(\"svptName\"));",
											"            matchingSvcptFound = true;",
											"        }",
											"    })",
											"    ",
											"    if (!matchingSvcptFound){",
											"        pm.expect.fail(matchingSvptFound, true, \"could not find expected service point in list\");",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6af1659f-8362-4979-bb88-a74a94cdcf4a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/service-points",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"service-points"
									]
								}
							},
							"response": []
						},
						{
							"name": "/service-points - get/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23f2b578-fb06-4645-a70d-f8ee7ca1be57",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 200 - service-point found\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response must contain the service point object being looked up\", function () {",
											"    pm.expect(response.id).to.be.equal(pm.environment.get(\"svcptId\"));",
											"    pm.expect(response.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\"));",
											"    pm.expect(response.name).to.be.equal(pm.environment.get(\"svptName\"));",
											"    pm.expect(response.code).to.be.equal(pm.environment.get(\"svcptCode\"));",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e85a0473-daf5-4088-bc6e-5147fea2ebec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/service-points/{{svcptId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"service-points",
										"{{svcptId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/service-points - put/{id} - modify",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca270fbc-5802-4a20-bd1f-ee910020770f",
										"exec": [
											"",
											"pm.test(\"Status is 204 - service-point updated\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4da6427c-47b4-4eac-8dc1-ecc0c75f3c6a",
										"exec": [
											"pm.environment.set(\"discoveryDisplayName\", \"modified-API Test - Hallways3\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/service-points/{{svcptId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"service-points",
										"{{svcptId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/service-points - delete/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66979349-33e8-4e2c-b814-c3552b9b3e32",
										"exec": [
											"pm.test(\"Status is 204 - service-point deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7ec5ea5-c2e2-47b2-8e17-b07f8aa8b445",
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/service-points/{{svcptId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"service-points",
										"{{svcptId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "mod-kb-ebsco",
			"item": [
				{
					"name": "Setup Configuration",
					"item": [
						{
							"name": "Check if apiURL exists and generate okapi token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5aff341e-ea9b-4b52-aa5d-66a15e9b0326",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"apiUrlFlag\", true);",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"apiUrlFlag\", false);",
											"    //\"Api Url exists -- do not POST\");",
											"    postman.setNextRequest(\"Check if customerId exists\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71913edb-9235-4f27-afb3-b7bb5051e005",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"okapiurl\") + \"/authn/login\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
											"    }",
											"}, function(err, res) {",
											"        if (err !== null) {",
											"        console.log(\"Login error: \" + err);",
											"        } else {",
											"            if (res.code === 201) {",
											"                pm.environment.set(\"xokapitoken-codex-ekb\", res.headers.get(\"X-Okapi-Token\"));",
											"            }",
											"            else {",
											"                console.log(\"Could not generate token\" + res.code);",
											"            }",
											"        }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - RM-API URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6900a989-193a-42b8-ac1e-d1b0b185a148",
										"exec": [
											"pm.test(\"success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - configuration entry added successfully through RM-API URL\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"X-Okapi-Module-Id is present\", function () {",
											"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store api id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-url-id\", body.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{modCodexEkb}}",
										"disabled": true
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.url\",\r\n    \"description\": \"EBSCO RM-API URL\",\r\n    \"enabled\": true,\r\n    \"value\": \"https://sandbox.ebsco.io\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									]
								},
								"description": "Create configuration RM API URL"
							},
							"response": []
						},
						{
							"name": "Check if customerId exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cda9635-e356-4ca8-8af4-d6d54d055312",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"customerIdFlag\", true);",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"customerIdFlag\", false);",
											"    //\"Customer Id exists -- do not POST\");",
											"    postman.setNextRequest(\"Check if apiKey exists\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - RM-API customerId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ec4a5e5-bc72-48eb-8774-a365c615954e",
										"exec": [
											"",
											"pm.test(\"Success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - configuration entry successfully created through customerId\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"X-Okapi-Module-Id is present\", function () {",
											"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store api id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-customer-id\", body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{modCodexEkb}}",
										"disabled": true
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.customerId\",\r\n    \"description\": \"EBSCO RM-API Customer ID\",\r\n    \"enabled\": true,\r\n    \"value\": \"apidvgvmt\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									]
								},
								"description": "Create customer id as part of configuration"
							},
							"response": []
						},
						{
							"name": "Check if apiKey exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "107001c3-7c80-47bb-ab6b-f0330ae9b3e6",
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"apiKeyFlag\", true);",
											"if(jsonData!==null && jsonData.configs.length!==0) {",
											"    pm.environment.set(\"apiKeyFlag\", false);",
											"    //\"Api key exists -- do not POST\");",
											"    postman.setNextRequest(\"Get list of Ekb instances\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - RM-API apiKey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "68e1198a-c696-4a69-ab0c-563d7346e92d",
										"exec": [
											"pm.test(\"success test on json response\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status is 201 - apiKey entry successfully created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"X-Okapi-Module-Id is present\", function () {",
											"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
											"});",
											"",
											"//Store api id temporarily for clean-up purpose",
											"let body = JSON.parse(responseBody);",
											"pm.environment.set(\"rm-api-key-id\", body.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{modCodexEkb}}",
										"disabled": true
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.apiKey\",\r\n    \"description\": \"EBSCO RM-API API Key\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rmapi_api_key}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									]
								},
								"description": "Create configuration api key"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7378bc5c-916f-41aa-b57e-b2c274efe3f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a26b4778-0c56-409b-93fe-f848a949171b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "configuration",
					"item": [
						{
							"name": "/status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88bea403-5810-4a2d-82ea-7568274e8ca7",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/eholdings/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"eholdings",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88bea403-5810-4a2d-82ea-7568274e8ca7",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/eholdings/configuration",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"eholdings",
										"configuration"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "providers",
					"item": [
						{
							"name": "GET  providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7535d89f-ea29-4c2a-b43f-9665164c2643",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"disabled": true
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/eholdings/providers",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"eholdings",
										"providers"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "packages",
					"item": [
						{
							"name": "GET  packages",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7535d89f-ea29-4c2a-b43f-9665164c2643",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"disabled": true
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "titles",
					"item": [
						{
							"name": "GET titles paging",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88bea403-5810-4a2d-82ea-7568274e8ca7",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/eholdings/titles?page=2&filter[name]=m*&sort=name",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"eholdings",
										"titles"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "filter[name]",
											"value": "m*"
										},
										{
											"key": "sort",
											"value": "name"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1da916ef-8587-4c87-965b-46ea5da2554e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ed2952e-7e10-458a-9a7e-3af8cb7bdd77",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Tear-Down Configuration",
					"item": [
						{
							"name": "Check if apiKey exists to delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87ce7882-a1cf-4799-87dc-71de37093375",
										"exec": [
											"let jsonData = pm.response.json();",
											"let flagApiKeyId = pm.environment.get(\"apiKeyFlag\");",
											"if((jsonData !==null && jsonData.configs.length >0) && !flagApiKeyId) {",
											"    //Api key do not exist -- DO NOT DELETE",
											"    postman.setNextRequest(\"Check if customerId exists to delete\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM-API Key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e32fd54e-e57e-45d9-8a69-76fd0c81f95a",
										"exec": [
											"//Clean-up RM API Key configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{rm-api-key-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{rm-api-key-id}}"
									]
								},
								"description": "Clean-up RM-API Key configuration"
							},
							"response": []
						},
						{
							"name": "Check if customerId exists to delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5dbe6aec-56e0-42d8-a316-db054e72f2cf",
										"exec": [
											"let jsonData = pm.response.json();",
											"let flagCustomerId = pm.environment.get(\"customerIdFlag\");",
											"if((jsonData !==null && jsonData.configs.length >0) && !flagCustomerId) {",
											"    //Customer Id do not exists -- do not DELETE",
											"    postman.setNextRequest(\"Check if apiUrl exists to delete\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM-API CustomerId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5272edee-cb6c-40c9-8fc3-ff08585cd210",
										"exec": [
											"//Clean-up RM API customer configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{rm-api-customer-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{rm-api-customer-id}}"
									]
								},
								"description": "Clean-up RM-API CustomerId configuration"
							},
							"response": []
						},
						{
							"name": "Check if apiUrl exists to delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79e2224b-0330-4da2-8119-a4aa8063098f",
										"exec": [
											"let jsonData = pm.response.json();",
											"let flagApiUrl = pm.environment.get(\"apiUrlFlag\");",
											"if((jsonData !==null && jsonData.configs.length >0) && !flagApiUrl) {",
											"    //Api URL do not exists -- do not DELETE\");",
											"    postman.setNextRequest(\"/codex-instances/{id} - invalid token\");",
											"}",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/configurations/entries - Clean-up RM-API URL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d171baf7-b7ee-46d9-ac32-eb0a8fa3d38b",
										"exec": [
											"//Clean-up RM API URL configuration created during POST",
											"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"'x-okapi-permissions' header is present\", function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/configurations/entries/{{rm-api-url-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"configurations",
										"entries",
										"{{rm-api-url-id}}"
									]
								},
								"description": "Clean-up RM-API URL configuration"
							},
							"response": []
						},
						{
							"name": "/codex-instances/{id} - invalid token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "94093749-00a1-4128-9c27-45af0eb09324",
										"exec": [
											"pm.environment.unset('xokapitoken-codex-ekb');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4abbbf32-04b0-43f6-b3e8-9a0cf4cc8904",
										"exec": [
											"pm.test(\"401 Not authorized to perform requested action test\", function() {",
											"    pm.response.to.have.status(401);    //Fixed",
											"    //https://issues.folio.org/browse/MODCXEKB-58",
											"});",
											"",
											"//Clean-up",
											"pm.environment.unset(\"EkbInstanceTitle\");",
											"pm.environment.unset(\"EkbInstanceType\");",
											"pm.environment.unset(\"EkbInstancePublisher\");",
											"pm.environment.unset(\"EkbInstanceSource\");",
											"pm.environment.unset(\"EkbInstanceFormat\");",
											"pm.environment.unset(\"id\");",
											"pm.environment.unset(\"rm-api-url-id\");",
											"pm.environment.unset(\"rm-api-key-id\");",
											"pm.environment.unset(\"rm-api-customer-id\");",
											"pm.environment.unset(\"modCodexEkb\");",
											"pm.environment.unset(\"instanceCollectionSchema\");",
											"pm.environment.unset(\"instanceSchema\");",
											"pm.environment.unset(\"resultInfoSchema\");",
											"pm.environment.unset(\"apiKeyFlag\");",
											"pm.environment.unset(\"customerIdFlag\");",
											"pm.environment.unset(\"apiUrlFlag\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-codex-ekb}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{modCodexEkb}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/codex-instances/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"codex-instances",
										"{{id}}"
									]
								},
								"description": "This should return 401 if not authorized to access mod codex ekb instance but it is returning 500. Created jira - https://issues.folio.org/browse/MODCXEKB-58"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1027eea9-68c4-48eb-8193-b4c405e8f182",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "352349d2-1dae-47f1-b9bd-bccbc161503d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "mod-login",
			"item": [
				{
					"name": "/authn/credentials - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "daba9c28-606a-4952-b399-88207fe12dde",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb67bbd7-ebf9-4af6-8cdb-f317e84f4920",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/authn/credentials",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"authn",
								"credentials"
							]
						},
						"description": "Test listing credentials"
					},
					"response": []
				}
			]
		},
		{
			"name": "mod-notes",
			"item": [
				{
					"name": "/notes - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16f87949-b44e-4cf9-9c5d-725ac485597e",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().totalRecords).to.be.at.least(pm.response.json().notes.length);",
									"    pm.expect(pm.response.json().notes.length).to.be.at.most(10); // limit default",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/notes",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Returns a list of notes"
					},
					"response": []
				},
				{
					"name": "/notes - 201",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2c58203-5ec6-4cab-969f-6a3d088bd3f3",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.variables.set(\"uuid\", uuid.v4());",
									"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
									"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a864c8dd-2476-419b-ad06-f61e7855a1e7",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"pm.environment.set(\"new-note-id\", pm.response.json().id);",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i, \"ids isn't a UUID\");",
									"    pm.expect(pm.response.json().link).to.equal(pm.variables.get(\"link\"), \"link does not match\");",
									"    pm.expect(pm.response.json().text).to.equal(pm.variables.get(\"text\"), \"text does not match\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/notes",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Create a new note"
					},
					"response": []
				},
				{
					"name": "/notes/_self - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87afb0da-ab06-44e1-a6fa-3c5953eb8bba",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().totalRecords).to.be.at.least(pm.response.json().notes.length);",
									"    pm.expect(pm.response.json().notes.length).to.be.at.most(10); // limit default",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/notes/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"notes",
								"_self"
							]
						},
						"description": "Returns a list of self notes"
					},
					"response": []
				},
				{
					"name": "/notes/{id} - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08372280-d87a-4d60-93e5-11adcfd3681e",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"new-note-id\"), \"id does not match\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "26bc15ed-0a33-4e06-805b-82138a8eee5b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/notes/{{new-note-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"notes",
								"{{new-note-id}}"
							]
						},
						"description": "Returns an existing note"
					},
					"response": []
				},
				{
					"name": "/notes/{id} - 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85ac123c-e7c7-4f29-b449-f58afa8864fc",
								"exec": [
									"pm.test(\"success test - 204 and no body\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8baa443a-a3a0-4fb1-a5fb-1a2e3a6a14ab",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"link\": \"updated_link\",\n\t\"text\": \"updated_text\",\n\t\"domain\": \"updated_domain\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/notes/{{new-note-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"notes",
								"{{new-note-id}}"
							]
						},
						"description": "Updates an existing note"
					},
					"response": []
				},
				{
					"name": "/notes/{id} - 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4570d90f-606d-48ba-9b43-42d090bfb1aa",
								"exec": [
									"pm.test(\"success test - 204 and no body\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "085fee08-242f-4109-97dd-3becb0dc782e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/notes/{{new-note-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"notes",
								"{{new-note-id}}"
							]
						},
						"description": "Deletes an existing note"
					},
					"response": []
				}
			]
		},
		{
			"name": "mod-permissions",
			"item": [
				{
					"name": "/perms/permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49bdab54-2702-41b4-8d0f-584523544df3",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"// const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"// let commonHeaderTests = eval(str);",
									"// commonHeaderTests.positive();",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b352a58d-2367-4544-becf-61bae69e4f71",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{okapiurl}}/perms/permissions?length=50",
							"protocol": "{{protocol}}",
							"host": [
								"{{okapiurl}}"
							],
							"path": [
								"perms",
								"permissions"
							],
							"query": [
								{
									"key": "length",
									"value": "50"
								}
							]
						},
						"description": "Get List of permissions the are avaialable in the FOLIO system."
					},
					"response": []
				}
			]
		},
		{
			"name": "mod-users",
			"item": [
				{
					"name": "groups",
					"item": [
						{
							"name": "/groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f291d0c8-3cbc-46de-ab14-3db9d0216a7c",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"usergrupsnumber\",pm.response.json().totalRecords);",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "/groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53605664-2b3a-4301-a14c-541b233267c6",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"newgroupid\", response.id);",
											"",
											"//",
											"pm.test(\"New group was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"     pm.expect(response.group).to.eql(\"fse testing librarian\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"group\": \"fse testing librarian\",\r\n  \"desc\": \"basic test lib group\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "/groups/{{newgroupid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "328f5031-bbf6-4610-8c6d-5eb52e24a9da",
										"exec": [
											"pm.test(\"Group was successfully updated. Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"group\": \"fse testing librarian\",\r\n  \"desc\": \"main test lib group\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/groups/{{newgroupid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"groups",
										"{{newgroupid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/groups/{{newgroupid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7c24a1c-dbe2-4f4c-a20a-24618f23d029",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"let groupId = pm.environment.get(\"newgroupid\");",
											"",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"    pm.expect(response.group).to.eql(\"fse testing librarian\");",
											"    pm.expect(response.id).to.eql(groupId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/groups/{{newgroupid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"groups",
										"{{newgroupid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/groups/{{newgroupid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebe861ce-ae36-4d31-affc-859ed7799007",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"usergrupsnumber\");",
											"pm.environment.unset(\"newgroupid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/groups/{{newgroupid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"groups",
										"{{newgroupid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bebb4996-f68e-47ca-a222-8a17842c0a2c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf914e35-582e-4ad4-8efa-5109d949796b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "addresstypes",
					"item": [
						{
							"name": "/addresstypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd2961b9-9685-46f8-ad18-6e8236f93278",
										"exec": [
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/addresstypes",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"addresstypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "/addresstypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa262081-f318-4211-9c09-2f40896db5c0",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"newaddresstypeid\", response.id);",
											"",
											"pm.test(\"New address type was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"     pm.expect(response.addressType).to.eql(\"primary fse testing\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"addressType\": \"primary fse testing\",\r\n  \"desc\": \"primary fse testing address\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/addresstypes",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"addresstypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "/addresstypes/{{newaddresstypeid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5bd1442-6cbd-4dc1-94be-b218dc14036f",
										"exec": [
											"pm.test(\"Address type was successfully updated. Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"addressType\": \"primary fse testing\",\r\n  \"desc\": \"main fse testing address\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/addresstypes/{{newaddresstypeid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"addresstypes",
										"{{newaddresstypeid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/addresstypes/{{newaddresstypeid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "149053eb-3a3c-4984-89ee-75cc0ed8f012",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"var addressTypeId = pm.environment.get(\"newaddresstypeid\");",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"     pm.response.to.be.ok; ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"     pm.expect(response.desc).to.eql(\"main fse testing address\");",
											"     pm.expect(response.id).to.eql(addressTypeId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/addresstypes/{{newaddresstypeid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"addresstypes",
										"{{newaddresstypeid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/addresstypes/{{newaddresstypeid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13d62255-1968-4689-81c7-202570eee5f5",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"newaddresstypeid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/addresstypes/{{newaddresstypeid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"addresstypes",
										"{{newaddresstypeid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "proxiesfor",
					"item": [
						{
							"name": "/proxiesfor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53044e32-4b3c-40d8-8775-359cabb10f4b",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"pm.environment.set(\"proxyforid\", response.id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"proxieuser1\",\r\n  \"proxyUserId\": \"proxieuser2\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/proxiesfor",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"proxiesfor"
									]
								}
							},
							"response": []
						},
						{
							"name": "/proxiesfor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4932cd1-f60b-43fb-86e5-152f3958df96",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/proxiesfor",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"proxiesfor"
									]
								}
							},
							"response": []
						},
						{
							"name": "/proxiesfor/{{proxyforid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25c9c301-bf4b-4d7b-9b49-1b845a943ba1",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.ok; ",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/proxiesfor/{{proxyforid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"proxiesfor",
										"{{proxyforid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/proxiesfor/{{proxyforid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0265e395-b190-4ce9-8cf0-311250cd7c4d",
										"exec": [
											"pm.test(\"Proxy was successfully updated. Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"proxieuser11\",\r\n  \"proxyUserId\": \"proxieuser22\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/proxiesfor/{{proxyforid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"proxiesfor",
										"{{proxyforid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/proxiesfor/{{proxyforid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4827f18a-832d-48d0-9e16-62ab0aae2772",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.environment.unset(\"proxyforid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/proxiesfor/{{proxyforid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"proxiesfor",
										"{{proxyforid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "users",
					"item": [
						{
							"name": "/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a19e321-57f9-4e15-bf2c-ddcb248160e2",
										"exec": [
											"",
											"let testUserId=pm.response.json().users[0].id;",
											"pm.environment.set(\"testuserid\", testUserId);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"    pm.expect(pm.response.json().totalRecords).to.not.equal(0);",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea761888-6676-4daa-b289-fbd5a2906b11",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"pm.environment.set(\"newuserid\", response.id);",
											"",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"    pm.expect(pm.response.json().totalRecords).to.not.equal(0)",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f9954452-6b48-4f1c-8a90-625a1012b006",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get('protocol') + '://' + pm.environment.get('okapiurl') + '/groups' ,",
											"    method: 'GET',",
											"    header: {",
											"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
											"        'x-okapi-token': pm.environment.get('xokapitoken')",
											"    }",
											"}, function (err, res) {",
											"    if(res.json().usergroups.length >0){",
											"     pm.environment.set('newusergroupid', res.json().usergroups[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"posttestuser\",\r\n  \"id\": \"{{$guid}}\",\r\n  \"active\": true,\r\n  \"type\": \"patron\",\r\n  \"patronGroup\":\"{{newusergroupid}}\",\r\n  \"personal\": {\r\n    \"lastName\": \"user\",\r\n    \"firstName\": \"posttest\",\r\n    \"email\": \"up@biblioteka.pl\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{{newuserid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "556d3fd3-b63e-47f3-99e5-be835fc23c86",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct record\", function () {",
											"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"newuserid\"));",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/users/{{newuserid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"users",
										"{{newuserid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{{newuserid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d70e997-751a-47b1-90ae-062530780835",
										"exec": [
											"",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "659c91c9-8e63-4dfe-80cb-baecae5cb56b",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get('protocol') + '://' + pm.environment.get('okapiurl') + '/groups' ,",
											"    method: 'GET',",
											"    header: {",
											"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
											"        'x-okapi-token': pm.environment.get('xokapitoken')",
											"    }",
											"}, function (err, res) {",
											"    if(res.json().usergroups.length >0){",
											"     pm.environment.set('newusergroupid', res.json().usergroups[0].id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"posttestuser\",\r\n  \"id\": \"{{newuserid}}\",\r\n  \"active\": true,\r\n  \"type\": \"patron\",\r\n   \"patronGroup\":\"{{newusergroupid}}\"\r\n },\r\n  \"personal\": {\r\n    \"lastName\": \"user\",\r\n    \"firstName\": \"PUTtest\",\r\n    \"email\": \"up@biblioteka.pl\",\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/users/{{newuserid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"users",
										"{{newuserid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/users/{{newuserid}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "270ce24a-4247-4431-903d-7658b8c19741",
										"exec": [
											"//this actually should be 404 status",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"testuserid\");",
											"pm.environment.unset(\"newusergroupid\");",
											"pm.environment.unset(\"newuserid\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{okapiurl}}/users/{{newuserid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{okapiurl}}"
									],
									"path": [
										"users",
										"{{newuserid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e64949f4-4ad0-480e-ad01-f1a50b0793f6",
				"type": "text/javascript",
				"exec": [
					"if (pm.environment.get(\"okapiport\") !== undefined){",
					"    pm.environment.set(\"okapiurl\", pm.environment.get(\"url\")+\":\"+pm.environment.get(\"okapiport\"));",
					"}",
					"else {",
					"    pm.environment.set(\"okapiurl\", pm.environment.get(\"url\"));",
					"}",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ab0a263a-750d-4804-9d9e-0d0dd0a780b4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}