{
	"info": {
		"_postman_id": "0c598c46-47d8-4799-83d2-2517ded30527",
		"name": "mod-kb-ebsco-java",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "schemas",
					"item": [
						{
							"name": "setup environment variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bc73af6-77a1-4809-80ca-a6d8ffd97236",
										"exec": [
											"const moduleName = 'mod-kb-ebsco-java';",
											"pm.test(\"GET json schemas response OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"GET json schemas has JSON body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.test(\"GET contains ebsco-java module\", function () {",
											"    pm.expect(pm.response.text()).to.include(moduleName);",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"json.forEach((element) => {",
											"\tvar moduleId = element.id;",
											"\tif(moduleId.includes(moduleName)){",
											"\t\tpm.environment.set('kb-ebsco-java-module-id', moduleId);",
											"\t}",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/_jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{xokapitenant}}",
										"interfaces",
										"_jsonSchemas"
									]
								}
							},
							"response": []
						},
						{
							"name": "get schemas",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e6a5f8c-f233-43b0-8407-024e311413f0",
										"exec": [
											"pm.test(\"GET schema_parameters OK\", function () {pm.response.to.be.ok;});",
											"",
											"pm.test(\"GET schema_parameters has JSON body\", function () {pm.response.to.have.jsonBody();});",
											"",
											"function checkVariableExist(name){return pm.environment.has(\"schema_\"+ name);}",
											"",
											"function setEnvironmentVariable(name, data){pm.environment.set(\"schema_\"+ name, data) }",
											"",
											"function extractName(url){ return url.substring(url.lastIndexOf(\"/\") + 1, url.lastIndexOf(\".\")); }",
											"",
											"function replaceResponseRefWithName(text){ return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"schema_\"); }",
											"",
											"function getURL(path) {return pm.variables.get(\"protocol\") + \"://\" + ",
											"        pm.variables.get(\"url\") + \":\" + ",
											"        pm.variables.get(\"okapiport\") + ",
											"        \"/_/jsonSchemas?path=\" + path;",
											"}",
											"        ",
											"function getRequest(url){",
											"  const echoGetRequest = {",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"      'X-Okapi-Module-Id' : pm.variables.get(\"kb-ebsco-java-module-id\"),",
											"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\")",
											"    }",
											"  }",
											"    return echoGetRequest;",
											"}        ",
											"",
											"function fetchSchema(echoGetRequest, delay){",
											"",
											"return new Promise((resolve, reject) => {",
											"     setTimeout(function(){",
											"       pm.sendRequest(echoGetRequest, (err, response) => {",
											"       if (!err) {",
											"        resolve(response.text());",
											"       }else{",
											"        reject(err, echoGetRequest);",
											"       }",
											"      });",
											"     }, delay);",
											"  });",
											"}",
											"",
											"function addAdditionalSchemas(data){",
											"    data.push(\"raml-util/schemas/tags.schema\");",
											"    data.push(\"raml-util/schemas/errors.schema\");",
											"    data.push(\"raml-util/schemas/error.schema\");",
											"    data.push(\"raml-util/schemas/parameters.schema\");",
											"    data.push(\"raml-util/schemas/metadata.schema\");",
											"    data.push(\"raml-util/schemas/uuid.schema\");",
											"}",
											"",
											"var interval = setTimeout(() => {}, 30000);",
											"function traverse(data){",
											"    addAdditionalSchemas(data);",
											"     var promises = Object.entries(data).map(([key, value]) => {",
											"         ",
											"        var url = getURL(value);",
											"        var request = getRequest(url);",
											"        ",
											"        return fetchSchema(request, 200 * key)",
											"        .then(function(response) {",
											"            response = replaceResponseRefWithName(response.toString());",
											"            var name = extractName(value);",
											"            if(!checkVariableExist(name)){",
											"                setEnvironmentVariable(name, response);",
											"            }",
											"        })",
											"        .catch((err, req) => {",
											"            console.log(err);",
											"            console.log(req);",
											"        });",
											"    });",
											"    ",
											"    Promise.all(promises)",
											"        .then(() => {",
											"            clearTimeout(interval)",
											"        })",
											"        .catch((err, req) => {",
											"            console.log(err);",
											"            console.log(req);",
											"            clearTimeout(interval);",
											"        });",
											"}",
											"",
											"traverse(JSON.parse(responseBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{kb-ebsco-java-module-id}}",
										"type": "text"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authentication",
					"item": [
						{
							"name": "/authn/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var token = postman.getResponseHeader(\"x-okapi-token\")",
											"pm.environment.set(\"xokapitoken\", token);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"id": "3fceea0e-8622-4dd2-ba9e-8cb88d7f5b79"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup permission",
					"item": [
						{
							"name": "Get user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8664cf31-82b7-4d83-b5ed-f83fb2bf5098",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"userId\", jsonData.user.id);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da498bd5-b456-4bd2-ad6b-f401378b87ed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"bl-users",
										"by-username",
										"{{username}}"
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "Add permission if it doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1644a629-949e-45ae-b2ea-afaf81526783",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var permissionExists = jsonData!==null && jsonData.permissions.filter(permission => (permission === \"kb-ebsco.all\")).length > 0;",
											"pm.environment.set(\"permissionExists\", permissionExists);",
											"",
											"if(!permissionExists) {",
											"    jsonData.permissions.push(\"kb-ebsco.all\")",
											"    ",
											"    const permissionsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/json',",
											"        raw: JSON.stringify(jsonData)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"        pm.expect(res).to.have.property('status', 'OK');",
											"      });",
											"    });",
											"    ",
											"    postman.setNextRequest(\"/authn/login\");",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9daeb22c-26ed-4352-999e-73a5e6b357cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for kb-credentials",
					"item": [
						{
							"name": "Create credentials if not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8621322-c36f-471a-be86-1e769e0651ef",
										"exec": [
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var credentialsExist = jsonData !== undefined && jsonData.data[0] !== undefined;",
											"",
											"if (credentialsExist) {",
											"    var credentials = jsonData.data[0];",
											"    credentials.attributes.name = \"University of Massachusettss\";",
											"    credentials.attributes.apiKey = pm.variables.get(\"rm.apiKey\");   ",
											"    credentials.attributes.customerId = pm.variables.get(\"rm.apiCustomer\");",
											"    credentials.attributes.url = pm.variables.get(\"rm.apiUrl\");",
											"",
											"    var requestBody = {",
											"        data: credentials",
											"    };",
											"    const credentialsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/kb-credentials/' + credentials.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/vnd.api+json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/vnd.api+json',",
											"        raw: JSON.stringify(requestBody)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(credentialsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 204);",
											"        pm.environment.set(\"kb-credentials-id1\", credentials.id);",
											"      });",
											"    });",
											"} else {",
											"",
											"    var credentials = {",
											"        type: 'kbCredentials',",
											"        attributes: {",
											"            name: 'University of Massachusettss',",
											"            apiKey: pm.variables.get(\"rm.apiKey\"),",
											"            url: pm.variables.get(\"rm.apiUrl\"),",
											"            customerId: pm.variables.get(\"rm.apiCustomer\")",
											"        }",
											"    }",
											"",
											"    var requestBody = {",
											"        data: credentials",
											"    };",
											"",
											"    const credentialsPostRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/kb-credentials',",
											"      method: 'POST',",
											"      header: {",
											"        'Content-Type' : 'application/vnd.api+json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/vnd.api+json',",
											"        raw: JSON.stringify(requestBody)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(credentialsPostRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 201);",
											"        pm.environment.set(\"kb-credentials-id1\", res.json().id);",
											"      });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for assignment users",
					"item": [
						{
							"name": "POST assign user1 to KB Credentials1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c1b9aa65-cd23-438c-94c7-52ee1c881a24",
										"exec": [
											"pm.environment.set(\"assigned-user-id1\", pm.environment.get(\"userId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec8665f8-9533-4810-97ce-ff9dda310604",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for user credentials",
					"item": [
						{
							"name": "staff user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb84a039-21c7-44f8-8044-39a7302cbdd3",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"staff-user-group-id\", jsonData.usergroups[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5013750-e693-4277-a2ee-043cdb182a66",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?query=(group==staff)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"groups"
									],
									"query": [
										{
											"key": "query",
											"value": "(group==staff)"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fd565656-9e7b-41e7-a9ba-0457a940d614",
										"exec": [
											"pm.environment.set(\"cred-user-name\", \"emilia_briggs\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "520ce5b3-c0fa-4f0b-9695-3a5fc378b016",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"cred-user-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{cred-user-name}}\",\r\n  \"patronGroup\": \"{{staff-user-group-id}}\",\r\n  \"active\": true,\r\n  \"personal\": {\r\n    \"preferredContactTypeId\": \"002\",\r\n    \"lastName\": \"Briggs\",\r\n    \"firstName\": \"Emilia\",\r\n    \"middleName\": \"Gemma\",\r\n    \"email\": \"emilia_briggs@example.com\"\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dfa48b16-ac8b-41d1-8a4b-eb22cb6c508b",
										"exec": [
											"pm.environment.set(\"cred-user-pass\", \"eb_pass\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "55977258-1a89-4723-9097-a2ee05befe33",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"{{cred-user-id}}\",\r\n  \"username\": \"{{cred-user-name}}\",\r\n  \"password\": \"{{cred-user-pass}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user credentials permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4eeb6921-067a-4ee5-a38f-fb8f4b9af763",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5719cfae-15c2-438f-bf97-e5e085a15273",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"kb-cred-perm-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"permissionName\": \"kb-ebsco.user-kb-credential.get\",\r\n\t\"displayName\": \"get user KB credentials\",\r\n\t\"description\": \"Get user KB credentials\",\r\n\t\"tags\": [],\r\n\t\"subPermissions\": [],\r\n\t\"mutable\": false,\r\n\t\"visible\": false\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign permission to user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b1f109a3-b1e7-49d1-bf94-29458e784e22",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b355b0f0-7f16-4fe8-a1ba-4c44caef5b6f",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"kb-cred-perm-assigned-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"{{cred-user-id}}\",\r\n  \"permissions\": [\"kb-ebsco.user-kb-credential.get\"]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign user to KB Credentials1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6bbee677-2e72-4f27-ac50-048538c76753",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"cred-user-assigned-id\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3056b90b-f278-4a40-95cf-92522121bb88",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{cred-user-assigned-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Emilia\",\n      \"middleName\": \"Gemma\",\n      \"lastName\": \"Briggs\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"{{cred-user-name}}\"\n    }\n  }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/authn/login user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8e9567c-a903-4331-bf25-b5ecfd174657",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var token = postman.getResponseHeader(\"x-okapi-token\")",
											"pm.environment.set(\"cred-user-xokapitoken\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{cred-user-name}}\",\"password\":\"{{cred-user-pass}}\"}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for tags",
					"item": [
						{
							"name": "Create custom package for tags test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5647daf5-edc3-494e-ac76-79edd5abe549",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-created-for-tags-id\", response.data.id);",
											"        pm.environment.set(\"custom-package-created-for-tags-name\", response.data.attributes.name);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"    ",
											"    //Test that data.attributes has expected attributes",
											"    pm.test('expected data.attributes are present', function() {",
											"        pm.expect(response.data.attributes).to.be.an('object');",
											"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
											"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
											"    });",
											"  ",
											"    //Test that customCoverage matches what was passed in POST request",
											"    pm.test('custom coverage matches value passed in', function() {",
											"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"    });",
											"    ",
											"    //Test that isCustom is true",
											"    pm.test('isCustom is true', function() {",
											"        pm.expect(response.data.attributes.isCustom).to.be.true;",
											"    });",
											"    ",
											"    //Test that isSelected is true",
											"    pm.test('isSelected is true', function() {",
											"        pm.expect(response.data.attributes.isSelected).to.be.true;",
											"    });",
											"    ",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.variables.get(\"custom-package-tags-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eff114f3-bd26-4c2a-b24c-25fbd15e2b33",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-tags-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-tags-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package with multiple tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "627a1b50-c9b9-4358-b830-26b510e69f2d",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    pm.environment.set(\"tag-name-for-multiple-adding-a\", response.data.attributes.tags.tagList[0]);",
											"    pm.environment.set(\"tag-name-for-multiple-adding-b\", response.data.attributes.tags.tagList[1]);",
											"    ",
											"    //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('TagList is not empty', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tag in tagList matches with value",
											"    pm.test('Creating tagList', function(){",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"a-test\");",
											"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"b-test\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-created-for-tags-name}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"a-test\",\n    \t\t\t\"b-test\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6b936c55-3f1a-4011-a0f3-63e78641b957",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a55a12aa-ee0f-4325-b74e-3ea7521b1bfc",
								"type": "text/javascript",
								"exec": [
									"    tv4.addSchema(\"schema_package.json\", JSON.parse(pm.variables.get(\"schema_package\")));",
									"    tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"    tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"    tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"    tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"    tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"    tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"    tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"    tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"    tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"    tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"    tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"    tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for packages test",
					"item": [
						{
							"name": "Create custom package for testing deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "834eb2b4-909a-4a59-96f3-b89110d92918",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-id-created-in-post\", response.data.id);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"    ",
											"    //Test that data.attributes has expected attributes",
											"    pm.test('expected data.attributes are present', function() {",
											"        pm.expect(response.data.attributes).to.be.an('object');",
											"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
											"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
											"    });",
											"        ",
											"    //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"    ",
											"    //Test that customCoverage matches what was passed in POST request",
											"    pm.test('custom coverage matches value passed in', function() {",
											"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"    });",
											"    ",
											"    //Test that isCustom is true",
											"    pm.test('isCustom is true', function() {",
											"        pm.expect(response.data.attributes.isCustom).to.be.true;",
											"    });",
											"    ",
											"    //Test that isSelected is true",
											"    pm.test('isSelected is true', function() {",
											"        pm.expect(response.data.attributes.isSelected).to.be.true;",
											"    });",
											"    ",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0be5d9e-d7d0-4e2a-8b35-d6c6d784fdc3",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set(\"custom-package-one-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package1 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f7af1cd4-4456-41c4-a32e-d1f58c60810b",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "82fc908e-43b2-41c6-93db-0b6090bb08db",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"    ",
											"    pm.environment.set(\"tagName\", response.data.attributes.tags.tagList[0]);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom package for testing deletion in PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cad4e24c-e66a-4372-b3d0-610f8077662d",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-name-created-in-post-again\", response.data.attributes.name);",
											"        pm.environment.set(\"custom-package-id-created-in-post-again\", response.data.id);",
											"        pm.environment.set(\"provider-with-tags-id\", pm.environment.get(\"custom-package-id-created-in-post-again\").split('-')[0]);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-two-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80a77586-7627-41e4-a7a9-458f6f51862d",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set(\"custom-package-two-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-two-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package2 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed21d59f-e48b-4e7d-a639-00b1fd3ba120",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9611880d-c339-4860-8343-cd55d5db421f",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-again}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-again}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d81f9da-5b5e-4dfb-a2d9-5423b6758a26",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a json body\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"var matchingPackages = jsonData.data.filter(\r",
											"  function(packageRecord) {\r",
											"    if (!packageRecord.attributes.isCustom && packageRecord.attributes.titleCount > 1) {\r",
											"      return packageRecord;\r",
											"    }\r",
											"  }\r",
											");\r",
											"\r",
											"pm.test('at least 1 matching package is returned from query', function() {\r",
											"  pm.expect(matchingPackages.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"if (matchingPackages.length > 0) {\r",
											"  pm.environment.set(\"partially-selected-package-id\", matchingPackages[0].id);\r",
											"} else {\r",
											"  console.log(\"Unable to find package id for testing partially selected packages\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[selected]=false\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									],
									"query": [
										{
											"key": "filter[selected]",
											"value": "false\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get resource in not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e452d6e9-7c90-41ef-9928-06818fcf108a",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a json body\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"partially-selected-package-resource-id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}/resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{partially-selected-package-id}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select 1 resource in not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed4e7f87-a718-4bdf-9150-7c21a2dd1a44",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{partially-selected-package-resource-id}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": false\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{partially-selected-package-resource-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{partially-selected-package-resource-id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "644af76c-6123-44c4-b2d9-672df4802dc1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "950ce1ed-70dd-47e9-8918-946d0040a73f",
								"type": "text/javascript",
								"exec": [
									"    tv4.addSchema(\"schema_package.json\", JSON.parse(pm.variables.get(\"schema_package\")));",
									"    tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"    tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"    tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"    tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"    tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"    tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"    tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"    tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"    tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"    tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"    tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"    tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for providers adding tags",
					"item": [
						{
							"name": "Update provider with adding tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6958a179-c88e-466f-8b98-ec3cdfc7d10f",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"tagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc8fac40-680e-455f-85d0-d8daca6616b8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"{{tagName}}\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"18",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second provider with tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782dc889-698d-4770-bca7-9653427d681a",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('EBSCO');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"secondTagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da01ff42-59fd-4529-8e43-671a47746e38",
										"exec": [
											"pm.environment.set(\"secondTagName\", \"bar-tag\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"EBSCO\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"{{secondTagName}}\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"19",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7685d96-77fd-40df-a28e-ccb151458671",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "88ea0260-9cfe-49d4-9bfb-2052c48aa77b",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
									"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
									"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
									"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
									"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
									"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));",
									"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for titles test",
					"item": [
						{
							"name": "GET Customer Specific Provider Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b8c0bbb-580c-417d-bf10-4add40ad6815",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"if (jsonData.data.length > 0) {",
											"    pm.environment.set(\"custom-providerid\", jsonData.data[0].id);",
											"} else {",
											"    console.log(\"Unable to find customer specific provider id for custom title testing\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q={{custid}}\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers"
									],
									"query": [
										{
											"key": "q",
											"value": "{{custid}}\n"
										}
									]
								},
								"description": "Retrieves unique id of the customer specific provider. All Custom Packages are created as part of a customer specific provider. "
							},
							"response": []
						},
						{
							"name": "Create Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f702535-4aa2-457f-a3e9-f87cf721043f",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.environment.set(\"custom-packageid\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "21df9116-636a-49a9-a847-9f3e434b9f46",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"package-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Update custom package3 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "72b88588-893e-4950-a0a3-11a71faaffa5",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "852e7446-a375-4e0c-b553-41ff72d18b72",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('Unknown');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"Unknown\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a2a4198-51a1-40bb-baa7-432a27c2f5d0",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var managedPackages = jsonData.data.filter(",
											"    function(packageRecord) {",
											"        if (!packageRecord.attributes.isCustom) {",
											"           return packageRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed package is returned from query', function() {",
											"    pm.expect(managedPackages.length).to.be.above(0);",
											"});",
											"",
											"if (managedPackages.length > 0) {",
											"    pm.environment.set(\"managed-packageid\", managedPackages[0].id);",
											"} else {",
											"    console.log(\"Unable to find managed package id for custom title testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=abc\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									],
									"query": [
										{
											"key": "q",
											"value": "abc\n"
										}
									]
								},
								"description": "Locate a random managed package to test custom title create error scenario."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for resources test",
					"item": [
						{
							"name": "Create Custom Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "830e4889-f241-43c4-b477-7fc353e8b07b",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titleid-for-resource\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e267b905-2597-4803-a2dd-a82e44e57956",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Create Custom Title for duplicate check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "144c2b0b-1bd7-43d5-8514-2423b15413f5",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titlename-for-resource-duplicate\", jsonData.data.attributes.name);",
											"pm.environment.set(\"custom-titleid-for-resource-duplicate\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13bac8fd-06d1-4fc8-99d2-435adb66896d",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-uuid2\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-uuid2}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Create Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a10c10e-dc7b-41ab-b725-f8ead215ec19",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-packageid-for-resource\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "faa1106a-08b8-4100-ac6c-b819f698c13c",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-for-resource-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d39531f9-e72f-4442-84fb-0112703a8735",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var managedTitles = jsonData.data.filter(",
											"    function(titleRecord) {",
											"        if (!titleRecord.attributes.isCustom) {",
											"           return titleRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed title is returned from query', function() {",
											"    pm.expect(managedTitles.length).to.be.above(0);",
											"});",
											"",
											"if (managedTitles.length > 0) {",
											"    pm.environment.set(\"managed-titleid\", managedTitles[0].id);",
											"    pm.environment.set(\"managed-titlename\", managedTitles[0].attributes.name);",
											"} else {",
											"    console.log(\"Unable to find managed title id for resource testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=abc\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "abc\n"
										}
									]
								},
								"description": "Locate a random managed package to test custom title create error scenario."
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba7c3d9d-b3f2-44d2-bcf7-851c81f866b0",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var managedResources = jsonData.included.filter(",
											"    function(resourceRecord) {",
											"        if (!resourceRecord.attributes.isPackageCustom) {",
											"           return resourceRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed resource is returned from query', function() {",
											"    pm.expect(managedResources.length).to.be.above(0);",
											"});",
											"",
											"if (managedResources.length > 0) {",
											"    pm.environment.set(\"managed-title-package-resourceid\", managedResources[0].id);",
											"} else {",
											"    console.log(\"Unable to find managed resource id for resource testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{managed-titleid}}?include=resources\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles",
										"{{managed-titleid}}"
									],
									"query": [
										{
											"key": "include",
											"value": "resources\n"
										}
									]
								},
								"description": "Locate a random managed resource to test resource delete functionality"
							},
							"response": []
						},
						{
							"name": "Create custom title for tags test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3b36b925-18c4-418f-b274-3f7200f11c88",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-tags-test-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ce5f2711-5f88-49fa-90fe-d313cfb9e915",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titleid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-tags-test-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Custom package for resource tag test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bb30d2bb-1eb6-48af-9926-8d7d3d7b9650",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-from-setup-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a1d0d77-c44e-423b-9ddd-0505db52d162",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-packageid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{custom-package-from-setup-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST add custom title to custom package with resource tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22fd3b1a-86dc-49a3-881e-8e2d04f71092",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store custom resource id for future reference in other tests/cleanup",
											"pm.environment.set(\"custom-resourceid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-from-setup}}\",\n      \"titleId\": \"{{custom-titleid-from-setup}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add tags to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2fdc7846-32d5-4b37-8c07-27ff388be110",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-resource-with-tags-uuid\", uuid.v4());",
											"pm.environment.set(\"tag-name-for-resource\", \"tag one\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "19f890dc-8bab-4670-b887-e8493d473230",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.variables.get(\"custom-resource-with-tags-uuid\"));",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tags', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"tag-name-for-resource\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"tags\",\r\n    \"attributes\": {\r\n      \"name\": \"custom title-{{custom-resource-with-tags-uuid}}\",\r\n      \"tags\": {\r\n        \"tagList\": [\r\n          \"{{tag-name-for-resource}}\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add custom labels to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1aed9bc9-ea29-47b8-9048-b32ada267b27",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-resource-with-tags-uuid\", uuid.v4());",
											"pm.environment.set(\"tag-name-for-resource\", \"tag one\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7bbca3d5-27f6-446d-bb02-9aabb6e2438c",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is resources",
											"pm.test('type is resources', function(){",
											"    pm.expect(response.data.type).eq('resources');",
											"});",
											"    ",
											"    ",
											"// Test that attributes have the expected keys",
											"let attributes = response.data.attributes;",
											"pm.test('expected attributes are present in a record', function() {",
											"    pm.expect(attributes).to.be.an('object');",
											"    pm.expect(attributes).to.include.all.keys(\"isTitleCustom\", \"titleId\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
											"});",
											"",
											"//Check that userDefinedFields are correct",
											"pm.test('UserDefinedFields are correct', function(){",
											"    pm.expect(attributes.userDefinedField1).eq(\"test 1\");",
											"    pm.expect(attributes.userDefinedField2).eq(\"test 2\");",
											"    pm.expect(attributes.userDefinedField3).eq(\"test 3\");",
											"    pm.expect(attributes.userDefinedField4).eq(\"test 4\");",
											"    pm.expect(attributes.userDefinedField5).eq(\"test 5\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"test 3\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add tags to managed resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ca5086b4-c4a8-478f-a791-c5077cc487eb",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"managed-resource-with-tags-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7a65f961-a83b-4704-a50a-2b8c709165d7",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('managed-resource-' + pm.variables.get(\"managed-resource-with-tags-uuid\"));",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tags', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"secondTagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"managed-resource-{{managed-resource-with-tags-uuid}}\",\n      \"tags\": {\n        \"tagList\": [\n          \"{{secondTagName}}\"\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{managed-title-package-resourceid}}",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd0e1526-cc65-4f2c-94df-2b255ab62c12",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c034b80-600f-43eb-a925-8f6286932518",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_resourceTagsItem.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsItem\")));",
									"tv4.addSchema(\"schema_resourceTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
									"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
									"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
									"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
									"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
									"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
									"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for custom labels",
					"item": [
						{
							"name": "PUT /custom-labels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1dd3c99-3f18-4cce-b520-9905ef592b78",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"//Get the first record",
											"let firstRecord = jsonData.data[0];",
											"    ",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in a record', function() {",
											"    pm.expect(firstRecord).to.be.an('object');",
											"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
											"    pm.expect(firstRecord.type).eq('customLabels');",
											"});",
											"",
											"// Test that attributes have the expected keys",
											"let firstAttributes = firstRecord.attributes;",
											"pm.test('expected attributes are present in a record', function() {",
											"    pm.expect(firstAttributes).to.be.an('object');",
											"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test custom label 1\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 2,\n                \"displayLabel\": \"test custom label 2\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"custom-labels"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7fc223e-e230-49d4-a3a6-43f9f50424a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0328ccb9-1a73-44ab-989b-67ab2b6be1ab",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_customLabel.json\", JSON.parse(pm.variables.get(\"schema_customLabel\")));",
									"tv4.addSchema(\"schema_customLabelsCollection.json\", JSON.parse(pm.variables.get(\"schema_customLabelsCollection\")));",
									"tv4.addSchema(\"schema_customLabelDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_customLabelDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for access types",
					"item": [
						{
							"name": "Create new access type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59d2ac61-19cf-46b0-b3bc-c31658fe5cf9",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id1\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed\",\n            \"description\": \"some description\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new access type 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5638d96-53f4-4a58-bc9b-610bdd372290",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id3\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "918eb19c-5983-4c1c-acb3-4a2290a56d6f",
										"exec": [
											"pm.environment.set(\"access-type-name3\", \"Subscribed2\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"{{access-type-name3}}\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new access type 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0339a549-effd-4dc3-97a7-439c047eadbc",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id4\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a954cd0-56e0-4bf0-98bf-07a1b6fa46db",
										"exec": [
											"pm.environment.set(\"access-type-name4\", \"Trial\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"{{access-type-name4}}\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package1 with access-type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0763d9c2-0366-4bce-a427-523832a38657",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "722f7c8c-0840-4395-8b5f-e7e65f948479",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
											"});",
											"",
											"//Test that id matches what was provided in query",
											"pm.test('id matches as provided in query', function(){",
											"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
											"});    ",
											"",
											"//Test that type is packages",
											"pm.test('type is packages', function(){",
											"    pm.expect(response.data.type).eq('packages');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
											"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
											"});",
											"",
											"//Test that contentType matches as provided in request",
											"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
											"pm.test('contentType matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.contentType).eq('Print');",
											"});",
											"",
											"//Test that isSelected matches as provided in request",
											"pm.test('isSelected matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.isSelected).to.be.true;",
											"});",
											"",
											"//Test that visibilityData matches as provided in request",
											"pm.test('visibilityData matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
											"});",
											"",
											"//Test that custom coverage matches provided in request",
											"pm.test('customCoverage matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"});",
											"",
											"//Test that resources are not included in relationships",
											"pm.test('relationships meta should not include resources', function() {",
											"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
											"});",
											"",
											"//Test that access type assigned",
											"pm.test('access type should be assigned', function() {",
											"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
											"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id3\"));",
											"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id3\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-package-id-created-in-post}}\",\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n            \"contentType\": \"Print\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            },\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id3}}\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package2 with access-type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaf6f8a3-86df-45c2-91a2-f1d6faf09882",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
											"});",
											"",
											"//Test that id matches what was provided in query",
											"pm.test('id matches as provided in query', function(){",
											"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-created-for-tags-id'));",
											"});    ",
											"",
											"//Test that type is packages",
											"pm.test('type is packages', function(){",
											"    pm.expect(response.data.type).eq('packages');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
											"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
											"});",
											"",
											"//Test that contentType matches as provided in request",
											"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
											"pm.test('contentType matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.contentType).eq('E-Journal');",
											"});",
											"",
											"//Test that isSelected matches as provided in request",
											"pm.test('isSelected matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.isSelected).to.be.true;",
											"});",
											"",
											"//Test that visibilityData matches as provided in request",
											"pm.test('visibilityData matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
											"});",
											"",
											"//Test that resources are not included in relationships",
											"pm.test('relationships meta should not include resources', function() {",
											"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
											"});",
											"",
											"//Test that access type assigned",
											"pm.test('access type should be assigned', function() {",
											"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
											"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id4\"));",
											"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id4\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"{{custom-package-created-for-tags-name}}\",\n            \"contentType\": \"E-Journal\",\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id4}}\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update custom resource with access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4854d904-e386-4820-bf08-0ccbf804f531",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "796907a0-7f52-479d-bef5-c6035934d92e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"{{access-type-id3}}\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "kb-credentials",
			"item": [
				{
					"name": "GET kb-credentials collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET credentials collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a08a5f7-780d-438e-b82b-814def859caa",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentialsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is kbCredentials",
													"        pm.expect(firstRecord.type).eq('kbCredentials');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"        });",
													"    } else {",
													"        console.log(\"No credentials exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8a2f999d-e425-4a81-ac94-e8f2b071ad87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69f7501f-7be0-48c4-8306-f52267a91634",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST credentials valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f4dcc82-22d6-461b-9839-ca148d8bcbd5",
												"exec": [
													"//Check that status is 201",
													"pm.test(\"Status is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"         ",
													" //Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"        pm.expect(response.attributes).to.be.an('object');",
													"        pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"        ",
													" //Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function() {",
													"        pm.expect(response.attributes.name).to.be.equals('University of Illinois');",
													"        pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"        pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"        pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function() {",
													"        pm.expect(response.meta).to.be.an('object');",
													"        pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});",
													"",
													"pm.environment.set(\"kb-credentials-id2\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST credentials invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef5fdf27-2cc6-475b-93f7-dd5afd9beddf",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"KB API Credentials are invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with name longer than 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee35d224-8675-4e5d-8a1e-964d92c7e06e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 255 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"zxehyhvsiucipujicjhuziczzjvqhwmaepkvdmupcaqrscjiilqlnumrxyttwgfoqlxztlpsosldoqjcbrkyvvaxzcklqlzbdkofjkqtbmvhkuyhdlvyeuqmebrulxqzryqzpcxkbezpdwbwzguwwnjswhwfexngtxgkizjdwvcnxqlhsszbavqndixyxeqvceqdssviqaotmsvnuehsmghhwsnhwktzrrqizhckmwtgpcsdhdyxhgnrgnqzxbcu\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d13b748a-f725-4beb-833e-15160dfcd975",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with already existed name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95f3b575-57d2-4d1e-8a63-3843ff77e1d3",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Duplicate name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"Credentials with name 'University of Illinois' already exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1c37bda-c6ac-4fa0-8476-e93e58c2e09b",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"url must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13d9f280-b7f5-44a9-b769-219810d58805",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid customerId\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"customerId must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c18d0440-80bf-4498-aca2-91e4350e38a0",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/kb-credentials/\" + pm.environment.get(\"kb-credentials-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    var response = res.json();",
													"    pm.test(\"Check changes\", function () {",
													"        pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"        pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"        pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"        pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"    });",
													"    ",
													"    pm.test('expected meta are present', function() {",
													"        pm.expect(response.meta).to.be.an('object');",
													"        pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0f1044a-b608-4531-9f3d-bedc4adc8bf9",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b21613f-08de-4ea8-8e18-c5d9b169c9b2",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5230ff85-985b-4579-a547-39beebb8bbc1",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"KB API Credentials are invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with name longer than 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ba0d14d-47d1-43a6-838f-b7f3efa2e9e0",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 255 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"zxehyhvsiucipujicjhuziczzjvqhwmaepkvdmupcaqrscjiilqlnumrxyttwgfoqlxztlpsosldoqjcbrkyvvaxzcklqlzbdkofjkqtbmvhkuyhdlvyeuqmebrulxqzryqzpcxkbezpdwbwzguwwnjswhwfexngtxgkizjdwvcnxqlhsszbavqndixyxeqvceqdssviqaotmsvnuehsmghhwsnhwktzrrqizhckmwtgpcsdhdyxhgnrgnqzxbcu\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2226b7b7-6edd-492b-9952-4ef45c7c61d7",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with already existed name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd26dc5c-1472-4d40-963f-4b3d15183a84",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Duplicate name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"Credentials with name 'University of Illinois' already exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e62e924b-9a0e-41da-8556-34a95d1d9f8d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"url must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfe10b35-7c5f-49c4-9ec0-cbd382a056ea",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid customerId\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"customerId must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a65833fa-4add-46cd-a70e-5e8f6c7fd2d2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aae79901-c656-4607-afd7-36c829eadfc5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PATCH credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7efa983-b67b-4477-9df4-50d836ab6101",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/kb-credentials/\" + pm.environment.get(\"kb-credentials-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    var response = res.json();",
													"    pm.test(\"Check changes\", function () {",
													"        pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Patched');",
													"        pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"        pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"        pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"    });",
													"    ",
													"    pm.test('expected meta are present', function() {",
													"        pm.expect(response.meta).to.be.an('object');",
													"        pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Patched\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PATCH credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98c94b6d-0c02-4444-8c59-60ffb0e9675c",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4937e3e6-ddf8-493e-bfa3-3388db5a86fd",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2678b318-1cd4-4f40-9d58-3847256f80a0",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"KB API Credentials are invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials with name longer than 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33192eea-f280-42e4-9606-8ba21d0a962c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 255 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"zxehyhvsiucipujicjhuziczzjvqhwmaepkvdmupcaqrscjiilqlnumrxyttwgfoqlxztlpsosldoqjcbrkyvvaxzcklqlzbdkofjkqtbmvhkuyhdlvyeuqmebrulxqzryqzpcxkbezpdwbwzguwwnjswhwfexngtxgkizjdwvcnxqlhsszbavqndixyxeqvceqdssviqaotmsvnuehsmghhwsnhwktzrrqizhckmwtgpcsdhdyxhgnrgnqzxbcu\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b1c703f-1e46-49c0-9cc9-4c5f5322945a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials with empty url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d02f7b5-2a3a-43c8-8711-c3f788090be5",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"url must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials with empty customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9274130b-5101-4d93-8bc1-833c54593cf0",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid customerId\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"customerId must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2b595285-acc3-412d-afa8-43f5ce354bf1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc80c8e7-96c5-4cd1-8c53-180a3f239b53",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET kb-credentials by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET credentials by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa66801-cf77-4173-95a9-02da0e6bce40",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function () {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"",
													"//Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function () {",
													"    pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"    pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"    pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"    pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function () {",
													"    pm.expect(response.meta).to.be.an('object');",
													"    pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1ad153f-1797-457d-91e0-38ad3f01dde7",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm-api-url-value}}\",\n      \"customerId\": \"{{rm-api-custid-value}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d0385f4-6371-4400-bd1c-356d93549aec",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0a8dbc1f-1550-4b34-a307-55ed4394670b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06ac053a-90d9-4e7f-9b02-4527dbeaa3b4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "DELETE credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb5f239e-d333-471b-8206-60da6c4ddd16",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss\",\r\n      \"apiKey\": \"QTh4lr58lK6RS44WI1wwY4tbXuXjHSJXaDO15wo1\",\r\n      \"url\": \"https://sandbox.ebsco.io\",\r\n      \"customerId\": \"apidvgvmt\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58054715-fd33-4d63-b648-0d7df54c54f7",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6e44a57-316e-423f-8783-dd96c8ee8d59",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE credentials with assigned user(s)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4daa1929-82f3-4cdc-8eba-23e3361055c7",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"Credentials have related records and can't be deleted\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "43ca7002-8b67-4022-94a1-dea5af9fd3b1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c8732476-4537-4f96-8749-e70a0eb5e36d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bc910351-1720-4824-81e3-636a62d5f42b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c32f290f-7536-4c73-aa77-b78fe92d1d29",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_kbCredentialsCollection.json\",pm.variables.get(\"schema_kbCredentialsCollection\"));",
							"tv4.addSchema(\"schema_kbCredentials.json\", pm.variables.get(\"schema_kbCredentials\"));",
							"tv4.addSchema(\"schema_kbCredentialsDataAttributes.json\",pm.variables.get(\"schema_kbCredentialsDataAttributes\"));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user assignment",
			"item": [
				{
					"name": "GET users assigned to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET users collection for KB Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4d578e9-9209-4279-b776-3a68eb4fc990",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type assignedUsers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is assignedUsers",
													"        pm.expect(firstRecord.type).eq('assignedUsers');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"credentialsId\", \"userName\", \"firstName\", \"middleName\", \"lastName\", \"patronGroup\");",
													"        });",
													"    } else {",
													"        console.log(\"No user exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET with non-existing KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3f4c2da3-a09a-4234-a817-1cef91599842",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"non-existing-credentials-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2d6500f3-af07-457a-8c5a-ac66f4e4c938",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify attibutes",
													" pm.test('expected attributes are present', function() {",
													"    pm.expect(jsonData.data).to.be.an('array');",
													"     ",
													"    pm.expect(jsonData.meta).to.be.an('object');",
													"    pm.expect(jsonData.meta).to.include.all.keys(\"totalResults\");",
													"    ",
													"    pm.expect(jsonData.jsonapi).to.be.an('object');",
													"    pm.expect(jsonData.jsonapi).to.include.all.keys(\"version\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET with invalid KB Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "206af76b-7c18-4ad3-aca4-3c50d7fa7bf9",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.contains(\"'credentialsId' parameter is incorrect\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST assign user to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST assign user2 to KB Credentials1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "563cdee1-7dc6-47b3-976f-bc8211ba71f6",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"assigned-user-id2\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "67256c05-4c8d-4dad-bef2-c6faed51701c",
												"exec": [
													"//Check that status is 201",
													"pm.test(\"Status is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_assignedUser\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is assignedUsers",
													"pm.expect(response.type).eq('assignedUsers');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"         ",
													" //Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"credentialsId\", \"userName\", \"firstName\", \"middleName\", \"lastName\", \"patronGroup\");",
													"});",
													"        ",
													" //Test that credentialsId as expected",
													"pm.test('test credentialsId as expected', function() {",
													"    pm.expect(response.attributes.credentialsId).to.be.equals(pm.environment.get(\"kb-credentials-id1\"));",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST with non-existing KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d5698d88-2b2b-41b3-974a-dc0eb16467b1",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"non-existing-credentials-id\", uuid.v4());",
													"pm.globals.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "00234bda-641c-452a-b707-451ffa3914df",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"not found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{non-existing-user-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST with invalid KB credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "04af05ed-1188-47dd-a674-0fbf88c2765b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d1fb41ec-39e9-4a94-9e9f-0843855ae07e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.equal(\"must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"\");",
													"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"data.attributes.credentialsId\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"invalid-id\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST without required attributes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "96b46a41-d469-4401-89dd-ac6390c04dff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f96a98ac-a2b5-4f34-8ba5-d266cbe76680",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 6 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(6);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.userName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.credentialsId\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.lastName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.patronGroup\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n\n    \"attributes\": {\n      \n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST with too long user name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d3ca3c28-968d-4f60-b95c-f77fe67fe247",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e0ea208f-9f45-4687-8a15-e6d8cdbb07a1",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"value too long for type character varying(100)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean ma\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST assign already assigned user to another KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ebb6d1e6-5641-4571-88cf-f8c7727ef007",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "baa79de4-4c34-4790-a3da-33a7e9f07de9",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"The user is already assigned to another credentials\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"john_doe\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT update user assignment to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT update user2 information",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7cb01914-703c-45cc-926d-a50e22df83e2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d0a61d27-f623-4c44-9a80-f2eab8ae0dda",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Member\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT with invalid user id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e3eedc33-2339-44f1-8203-a8ae5624dbf7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b52da867-5047-4420-8be4-1dd98d07bdb5",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.equal(\"must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"\");",
													"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"invalid-id\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with non-existing user id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b9831dd-6ea1-4d89-bf55-f57b2a9449c3",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4ef46ef4-a484-4f00-a765-80ab05f7194a",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{non-existing-user-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{non-existing-user-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{non-existing-user-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT without required attributes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "874e39fa-3b36-4912-a08b-0641ec6c1fba",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77b10fc4-f7cc-40d4-94a3-6a0583e698bf",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 6 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(6);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.userName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.credentialsId\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.lastName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.patronGroup\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"attributes\": {\n     \n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with too long user name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3912072b-fe25-4d8a-8a4b-0f537652ac51",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eb7a82da-71ee-4002-aea9-04ed9128e30a",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"value too long for type character varying(100)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean ma\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with changing credentials for user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5693874f-fc41-473c-b310-f7d79e9d7674",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dfc259e9-692c-4756-a7e2-52871941bbaa",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Credentials ID and user ID can't be updated\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE unassign user from KB Credentials",
					"item": [
						{
							"name": "Posistive",
							"item": [
								{
									"name": "DELETE unassign user1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "15e03f87-d352-496f-a12b-018989d5fb90",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1075100d-b38f-4539-9d99-437e5e38a9d7",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE already deleted item",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b9de55cc-9b42-49e6-80fb-7a5223f110de",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cf73a7f-6344-40b1-bfa5-6031b44b8f12",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id2}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE non-existing user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d0d5e11b-daa9-4278-a9e3-8e4c80de7ae6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34bad7fe-0d61-4939-b781-b7a8fa92932b",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"   pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{non-existing-user-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{non-existing-user-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE with invalid id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8179921-4c5f-49dd-ad8e-6c8c01981945",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7d959b74-502a-43fc-b265-3ee55efa5956",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"   pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"parameter is incorrect.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"invalid-id"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cc27d433-cda0-4027-98a4-66edda817e58",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ff08ce04-6f26-4afa-bddd-29e2ab44a3b7",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_assignedUserCollection.json\", JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")));",
							"tv4.addSchema(\"schema_assignedUser.json\", JSON.parse(pm.environment.get(\"schema_assignedUser\")));",
							"tv4.addSchema(\"schema_assignedUserDataAttributes.json\", JSON.parse(pm.environment.get(\"schema_assignedUserDataAttributes\")));",
							"tv4.addSchema(\"schema_assignedUserPostRequest.json\", JSON.parse(pm.environment.get(\"schema_assignedUserPostRequest\")));",
							"tv4.addSchema(\"schema_assignedUserPutRequest.json\", JSON.parse(pm.environment.get(\"schema_assignedUserPutRequest\")));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user credentials",
			"item": [
				{
					"name": "GET user credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET users credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6c58da-7241-45dd-a813-9d6197a5a1f7",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"",
													"pm.expect(response.id).to.be.equals(pm.environment.get('kb-credentials-id1'));",
													"",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function () {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"",
													"//Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function () {",
													"    pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"    pm.expect(response.attributes.apiKey).to.be.equals(pm.environment.get('rm.apiKey'));",
													"    pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"    pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function () {",
													"    pm.expect(response.meta).to.be.an('object');",
													"    pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8912bccf-b7d3-427a-8fa1-f82644774d29",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{cred-user-xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/user-kb-credential",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"user-kb-credential"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "unassign user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "25e24b85-0724-4dfc-895c-f9f1724e72ac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a5cf078d-4ea4-4e62-a23c-ddac67453032",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{cred-user-assigned-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{cred-user-assigned-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials for unassigned user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09f99b94-b869-4ae7-baef-cdc31ec78d15",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + ",
													"        JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"User credentials not found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1f06812-ec4f-4e3c-a056-247eb8caefb6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{cred-user-xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/user-kb-credential",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"user-kb-credential"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "access-types",
			"item": [
				{
					"name": "GET access-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET access types collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e448c1e-0c53-4ec9-881a-4389a306164f",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypesCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is accessTypes",
													"        pm.expect(firstRecord.type).eq('accessTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"usageNumber\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"credentialsId\");",
													"        });",
													"    } else {",
													"        console.log(\"No Access types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types collection by user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1439e0f5-0f37-4aa2-8a59-9740007360ca",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypesCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is accessTypes",
													"        pm.expect(firstRecord.type).eq('accessTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"usageNumber\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"credentialsId\");",
													"        });",
													"    } else {",
													"        console.log(\"No Access types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7559550-4c95-4c46-b00c-7426478b236d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "309fdf55-9a60-4104-af85-a019e0545023",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET access types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "790b5327-ca64-40b4-87da-8d579bfde98c",
												"exec": [
													"pm.test(\"success test\", function() {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"//Check that status is 200\r",
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"//Check that content-type is application/vnd.api+json\r",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { \r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"//Validate response against json api schema\r",
													"pm.test(\"Validate schema\", function () {\r",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));\r",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));\r",
													"});\r",
													"\r",
													"pm.test('expected fields are present', function() {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"creator\", \"usageNumber\", \"metadata\");\r",
													"});\r",
													"\r",
													"pm.expect(response.id).eq(pm.environment.get(\"access-type-id1\"));\r",
													"\r",
													"pm.expect(response.type).eq('accessTypes');\r",
													"\r",
													"pm.test('expected attributes are present', function() {\r",
													"    pm.expect(response.attributes).to.be.an('object');\r",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\", \"credentialsId\");\r",
													"});\r",
													"\r",
													"pm.test('expected creator are present', function() {\r",
													"    pm.expect(response.creator).to.be.an('object');\r",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");\r",
													"});\r",
													"\r",
													"pm.test('expected metadata are present', function() {\r",
													"    pm.expect(response.metadata).to.be.an('object');\r",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types by id and user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f3e8653-a50f-4c3f-9ebf-a565d4d7f370",
												"exec": [
													"pm.test(\"success test\", function() {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"//Check that status is 200\r",
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"//Check that content-type is application/vnd.api+json\r",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { \r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"//Validate response against json api schema\r",
													"pm.test(\"Validate schema\", function () {\r",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));\r",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));\r",
													"});\r",
													"\r",
													"pm.test('expected fields are present', function() {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"creator\", \"usageNumber\", \"metadata\");\r",
													"});\r",
													"\r",
													"pm.expect(response.id).eq(pm.environment.get(\"access-type-id1\"));\r",
													"\r",
													"pm.expect(response.type).eq('accessTypes');\r",
													"\r",
													"pm.test('expected attributes are present', function() {\r",
													"    pm.expect(response.attributes).to.be.an('object');\r",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\", \"credentialsId\");\r",
													"});\r",
													"\r",
													"pm.test('expected creator are present', function() {\r",
													"    pm.expect(response.creator).to.be.an('object');\r",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");\r",
													"});\r",
													"\r",
													"pm.test('expected metadata are present', function() {\r",
													"    pm.expect(response.metadata).to.be.an('object');\r",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET missing access types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1acad776-0508-42b0-8d3f-221cc47c8717",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if (response) {",
													"    pm.test('expected one error with title', function () {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"Access type not found: id = 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c52fe1c-294e-41d1-901e-f82fb5b48af0",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'accessTypeId\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/9999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"9999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a49d3d1d-1124-440c-b6ad-b0a9cb1bd135",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53d0fe4f-6b6c-44a3-b2bc-1f3826db15f5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST to access-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Create access type 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "942d6db9-8fa7-4790-9e95-69436c2efe65",
												"exec": [
													"pm.test(\"Status is 201\", function () {",
													"    // pm.response.to.be.success;",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"    ",
													"pm.expect(response.type).eq('accessTypes');",
													"    ",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"});",
													"    ",
													"pm.test('expected creator are present', function() {",
													"    pm.expect(response.creator).to.be.an('object');",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"});",
													"    ",
													"pm.test('expected metadata are present', function() {",
													"    pm.expect(response.metadata).to.be.an('object');",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});",
													"    ",
													"// Store access type id for future reference in other tests/cleanup",
													"pm.environment.set(\"access-type-id2\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df4cdf93-3f62-4632-9af2-69c250106440",
												"exec": [
													"pm.environment.set(\"access-type-name2\", \"Trial updated\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Trial updated\",\n            \"description\": \"Indicates subscription of the entity\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Create access type (with no type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83f79bd8-165b-459c-b05a-a2b92d64f36f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"attributes\": {\n            \"name\": \"Trial\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with name too long)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "669d60a8-934c-45a4-8dcc-c8f4c654cee6",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 75 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo lig\",\n            \"description\": \"Indicates subscription of the entity\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with description too long)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "557addc3-b485-443c-a34e-7ba651a3f8d8",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid description\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"description is too long (maximum is 150 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum\",\n            \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis pa\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with unknown property)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc765330-3c6a-44b7-a59e-8c1af4ba5701",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.contain(\"Unrecognized field\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum\",\n            \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\"\n        },\n        \"unknownProperty\": \"unknownValue\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f72ab9e9-4949-4acd-8921-2d30da5a7bf1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9f07e8c-b9ba-4086-bd24-9b833f29a282",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update access-type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdeff7a8-e83e-490d-baf5-0369683848c1",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") +\"/eholdings/kb-credentials/\" ",
													"    + pm.environment.get(\"kb-credentials-id1\") + \"/access-types/\" + pm.environment.get(\"access-type-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check changes\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.type).to.equal(\"accessTypes\");",
													"        ",
													"        pm.test('expected attributes are present', function() {",
													"        pm.expect(response.attributes).to.be.an('object');",
													"        pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"        ",
													"        pm.expect(response.attributes.name).to.equal(\"Subscribed updated\");",
													"        pm.expect(response.attributes.description).to.equal(\"Indicates subscription of the entity\");",
													"    });",
													"    ",
													"    pm.test('expected creator is present', function() {",
													"        pm.expect(response.creator).to.be.an('object');",
													"        pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"     pm.test('expected updater is present', function() {",
													"        pm.expect(response.updater).to.be.an('object');",
													"        pm.expect(response.updater).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"    pm.test('expected metadata are present', function() {",
													"        pm.expect(response.metadata).to.be.an('object');",
													"        pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3910434-4fa8-49b3-bf5b-4e31cd966e10",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.contains('\\'accessTypeId\\' parameter is incorrect');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "with not existed id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1b9e348-4192-4db8-ac94-6be1b93db456",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.contain('not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dfccdc36-3257-40f7-9a4c-c03c92cc1084",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"notExistedId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{notExistedId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{notExistedId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "DELETE access types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa3bdbff-9211-4ac7-9aa8-ac9e6eb0952a",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE access-type assigned to records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f088508b-5f97-446d-95af-cf3264fab038",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"Can\\'t delete access type that has assigned records\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE access types with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10e030d2-c723-4ded-bf61-aa8b049c5bfb",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contains(\"\\'accessTypeId\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/9999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"9999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "465ed5f6-65cd-444f-8f9e-3dcee4ed4648",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "538e838d-bfa2-4515-a056-561a6eb37a1b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aa4692b6-e5cf-425b-a9d8-c3b4064122dc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "57ab7ebf-11b1-428d-a4c1-6157c3d9e118",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_accessTypesCollection.json\", pm.variables.get(\"schema_accessTypesCollection\"));",
							"tv4.addSchema(\"schema_accessType.json\", pm.variables.get(\"schema_accessType\"));",
							"tv4.addSchema(\"schema_accessTypeDataAttributes.json\", pm.variables.get(\"schema_accessTypeDataAttributes\"));",
							"tv4.addSchema(\"schema_userDisplayInfo.json\", pm.variables.get(\"schema_userDisplayInfo\"));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "providers",
			"item": [
				{
					"name": "GET provider collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "528cd3eb-2ec8-4d74-aa26-f352f3ba7ead",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"supportsCustomPackages\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute types",
													"        pm.test('expected data.attributes types are present', function() {",
													"            pm.expect(firstRecord.attributes.name).to.be.a('string');",
													"            pm.expect(firstRecord.attributes.packagesTotal).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.packagesSelected).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.supportsCustomPackages).to.be.a('boolean');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"packages\")",
													"        });",
													"        ",
													"        //Test that relationships.packages has expected attributes",
													"        pm.test('expected relationships.packages are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages).to.include.all.keys(\"meta\")",
													"        });",
													"        ",
													"        //Test that relationships.packages.meta has expected attributes",
													"        pm.test('expected relationships.packages.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that packages are not included in relationships",
													"        pm.test('relationships meta should not include packages', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No providers found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80c28ff9-3fb7-4309-b2b2-25c792843a38",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        })",
													"        //Test that name contains either basket or weaving in it",
													"        pm.test('name contains query string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('Basket');",
													"        })",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Basket",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Basket"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e2a3525-2b70-4285-a18a-97dcd2aefc97",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that 12 records equal to or less than count are in response",
													"        pm.test('number of records less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(15);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=12",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ed04b66-301c-4f41-81eb-c92c0bfcac73",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that number of records returned are less than or equal to count",
													"        pm.test('number of provider records returned are less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&page=1&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "262804d7-0455-42e0-9e5b-0c3ac302cc1d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid filter[tags]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94311d26-d96c-4d3e-b69d-a97fddb8f9bc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"let len = response.data.length;",
													"pm.test('response contains 1 provider', function() {",
													"    pm.expect(len).to.eq(1);",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/providers/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with filter[tags] with non-existing tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a17733a-58a6-4225-8380-09843946eff9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let len = response.data.length;",
													"pm.test('response is empty', function() {",
													"    pm.expect(len).to.eq(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c451e02-f8f6-4247-9796-ab097aaa787c",
												"exec": [
													"pm.variables.set(\"non-existing-tag\", \"non-existing-tag\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{non-existing-tag}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{non-existing-tag}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with filter[tags] with list of tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0e14fd9-3406-4802-98c0-e7328fff0b1b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let len = response.data.length;",
													"pm.test('response contains both providers with tags', function() {",
													"    pm.expect(len).to.eq(2);",
													"});",
													"",
													"function providerByIdRequest(id){",
													"    return {",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/providers/\" + id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"    }",
													"}",
													"",
													"pm.sendRequest(providerByIdRequest(response.data[0].id), function(err, res) {",
													"    pm.test(\"Check name of second tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"secondTagName\"));",
													"    });",
													"});",
													"",
													"pm.sendRequest(providerByIdRequest(response.data[1].id), function(err, res) {",
													"    pm.test(\"Check name of first tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2692306b-9516-471b-b684-21fb5d6ba07c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{tagName}}&filter[tags]={{secondTagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												},
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91ce50a5-b440-45e1-b230-2cfef60a9d50",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eef1ad4c-bf9f-4830-9bff-b65989927d02",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid sort parameter');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=invalidsort",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "invalidsort"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b164349c-4392-4405-baf3-a316f578e200",
												"exec": [
													"let response = pm.response;",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f57bfac-9ddb-48dd-afe5-64a56be21bd1",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5299c727-e76b-47a7-87e1-c7f041f2905e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq('18');",
													"});    ",
													"",
													"//Test that type is providers",
													"pm.test('type is providers', function(){",
													"    pm.expect(response.data.type).eq('providers');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"providerToken\",\"supportsCustomPackages\", \"proxy\");",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId including packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f22bb8f-2257-4e5b-bd2a-bec0ea8d8c07",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that packages are included in relationships",
													"pm.test('relationships meta should include packages', function() {",
													"    pm.expect(response.data.relationships.packages.data).is.not.empty;",
													"});",
													"",
													"//Test that list of packages are included",
													"pm.test('include packages list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No packages included\");",
													"    } else {",
													"        //Test that packages are included",
													"        pm.test('should include packages', function() {",
													"            pm.expect(response.included[0].type).to.eq('packages');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": "packages"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d661e87-0d96-4df3-ad09-2a5cb0635de6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17acae0d-3ec9-494e-a8d2-5eb8486ef280",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Provider id is invalid - and');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/and",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"and"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75516ffe-5eda-49a5-8fed-0282de554d93",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update proxy - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc3b5f18-994f-4a5d-9b75-0fe8d48febbf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that proxy value matches value passed in",
													"if (Object.keys(response.data.attributes.proxy).length !== 0) {",
													"    pm.test(\"Proxy id matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.proxy.id).eq('<n>');",
													"    });",
													"} else {",
													"    console.log(\"Proxy not updated as expected\");",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"19\",\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"packagesSelected\": 19,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1cbccedd-448b-4930-ba5d-a30cc1d4fee2",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"18\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"factName\", \"prompt\", \"helpText\", \"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('hello test token');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"18\",\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"packagesSelected\": 7,\n      \"providerToken\": {\n        \"factName\": \"[[galesiteid]]\",\n        \"prompt\": \"/itweb/\",\n        \"helpText\": \"<ul>\\r\\n    <li>Enter your Gale<sup>®</sup> site ID in the space provided below. The site ID may contain a combination of alpha/numeric characters, varying in length. <blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\">\\r\\n    <p> Example: The site ID immediately follows /itweb/ in a URL. The site ID in the following URL is <i>aa11bb22</i>. </p>\\r\\n    </blockquote></li>\\r\\n</ul>\\r\\n<blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\"><blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\">\\r\\n<p><span style=\\\"text-decoration: underline;\\\">http://infotrac.galegroup.com/itweb/aa11bb22?db=AIM</span></p>\\r\\n</blockquote></blockquote><br />\\r\\n<ul>\\r\\n    <li>If no site ID is specified, your Gale Group links may not function properly, as Gale Group requires this information for authentication. </li>\\r\\n    <li>If you are unable to locate the site ID, please contact Gale Group. For contact information, visit: <a href=\\\"http://access.gale.com/authentication/\\\">http://access.gale.com/authentication/</a>. </li>\\r\\n</ul>\\r\\n\",\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": true\n      }\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token when value is number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4d87b8b-ae36-44b2-a337-4ab3ed09f6f7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('123');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": 123\n      },\n      \"packagesSelected\": 1,\n      \"proxy\": {\n        \"id\": \"<n>\"\n      }\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update proxy - invalid proxy id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d35b972a-ba86-407a-939b-657f1a978fd1",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": null\n      },\n      \"packagesSelected\": 1,\n      \"proxy\": {\n        \"id\": \"invalid\"\n      }\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update request - invalid json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6726903-b241-4fd1-af24-c758e25dba9e",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed.",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update provider tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "734e14b5-8940-4ceb-804c-dc156e21d013",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"providers",
														"18",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update provider tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6788924d-f810-4a7a-a220-9fcfa61587b0",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"providers",
														"18",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET packages included to provider",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "for provider that exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2550fc5a-4065-4c57-b251-2e3a3c1c45dd",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\")",
													"        });",
													"        ",
													"        //Test that providerId matches what we passed in ",
													"        pm.test('providerId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.providerId).to.eq(19);",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\", \"provider\")",
													"        });",
													"    ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No packages found for this provider');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "q and count and sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "980faa84-212f-4c83-a135-65de6607fd20",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"            pm.expect(secondRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"            pm.expect(secondRecord.attributes.name).to.include('Search');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adc8ea24-5d87-4ee7-a639-340c7d7052e6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] and filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59c723e9-8f33-436e-84bc-45b7e15bb8cb",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"        ",
													"        //Test that contentType matches whats passed in query",
													"        pm.test('check contentType', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Aggregated Full Text');",
													"        });",
													"    }",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=aggregatedfulltext",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "aggregatedfulltext"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "list of packages with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3223c06e-c95e-4b39-9b45-8f191ddc8016",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"",
													"//Test that particular package has a correct tag list",
													"pm.test('Particular package has a correct tag list', function(){",
													"    pm.expect(response.data[0].attributes.tags.tagList[0]).eq(pm.environment.get(\"tagName\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q={{custom-package-name-created-in-post-again}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "{{custom-package-name-created-in-post-again}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "list of packages with valid providerId and valid query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85986e67-c9a0-469d-9e56-4a0ab17ead9b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q=E-Journal",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "E-Journal"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered by tags ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca52d4aa-2250-4ac2-b013-20fd2cff67fc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tagOne = pm.environment.get(\"tag-name-for-multiple-adding-a\");",
													"    var tagTwo = pm.environment.get(\"tag-name-for-multiple-adding-b\");",
													"    pm.expect(_.includes(responseTags,tagOne)).to.eq(true);",
													"    pm.expect(_.includes(responseTags,tagTwo)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(2); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "70a4e677-f507-43f5-b9a8-1966788f7863",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[tags]={{tag-name-for-multiple-adding-a}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-a}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and non existing tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "336a6d10-8642-4967-997c-de6668a34bfe",
												"exec": [
													"var packageId = pm.environment.get(\"custom-package-created-for-tags-id\");",
													"var providerId = packageId.split(\"-\")[0];",
													"pm.environment.set(\"provider-id\", providerId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46ffd990-4e00-40da-982b-778572158f19",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-id}}/packages?filter[tags]=non-existing-tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "non-existing-tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered by access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db51a8f2-1f97-491e-9d59-9e1b109f8c9b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[access-type]={{access-type-name3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered bynon existing access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e88f3a0-07f2-45bc-8ae6-c29c026a16f7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]=Not Existing",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "Not Existing"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "for non-existing provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2ec07a2-2781-43c2-9513-99a0cdd2ee7a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5927fa83-5b94-45b8-b148-6c787e7def28",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(response.errors[0].title).eq(\"Search parameter cannot be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "781bfd5f-7f3b-4d5b-a76e-21d84b0a65b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8417b098-a53a-4186-96bf-d9ff839df9e8",
												"exec": [
													"//Ensure that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that response contains expected error message",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													"",
													"//Check that X-Okapi-Trace header is present",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "q and sort param invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebd5a56f-3be1-4bbd-b98c-d44ec315644b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for sort');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "filter[selected] invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a451f036-7ff2-45fa-b9bf-255940cc4681",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//This should actually be a 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[selected]');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92d39b56-6a3b-4e10-bdcb-b679927d9a6e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[type]');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=unsupported",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "unsupported"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3d71df7-6511-4889-8e1a-4ad145a3b0d3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fad6168f-729b-40b3-aa30-0036a1494f39",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac138c87-6df0-4446-b674-520bd06dbe6f",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b22528d1-d041-4e1f-ab7f-0e0f50c7f685",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e23c3a86-9432-44bc-8633-123f6eb7b12d",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
							"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
							"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
							"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
							"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
							"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));",
							"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
							"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
							"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
							"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "packages",
			"item": [
				{
					"name": "GET package collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8da7790-2b57-49d2-8d4d-4f2821a64960",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
													"            \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\");",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\")",
													"        });",
													"        ",
													"        //Test that relationships.resources has expected attributes",
													"        pm.test('expected relationships.resources are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources).to.include.all.keys(\"meta\");",
													"        });",
													"        ",
													"        //Test that relationships.resources.meta has expected attributes",
													"        pm.test('expected relationships.resources.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No packages found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48e200f6-7566-4fb2-be02-26c2075fb895",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"",
													"        //Test that query string is present in package name",
													"        pm.test('query string is present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    } else {",
													"        console.log('No packages found for this query search');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3284df22-7245-4109-89cb-9e0604a5fa78",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that query string is present in package name",
													"        pm.test('query string present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f224e607-4a0c-4616-8735-f0def4ce114b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let totalResults;",
													"if(response.meta) {",
													"    totalResults = response.meta.totalResults;",
													"}",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(7);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Ensure that total results is greater than count",
													"        pm.test('totalResults greater than count', function() {",
													"            pm.expect(len) < totalResults;",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=7",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "87a0ee97-8cf6-41de-bb88-1b5ecb43bc29",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a9efa4dd-4761-4062-8438-f7b7a57437c4",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        pm.variables.set(\"packagename-pageone\", response.data[0].attributes.name);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset two",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67819553-6e06-44c5-b275-8aef275857dc",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        let firstRecordPageTwo = response.data[0].attributes.name;",
													"        ",
													"        //Check that page 1 and page 2 do not have same records",
													"        pm.test('page 1 and page 2 should not have same records', function() {",
													"            pm.expect(pm.variables.get(\"packagename-pageone\")).to.not.eql('firstRecordPageTwo');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid sort - by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a2c1e6f-9a83-4ba1-a90d-3ba09bad1436",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42bebcf8-442a-44d2-b244-0f8445f55319",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=true&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74a51990-4157-42c0-a02d-f4738eb11391",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f61d15c6-6a31-4098-91b2-af8b8be15190",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] multiple param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8750b2da-548c-499b-b302-80b5215acfbf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tag-name-for-multiple-adding-a\"));",
													"        pm.expect(response.data.attributes.tags.tagList[1]).to.eq(pm.environment.get(\"tag-name-for-multiple-adding-b\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{tag-name-for-multiple-adding-a}}&filter[tags]={{tag-name-for-multiple-adding-b}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-a}}"
												},
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-b}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] with non existing tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fb6354a-f321-4fe4-bf29-adb5b77c3dbc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6d15f67-b714-4fca-884d-b9ccd765023e",
												"exec": [
													"pm.variables.set(\"non-existing-tag\", \"nonExisting\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{non-existing-tag}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{non-existing-tag}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80a7394c-a447-4813-9d01-0f27842854e7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]={{access-type-name3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] multiple param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83efd974-f409-4f63-9515-4c5a562d0f05",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]={{access-type-name4}}&filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name4}}"
												},
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] with non existing access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68cc4827-f343-4cdc-8fdc-1b42d69b287f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[access-type]=Not Existing",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "Not Existing"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7616251e-76e2-4eb1-be1a-a85b6cf70e17",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).eq(5);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that contentType matches passed value",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Abstract and Index');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=abstractandindex&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "abstractandindex"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3e7f338-08c8-4024-bdf4-d8cf96d26fe9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name.toLowerCase()).to.include('package');",
													"            pm.globals.set(\"custom-package-name-that-exists\", firstRecord.attributes.name);",
													"        });",
													"        ",
													"        //Test that isCustom is true",
													"        pm.test('check isCustom', function() {",
													"            pm.expect(firstRecord.attributes.isCustom).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with empty search string q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "160f70d1-46d8-4bf5-a0c9-b3a5c7256616",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that we get the expected error message",
													"    pm.test('Ensure that errors title is as expected', function() {",
													"        pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebd0d1e0-da24-401b-8562-e056f43476ea",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort filter param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc242477-da39-47bc-804e-03d373ce5dcc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for sort');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de87ba5d-88fa-4632-aafe-14ef1afccacc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[selected]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60afcf8b-bd71-475c-b9a2-0cc1ad4bf42a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[type]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bea21295-eed9-4682-96e9-ba352e9ef9cf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[custom]=invalid&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[custom]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1088426b-1bca-42ab-aeba-25fe213565a8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"// Per https://issues.folio.org/browse/UIEH-483 -- only true is allowed",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=false&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "false"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9c5273b-244a-4bb5-8323-458d7b688e36",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST package",
					"item": [
						{
							"name": "With Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create custom package with access type id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7fe9e500-8b0a-4005-98a4-bb431ec457ef",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Check if we get a collection of packages in response",
															"if(response.data) {",
															"    if(response.data.id !== 0) {",
															"        pm.environment.set(\"custom-package-id-created-in-post-valid2\", response.data.id);",
															"    }",
															"    ",
															"    //Test that type is packages",
															"    pm.test('type is packages', function(){",
															"        pm.expect(response.data.type).eq('packages');",
															"    });",
															"    ",
															"    //Test that data.attributes has expected attributes",
															"    pm.test('expected data.attributes are present', function() {",
															"        pm.expect(response.data.attributes).to.be.an('object');",
															"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
															"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
															"    });",
															"        ",
															"    //Test that contentType matches what was passed in POST request",
															"    pm.test('content type matches value passed in', function() {",
															"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
															"    });",
															"    ",
															"    //Test that customCoverage matches what was passed in POST request",
															"    pm.test('custom coverage matches value passed in', function() {",
															"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"    });",
															"    ",
															"    //Test that isCustom is true",
															"    pm.test('isCustom is true', function() {",
															"        pm.expect(response.data.attributes.isCustom).to.be.true;",
															"    });",
															"    ",
															"    //Test that isSelected is true",
															"    pm.test('isSelected is true', function() {",
															"        pm.expect(response.data.attributes.isSelected).to.be.true;",
															"    });",
															"    ",
															"    //Test that name matches value passed in",
															"    pm.test('name matches value passed in', function() {",
															"        pm.expect(response.data.attributes.name).to.eq('custom package');",
															"    });",
															"    ",
															"    //Test that package type is custom",
															"    pm.test('packageType is custom', function() {",
															"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
															"    });",
															"    ",
															"    //Test that allowKbToAddTitles is false",
															"    pm.test('allowKbToAddTitles is false', function() {",
															"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
															"    });",
															"    ",
															"    //Test that accessType is assigned",
															"    pm.test('accessType is assigned', function() {",
															"        pm.expect(response.data.relationships.accessType.data.id).to.eq(pm.environment.get(\"access-type-id2\"));",
															"    });",
															"    ",
															"} else {",
															"    console.log('Custom package not created');",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "28e89e42-977a-4cf9-bf34-13c6e1c8610a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom package\",\n            \"contentType\": \"E-Journal\",\n            \"accessTypeId\": \"{{access-type-id2}}\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c7cee29d-20a4-43d5-ad50-1f8b0d356646",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3afd7dd7-a382-43d3-b1e0-8941135ce6c0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create custom package with invalid access type id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "27b34af9-b2b3-4ccc-a40f-b8955ad3f172",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function() {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.accessTypeId');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('9999');",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom package\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"9999\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create custom package with missing access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d4e2f78-8174-4169-b4aa-78a655a1f504",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.eq('Access type not found: id = 99999999-9999-1999-a999-999999999999');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"99999999-9999-1999-a999-999999999999\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Without Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create custom package valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8ea8c2fc-1362-4d0c-a786-73b075a197f9",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Check if we get a collection of packages in response",
															"if(response.data) {",
															"    if(response.data.id !== 0) {",
															"        pm.environment.set(\"custom-package-id-created-in-post-valid1\", response.data.id);",
															"    }",
															"    ",
															"    //Test that type is packages",
															"    pm.test('type is packages', function(){",
															"        pm.expect(response.data.type).eq('packages');",
															"    });",
															"    ",
															"    //Test that data.attributes has expected attributes",
															"    pm.test('expected data.attributes are present', function() {",
															"        pm.expect(response.data.attributes).to.be.an('object');",
															"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
															"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
															"    });",
															"        ",
															"    //Test that contentType matches what was passed in POST request",
															"    pm.test('content type matches value passed in', function() {",
															"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
															"    });",
															"    ",
															"    //Test that customCoverage matches what was passed in POST request",
															"    pm.test('custom coverage matches value passed in', function() {",
															"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"    });",
															"    ",
															"    //Test that isCustom is true",
															"    pm.test('isCustom is true', function() {",
															"        pm.expect(response.data.attributes.isCustom).to.be.true;",
															"    });",
															"    ",
															"    //Test that isSelected is true",
															"    pm.test('isSelected is true', function() {",
															"        pm.expect(response.data.attributes.isSelected).to.be.true;",
															"    });",
															"    ",
															"    //Test that name matches value passed in",
															"    pm.test('name matches value passed in', function() {",
															"        pm.expect(response.data.attributes.name).to.eq('custom packages api test valid');",
															"    });",
															"    ",
															"    //Test that package type is custom",
															"    pm.test('packageType is custom', function() {",
															"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
															"    });",
															"    ",
															"    //Test that allowKbToAddTitles is false",
															"    pm.test('allowKbToAddTitles is false', function() {",
															"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
															"    });",
															"    ",
															"} else {",
															"    console.log('Custom package not created');",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test valid\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "with package name that already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "29403092-c2ef-404f-91c5-5b48b4fb0219",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Custom Package with the provided name already exists');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test valid\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "with invalid contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8c4270c-8a44-4e63-808f-ebe0fee4ce77",
														"exec": [
															"//Check that status is 400",
															"// This test should be re-visited after https://issues.folio.org/browse/UIEH-488 is fixed.",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text()).to.contains('Json content error');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": 123,\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "bad data for customCoverage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0318aa4b-0f31-4d67-ac19-8e2e24967050",
														"exec": [
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text()).to.contains('Json content error');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"123\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": 2003-01-01,\n\t\t\t\t\"endCoverage\": 2003-12-01\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "package without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9ae100dd-1e1b-47ea-a828-f7a37155f19b",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"   pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('may not be null');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.name');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "package without content type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6a5fce5d-b01b-4f28-a011-e5e395f7881a",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('may not be null');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.contentType');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"xxx\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc3861a2-55f0-4aee-b358-7e52b518e389",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "065e9174-775a-41d3-a68d-8950b82d8a3f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST packages bulk",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST packages bulk",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a608347-65ab-402c-a91a-87bc342a7d8d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test packages empty list",
													"pm.test(\"no failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk not existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b07f10b1-c791-4522-a51c-07160cd77c96",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(1);",
													"   pm.expect(meta.failed.packages[0]).to.eql(\"111-111\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"111-111\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk invalid id format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81b286c2-301e-4f27-9954-2716200f3fa3",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test packages list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(1);",
													"   pm.expect(meta.failed.packages[0]).to.eql(\"19-9223372036854775808\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"19-9223372036854775808\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7964b2c1-99a9-435b-896d-ae7f1d348428",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5efa2b9-d7b8-4025-841f-b8d3b9d90b49",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST packages bulk invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8043b3f-7228-4c10-8367-5d2ce5be03e8",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"413-3757-9g04662\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31a07de8-e2d3-476c-bf13-2578d4b90d47",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk invalid size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbff9523-58c1-4e89-96b8-b2a6145db168",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('size must be between 0 and 20');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"packages\": [\n        \"123356-102084161\",\n        \"123356-102084162\",\n        \"123356-102084163\",\n        \"123356-102084164\",\n        \"123356-102084165\",\n        \"123356-102084166\",\n        \"123356-102084167\",\n        \"123356-102084168\",\n        \"123356-102084169\",\n        \"123356-102084111\",\n        \"123356-102084112\",\n        \"123356-102084113\",\n        \"123356-102084114\",\n        \"123356-102084115\",\n        \"123356-102084116\",\n        \"123356-102084117\",\n        \"123356-102084118\",\n        \"123356-102084119\",\n        \"123356-102084120\",\n        \"123356-102084121\",\n        \"123356-102084122\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "94420baf-c74b-43ee-bed6-4fc509887ee4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a515a6ed-c221-4dbc-b425-96ff40f73f7a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e79c7ad5-fb5e-4383-bc9a-b3ba94bc1d6c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data.type).eq('packages');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
													"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dbeb13d-ed54-4dce-badc-aceecaf782e3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});",
													"",
													"//Test that provider is included in relationships",
													"pm.test('relationships meta should include provider', function() {",
													"    pm.expect(response.data.relationships.provider.data).is.not.empty;",
													"});",
													"",
													"//Test that provider is included",
													"pm.test('include provider', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No provider included\");",
													"    } else {",
													"        //Test that provider is included",
													"        pm.test('should include provider', function() {",
													"            pm.expect(response.included[0].type).to.eq('providers');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3f52a04-9617-41f4-bb7b-15cc77beccc0",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(response.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            pm.expect(response.included[0].type).to.eq('resources');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including resource with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6de284b-e22f-4f30-9883-d1559c517b5c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(response.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            let firstRecord = response.included[0];",
													"            pm.expect(firstRecord.type).to.eq('resources');",
													"            pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"            pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"            pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"            pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97b7fd8a-1eeb-409f-99b7-517676e2ed05",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tag = pm.environment.get(\"tag-name-for-resource\");",
													"    pm.expect(_.includes(responseTags,tag)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(1); ",
													"});",
													"",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(1);",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02f11ce3-8820-4222-93f5-783248142557",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and empty included resources tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cc4411c-b00d-4249-94fd-82a889fb5a98",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that record has empty tag list",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(0); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ed72124-159a-461f-9a4a-9ea33836ae6b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources filtered by tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cb1e885-3ed2-4cbc-af2b-cc04bfaab5f3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tag = pm.environment.get(\"tag-name-for-resource\");",
													"    pm.expect(_.includes(responseTags,tag)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(1); ",
													"});",
													"",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(1);",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1184f296-dd3a-48f4-a293-df0eb0427c1d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]={{tag-name-for-resource}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-resource}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and including resources non existing tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a310a22e-a855-42f4-a261-af99494edc46",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1ab08ef6-463f-44a5-a09c-7654f0d6d075",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]=non-existing-tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "non-existing-tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources empty tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a8a89142-5b84-4609-8114-b81b93113c1d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e6171b61-7245-424a-b120-6afc198c8e87",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2658a0a-a2e7-4de3-9c1b-5501f4e34ce4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c759aed4-743e-4913-80d7-1745c366237d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db04320e-35df-46f1-832a-e1e9a961215d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3d4e889-10f0-429a-8297-0094b919671a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId with providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1817de42-92d9-4347-b69d-7e54cea63ef3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f82a13d2-d4e0-4492-839d-84dfee75e8a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c0783c1e-0033-4573-b890-82cc65a75e42",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT package by packageId",
					"item": [
						{
							"name": "Custom Package",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update custom package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d6e80aeb-4e88-4c98-a526-13da489d1fc8",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e3381e3-65a8-4b47-a719-1a64f2b3bf1d",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															"",
															"//Test that access type assigned",
															"pm.test('access type should be assigned', function() {",
															"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
															"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-package-id-created-in-post}}\",\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n            \"contentType\": \"Print\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            },\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id2}}\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "visibility data and coverage update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1c9e3cea-81da-4062-8ef5-1911ae8191a9",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.false;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2004-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2004-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2004-01-01\",\n        \"endCoverage\": \"2004-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update custom package without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d226e865-d6f6-4572-bcd6-f3567832b102",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package without contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6f2e756d-0a63-4b17-afef-166273f1ac76",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid contentType');",
															"        pm.expect(response.errors[0].detail).to.eq('contentType must not be null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"some test custom package\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package with name that already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2bcb30e8-ca37-4467-b7e7-f887efb6f0ae",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Package name already exists');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ef84ef41-fee2-43b6-907d-32c4b24fed5f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"{{custom-package-name-that-exists}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package with isSelected false should delete it",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "13b1b914-5c24-4f52-a999-21d52f56609e",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 404",
															"pm.test(\"Status is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Package not found');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"random test package\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": false,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-again}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post-again}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "220235ba-a230-464a-a727-3c34a083a77e",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"hello world\",\n      \"contentType\": \"invalid\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type when it is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "062b2854-44e6-4a54-9782-367fe61e8e06",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      },\n      \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\"\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type invalid id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c1b2023-a8fc-4509-9113-2ae8d8a871c3",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      },\n      \"accessTypeId\": \"invalid-id\"\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Managed Package",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update managed package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7f820acc-17f4-4d39-8e09-0e6650f0552b",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that allowKbToAddTitles matches as provided in request",
															"pm.test('allowKbToAddTitles matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.allowKbToAddTitles).to.be.true;",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0e43dc9b-4884-49dc-af85-c1dd9ed611ba",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that allowKbToAddTitles matches as provided in request",
															"pm.test('allowKbToAddTitles matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.allowKbToAddTitles).to.be.true;",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															"",
															"//Test that access type assigned",
															"pm.test('access type should be assigned', function() {",
															"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
															"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"{{access-type-id2}}\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package with isFullPackage=false",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fdd9b358-7261-46a2-8c28-9e89d0ca017f",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"titles in package were not selected\", function() {",
															"    pm.expect(response.data.attributes.selectedCount).to.not.equal(response.data.attributes.titleCount);",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"package was updated\", function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.equal(\"2018-01-12\");",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.equal(\"2018-02-13\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-01-12\",\n        \"endCoverage\": \"2018-02-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"isFullPackage\" : false,\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{partially-selected-package-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package with isFullPackage=true",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e7c613da-4b56-4698-96f6-dbf73e2cb316",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"titles in package were all selected\", function() {",
															"    pm.expect(response.data.attributes.selectedCount).to.equal(response.data.attributes.titleCount);",
															"});",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"package was updated\", function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.equal(\"2018-03-12\");",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.equal(\"2018-04-13\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-03-12\",\n        \"endCoverage\": \"2018-04-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"isFullPackage\" : true,\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{partially-selected-package-id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "invalid access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a20bc65e-e5f4-48dc-9e2e-5b989b693480",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"invalid-id\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid dates for coverage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "78a8a670-efa6-45d1-8f1d-923f78326ce3",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid beginCoverage');",
															"        pm.expect(response.errors[0].detail).to.eq('beginCoverage has invalid format. Should be YYYY-MM-DD');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"13-08-2018\",\n        \"endCoverage\": \"13-09-2018\"\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid isSelected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b939ccda-8d99-425c-a5f8-8c430db42f55",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": \"invalid\",\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-12\"\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid isHidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a2210590-7108-46a7-baf3-728e12f32597",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": \"invalid\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-13\"\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid allowKbToAddTitles",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bdc7831a-eaf3-4ea7-9775-be7a5747b67c",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"allowKbToAddTitles\": \"invalid\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-13\"\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid json in request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a68daf1f-2fd0-4875-a7eb-b473b32435d5",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": 13-08-2018,\n        \"endCoverage\": 13-09-2018\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50a06436-b4b5-445d-9ee4-2eee77377816",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9f359365-af99-454d-9119-3ca47cb8a59a",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.contains('Package is not updatable');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"{{access-type-id2}}\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": false,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update package tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c2afcb1-7513-4b5f-b0dc-d352ff590ce1",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update package tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2c40be8-43ee-432f-887f-75e5aa092ddd",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"contentType\": \"Print\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										},
										{
											"name": "update package tags without contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b9c31ef3-7ffe-4324-9744-dada51f239d2",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid contentType');",
															"        pm.expect(response.errors[0].detail).to.eq('contentType must not be null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": null,\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Delete custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33f253ce-f7d9-4caf-b52b-d6b51aec75f1",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-package-id-created-in-post-valid2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid providerId in packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e119ad98-c4df-43ed-9898-215c00315991",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"/* Tests below should be re-visited after https://issues.folio.org/browse/UIEH-427 is fixed.*/",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that appropriate error message is being returned",
													"pm.test('Ensure that appropriate error message is returned', function(){",
													"    pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b7cb4db-299f-4dbc-9739-2600c5179c04",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"/* Tests below should be re-visited after https://issues.folio.org/browse/UIEH-427 is fixed.*/",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete a managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "484e84d2-b3d2-4a6b-bcb8-41fe0121d049",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package cannot be deleted');",
													"        pm.expect(response.errors[0].detail).to.eq('Invalid package');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resources included to package",
					"item": [
						{
							"name": "valid filter[access-type] param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad72b28d-96d8-419e-b2ec-7c0aa021c893",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    let len = response.data.length;",
											"    if(len > 0){",
											"        //Test that count is equal to number of records returned in response",
											"        pm.test('count equals number of records in response', function() {",
											"            pm.expect(len).to.be.above(0);",
											"        });",
											"        //Get the first record",
											"        let firstRecord = response.data[0];",
											"        ",
											"        //Test that type is packages",
											"        pm.test('type is resources', function(){",
											"            pm.expect(firstRecord.type).eq('resources');",
											"        });",
											"        ",
											"        //Test that isSelected is true",
											"        pm.test('check isSelected', function() {",
											"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
											"        });",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[access-type]={{access-type-name2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-from-setup}}",
										"resources"
									],
									"query": [
										{
											"key": "filter[access-type]",
											"value": "{{access-type-name2}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8f299a0f-7166-47f2-b87c-f0d5658a0080",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ef348fec-e78f-4a0c-8982-c32b1c258a9a",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
							"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
							"tv4.addSchema(\"schema_packageTagsItem.json\", JSON.parse(pm.variables.get(\"schema_packageTagsItem\")));",
							"tv4.addSchema(\"schema_packageTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
							"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"",
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));",
							"tv4.addSchema(\"schema_packageBulkFetchCollection.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchCollection\")));",
							"tv4.addSchema(\"schema_packageBulkFetchCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchCollectionItem\")));",
							"tv4.addSchema(\"schema_packageBulkFetchDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchDataAttributes\")));",
							"tv4.addSchema(\"schema_packageFailedInformation.json\", JSON.parse(pm.variables.get(\"schema_packageFailedInformation\")));",
							"tv4.addSchema(\"schema_packageFailedIds.json\", JSON.parse(pm.variables.get(\"schema_packageFailedIds\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "resources",
			"item": [
				{
					"name": "POST resource",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources POST add managed title to custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "364f0234-f1b1-4d78-a389-16255c9b80f9",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"pm.test(\"url is as expected\", function () {",
													"    pm.expect(firstAttributes.url).eq(\"http://test\");",
													"});",
													"",
													"// Store custom resource id for future reference in other tests/cleanup",
													"pm.environment.set(\"managed-resourceid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "00e8a916-666d-4b5e-b42f-8cde6df7ffac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{managed-titleid}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST add custom title to custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10a48fc6-e8d9-4656-87b5-8ae7e90344e8",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"custom-titleid-for-resource\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"pm.test(\"url is as expected\", function () {",
													"    pm.expect(firstAttributes.url).eq(\"http://test\");",
													"});",
													"// Store custom resource id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-resourceid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "434ddbc5-8549-4048-8bfd-7d87b76c0a0c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources POST add managed title to managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e50d7ef0-da39-46a0-8d13-1b4e95632a66",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid PackageId\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Packageid Cannot associate Title with a managed Package\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "71417151-eafb-490a-b299-7d111875d5b4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{managed-packageid}}\",\n      \"titleId\": \"{{managed-titleid}}\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST add custom title to managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6291d57-2d5d-42a6-90e7-77efb787116c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid PackageId\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Packageid Cannot associate Title with a managed Package\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "876e3827-32d0-4123-bb2a-dba3204561f5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{managed-packageid}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3657679a-03a4-4e66-af34-1259b733a2b8",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"// confirm error returns invalid url",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Url\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Url has invalid format\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53d9dc7f-fc1f-43fe-8a75-eb9b03aaf97a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"not a url\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4572586e-b321-4b56-828d-51adcdab9e9e",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(jsonData.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(jsonData.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fe569585-e43c-4116-a6c7-0f1a6c42e39e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"1\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid titleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acc32543-88cf-42cc-a174-af93e47ee3e1",
												"exec": [
													"",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4d82c4fa-263f-48f3-aba4-415ea94915eb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"1\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d24e14d-8a9f-4840-8b8f-94e9df12a777",
												"exec": [
													" pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected error message is returned\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.be.equal('Content-type header must be [\"application/vnd.api+json\"] but it is \"application/json\"');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0bddf809-f1c0-4cc7-b0ed-1c2ffdcb745b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST resources bulk",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST resources bulk",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f926ad1-9bae-4331-8ea8-8329695cb657",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources empty list",
													"pm.test(\"no failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e3fa002-d730-4055-bbc1-fdb577720551",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "72b7be60-ec6d-4fbe-88c8-3aaec416a22a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST resources bulk invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c4c7a23-590a-4e8c-a989-31ad19f83d64",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"413-3757-9g04662\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk not existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef4f6bb2-18ad-43c1-9d8f-8c5d7f4cac49",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(1);",
													"   pm.expect(meta.failed.resources[0]).to.eql(\"111-111-111\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"111-111-111\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk invalid id format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c756be81-925b-416f-b20f-9731cd991f0d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(1);",
													"   pm.expect(meta.failed.resources[0]).to.eql(\"19-9223372036854775808-904661\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"19-9223372036854775808-904661\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "866775ce-b819-42c4-83d5-77107c24e5ee",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk invalid size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c417f7b-3197-45e4-9c39-8869db3c4d1e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('size must be between 0 and 20');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"123356-102084166-1145851\", \"123356-102084166-1145852\", \"123356-102084166-1145853\", \"123356-102084166-1145854\",\n\t\"123356-102084166-1145856\", \"123356-102084166-1145857\", \"123356-102084166-1145858\", \"123356-102084166-1145859\", \"123356-102084166-1145860\",\n\t\"123356-102084166-1145861\", \"123356-102084166-1145862\", \"123356-102084166-1145863\", \"123356-102084166-1145864\", \"123356-102084166-1145865\",\n\t\"123356-102084166-1145866\", \"123356-102084166-1145867\", \"123356-102084166-1145868\", \"123356-102084166-1145869\", \"123356-102084166-1145870\",\n\t\"123356-102084166-1145871\"\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "098bd6ff-971c-4bcb-a5fa-b862d1f5a600",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66220b52-0768-43b7-8c3d-2b471d7e3876",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resource by resourceId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources GET specific resource (managed title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12a02282-4ea4-465a-892a-12a58e09b1db",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"managed-resourceid\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a37916b-980f-4b45-be40-5f599baed3c1",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"custom-resourceid\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88a18243-83ae-423b-ba94-add5be8ab8a5",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
													"});",
													"",
													"pm.test(\"userDefinedFields are present\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"    pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"    pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"    pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"    pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c79007d-bac8-4dc0-8036-cab700f0e963",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"",
													"//Get the provider relationship",
													"let providerRelationship = firstRecord.relationships.provider.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in provider relationship', function() {",
													"    pm.expect(providerRelationship).to.be.an('object');",
													"    pm.expect(providerRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(providerRelationship.id).eq(firstAttributes.providerId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"providers\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.providerId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e75aa1cb-c0a3-41bf-a613-8f6478c38dea",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"",
													"//Get the package relationship",
													"let packageRelationship = firstRecord.relationships.package.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in package relationship', function() {",
													"    pm.expect(packageRelationship).to.be.an('object');",
													"    pm.expect(packageRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(packageRelationship.id).eq(firstAttributes.packageId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.packageId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=package",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "package"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "696d62a6-61a4-4cc5-9b12-cc99237fbfc1",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"",
													"//Get the title relationship",
													"let titleRelationship = firstRecord.relationships.title.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in title relationship', function() {",
													"    pm.expect(titleRelationship).to.be.an('object');",
													"    pm.expect(titleRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(titleRelationship.id).eq(firstAttributes.titleId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.titleId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include provider,package,title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bea0dd32-9435-44aa-8b67-3ffb375783c6",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"    ",
													"//Get the provider relationship",
													"let providerRelationship = firstRecord.relationships.provider.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in provider relationship', function() {",
													"    pm.expect(providerRelationship).to.be.an('object');",
													"    pm.expect(providerRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(providerRelationship.id).eq(firstAttributes.providerId.toString());",
													"});",
													"",
													"//Get the package relationship",
													"let packageRelationship = firstRecord.relationships.package.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in package relationship', function() {",
													"    pm.expect(packageRelationship).to.be.an('object');",
													"    pm.expect(packageRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(packageRelationship.id).eq(firstAttributes.packageId.toString());",
													"});",
													"",
													"//Get the title relationship",
													"let titleRelationship = firstRecord.relationships.title.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in title relationship', function() {",
													"    pm.expect(titleRelationship).to.be.an('object');",
													"    pm.expect(titleRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(titleRelationship.id).eq(firstAttributes.titleId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 3 records and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(3);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"     ",
													"var includedTitles = includedItems.filter(",
													"        function(titles) {",
													"            if (titles.type.toLowerCase().includes(\"titles\")) {",
													"               return titles;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included title is as expected', function() {",
													"    pm.expect(includedTitles.length).eq(1);",
													"    pm.expect(includedTitles[0].id).eq(firstAttributes.titleId.toString());",
													"});     ",
													"",
													"var includedPackages = includedItems.filter(",
													"        function(packages) {",
													"            if (packages.type.toLowerCase().includes(\"packages\")) {",
													"               return packages;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included package is as expected', function() {",
													"    pm.expect(includedPackages.length).eq(1);",
													"    pm.expect(includedPackages[0].id).eq(firstAttributes.packageId.toString());",
													"});          ",
													"",
													"var includedProvider = includedItems.filter(",
													"        function(providers) {",
													"            if (providers.type.toLowerCase().includes(\"providers\")) {",
													"               return providers;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included provider is as expected', function() {",
													"    pm.expect(includedProvider.length).eq(1);",
													"    pm.expect(includedProvider[0].id).eq(firstAttributes.providerId.toString());",
													"});           ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=provider,package,title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider,package,title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource with tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19ddd6a1-b551-484e-934e-6168e4d81b0d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"tags\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"custom-resourceid-from-setup\"));",
													"});",
													"",
													"pm.test('resource tags expected', function() {",
													"    pm.expect(firstAttributes.tags.tagList).to.be.an('array').that.is.not.empty;",
													"});",
													"  ",
													"pm.test(\"resource tags size as expected\", function () {",
													"   pm.expect(Object.keys(firstAttributes.tags.tagList).length).to.eql(1);",
													"});",
													"",
													"pm.test(\"tags content as expected\", function () {",
													"   pm.expect(firstAttributes.tags.tagList[0]).to.eql(\"tag one\");",
													"});  ",
													"  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources GET invalid resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f7a9f55-42cc-416d-a8bb-a4024907a2cc",
												"exec": [
													"// status should be 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Errors array should return a more relevant response",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Resource id is invalid - 1\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and invalid include",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47c7696f-a5a3-4d4c-83c3-0bc0dc01329f",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes and invalid include is ignored",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "020c4110-e070-4e35-b1f7-bf73c297bc9e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5757345-1f4c-4c4b-a440-18988a10ca75",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT resource by resourceId",
					"item": [
						{
							"name": "Custom Resource",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "/resources PUT update custom resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c508624a-ed24-4ce8-9b84-b6393217b816",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"coverageStatement\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"custom embargo period is as expected\", function () {",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoUnit).to.eql(\"Months\");",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoValue).to.eql(5);",
															"});",
															"",
															"pm.test(\"custom coverages is as expected\", function () {",
															"   pm.expect(firstAttributes.customCoverages.length).to.eql(1);",
															"   pm.expect(firstAttributes.customCoverages[0].beginCoverage).to.eql(\"2001-01-01\");",
															"   pm.expect(firstAttributes.customCoverages[0].endCoverage).to.eql(\"2004-02-01\");",
															"});",
															"",
															"pm.test(\"coverage statement is as expected\", function () {",
															"   pm.expect(firstAttributes.coverageStatement).to.eql(\"Test Coverage Statement\");",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a914d22b-627b-4f59-aa73-4f53c5d5e123",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": \"{{custom-providerid}}\",\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"customEmbargoPeriod\": {\n        \"embargoUnit\": \"Months\",\n        \"embargoValue\": 5\n      },\n      \"customCoverages\": [\n        {\n          \"beginCoverage\": \"2001-01-01\",\n          \"endCoverage\": \"2004-02-01\"\n        }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n      \"publisherName\": \"test publisher\",\n      \"edition\": \"test edition\",\n      \"description\": \"test description\",\n      \"subjects\": [],\n      \"contributors\": [\n        {\n          \"type\": \"author\",\n          \"contributor\": \"smith, john\"\n        },\n        {\n          \"type\": \"illustrator\",\n          \"contributor\": \"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n          \"id\": \"11-2222-3333\",\n          \"type\": \"ISSN\",\n          \"subtype\": \"Online\"\n        }\n      ],\n      \"isTitleCustom\": true,\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource - custom only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55af293b-8596-4821-a4b5-e4c7324a0d2e",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isTitleCustom\", \"titleId\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"url is as expected\", function () {",
															"   pm.expect(firstAttributes.url).to.eql(\"https://test\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f715e13a-6746-4e53-a591-b6a2ed37105a",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": true,\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "/resources PUT update custom resource invalid url",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "82524da2-59be-4e75-a3ad-2e135b1fd353",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"   pm.expect(jsonData.errors.length).to.eql(1);",
															"   pm.expect(jsonData.errors[0].title).to.equal(\"Invalid url\");",
															"   pm.expect(jsonData.errors[0].detail).to.equal(\"url has invalid format. Should start with https:// or http://\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "01a48904-f42c-4231-8dc8-e6420786c58b",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isPeerReviewed\": false,\n            \"name\": \"custom title-b72f107f-ceff-49e1-8a3f-e7a9b8dffa13\",\n            \"publicationType\": \"Book\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"url\": \"not a url\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid proxy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "778956a7-a652-4013-8a6e-bb859cc69270",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Proxy ID\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c5b3b5af-7a18-4277-a806-730dc8cd1b4a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"invalid\"\n            },\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid coverageStatement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "de6446ec-071b-4227-a4e3-ccd117b35c53",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute CoverageStatement is longer than 200 characters.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e301afa2-f034-4883-83d5-112e234b9b33",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-coverage\", toRepeat.repeat(201));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"{{long-coverage}}\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid customCoverages",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8c6b9ce3-98d3-4f0b-815e-a2e25852f4f0",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"BeginCoverage should be smaller than EndCoverage.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7d553561-98c3-45c1-a719-05b55653939c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2004-01-01\",\n                    \"endCoverage\": \"2001-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid embargoValue",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eec7ff99-c2a4-4586-9b70-d4a99d677a9c",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute EmbargoValue is less than 0.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "906270e7-f747-48fd-a624-dede2bd48040",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": -1\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid embargoUnit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f202475b-275b-4f49-bf8f-a5522272e601",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2667b47b-95da-44f2-aeaa-4451749ad6f8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"minutes\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid visibilityData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2502fecd-a50d-4a25-a379-4cb08f68f619",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "444f54f2-9654-4c24-97fe-c4b6c377de2b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": \"invalid\"\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid custom label",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b959fa52-bff4-44c0-8022-e430ad9d559b",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].title).to.equal('Invalid userDefinedField3');",
															"    pm.expect(pm.response.json().errors[0].detail).to.equal('userDefinedField3 is too long (maximum is 100 characters)');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ea7e991f-ac76-44c6-8960-665a31913e60",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ],\n            \"userDefinedField3\": \"*****************************************************************************************************\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Managed Resource",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "/resources PUT update managed resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "534ebd86-0d57-4bd2-8087-15fb7115564d",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"coverageStatement\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"custome embargo period is as expected\", function () {",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoUnit).to.eql(\"Months\");",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoValue).to.eql(5);",
															"});",
															"",
															"pm.test(\"custom coverages is as expected\", function () {",
															"   pm.expect(firstAttributes.customCoverages.length).to.eql(1);",
															"   pm.expect(firstAttributes.customCoverages[0].beginCoverage).to.eql(\"2001-01-01\");",
															"   pm.expect(firstAttributes.customCoverages[0].endCoverage).to.eql(\"2004-02-01\");",
															"});",
															"",
															"pm.test(\"coverage statement is as expected\", function () {",
															"   pm.expect(firstAttributes.coverageStatement).to.eql(\"Test Coverage Statement\");",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b5e2488-5696-4f25-b99c-8dce58ec7ffc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{managed-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"titleId\": \"{{managed-titleid}}\",\n            \"name\": \"ABC of Diabetes (ABC Series)\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"isSelected\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Wiley-Blackwell\",\n            \"edition\": \"\",\n            \"subjects\": [\n                {\n                    \"subject\": \"MEDICAL / Endocrinology & Metabolism\",\n                    \"type\": \"BISAC\"\n                }\n            ],\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Kumar, Sudhesh\"\n                },\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Watkins, Peter J.\"\n                },\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Holt, Tim A.\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"978-1-4051-7784-9\",\n                    \"subtype\": \"Print\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-118-68486-3\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-282-46121-5\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-4443-1697-1\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                }\n            ],\n            \"isTitleCustom\": false,\n            \"description\": \"\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource in custom package - custom resource only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d93d3155-c37b-4b9c-a1f5-12e2c701d19b",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"//description should be undefined because user is not allowed to update description for a managed resource",
															"pm.test(\"description should be undefined\", function () {",
															"   pm.expect(firstAttributes.description).to.eq(undefined);",
															"});",
															"",
															"//edition should be undefined because user is not allowed to update edition for a managed resource",
															"pm.test(\"edition should be undefined\", function () {",
															"   pm.expect(firstAttributes.edition).to.eql(undefined);",
															"});",
															"",
															"//isPeerReviewed should be false because user is not allowed to update isPeerReviewed for a managed resource",
															"pm.test(\"isPeerReviewed should be null\", function () {",
															"   pm.expect(firstAttributes.isPeerReviewed).to.be.false;",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a6046473-fb1d-4144-a026-3a488d93d5a0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"Update a managed title name\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource in managed package - custom resource only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ec4773d-e2a0-4e08-b168-d56db85ff0ab",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"//description should be undefined because user is not allowed to update description for a managed resource",
															"pm.test(\"description should be undefined\", function () {",
															"   pm.expect(firstAttributes.description).to.eql(undefined);",
															"});",
															"",
															"//edition should be undefined because user is not allowed to update edition for a managed resource",
															"pm.test(\"edition should be undefined\", function () {",
															"   pm.expect(firstAttributes.edition).to.eql(undefined);",
															"});",
															"",
															"//isPeerReviewed should be false because user is not allowed to update isPeerReviewed for a managed resource",
															"pm.test(\"isPeerReviewed should be null\", function () {",
															"   pm.expect(firstAttributes.isPeerReviewed).to.be.false;",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "95a9e250-7a61-4e89-a596-a5605cb91f62",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"Update a managed title name 2\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-title-package-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "/resources PUT update managed resource invalid JSON",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d396051-521a-4ef5-b848-8ebbd7d24d0e",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "90fbed8e-cd70-4155-8549-6f964bccc458",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": false,\n      \"visibilityData\": null,\n      },\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-02\"\n      }\n      ]\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource coverageStatement if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f57fd7cf-f10a-4d6c-8f5e-6e0574f9e609",
														"exec": [
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute CoverageStatement is longer than 200 characters.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "04d95fc5-6420-41ef-90dd-18d6fc38b4b8",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-coverage\", toRepeat.repeat(201));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\":null,\n      \"customCoverages\" : [],\n      \"coverageStatement\": \"{{long-coverage}}\"\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource embargo if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f9956779-7855-43d9-ba90-d716a379ec07",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entries\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute EmbargoValue is less than 0.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "15d1505c-b7c9-4669-9cb5-07bff027a1f6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Weeks\",\n      \"embargoValue\" : -1\n      },\n      \"customCoverages\" : []\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource custom coverage if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f25a9b19-5202-45a7-b89e-6d41d4eaf22d",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entries\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid beginCoverage\");",
															"    pm.expect(jsonData.errors[0].detail).to.equal(\"beginCoverage has invalid format. Should be YYYY-MM-DD\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "15338d90-88ea-4fcd-bdfd-8cd99fda4f57",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : [\n      {\n        \"beginCoverage\" : \"200\",\n    \t\"endCoverage\" : \"2001-01-02\"\n      }\n      ]\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource visibility if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "16533140-8aa2-4780-ae3d-e762c411cb10",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2e340908-3f6d-45d4-a24d-2abce28dc583",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": {\n    \t\"isHidden\" : \"invalid\"\n      },\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : []\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource custom label",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50c92df6-bec0-4ff0-b760-eba9a1659c54",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].title).to.equal('Invalid userDefinedField3');",
															"    pm.expect(pm.response.json().errors[0].detail).to.equal('userDefinedField3 is too long (maximum is 100 characters)');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1a9675be-4d78-41a7-a0f6-4981c697c58a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n\t  \"userDefinedField3\" : \"*****************************************************************************************************\",\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : []\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a1021e2-8a43-4d68-a517-e03c3bf397bf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c1ef5b5-1ae5-48c8-aa39-d92a5d9762de",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update resource tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4e2f7f09-7673-4c49-b171-bd2da618793b",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.globals.get(\"custom-resource-uuid\"));",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update resource tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ca745ab0-dcde-4d2e-8136-8a55466715f7",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "delete tags for particular record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0701998d-7dec-4ab4-ab7f-14b55eaae10e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
													"});",
													"",
													"//Test that type is tags",
													"pm.test('type is tags', function(){",
													"    pm.expect(response.data.type).eq('tags');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
													"});",
													"",
													"//Test that name matches name provided in request",
													"pm.test('name matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.globals.get(\"custom-resource-uuid\"));",
													"});",
													"",
													"//Check that tagList contains correct tags",
													"pm.test('Existing tags', function(){",
													"    pm.expect(response.data.attributes.tags.tagList.size) === 1;",
													"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"test tag\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"test tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}",
												"tags"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update custom resource with access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e9754a46-50d2-463c-b7b1-86b2631a9c92",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});",
															"",
															"pm.test(\"relationships is as expected\", function () {",
															"   pm.expect(firstRecord.relationships.accessType.data.type).to.eq(\"accessTypes\");",
															"   pm.expect(firstRecord.relationships.accessType.data.id).to.eq(pm.environment.get(\"access-type-id2\"));",
															"   pm.expect(jsonData.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "acf769cc-b9a2-45c1-ac64-85031b96cd1a",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"{{access-type-id2}}\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update custom resource with access type when it is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7cab556d-dbe4-45a0-86e6-f17ec5a62ec2",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "179a9ac1-3b75-4a0e-b721-225ffd929a4d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom resource with access type invalid id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a0c4161-956c-41cb-b498-388d52e389ef",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "909bdc64-bb9f-4612-9198-bcfa96309998",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"invalid id\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a5fff37a-210f-47d1-b49f-a12c25f56dad",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c971f3a7-a601-4cce-aec7-186d76e7013a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE resource by resourceId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources DELETE specific resource (custom title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03e65cbd-15c9-4c39-ba65-64bf46678cb4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE specific resource (managed title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "765ac9eb-3048-43f9-a79b-2ff388818e44",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources DELETE previously deleted resource id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac2e8896-e92a-4b7f-988a-f6728187fedd",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"   pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE managed title in managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cab7e2d2-d45a-4508-bb4d-0fd98008eded",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Resource cannot be deleted\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Resource is not in a custom package\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-title-package-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2cd7b45-a69a-47dc-b28a-784d629e3973",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"  pm.expect(jsonData.errors[0].title).to.equal(\"Resource id is invalid - 1\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resources by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ed78b55-9a6b-4d8d-b706-d54b17b4fd33",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of resources in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is resources",
													"        pm.test('type is resources', function() {",
													"            pm.expect(firstRecord.type).eq('resources');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", ",
													"            \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\", \"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\", \"visibilityData\", \"managedCoverages\", \"customCoverages\");",
													"        });",
													"        ",
													"        //Test that packageId matches what we passed in ",
													"        pm.test('packageId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.packageId).to.eq(pm.variables.get('packageId'));",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"title\", \"provider\", \"package\");",
													"        });",
													"    ",
													"        //Test that title is not included in relationships",
													"        pm.test('relationships meta should not include title', function() {",
													"            pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that package is not included in relationships",
													"        pm.test('relationships meta should not include package', function() {",
													"            pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No resources found for this package');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd15649e-8593-4383-86d8-927e2cedfc9b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of resources in response",
													"if(response.data) {",
													"    //Get the first record",
													"    let firstRecord = response.data[0];",
													"    ",
													"    //Test that type is resources",
													"    pm.test('type is resources', function() {",
													"        pm.expect(firstRecord.type).eq('resources');",
													"    });",
													"    ",
													"    //Test that data.attributes has expected attributes",
													"    pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
													"    });",
													"    ",
													"    ",
													"    pm.test('userDefinedFields are correct', function() {",
													"        pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"        pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"        pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"        pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a5447a5-1df7-48ae-8ffe-489de041e0dd",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cadabad-fbca-4bc7-820f-0dd58fbdfa20",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId and providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be118d2c-9422-4ab7-af81-37c86130699f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f372332-e7f8-47fa-b7e6-a74ac393e6bd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a897c923-4a04-4db5-b728-75911af6550f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cccbfdca-63dc-4619-8796-4baf6492ec1b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8477a599-cd0b-4de3-a3b2-b9173539dd53",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceTagsItem.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsItem\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchCollection.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchCollection\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceFailedInformation.json\", JSON.parse(pm.variables.get(\"schema_resourceFailedInformation\")));",
							"tv4.addSchema(\"schema_resourceFailedIds.json\", JSON.parse(pm.variables.get(\"schema_resourceFailedIds\")));",
							"tv4.addSchema(\"schema_errors.schema\", JSON.parse(pm.variables.get(\"schema_errors\")));",
							"tv4.addSchema(\"schema_error.schema\", JSON.parse(pm.variables.get(\"schema_error\")));",
							"tv4.addSchema(\"schema_parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "GET title collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles query only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac4870ad-b69f-419c-b18e-dca3edc91e0a",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"        ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"            ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"        ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"        ",
													"    // Test that first title contains search term",
													"    pm.test('title name in first result includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with name sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f4f7a62-958a-4a97-89dd-1a799b5af081",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"    ",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Save first id to compare with a relevance sort result -- the 2 should be different",
													"    pm.environment.set(\"name-sort-id1\", firstRecord.id);",
													"} else {",
													"    console.log(\"Sample Title Query with name sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with relevance sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64730229-ce75-4410-9cb0-a681ab3a8ed0",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Test that first sorted by relevance title id does not equal name sort title id",
													"    pm.test('first title name does not equal first title in relevance sort', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"} else {",
													"     console.log(\"Sample Title Query with relevance sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=relevance",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "relevance"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68fde122-27ae-4b6c-ab6e-6ed4c8b56b6b",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[publisher]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "105d967f-7b3e-4fad-9cec-bfd77ccddee2",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"data array contains the default (25) entries\", function () {",
													"    pm.expect(jsonData.data.length).to.eql(25);",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publisherName.toLowerCase()).to.include('academic');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[publisher] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[publisher]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[publisher]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[subject]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e3b5940-5eda-4b2d-a2f6-1eae1fab5cb0",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingSubjects = [];",
													"        jsonData.data.filter(",
													"            function(item){",
													"                item.attributes.subjects.filter(",
													"                    function(subject) {",
													"                        if (subject.subject.toLowerCase().includes('history')) {",
													"                            matchingSubjects.push(subject.subject);",
													"                        }",
													"                    }",
													"                );",
													"            }",
													"        );",
													"    ",
													"    pm.test('at least 1 subject includes query term', function() {",
													"        pm.expect(matchingSubjects.length).to.be.above(0);",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[subject] returned 0 results\");",
													"}",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[subject]=history",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[subject]",
													"value": "history"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4df84d44-d7c6-479b-8765-12c5a2ee23e0",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingIdentifiers = firstAttributes.identifiers.filter(",
													"        function(identifier) {",
													"            if (identifier.id.toLowerCase().includes('99')&&(['issn', 'isbn'].includes(identifier.type.toLowerCase()))) {",
													"               return identifier.id;",
													"            }",
													"        }",
													"    );",
													"    ",
													"    pm.test('at least 1 issn or isbn identifier includes query term', function() {",
													"        pm.expect(matchingIdentifiers.length).to.be.above(0);",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Title Query with filter[isxn] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter for no results",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc61a2a2-d1b7-4d5b-8646-238a731d1f7f",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[type]&filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fed5d4ab-d1da-40b0-a068-13ace9202b15",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dc63ab1-ed6e-4f90-a657-7c53cfc6e0bf",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response includes tagged title', function() {",
													"    let titleIds = jsonData.data.map(record => record.id);",
													"    let taggedTitleId = pm.environment.get('managed-title-package-resourceid').split('-')[2];",
													"    pm.expect(titleIds).to.include(taggedTitleId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {},
											"options": {
												"file": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags] with multiple tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22771ffb-e5b7-4379-9b88-1d0bcf6cb4d3",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type' header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response includes tagged titles', function() {",
													"    let titleIds = jsonData.data.map(record => record.id);",
													"    let taggedTitleId = pm.environment.get('managed-title-package-resourceid').split('-')[2];",
													"    let taggedCustomTitleId = pm.environment.get('custom-resourceid-from-setup').split('-')[2];",
													"    pm.expect(titleIds).to.include.all.members([taggedTitleId,taggedCustomTitleId]);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											},
											"options": {
												"file": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}}&filter[tags]=test tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}}"
												},
												{
													"key": "filter[tags]",
													"value": "test tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags] with pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d44ff013-4604-4191-a9b5-e43b2390894c",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    console.log(firstAttributes);",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response has 1 title', function() {",
													"    pm.expect(jsonData.data.length).eq(1);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {},
											"options": {
												"file": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}}&filter[tags]=test tag&count=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}}"
												},
												{
													"key": "filter[tags]",
													"value": "test tag"
												},
												{
													"key": "count",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b303f8a-8726-443f-af17-520cfb7bca89",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    // Test that first title on page 2 does not have same id as first title on page 1 ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Titles Query with paging returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[access-type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2e93188-b324-43ce-a43d-094537b7f34b",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publicationType\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[access-type]={{access-type-name2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name2}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles no parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a643d932-78d7-43e8-aaf4-c5b1c8665831",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "742272b9-7981-41a1-b47d-22f9c49e481f",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Value of required parameter filter[name], filter[isxn], filter[subject] or filter[publisher] is missing.\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query with sort only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "829f3706-fd03-4302-b1dc-41c19d18f295",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn] &filter[name] conflicting filter parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9848ce18-1cdf-4ec0-bf38-1b814fab0758",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Conflicting filter parameters\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99&filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												},
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid too large",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0b09684-3299-422e-87f6-e3eb2dc4f78b",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"2147483648\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2147483648&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2147483648"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8018b97-ea93-422b-b091-40446900a3fb",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"\\n 'page' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 1\");",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=-1&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid non numeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24e7e806-93ec-4acd-8be4-63156a9ea190",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"a\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=a&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "a"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET title by  titleid",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles GET specific title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "798e8791-ac1e-4da1-bbfc-3cebcaa05743",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "389f8259-53a6-4971-b77c-49c2681e7b50",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.data.length).to.be.above(0);",
													"});",
													"",
													"if (relationships.resources.data.length > 0) {",
													"    pm.test(\"data array contains the default entries\", function () {",
													"        pm.expect(relationships.resources.data[0].type).to.eql(\"resources\");",
													"    });",
													"} else {",
													"      console.log(\"Sample Titles GET byId including resources returned 0 relationships\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources with tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfb6fee3-2770-4eb0-b097-c04d061a19dd",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"    ",
													"pm.test(\"included resource with tags\", function () {",
													"    let taggedCustomResourceId = pm.environment.get('custom-resourceid-from-setup');",
													"    let taggedResource = jsonData.included.filter(resource => resource.id === taggedCustomResourceId)[0];",
													"    pm.expect(taggedResource.attributes.tags.tagList).to.include(\"test tag\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d15501a7-d2e0-4535-b925-4ae663264e8c",
												"exec": [
													"pm.environment.set('custom-titleid-with-tags', pm.environment.get('custom-resourceid-from-setup').split('-')[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid-with-tags}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid-with-tags}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "951a2714-f361-4cca-ae89-b9c1fb6fb505",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"    ",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(jsonData.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(jsonData.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (jsonData.included === undefined || jsonData.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            let resourceWithLabels = jsonData.included.filter(resource => resource.id === pm.environment.get(\"custom-resourceid-from-setup\"))[0];",
													"            pm.expect(resourceWithLabels.type).to.eq('resources');",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField1).eq(\"test 1\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField2).eq(\"test 2\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField4).eq(\"test 4\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField5).eq(\"test 5\");",
													"        });",
													"    }",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f2af7c75-8211-479d-927b-5f4644b388ab",
												"exec": [
													"pm.environment.set('custom-titleid-with-tags', pm.environment.get('custom-resourceid-from-setup').split('-')[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid-from-setup}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid-from-setup}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources bad value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a46f01d-a7f1-41f0-90d2-76ad7203b731",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.meta.included).to.be.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=badValue",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "badValue"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles GET non existing title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d335613-3ceb-435b-b1f2-c35e9493ca2c",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles POST valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "911e7e8e-0b10-4e69-8202-4d1566eed9c2",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"edition\", \"description\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"title name is as expected\", function () {",
													"    pm.expect(firstAttributes.name).eq(\"custom title-\" + pm.variables.get(\"custom-title-uuid\"));",
													"});",
													"",
													"pm.test(\"publisher name is as expected\", function () {",
													"    pm.expect(firstAttributes.publisherName).eq(\"test publisher\");",
													"});",
													"",
													"pm.test(\"isTitleCustom is true\", function () {",
													"    pm.expect(firstAttributes.isTitleCustom).eq(true);",
													"});",
													"",
													"pm.test(\"subjects are as expected\", function () {",
													"   pm.expect(firstAttributes.subjects).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"identifiers are as expected\", function () {",
													"   pm.expect(firstAttributes.identifiers).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.identifiers.length).to.eql(1);",
													"   pm.expect(firstAttributes.identifiers[0].id).to.eql(\"11-2222-3333\");",
													"   pm.expect(firstAttributes.identifiers[0].type).to.eql(\"ISSN\");",
													"   pm.expect(firstAttributes.identifiers[0].subtype).to.eql(\"Online\");",
													"});",
													"",
													"pm.test(\"publicationType is as expected\", function () {",
													"   pm.expect(firstAttributes.publicationType).to.eql(\"Database\");",
													"});",
													"",
													"pm.test(\"edition is as expected\", function () {",
													"   pm.expect(firstAttributes.edition).to.eql(\"test edition\");",
													"});",
													"",
													"pm.test(\"description is as expected\", function () {",
													"   pm.expect(firstAttributes.description).to.eql(\"test description\");",
													"});",
													"",
													"pm.test(\"isPeerReviewed is as expected\", function () {",
													"   pm.expect(firstAttributes.isPeerReviewed).to.eql(true);",
													"});",
													"",
													"pm.test(\"contributors are as expected\", function () {",
													"   pm.expect(firstAttributes.contributors).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.contributors.length).to.eql(2);",
													"   pm.expect(firstAttributes.contributors[0].type.toLowerCase()).to.eql(\"author\");",
													"   pm.expect(firstAttributes.contributors[0].contributor).to.eql(\"smith, john\");",
													"   pm.expect(firstAttributes.contributors[1].type.toLowerCase()).to.eql(\"illustrator\");",
													"   pm.expect(firstAttributes.contributors[1].contributor).to.eql(\"smith, ralph\");",
													"});",
													"",
													"",
													"",
													"const getResourceRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/resources/' + pm.variables.get(\"custom-packageid\") + \"-\" + jsonData.data.id,",
													"  method: 'GET',",
													"  header: {",
													"    'Content-Type' : 'application/vnd.api+json',",
													"    'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"    'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"      ",
													"  },",
													"};",
													"pm.sendRequest(getResourceRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    attributes = res.json().data.attributes;",
													"    pm.test('userDefinedFields are as expected', function(){",
													"        pm.expect(attributes.userDefinedField1).eq(\"test 1\");",
													"        pm.expect(attributes.userDefinedField2).eq(\"test 2\");",
													"        pm.expect(attributes.userDefinedField3).eq(\"test 3\");",
													"        pm.expect(attributes.userDefinedField4).eq(\"test 4\");",
													"        pm.expect(attributes.userDefinedField5).eq(\"test 5\");",
													"    });",
													"});",
													"",
													"//Check that tagList is empty",
													"pm.test('TagList is empty', function(){",
													"    pm.expect(firstAttributes.tags.tagList.size) === 0;",
													"});",
													"",
													"// Store custom title id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-titleid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f74bbf2b-e9a7-45d7-b8a4-b1300bac34cb",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": [\n    \t\"title-tag\"\n\t\t\t]\n    \t},\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"test 3\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles POST provider not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67bb631e-cef9-4f66-aa5e-c0485d79045c",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Provider not found\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"1-1\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST duplicate title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3182952e-ff6c-4acb-a2d4-9aed1427cac4",
												"exec": [
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "604f678b-bdb1-4ef9-9701-ff1b6a8210c6",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e336c484-7590-4634-98ea-39b1236395db",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2cc9b2d4-ec5f-4e93-b8b5-bec4b532a811",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bdab40b-4ea4-4af2-8f85-7a27d2edab62",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST non existing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ead3261b-152b-453a-8d9e-61d980935d34",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51e205b3-47f3-49a8-a543-ae268bae33d7",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-pubtype-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-pubtype-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"badpubtype\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "084b02fa-1dc5-4481-9f11-be7b37dbe5be",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.expect(pm.response.reason()).to.equal(\"Unprocessable Entity\")",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Missing resource\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  }\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f019302-57aa-4cdd-85a1-3b3c8d59d67c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST cannot add custom title to managed resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c25e8672-89e9-4cad-8b92-0f580bbb98e0",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Cannot create custom title because Customer is not the Provider\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{managed-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8b9819d-6d40-406f-8b2b-5f44f066cc0f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d8949cf8-c9a2-4cf3-acd2-dac593c866f4",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid isPeerReviewed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57f6a4bc-722d-4fdb-9f2f-2d44f0aae620",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "04ee039f-b742-4460-8ae1-bffcccede2c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": \"badvalue\",\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf19bc11-a451-48f0-a9b8-ea2383856a26",
												"exec": [
													"",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Edition is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "453c3b7f-ad7b-46b0-bf7a-a585cbc534c9",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"{{long-edition}}\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3de1f1bf-20ca-48e1-b0cd-061f5301e5a5",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "76e1e2e6-f3fc-4d75-bd90-e1aad8128322",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"{{long-description}}\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid contributor type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d06fade-7952-466f-b8b7-cd7976b1d9e4",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Parameter contributorsList.contributorType must be one of (author, editor, illustrator).\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a9e320bb-d354-4ee4-b7fc-2f36336eb2d6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n       {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        }\n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f9e5f3e-434f-49b6-9777-9e14b36fb80e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function() {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function() {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function() {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function() {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e84eccaf-d493-4fa0-b2c1-b7abe510989f",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-identifier\", toRepeat.repeat(21));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\":\"{{long-identifier}}\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02ebf207-919b-45b8-9431-5f6766500970",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c0ab544a-2325-42a1-b933-bac62726de5e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41fec694-78a9-444f-96c5-2d9976b1f3a4",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a2a593e-21e4-4c0d-b0dc-b8ea112e216c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"invalidtype\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fe4c81a-3314-42ab-af43-67a013d8aa28",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3023a3f2-ebce-44ec-b649-3da791d36aba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"invalidsubtype\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update title with adding tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "868bf331-fd65-4b15-a771-1a880ce252d3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is titles",
													"pm.test('type is titles', function(){",
													"    pm.expect(response.data.type).eq('titles');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\",\"publicationType\", \"publisherName\",",
													"    \"isPeerReviewed\", \"edition\", \"contributors\", \"identifiers\", \"tags\");",
													"});",
													"",
													"//Test that publicationType matches as provided in request",
													"pm.test('publicationType matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.publicationType).to.eq(\"Database\");",
													"});",
													"",
													"//Test that publisherName matches provided in request",
													"pm.test('publisherName matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.publisherName).to.eq(\"test publisher\");",
													"});",
													"",
													"//Test that isPeerReviewed is true",
													"pm.test('isPeerReviewed is true', function() {",
													"    pm.expect(response.data.attributes.isPeerReviewed).to.be.true;",
													"});",
													"",
													"//Check that tagList is not empty",
													"pm.test('TagList is not empty', function(){",
													"    pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
													"});",
													"",
													"//Check that tag in tagList matches with value",
													"pm.test('Creating tagList', function(){",
													"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": [\n    \t\"foo-tag\"\n\t\t\t]\n    \t}\n\t}\n\t}\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles PUT update custom title missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce98ead7-a3e6-475f-bfcb-a474dbbd8f96",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"// Error text as returned from rm api",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.eq(\"Invalid Identifier id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26af58a3-6425-4297-9a7d-3729646b08bc",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid identifer subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ca21b1a-843c-488d-8c31-3eac2d566ce7",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2857d711-ec93-4d28-b4c7-b158753c3607",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Invalid\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid identifer type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25395d0c-f039-4433-a49d-f7a95b9be7df",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3deaffae-5c61-49c7-81e3-e3cd21f90720",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"Invalid\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid contributor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d2acf28-6f9c-4e93-b049-0752d7eae86e",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute Type is invalid.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6113ba1f-53ac-4321-b206-68ad9445fb72",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e1a3dc3-e043-46c5-9b00-735e405cc00d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 400 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b280dab6-8949-4678-871a-7a4a970e17dd",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"{{long-description}}\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67fb4f4e-9292-4879-9ded-e93c1e942c46",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2ef8e11d-16a8-4940-83bb-0be6221561c6",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"{{long-edition}}\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de2d486c-fac1-43f5-aee1-d9e5c181f895",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7ac5cdf-0cef-47e7-90e9-b383fb88acb3",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe2db6de-89d3-4869-bccb-4e5b7303ab18",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cfa385e9-1964-4fbf-b642-ec4fa3198ac3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"invalid\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid peer review",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "178ef522-5986-4389-be1c-c08f3e3ff5f9",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dc3dab97-63b1-418e-9dfc-36fe51ceddc0",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": \"invalid\",\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title duplicate title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf791963-ca91-4cb6-9fa2-437941c7a316",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ba0db848-8b9f-4658-a6dc-93151e35ca2d",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"{{custom-titlename-for-resource-duplicate}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title Invalid name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "723c431c-3f47-4213-bea1-c198889d8b21",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "234406cd-b7fd-4bcb-8632-f24b8302853b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9b89045-9b15-43a7-bb84-9222142f37f4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "46e98b23-7c01-432e-bbed-4bd5594b747a",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_titleData.json\", JSON.parse(pm.variables.get(\"schema_titleData\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_titles.json\", JSON.parse(pm.variables.get(\"schema_titles\")));",
							"tv4.addSchema(\"schema_titleListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_titleListDataAttributes\")));",
							"tv4.addSchema(\"schema_metaIncluded.json\", JSON.parse(pm.variables.get(\"schema_metaIncluded\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "configuration",
			"item": [
				{
					"name": "GET Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c772b6d7-129b-4e5e-a23f-c441c4e8402c",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Delete Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6471078c-8edd-40b7-bbee-094499cf73f8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "674e44ed-8c71-4455-b062-e62cdaecee13",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-url-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bbe80753-1209-44ed-98b1-d9fae6bdcd0d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "325a8f00-f2aa-43a3-b081-bac94fc395a0",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-key-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b98dad67-73d7-447e-8a4f-5758b98dbd36",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b7681409-7b3b-4a91-b44d-24cf2856f675",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-customer-id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Run tests",
									"item": [
										{
											"name": "GET Configuration - when configuration is not configured",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b91a56f6-d8f5-4a73-8138-9424d2e7400f",
														"exec": [
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
															"});",
															"",
															"//Test that id is configuration",
															"pm.test('id is configuration', function(){",
															"    pm.expect(response.data.id).eq('configuration');",
															"});    ",
															"",
															"//Test that type is configurations",
															"pm.test('type is configurations', function(){",
															"    pm.expect(response.data.type).eq('configurations');",
															"});",
															"    ",
															"//Test that default value for rmapiBaseUrl is returned",
															"pm.test('rmapiBaseUrl is returned with default value', function(){",
															"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(\"https://api.ebsco.com\");",
															"});",
															"",
															"//Test apiKey is missing when it is not configured",
															"let apiKey = \"****************************************\";",
															"pm.test('apiKey is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"apiKey\");",
															"});",
															"",
															"//Test that customerId is missing when it is not configured",
															"let custid = pm.environment.get(\"rm-api-custid-value\");",
															"pm.test('customer id is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"custid\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"configuration"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reset Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4a3e2c47-ca4a-4e96-894e-01fbfa047c0c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a965b32f-c297-4ed6-85bb-b8e3137a71e6",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-url-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-url-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-url-value}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "efb63afe-a8b3-4809-91d7-d53c80f6dfb0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9540b029-0306-4da2-ae1b-a4eb3cfea609",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-key-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-key-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-key-value}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d997dda1-16fd-47fa-a225-3aba9b052da2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5febebe7-f35d-4d36-8052-deb91c7a77a3",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-customer-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-customer-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-custid-value}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b858da88-2438-4512-b1b1-7eb6dcc76868",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get RM API Url id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca1be2e4-465f-4fb8-826a-33eb5cf98d19",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-url-id\", jsonData.configs[0].id);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3fb8ef3-894c-4384-8d80-f54520e4b831",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ed6b62f-4075-4692-bb57-ffb7541f149e",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-customer-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0335c923-003b-4862-af7f-53d98e0ae170",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API apiKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "359442f2-0e43-4850-9e32-cedbea0fdc4b",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-key-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "913c9636-a73f-412c-baa4-817267b9da27",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT Configuration - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0f8611a-7584-48fc-bb01-b0155f484efb",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"not a customer id\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when api key is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9466ab7b-eae6-4cff-90ff-deaa147efb2f",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"not an apikey\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b54e3ad0-500b-48c7-b447-5fb4c80430be",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"not a url\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a21b311a-1384-4999-a589-ffcaa03dce2c",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when all fields are empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75d78bdd-c895-4866-91cf-b8292eb10e1a",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"\",\n            \"apiKey\": \"\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when fields are missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bd502a6-3980-4f84-9b33-59fa6224a606",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid API key');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when json is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfd50516-745a-46c0-a280-ee0fddeb514c",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed."
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        },\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "212b7edc-1385-42be-a9da-eefe5eac733b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f1af454f-4052-4dd3-b2e1-f09bc3b405e2",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_configurationData.json\", JSON.parse(pm.variables.get(\"schema_configurationData\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_configurationAttributes.json\", JSON.parse(pm.variables.get(\"schema_configurationAttributes\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "status",
			"item": [
				{
					"name": "GET status",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Status - when status is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44a24589-3a4d-4d56-b474-258e44bde005",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is true', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(true);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT invalid RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aaf41168-3b43-4cc5-baa4-3265488be881",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c3dc746-9298-474a-9559-c5b96f9e6678",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"not a url\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when api url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1331a8b1-a05c-4eed-9e60-7c23c4613841",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c0f36173-b8ef-4c98-8d69-ad2d034a720b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6124f760-fbad-4676-834a-ac5164072b37",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-url-value}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a47e8c07-ee6f-4b5c-943a-f875ed82c054",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "840dd6d4-3a42-4cb6-9c4c-430a7fb1c2e9",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"invalid id\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6db831e5-4596-4ddf-b40c-74200eff20e4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8d6b5933-cf23-4ab6-95ab-001e78366a61",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "88908be3-d9e3-47e2-9012-ea55a9078c3f",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-custid-value}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a03879ab-0d23-49ea-805c-895dd3a80759",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5e66501e-057e-47c9-9348-0dc02760c79f",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"invalid api key\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when apiKey is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cebd51b0-5bed-415a-bd98-9db630a9f7aa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5a61928a-95de-4f48-8d5a-76e420c1ea01",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "465852f6-8e38-4b9c-80a6-932465c07584",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-key-value}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6551eb69-742e-4ae2-86a5-7225118a6af0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "96807131-875a-45b0-8a0e-0c839c6968ed",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_statusData.json\", JSON.parse(pm.variables.get(\"schema_statusData\")));",
							"tv4.addSchema(\"schema_statusAttributes.json\", JSON.parse(pm.variables.get(\"schema_statusAttributes\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "proxy",
			"item": [
				{
					"name": "GET proxy-types",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Get proxies",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e5daac5-f098-4178-8e41-7799367d3239",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_proxyTypes\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is proxyType",
													"        pm.expect(firstRecord.type).eq('proxyTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"name\", \"urlMask\");",
													"        });",
													"    } else {",
													"        console.log(\"No Proxy types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"proxy-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22353eab-108c-4b58-ad89-1f94d3d6238e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_proxyTypes\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is proxyType",
													"        pm.expect(firstRecord.type).eq('proxyTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"name\", \"urlMask\");",
													"        });",
													"    } else {",
													"        console.log(\"No Proxy types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"proxy-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Get proxies by non-existing KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e24bb0dc-5491-4203-85d2-6131f5706ca6",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"KbCredentials not found by id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"proxy-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by  invalid KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88223335-9a53-43c5-a619-5ef87506cf4b",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"'id' parameter is incorrect\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"proxy-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d291089e-00b2-4324-a447-cf1c43da1036",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "46258a8a-67a7-410c-a5f0-6fe6936619e3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET root-proxy",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET root proxy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac18d39c-087f-4cf3-82d3-a12dab9224c6",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET root proxy by KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78c0d735-1443-43cb-b84a-e82491a1e989",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Get proxies by non-existing KB Credentials id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "624aac72-77bd-4da1-91cf-2d371fe817a9",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"KbCredentials not found by id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by  invalid KB Credentials id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "909f0386-8f0b-4f95-8aa9-89d7db2f7039",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"'id' parameter is incorrect\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80914627-3a21-4c85-8580-84ee9b1ccece",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa003ab8-1b7a-4a57-8373-734afb7b9b3e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT root-proxy",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT root proxy when root proxy is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26eef62b-a86f-4b42-a518-494a030ac5ef",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"   pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"<n>\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update root proxy without proxyTypeId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da70b99a-231f-49a1-ac42-b1c0a8b1eafb",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 4 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(4);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.id\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.proxyTypeId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"attributes\": {\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy with invalid proxyTypeId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bccae2d3-6c8b-4544-a0f7-aa2d79688556",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Test that response has expected error message",
													"pm.test('expected error message is present in response', function() {",
													"    pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9a47a50-b062-41a2-9345-2105c0a81cfc",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.eq(\"Invalid Proxy ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"invalid\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0027c3be-52b8-4e20-a06c-e99446f72232",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "359ac8c4-195d-4838-b206-902d5ee6ba48",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_proxyTypesData.json\", JSON.parse(pm.variables.get(\"schema_proxyTypesData\")));",
							"tv4.addSchema(\"schema_proxyTypesDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_proxyTypesDataAttributes\")));",
							"tv4.addSchema(\"schema_rootProxyData.json\", JSON.parse(pm.variables.get(\"schema_rootProxyData\")));",
							"tv4.addSchema(\"schema_rootProxyDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_rootProxyDataAttributes\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "GET tags collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6de5664-a543-4559-bc3e-f7af5559fb47",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"value\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute type",
													"        pm.test('expected data.attributes type is present', function() {",
													"            pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationship is present', function() {",
													"            pm.expect(firstRecord.relationships.record).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"record\")",
													"        });",
													"    } else {",
													"        console.log('No tags found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											]
										}
									},
									"response": []
								},
								{
									"name": "with all rectypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5531418c-3255-4236-b24b-8827c210ae9a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is tags",
													"        pm.test('type is tags', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        });",
													"    }",
													"}",
													"",
													"    response.data.forEach(function(element) {",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-packageid\")){",
													"        pm.test('Record includes query term packages', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === \"18\"){",
													"        pm.test('Record includes query term providers', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-titleid\")){",
													"        pm.test('Record includes query term titles', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    }",
													"    if (element.relationships.record.data.id === pm.environment.get(\"custom-resourceid-from-setup\")){",
													"        pm.test('Record includes query term resources', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=provider&filter[rectype]=package&filter[rectype]=title&filter[rectype]=resource",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "provider"
												},
												{
													"key": "filter[rectype]",
													"value": "package"
												},
												{
													"key": "filter[rectype]",
													"value": "title"
												},
												{
													"key": "filter[rectype]",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d629ac29-91ae-4a51-a7ed-2cd46fc88767",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to providers', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dff55575-68fc-4a08-8fe2-0785d140f3ae",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to packages', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=package",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "package"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a0299b1-156c-46d7-891a-f17d218d41e1",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is a string",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to titles', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb4a4b6f-1a1e-4ccc-9206-d38e64711081",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to resources', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=resource",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid filter(all rectypes)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba92549a-f8e8-4cc2-81a6-d563342a3c89",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is tags",
													"        pm.test('type is tags', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        });",
													"    }",
													"}",
													"",
													"    response.data.forEach(function(element) {",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-packageid\")){",
													"        pm.test('Record includes query term packages', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === \"18\"){",
													"        pm.test('Record includes query term providers', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-titleid\")){",
													"        pm.test('Record includes query term titles', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    }",
													"    if (element.relationships.record.data.id === pm.environment.get(\"custom-resourceid-from-setup\")){",
													"        pm.test('Record includes query term resources', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[r=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[r",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with invalid request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca9d06cb-47fc-4b04-abc3-9feade0354bd",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid \\'filter[rectype]\\' parameter value: providers. Possible values: provider, package, title, resource');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "providers"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d3e63b6f-b0fa-4cb8-9a31-af65d860f8cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "db15ec8e-6788-4c91-b5ee-46e9ff136364",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
							"tv4.addSchema(\"schema_tagRelationships.json\", JSON.parse(pm.variables.get(\"schema_tagRelationships\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_tagCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_tagCollectionItem\")));",
							"tv4.addSchema(\"schema_tagCollection.json\", JSON.parse(pm.variables.get(\"schema_tagCollection\")));",
							"tv4.addSchema(\"schema_packageTags.json\", JSON.parse(pm.variables.get(\"schema_packageTags\")));",
							"tv4.addSchema(\"schema_tagDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_tagDataAttributes\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "custom-labels",
			"item": [
				{
					"name": "GET collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET custom labels collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "107454b1-aa1a-4da7-ab51-0811267fa5e9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is customLabel",
													"        pm.expect(firstRecord.type).eq('customLabels');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\", \"displayOnPublicationFinder\");",
													"        });",
													"    } else {",
													"        console.log(\"No Custom Labels exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET custom labels collection by credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fa194e4-3af3-470f-a8a5-b16652f577bd",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is customLabel",
													"        pm.expect(firstRecord.type).eq('customLabels');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"        pm.expect(firstRecord.credentialsId).to.be.equal(pm.environment.get(\"kb-credentials-id1\"))",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\", \"displayOnPublicationFinder\");",
													"        });",
													"    } else {",
													"        console.log(\"No Custom Labels exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET custom-labels by missing credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35f87280-6701-4019-989c-c6acb8e42915",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT custom-labels with one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36ad52b6-b2f5-491d-8924-0e06165c5344",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"    pm.expect(firstRecord.type).eq('customLabels');",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT custom-labels with five items",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84530461-f015-4e07-917a-31456a634b13",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test('expected size', function () {",
													"    pm.expect(jsonData.data.length).eq(5);",
													"})",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"    pm.expect(firstRecord.type).eq('customLabels');",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 2,\n                \"displayLabel\": \"test 2 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 3,\n                \"displayLabel\": \"test 3 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 4,\n                \"displayLabel\": \"test 4 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 5,\n                \"displayLabel\": \"test 5 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT /custom-labels with id not in range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cc9a798-6b65-4b6c-b12f-5282ac32d434",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Custom Label id should be in range 1 - 5\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 6,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd165670-2fff-414d-ba2a-6202dfb0cd31",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": -1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid name length",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8e25cb0-06a7-43ba-aa40-c57f4ad0f6fa",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Custom Label Name is too long (maximum is 50 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid full text finder",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4a351aa-4250-4247-b405-d3fd214415b1",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].message).to.equal(\"may not be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": null,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid publication finder",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9e7aa76-e935-4fbc-b0f1-dda3aeddb9fa",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].message).to.equal(\"may not be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": null\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with duplicate ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b8eb0a2-2961-485f-8e4e-a5c3b6d3d826",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels to missing credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89c78988-df65-4dc7-9604-1630de729fd9",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f64a32be-6d3e-4378-a6f6-da7047cc707c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d558f668-2831-4c67-8e43-60c24ff1439d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2c2a8acf-7718-48bb-9a3a-598ef19dd99c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8b7deaec-2d00-4d9a-b5dd-a562fbaabadb",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_customLabelsCollection.json\", JSON.parse(pm.variables.get(\"schema_customLabelsCollection\")));",
							"tv4.addSchema(\"schema_customLabelDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_customLabelDataAttributes\")));",
							"tv4.addSchema(\"schema_customLabel.json\", JSON.parse(pm.variables.get(\"schema_customLabel\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tear-down",
			"item": [
				{
					"name": "tear-down tags test",
					"item": [
						{
							"name": "Delete tags for provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25c499fe-fce0-4ac2-8fd6-a52641c06324",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Tag list is empty', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n\t\t\t]\n\t\t}\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"18",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for second provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c693f6bf-daeb-45ed-86d1-c37d8ec118cc",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('EBSCO');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"EBSCO\",\n      \"tags\": {\n    \t\t\"tagList\": [\n\t\t\t]\n\t\t}\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"19",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1481b423-6de2-4baa-bcfa-ed4526fcdfca",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"//Check that tagList is empty in response",
											" pm.test(\"Package with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"tags\",\n     \"attributes\": {\n       \"name\": \"new-custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\",\n       \"tags\": {\n    \t\"tagList\": [\n\t\t\t]\n    \t}\n     }\n   }\n }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "208975ea-bc01-4b4d-837a-6b698d9b5c71",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7cb86a97-33aa-4983-9112-dbab0ce0adca",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"tags\",\r\n    \"attributes\": {\r\n      \"name\": \"custom title-{{custom-resource-with-tags-uuid}}\",\r\n      \"tags\": {\r\n        \"tagList\": [\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags to test titles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ea8d0c2d-3940-4cbe-888a-4fe3dfcae4e4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25f5874d-38db-41c2-8793-ff22386bef1f",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": []\n    \t}\n\t}\n\t}\n}\n        ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles",
										"{{custom-titleid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for managed resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48f1e0a0-76de-4b15-8630-86436f869d53",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "60f3f07a-67b9-488c-a3cc-b29ef2813340",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"managed-resource-{{managed-title-package-resourceid}}\",\n      \"tags\": {\n        \"tagList\": [\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{managed-title-package-resourceid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom package created for tags test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68d55e94-09fd-4df5-be5d-ebf42e6fd20e",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bdd160be-5d99-4f81-bdaa-b5f4104be812",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9badf24a-c0e6-4ec3-9557-347d5d732674",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dacffdf1-6175-412d-9338-c5b9c0c9fcb1",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
									"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
									"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
									"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
									"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
									"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_packageTags.json\", JSON.parse(pm.variables.get(\"schema_packageTags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down resources test",
					"item": [
						{
							"name": "Unassign access mapping from resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15b4b3ae-8964-4c87-8e16-034b1ea858cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1da1f0ed-0d0c-4c3a-8627-d660e686e930",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom resource with tags (custom title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a55194d7-0619-4e4f-9177-fb2d31b5ff72",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "664a9b4c-b9a9-469d-861b-40ef730689b0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60133136-2e29-4a8f-ab5a-2c2d41155e06",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-for-resource}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-for-resource}}"
									]
								},
								"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
							},
							"response": []
						},
						{
							"name": "Delete Custom Package (created for resource tags)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebc0ea4a-dffe-4782-9e96-3e703272b7a0",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom Resource created for test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e8e472e-1d46-4b26-8b48-b351b648192b",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-packageid}}-{{custom-titleid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-packageid}}-{{custom-titleid-from-setup}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deletes newly created custom package which is used for resource testing. Deleting a custom package deletes all custom titles that are contained within the package ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c700027-82dc-4f18-af4e-fb968086b66a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac49d22c-7179-417f-a622-1db618e43e8e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down packages",
					"item": [
						{
							"name": "Unassign access mapping from cusom package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa0cec03-0501-4faa-b158-87350aca2dcd",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that access type unassigned",
											"pm.test('access type should be unassigned', function() {",
											"    pm.expect(response.data.relationships).not.to.have.property('accessType');",
											"    pm.expect(response.included.length).to.be.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Journal\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"visibilityData\": {\n        \"isHidden\": false,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign access mapping from managed package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b96af3f4-5baf-49f5-9cfc-085be2aca024",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that access type unassigned",
											"pm.test('access type should be unassigned', function() {",
											"    pm.expect(response.data.relationships).not.to.have.property('accessType');",
											"    pm.expect(response.included.length).to.be.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{packageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom package created in post 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0730deda-5995-48d7-8414-ab64768eb876",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "347c1ba1-3e2c-4eaa-8c61-f9d02c56af03",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-valid1}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						},
						{
							"name": "Delete custom package created in post 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a3c4875-a917-4de2-a8d7-a7a34c198254",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7bb64ddd-627a-4fe2-bc70-a0a1539069b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						},
						{
							"name": "Deselect partially selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f8a5938-c200-4201-9ccb-5f659d28463b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Test that data.attributes has expected attributes",
											"pm.test(\"titles in package were deselected\", function() {",
											"    pm.expect(response.data.attributes.selectedCount).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ee1a329a-adee-48a3-a6e8-ba1083968e62",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{partially-selected-package-id}}\",\r\n    \"type\": \"packages\",\r\n    \"attributes\": {\r\n      \"isCustom\": false,\r\n      \"isSelected\": false\r\n\t}\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{partially-selected-package-id}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e008ce95-9a84-4713-a0e6-c313dd62b0c5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e23bec6-156c-4783-a8dd-e026f2bea9a8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down titles test",
					"item": [
						{
							"name": "Delete Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3371652-5e06-4b0c-877d-3c60d6e34fa3",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcb9eeb4-c599-4150-8e0e-22b87c4e565a",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}"
									]
								},
								"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
							},
							"response": []
						}
					],
					"description": "Deletes newly created custom package which is used for custom titles testing. Deleting a custom package deletes all custom titles that are contained within the package ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "91677a27-dea7-44cc-8db0-d9bf0291c0d6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e569580c-8e61-40f9-8314-3ff79e046feb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down permission",
					"item": [
						{
							"name": "Delete permission if it was added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e402ae09-63ff-42a0-99d7-81d66bb2858a",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(!pm.variables.get(\"permissionExists\")) {",
											"    jsonData.permissions = jsonData.permissions.filter(permission => (permission !== \"kb-ebsco.all\"));",
											"",
											"    const permissionsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"X-Okapi-Token\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/json',",
											"        raw: JSON.stringify(jsonData)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"        pm.expect(res).to.have.property('status', 'OK');",
											"      });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d5dfe9c-83f7-402b-b3df-56ec7dd265be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down access-type test",
					"item": [
						{
							"name": "DELETE second access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae8c568a-2be6-49c4-8960-883c94d59715",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE third access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1578aa18-60b3-4ab7-a810-20715fa67df7",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id3}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE fourth access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b92c885f-6b9a-4e0e-b6ff-5862c0515a0d",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id4}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id4}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down assign-user",
					"item": [
						{
							"name": "DELETE unassign user2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "912dd5ad-f950-4460-b7df-56eddf57e54a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c34f3b4-d586-4873-a021-42e16be6c662",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users",
										"{{assigned-user-id2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down user credentials",
					"item": [
						{
							"name": "unassign permission to user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "52c47a90-4df8-49c1-a501-405a1e1ec23e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "350abfdf-1396-457a-a7db-aa94aa12f775",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{kb-cred-perm-assigned-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{kb-cred-perm-assigned-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "user credentials permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "798d3cf0-edb0-4e71-8ca4-761ebc659fe5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c41b1bce-ea00-4e4f-9e8d-bf576740e0b0",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{kb-cred-perm-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions",
										"{{kb-cred-perm-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9838002c-0d37-4350-ad99-1c7bfbe1027d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8aff12ac-6826-4345-8c5d-2f8a53e17642",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?userId={{cred-user-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{cred-user-id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0914d208-74bc-42ea-94cb-8a8918a81301",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccf4f593-d173-46ba-aefd-1b144059df60",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{cred-user-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users",
										"{{cred-user-id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down kb-credentials test",
					"item": [
						{
							"name": "DELETE missing credentials 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbe19abe-9bfc-4043-9af0-784307058ba0",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE missing credentials 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43c9d79a-f543-40ad-9a58-22b39868428f",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c43876f2-6a22-437b-8991-b578ded8e501",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e8f6beba-ff9a-4fc4-9a21-3fb80b897cdd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "905e7584-62ad-473a-aac1-b0a455395b69",
			"key": "custid",
			"value": "apidvgvmt",
			"type": "string"
		},
		{
			"id": "a89a44b7-aaab-4b31-a59a-4d9bbbe04112",
			"key": "packageId",
			"value": "583-4345",
			"type": "string"
		},
		{
			"id": "6638e53f-b69a-4033-9f8f-ba5667e86cf3",
			"key": "rmapi_api_key",
			"value": "",
			"type": "string"
		},
		{
			"id": "292ac531-b36e-4dee-9073-4a8ea836ca21",
			"key": "rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		},
		{
			"id": "8549c616-bc84-4ba4-bf6a-28fac06670de",
			"key": "default_rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}