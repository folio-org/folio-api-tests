{
	"info": {
		"_postman_id": "3e1015cb-c1f4-44ae-a7d9-e119e80d33f4",
		"name": "mod-quick-marc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "073763d8-a4ac-4c50-9c70-bbe2da318b8b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f266dbc3-764d-43fa-ad7b-fc9b553b0f46",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c23615f-393b-495f-9db8-09e2e658269e",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0dde7df7-c6d0-4bcf-93a5-bbda0a395799",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-quick-marc\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "719e3ce7-4d7a-44ea-bd89-3b9569ccaa26",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc118642-df63-4868-933e-765222efb6a7",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3b52fe9-7d43-4f61-8a77-10340c950c3f",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88e8a630-ef55-4ef4-b641-90a53c6efe70",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "338e578c-c7e7-491e-a294-586b54ec102f",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "309cd31b-3805-422b-906e-70e6282fd3c9",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3814c2a3-6572-4277-9ac3-deb68cbbd397",
										"exec": [
											"eval(globals.loadUtils).sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35a667b6-4e4d-422f-adcc-5fab290e0b2a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3f3c789-e698-4d97-9129-00f778014147",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"mod-authtoken is enabled\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc6b5c55-f598-42fa-9dbf-cfa67f3080b2",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "896572c4-e637-4ea9-b9ba-a0f21fd4a829",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b0330709-07fb-409f-9545-03b91dae102a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5be1af88-3e02-4f9d-b6a1-85a96091916d",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "753ef43f-50a1-41a0-9f89-615fa08f3ba6",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61ed4af1-45ff-4307-98b6-4681d0e70cee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Define permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61e093bd-3fdf-4df7-ab9b-8b363cc2ddd9",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2694049c-5377-44cc-a89f-8168a551d31e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a83939b7-b83f-4948-9ca3-f92d2a6cbced",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "729e2739-192d-41b9-bacd-a26a2e1efc5a",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9873b7bc-9a30-4cf6-b514-b5461e20d70b",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modQuickMarcId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd51d339-098b-4107-8de1-e1894b03c433",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-quick-marc';\r",
											"\r",
											"pm.sendRequest(utils.buildOkapiUrl('/_/proxy/tenants/' + pm.variables.get(\"testTenant\") + '/modules?provides=jsonSchemas'), (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function () {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"        console.log(\"Module id: \" + moduleId);\r",
											"    \tpm.variables.set(\"modQuickMarcId\", moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modQuickMarcId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22f281ae-904b-4d25-860f-e21beb740c06",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b045966-6a85-4f09-b9bc-2b4d078b31f1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare SRS record",
					"item": [
						{
							"name": "Create snapshot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "71c9315c-7641-447e-ae98-772f9407beeb",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set('srsSnapshotId', uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a81ca4aa-153d-4dab-acd4-2175d4870bad",
										"exec": [
											"pm.test(\"Snapshot creation status\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.have.jsonBody(\"jobExecutionId\", pm.variables.get('srsSnapshotId'));",
											"",
											"    // Set the fromDate param value as current time",
											"    storeFromDate();",
											"});",
											"",
											"function storeFromDate() {",
											"    // Set the fromDate param value as current time",
											"    let moment = require('moment');",
											"    let metadata = pm.response.json().metadata;",
											"    // Get time from metadata to work with server time",
											"    let currentDateTime = metadata ? moment(metadata.createdDate) : moment();",
											"    pm.environment.set(\"fromDate\", currentDateTime.utc().subtract(1, 'seconds').format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));",
											"    console.log(\"From date: \" + pm.environment.get(\"fromDate\"));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jobExecutionId\": \"{{srsSnapshotId}}\",\n  \"status\": \"PARSING_IN_PROGRESS\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/snapshots",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"snapshots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d2f5042-fc13-4fc6-9c7d-347c90134647",
										"exec": [
											"pm.test(\"Record created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let recordId = pm.response.json().id;",
											"    let instanceId = pm.response.json().externalIdsHolder.instanceId;",
											"    pm.expect(recordId, \"The record id is missing but required for API test\").to.not.be.empty;",
											"    let metadata = pm.response.json().metadata;",
											"    pm.expect(metadata, \"The metadata is empty but required for API test\").to.not.be.empty;",
											"    // Remember created record id",
											"    pm.variables.set(\"recordId\", recordId);",
											"    pm.variables.set(\"instanceId\", instanceId);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a219351e-9923-4356-8c32-9ff7b4215058",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"marcRecordsResourceUrl\"), (err, res) => {",
											"    let parsedRecords  = res.json();",
											"    let parsedRecord = parsedRecords[0];",
											"    console.log(parsedRecord);",
											"    ",
											"    pm.variables.set(\"parsedRecordContent\", JSON.stringify(parsedRecord));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"snapshotId\": \"{{srsSnapshotId}}\",\r\n  \"matchedId\": \"{{$guid}}\",\r\n  \"recordType\": \"MARC\",\r\n  \"rawRecord\": {\r\n    \"content\": \"marc data goes here\"\r\n  },\r\n  \"externalIdsHolder\": {\r\n     \"instanceId\": \"24db5e55-478e-4da1-85b5-3e4ab41987eb\"\r\n  },\r\n  \"parsedRecord\": {\r\n    \"content\": {{parsedRecordContent}}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/records",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check created record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed7a3aca-3087-4a9a-8af8-7676cb7bd3bf",
										"exec": [
											"pm.test(\"Records result status\", function () {",
											"    pm.response.to.be.ok;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/sourceRecords?query=recordType=MARC and metadata.createdDate>{{fromDate}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"sourceRecords"
									],
									"query": [
										{
											"key": "query",
											"value": "recordType=MARC and metadata.createdDate>{{fromDate}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce373c55-6526-411c-ad77-8fa8bf5ddef1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35868e44-c454-4cad-9ad9-5d801abc935a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Get record by instanceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e50e85d9-5cb7-41bd-b913-74c628bfc209",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"let record = {};",
									"",
									"pm.test(\"Record found\", function () {",
									"    pm.response.to.have.status(200);",
									"    record = pm.response.json();",
									"});",
									"",
									"pm.test(\"Record content is valid\", function() {",
									"    utils.validateQuickMarcJson(record);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c8cc8833-0ea6-4446-ac36-44dbdb274164",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records?instanceId={{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records"
							],
							"query": [
								{
									"key": "instanceId",
									"value": "{{instanceId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1280706f-8672-4435-ab80-38e9aedf5676",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "718dee65-931b-4387-8db6-22edcb8c89c6",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"007\")].content.SMD = \"a\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"007\")].content.Color = \"b\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date1 = \"2020\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date2 = \"2021\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"035\")].content = \"12345678\";",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId)",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record Leader and 008 fields match",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a2f6910-5520-4c11-beef-b1885d9abbbb",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "804621ce-c3ba-4e73-ba69-fcde31de5176",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    quickMarcJson.leader = \"02248ngm a2200433ab 4500\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.ELvl = \"a\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Desc = \"b\";",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "43b62ab4-9dcb-4f1f-94f4-469bcac50d22",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0c58c694-32e4-4e68-b20e-5c6685d3f7d1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Get record not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db640b8b-ca39-486c-966f-7c9969ca5aa9",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"let error = {};",
									"",
									"pm.test(\"Record not found\", function () {",
									"    pm.response.to.have.status(404);",
									"    error = pm.response.json();",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ce8a1a01-6bd0-4015-bf99-f7a0f6e2bf4d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records?instanceId=445c41b1-5f0f-4bea-856b-b6459f97949c",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records"
							],
							"query": [
								{
									"key": "instanceId",
									"value": "445c41b1-5f0f-4bea-856b-b6459f97949c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get record bad instanceId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69eae561-6227-4d3c-99c0-a2dba7c9c63e",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Record instanceId is incorrect\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e7012a5-65b0-44c4-9d7c-d73389565d89",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records?instanceId=000-111",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records"
							],
							"query": [
								{
									"key": "instanceId",
									"value": "000-111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record wrong fixed field length",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfedd58f-dde4-4ec4-bdc6-73a2e72a8191",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "344f11b0-3eb1-48a4-b39d-b8107e99f26d",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date1 = \"20201\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Date2 = \"20211\";",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record wrong Leader and 008 mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1115145-b632-4195-8e1a-922ad36af12f",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "12aaa7d7-9e4b-43f8-85f7-a1b31e69cfb1",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.ELvl = \"a\";",
									"    quickMarcJson.fields[quickMarcJson.fields.findIndex(field => field.tag === \"008\")].content.Desc = \"b\";",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record Id mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90465fdb-88b5-4215-89a8-f0f161314682",
								"exec": [
									"let error = {};",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    error = pm.response.json();",
									"});",
									"",
									"pm.test(\"Got expected error message\", function() {",
									"    pm.expect(error.code).to.eql(\"HTTP_BAD_REQUEST\");",
									"    pm.expect(error.message).to.eql(\"request id and entity id are not equal\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b16cb59e-f022-4f7a-a4f5-8970a595fcfa",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordDtoId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record missing property",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "588f168c-4d72-499a-b8ba-29f1537db9d3",
								"exec": [
									"let error = {};",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    error = pm.response.json().errors[0];",
									"});",
									"",
									"pm.test(\"Got expected error message\", function() {",
									"    pm.expect(error.message).to.eql(\"may not be null\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8b5bc3ac-7e44-4b01-942f-54daa45f14c0",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"utils.sendGetRequest(\"/records-editor/records?instanceId=\" + pm.variables.get(\"instanceId\"), (err, res) => {",
									"    let quickMarcJson = res.json();",
									"    delete quickMarcJson.instanceId;",
									"    pm.environment.set(\"quickMarcJsonId\", quickMarcJson.parsedRecordId);",
									"    pm.environment.set(\"modifiedQuickMarcJsonBody\", JSON.stringify(quickMarcJson));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modifiedQuickMarcJsonBody}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/{{quickMarcJsonId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"{{quickMarcJsonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit record bad UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06131a4a-f286-4960-b2ba-6637ac8ac77d",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "59a85442-7b9c-4643-b096-44f9584cd428",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/records-editor/records/1234-5678",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"records-editor",
								"records",
								"1234-5678"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Cleanup test tenant",
					"item": [
						{
							"name": "Purge and disable all module for created tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5d7737f-55a7-48d0-b1dc-b54c76a0ce0e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
											"    pm.test(\"Preparing request to disable modules\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res.code).to.equal(200);",
											"        let modulesToDisable = res.json();",
											"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"",
											"        console.log(modulesToDisable);",
											"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9900054c-8751-4073-b852-ded3a52c4fc6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Disable all modules for test tenant\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToDisable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									],
									"query": [
										{
											"key": "purge",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68c077a8-2de4-45a5-b7ce-b67968cc76b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2cb8100-464d-4b5e-be17-ceb48670f768",
										"exec": [
											"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Remove all created variables",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c82caf01-5220-416b-a20f-65aa2caa4da8",
				"type": "text/javascript",
				"exec": [
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", {",
					"    // User templates with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-quick-marc-admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Tenant\",",
					"                    \"lastName\": \"Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-quick-marc-admin-user\",",
					"                \"password\": \"mod-quick-marc-admin-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-quick-marc-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"mod-quick-marc\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-quick-marc-user\",",
					"                \"password\": \"mod-quick-marc-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"records-editor.all\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test quickMARC tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"schemas_\";",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res).to.be.ok;",
					"                let modulesArr = res.json();",
					"                pm.expect(modulesArr).to.have.lengthOf.at.least(1);",
					"                bodyHandler(modulesArr[modulesArr.length - 1].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"testData\");",
					"",
					"        pm.environment.unset(\"instanceId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"recordId\");",
					"        pm.environment.unset(\"fromDate\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils.validateQuickMarcJson = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"quick_marc_json.json\")));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"    ",
					"        /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7eef62de-993f-42cd-a120-addc785aa0be",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "171a3a9a-25f2-4484-9d11-056b54c2922f",
			"key": "marcRecordsResourceUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-source-record-storage/master/mod-source-record-storage-server/src/main/resources/sampledata/sampleMarcRecords.json",
			"type": "string"
		},
		{
			"id": "4c969d95-d454-4f6d-be41-c0b8378d187d",
			"key": "testTenant",
			"value": "quick_marc_api_tests",
			"type": "string"
		},
		{
			"id": "d75a5bd6-39ce-49b1-acfb-d40f0cca3d82",
			"key": "moduleName",
			"value": "mod-quick-marc",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}