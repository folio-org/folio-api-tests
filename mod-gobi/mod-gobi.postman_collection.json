{
	"info": {
		"_postman_id": "0173e239-91cb-4d91-9386-0b3437cbc170",
		"name": "mod-gobi",
		"description": "Tests for mod-gobi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Setup",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "/authn/login (OKAPI)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ae86997-5a37-4acf-9c37-1a431c0c75da",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let tenant = pm.environment.get(\"xokapitenant\");",
											"let token = postman.getResponseHeader(\"x-okapi-token\");",
											"pm.environment.set(\"xokapitoken\", token);",
											"pm.environment.set(\"xokapitokenAdmin\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d75a59b9-367d-4055-86c6-0b6c1cf9b86c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "login as admin user, to create user with limited permissions, to delete created orders"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pre-requisite data",
					"item": [
						{
							"name": "/organizations-storage/organizations  - POST GOBI Organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf46482a-5904-4297-a271-fa22d682771c",
										"exec": [
											"pm.test(\"Vendor was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.globals.set(\"vendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"GOBI Library Systems\",\n  \"code\": \"GOBI\", \n  \"status\": \"Active\",\n  \"language\": \"en-us\",\n  \"isVendor\": true\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								},
								"description": "Create a new Organization with name GOBI, which is a vendor"
							},
							"response": []
						},
						{
							"name": "Get or create Contributor name type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET Contributor Name types response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.contributorNameTypes.length == 1) {",
											"        useAlreadyExistingType(jsonData.contributorNameTypes[0]);",
											"    } else {",
											"        createNewType();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(existingType) {",
											"    pm.test(\"Contributor Name Type already exists\", function () {",
											"        pm.expect(existingType.id).to.exist;",
											"        setIdAsGlobalVariable(existingType.id);",
											"    });",
											"}",
											"",
											"function createNewType() {",
											"    const nameType = {",
											"        \"id\": \"6d6f642d-0005-1111-aaaa-6f7264657273\",",
											"        \"name\": pm.variables.get(\"contributorNameType\")",
											"    };",
											"",
											"    eval(globals.loadUtils).sendPostRequest(\"/contributor-name-types\", nameType, (err, res) => {",
											"        pm.test(\"Contributor Name Type created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            setIdAsGlobalVariable(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function setIdAsGlobalVariable(id) {",
											"    pm.environment.set(\"contributorNameTypeId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											"pm.variables.set(\"contributorNameType\", \"GOBI API Tests type\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?query=name=={{contributorNameType}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"contributor-name-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name=={{contributorNameType}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test contributor name type. This is required if no reference data is available in inventory storage."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "create new user",
					"item": [
						{
							"name": "/user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a666e96-205a-4f75-ad7b-3a7a17add0b9",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"user record was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    ",
											"    // All is okay so running next tests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"akott\",\n\t\"id\": \"{{limitedPrivUserId}}\",\n\t\"personal\": {\n\t\t\"firstName\": \"Arnie\",\n\t\t\"lastName\": \"Kott\"\n\t},\n\t\"active\": true\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								},
								"description": "Create a user with privs restricted only to GOBI"
							},
							"response": []
						},
						{
							"name": "/authn/credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9ba7aa8-154a-4a65-b9f9-798b979d3649",
										"exec": [
											"pm.test(\"credentials record was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.globals.set(\"limitedPrivCredId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"akott\",\n\t\"userId\": \"{{limitedPrivUserId}}\",\n\t\"password\": \"{{limitedPrivPassword}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create a user with insufficient privs to negative testing"
							},
							"response": []
						},
						{
							"name": "/perms/users",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddd81f71-ec55-4957-a05e-79b37b9a0ee8",
										"exec": [
											"pm.test(\"credentials record was created. Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{limitedPrivPermId}}\",\n\t\"userId\": \"{{limitedPrivUserId}}\",\n\t\"permissions\": [\"gobi.item.post\"]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								},
								"description": "Create a user with insufficient privs to negative testing"
							},
							"response": []
						},
						{
							"name": "/authn/login (OKAPI) - GOBIPermUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99aa0e9b-1d64-41b9-811c-094b4b6d419f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let tenant = pm.environment.get(\"xokapitenant\");",
											"let token = postman.getResponseHeader(\"x-okapi-token\");",
											"pm.globals.set(\"limitedPrivXOkapiToken\", token);",
											"pm.environment.set(\"xokapitoken\", token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d75a59b9-367d-4055-86c6-0b6c1cf9b86c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"akott\",\"password\":\"{{limitedPrivPassword}}\"}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"description": "create a new user with limited permissions, and assign only \"gobi.item.post\" permissions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e6494a21-3507-4fc5-8b48-762ed5b19ee3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0155bf28-abed-4bba-8d84-ce6a107c871e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "/validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6566d89-e8ea-4fca-a388-d40938eb27f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/validate POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6566d89-e8ea-4fca-a388-d40938eb27f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed print monograph)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07624dc-c22d-4952-8d93-b85401f7458c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d36fe8-71fe-4b6b-9f1e-32cef766ef90",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"let jsonData = xml2Json(responseBody);",
									"let polNumber;",
									"let poNumber;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"    pm.globals.set(\"duplicatePOLineNumber\", polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "create duplicate /gobi/orders listed print monograph",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07624dc-c22d-4952-8d93-b85401f7458c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d36fe8-71fe-4b6b-9f1e-32cef766ef90",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"let jsonData = xml2Json(responseBody);",
									"let polNumber;",
									"let poNumber;",
									"let existingPolNumber = pm.globals.get(\"duplicatePOLineNumber\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"An existing PoLineNumber is returned\", function() {",
									"    polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"    pm.expect(polNumber).to.equal(existingPolNumber);",
									"});",
									"",
									"",
									"pm.test(\"cleanup Created Order\", function() {",
									"    utils.getAndDeleteOrder(polNumber);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						},
						"description": "validating a case where creating a duplicate Order with same YBPOrderNumber, must not create a new Order, but must return the existing Order"
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed electronic monograph)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba67fd6b-2941-4f3d-a167-c4154a58e13d",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdb8eea7-15e1-4b4e-921b-b645972bffe5",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let polNumber;",
									"let poNumber;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"     polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"cleanup Created Order\", function() {",
									"    utils.getAndDeleteOrder(polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed print serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "97bf73f4-bcfb-4f68-8b67-c65ffc12120c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_serial\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ce0cff0-60aa-4941-b876-854cc9456c97",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let polNumber;",
									"let poNumber;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});",
									"",
									"pm.test(\"cleanup Created Order\", function() {",
									"    utils.getAndDeleteOrder(polNumber);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed electronic serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4951c45a-52cc-47b3-b1d0-d5267dd1c1b2",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_serial\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb8d424d-e53e-46a0-bc72-75d5aabcdd65",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let polNumber;",
									"let poNumber;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"cleanup Created Order\", function() {",
									"    utils.getAndDeleteOrder(polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (unlisted print monograph)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4d0c278-0d94-4672-a0ff-404ec22de58e",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_unlisted_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_unlisted_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3a5cc5c1-f90f-4a64-90d7-b6e9b7e6dd98",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let polNumber;",
									"let poNumber;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"cleanup Created Order\", function() {",
									"    utils.getAndDeleteOrder(polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_unlisted_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (unlisted print serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad293aeb-90c0-4785-ba61-05f0f2b81556",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_unlisted_print_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_unlisted_print_serial\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad69215a-c9b8-49b5-8f40-bdbcff98c8ea",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let polNumber;",
									"let poNumber;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"cleanup Created Order\", function() {",
									"    utils.getAndDeleteOrder(polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_unlisted_print_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "/authn/login (OKAPI) -No User Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99aa0e9b-1d64-41b9-811c-094b4b6d419f",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = postman.getResponseHeader(\"x-okapi-token\");",
									"pm.environment.set(\"xokapitoken\", token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d75a59b9-367d-4055-86c6-0b6c1cf9b86c",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"        ",
									"let removePermsBody = {",
									"\t\"id\": pm.variables.get(\"limitedPrivPermId\"),",
									"\t\"userId\": pm.variables.get(\"limitedPrivUserId\"),",
									"\t\"permissions\": []",
									"};",
									"utils.sendPutRequest(\"/perms/users/\"+pm.variables.get(\"limitedPrivPermId\"), removePermsBody, function(err,res){",
									"    pm.test(\"GOBI Permissions are removed\",function(){",
									"        pm.expect(res).to.have.property('code', 200);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"akott\",\"password\":\"{{limitedPrivPassword}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "Remove the GOBI permissions for the user and re login"
					},
					"response": []
				},
				{
					"name": "/validate - user with no permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4173f87a-ccce-4068-9df5-56e1b067aa28",
								"exec": [
									"pm.test(\"Passing in a token that's associated with a user who doesn't have permission\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.text()).to.equal(\"Access requires permission: gobi.item.post\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c43b37e9-f824-4875-8ca3-9a0d7a79ec64",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/validate - with no Okapi token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbb18ac2-ef0d-4155-b224-f05522eab603",
								"exec": [
									"pm.test(\"Calling gobi/validate without a token\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.text()).to.equal(\"Access requires permission: gobi.item.post\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders - with no Okapi token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81ca7881-c4c6-4c35-8d27-009082f8a66a",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "745213f3-d4b6-41bc-8fcc-41e67da9981f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Calling gobi/orders without a token\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.text()).to.equal(\"Access requires permission: gobi.item.post\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders - user with no permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4173f87a-ccce-4068-9df5-56e1b067aa28",
								"exec": [
									"pm.test(\"Passing in a token that's associated with a user who doesn't have permission\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.environment.set(\"xokapitoken\", pm.environment.get(\"xokapitokenAdmin\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b92b6f80-4b2a-4c45-934d-a44f741eb324",
								"exec": [
									"",
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						},
						"description": "verify user cannot perform POST without permissions.\nThe xokapitoken is reset to the admin token as it is needed for cleanup"
					},
					"response": []
				},
				{
					"name": "/gobi/orders (bad data)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac0fafac-c88b-45ac-9664-3deaf5a5b3b4",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_monograph_bad_data.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_monograph_bad_data\", res.text());     ",
									"    }",
									");",
									"        "
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6dfc9c54-13d6-4415-9c5a-fd3209c02b5c",
								"type": "text/javascript",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"Error XML is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('Error');",
									"    pm.expect(jsonData.Response.Error).to.have.property('Code', 'INVALID_XML');",
									"    pm.expect(jsonData.Response.Error).to.have.property('Message');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_monograph_bad_data}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tenant Configuration Tests",
			"item": [
				{
					"name": "/configurations/entries - Set Override Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a666e96-205a-4f75-ad7b-3a7a17add0b9",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"var jsonData = pm.response.json();",
									"let configBody = globals.configBody;",
									"",
									"let configs = [];",
									"pm.test(\"Storing current configs\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    configs = pm.response.json().configs;",
									"    console.log(\"Original configs: \" + configs);",
									"    pm.environment.set(\"mod-gobi-override-configs\", JSON.stringify(configs));",
									"});",
									"",
									"configBody.code = \"gobi.order.ListedElectronicSerial\";",
									"",
									"pm.sendRequest({",
									"        url: pm.variables.get(\"tenantOverrideConfigURL\"),",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"     pm.test(\"Check if custom mapping is found\", function(){",
									"        pm.expect(res).to.have.property('code', 200);",
									"         });",
									"    if(res.code == 200){",
									"        if(configs.length>0){",
									"            configs[0].value = res.text();",
									"            utils.updateConfig(configs[0]);",
									"        } else{",
									"            configBody.value = res.text();",
									"            utils.createConfig(configBody);",
									"        }",
									"        }",
									"    }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==GOBI AND configName==orderMappings AND code=gobi.order.ListedElectronicSerial",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "module==GOBI AND configName==orderMappings AND code=gobi.order.ListedElectronicSerial"
								}
							]
						},
						"description": "Create a new configuration for ListedElectronic serial. If a configuration already exists, store it to be reverted to later."
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed Electronic serial) with overrides",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07624dc-c22d-4952-8d93-b85401f7458c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_serial\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d36fe8-71fe-4b6b-9f1e-32cef766ef90",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"     pm.globals.set(\"po_listed_print_monograph_poLineNumber\", polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/order-lines- validate Override Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f98b70e-bbfb-43ab-8747-f332f36ad530",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"po_lines exist\", function () {",
									"    pm.expect(jsonData.poLines).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"purchase_order_id exist\", function () {",
									"    pm.expect(jsonData.poLines[0].purchaseOrderId).to.exist;",
									"      pm.globals.set(\"po_listed_print_monograph_purchaseid\", jsonData.poLines[0].purchaseOrderId);",
									"});",
									"",
									"pm.test(\"Override Values are set in Order\", function (){",
									"    pm.expect(jsonData.poLines[0].cancellationRestrictionNote).to.equal(\"Test Data\");",
									"    pm.expect(jsonData.poLines[0].donor).to.equal(\"Test Data\");",
									"    pm.expect(jsonData.poLines[0].poLineDescription).to.equal(\"Description from Custom Mapping\");",
									"    ",
									"    ",
									"})",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=999&query=poLineNumber={{po_listed_print_monograph_poLineNumber}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines"
							],
							"query": [
								{
									"key": "limit",
									"value": "999"
								},
								{
									"key": "query",
									"value": "poLineNumber={{po_listed_print_monograph_poLineNumber}}"
								}
							]
						},
						"description": "Query for the created Order and validate that the values from the Custom Tenant Overrides are used in the Order"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete created Vendor from Organizations API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffb3bd27-ba00-40e0-90ac-7a1558cf2552",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d4319f2-d27b-4c84-b26e-d6480ed7e508",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations/{{vendorId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"organizations-storage",
								"organizations",
								"{{vendorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete contributor name type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Contributor name type deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a817d5db-abfb-454c-972f-cbdb12256d7d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /user/<userId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "64352879-ad3e-44db-9612-2ef653c484e9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{limitedPrivUserId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"{{limitedPrivUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64073c7d-6f22-4ca9-8ffa-210269d652ee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /perms/users/<permId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{limitedPrivPermId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{limitedPrivPermId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/authn/credentials/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e417c8bd-cda7-4722-9e4f-9402ee8b56e6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /authn/credentials/<credId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "64352879-ad3e-44db-9612-2ef653c484e9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{limitedPrivCredId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"credentials",
								"{{limitedPrivCredId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order with overrides",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffb3bd27-ba00-40e0-90ac-7a1558cf2552",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d4319f2-d27b-4c84-b26e-d6480ed7e508",
								"exec": [
									"pm.test(\"DELETE orders returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{po_listed_print_monograph_purchaseid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{po_listed_print_monograph_purchaseid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/configuration- Revert to Original Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a666e96-205a-4f75-ad7b-3a7a17add0b9",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"var jsonData = pm.response.json();",
									"",
									"let CurrentConfigs = [];",
									"pm.test(\"Storing current configs\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    CurrentConfigs = pm.response.json().configs;",
									"    console.log(\"Current configs: \" + CurrentConfigs);",
									"});",
									"",
									"let originalConfigs = pm.environment.get(\"mod-gobi-override-configs\") ? JSON.parse(pm.environment.get(\"mod-gobi-override-configs\")) : [];",
									"console.log(\"Original Configs: \"+originalConfigs[0]);",
									"",
									"if(originalConfigs.length>0){",
									"    utils.updateConfig(originalConfigs[0]);",
									"} else if(CurrentConfigs.length > 0 ){",
									"    utils.deleteConfig(CurrentConfigs[0].id);",
									"}",
									"",
									"utils.unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==GOBI AND configName==orderMappings AND code=gobi.order.ListedElectronicSerial",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "module==GOBI AND configName==orderMappings AND code=gobi.order.ListedElectronicSerial"
								}
							]
						},
						"description": "This request will revert to the original Configs that were present on the environment"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					"let configBody = {",
					"         \"module\": \"GOBI\",",
					"         \"configName\": \"orderMappings\",",
					"         \"code\": \"\",",
					"         \"description\": \"Order Mappings for types\",",
					"         \"default\": true,",
					"         \"enabled\": true,",
					"         \"value\": \"\"",
					"};",
					"",
					"pm.globals.set(\"configBody\", configBody);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"     let utils = {};",
					"     /**",
					"      * Get the Order by the returned PO Line Number and then delete it",
					"      * Using admin credentials for the operation",
					"      * */",
					"     utils.getAndDeleteOrder = function(polNumber) {",
					"        pm.sendRequest({",
					"          url: utils.buildOkapiURL(\"/orders/order-lines?limit=999&query=poLineNumber=\"+polNumber),",
					"          method: \"GET\",",
					"          header: {",
					"            'x-okapi-tenant': pm.environment.get('xokapitenant'),",
					"            'x-okapi-token': pm.environment.get('xokapitokenAdmin'),",
					"            'Content-Type': 'application/json'",
					"        }",
					"    },",
					"    function (err, res) {",
					"      pm.test(\"Test Purchase Order is created\", function(){",
					"        pm.expect(res).to.have.property('code', 200);",
					"        pm.expect(res.json().poLines, \"One PO Lineis expected\").to.have.lengthOf(1);",
					"",
					"        let poLine = res.json().poLines[0];",
					"        pm.expect(poLine.purchaseOrderId).to.exist;",
					"",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"          pm.test(\"Contributor presents\", function() {",
					"              poLine.contributors.forEach(contributor => {",
					"                pm.expect(contributor.contributor, \"Contributor name is expected\").to.not.be.empty;",
					"                pm.expect(contributor.contributorNameTypeId, \"Contributor name type is expected\").to.not.be.empty;",
					"              });",
					"          });",
					"        }",
					"      });",
					"       utils.deleteOrder(res.json().poLines[0].purchaseOrderId);",
					"     });",
					"    };",
					"     ",
					"    utils.deleteOrder = function(id){",
					"        utils.deleteByID(\"/orders/composite-orders/\"+id);",
					"    };",
					"    ",
					"    /**",
					"     * Delete the Composite Orders by Id. ",
					"     * Using admin credentials as the operation is on Orders",
					"     * */",
					"    utils.deleteByID = function(URL) {",
					"         pm.sendRequest({",
					"        url: utils.buildOkapiURL(URL),",
					"        method: \"DELETE\",",
					"        header: {",
					"            'x-okapi-tenant': pm.environment.get('xokapitenant'),",
					"            'x-okapi-token': pm.environment.get('xokapitokenAdmin'),",
					"            'Content-Type': 'application/json'",
					"        }",
					"    },",
					"    function (err, res) {",
					"      pm.test(\"Delete \"+ URL, function(){",
					"        pm.expect(err).to.equal(null);",
					"        pm.expect(res).to.have.property('code', 204);",
					"        pm.expect(res).to.have.property('status', 'No Content');",
					"       });",
					"     });",
					"    };",
					"    ",
					"    ",
					"    utils.createConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiURL(\"/configurations/entries\"),",
					"            method: \"POST\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitokenAdmin\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function (err, response) {",
					"            pm.test(\"Tenant Override Config created\", function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"    ",
					"    utils.buildOkapiURL = function(path){",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"    ",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        console.log(body);",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, function (err, response) {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"    ",
					"    utils.deleteConfig = function(id){",
					"        utils.deleteByID(\"/configurations/entries/\"+id);",
					"    };",
					"    ",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        let pmRq = {",
					"            url: utils.buildOkapiURL(path),",
					"            method: \"PUT\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitokenAdmin\"),",
					"                \"Content-type\": \"application/json\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        };",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends post request by specified path and handle result by handler",
					"     */",
					"    utils.sendPostRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method) {",
					"        return {",
					"            url: utils.buildOkapiURL(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitokenAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"            ",
					"        pm.globals.unset(\"limitedPrivXOkapiToken\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"po_listed_electronic_monograph\");",
					"        pm.globals.unset(\"po_listed_print_serial\");",
					"        pm.globals.unset(\"po_listed_electronic_serial\");",
					"        pm.globals.unset(\"po_unlisted_print_monograph\");",
					"        pm.globals.unset(\"po_unlisted_print_serial\");",
					"        pm.globals.unset(\"po_listed_electronic_monograph_bad_data\");",
					"        pm.globals.unset(\"po_listed_print_monograph_poLineNumber\");",
					"        pm.globals.unset(\"po_listed_print_monograph_purchaseid\");",
					"        pm.globals.unset(\"configBody\");",
					"        pm.globals.unset(\"vendorId\");",
					"        pm.globals.unset(\"limitedPrivCredId\");",
					"        pm.globals.unset(\"duplicatePOLineNumber\");",
					"        ",
					"        ",
					"        pm.environment.unset(\"xokapitokenAdmin\");",
					"    };",
					"     return utils;",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "1fd0aecc-307c-4178-a739-13d6b596eecb",
			"key": "testdataBaseURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-gobi/master/src/test/resources/GOBIIntegrationServiceResourceImpl/",
			"type": "string"
		},
		{
			"id": "eeaa194f-c3f3-48ab-964d-6d35f4e2178c",
			"key": "limitedPrivUserId",
			"value": "a4539309-1cb2-47c2-bfc4-4a2a0ed7a303",
			"type": "string"
		},
		{
			"id": "28a28667-3eb3-467d-9875-d96c8472f3b9",
			"key": "limitedPrivPassword",
			"value": "Manfred",
			"type": "string"
		},
		{
			"id": "e3f92914-7cce-4366-a908-66fe88f9746a",
			"key": "limitedPrivPermId",
			"value": "95501006-82a3-4368-ad72-bd7f2d7ec417",
			"type": "string"
		},
		{
			"id": "ca78472e-8fed-44b5-97c1-9201cc3c3ea3",
			"key": "tenantOverrideConfigURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-gobi/master/src/test/resources/MappingHelper/Custom_ListedElectronicSerial.json",
			"type": "string"
		}
	]
}