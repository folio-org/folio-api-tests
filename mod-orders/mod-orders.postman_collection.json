{
	"info": {
		"_postman_id": "121af5c9-ea22-47bd-baf8-0f8c296106e5",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Schema validation for composite_purchase_order",
			"item": [
				{
					"name": "composite_purchase_order.json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"pm.test(pm.variables.get(\"schema_composite_purchase_order\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_composite_purchase_order_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{schema_composite_purchase_order}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_composite_purchase_order}}"
							]
						},
						"description": "GET schema validation"
					},
					"response": []
				},
				{
					"name": "adjustment.json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"pm.test(pm.variables.get(\"schema_adjustment\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_adjustment_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_adjustment}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{module}}",
								"schemas",
								"{{schema_adjustment}}"
							]
						},
						"description": "GET schema validation"
					},
					"response": []
				},
				{
					"name": "composite_po_line.json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"pm.test(pm.variables.get(\"schema_composite_po_line\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_composite_po_line_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{schema_composite_po_line}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_composite_po_line}}"
							]
						},
						"description": "GET schema validation"
					},
					"response": []
				},
				{
					"name": "cost.json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"pm.test(pm.variables.get(\"schema_cost\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_cost_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_cost}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{module}}",
								"schemas",
								"{{schema_cost}}"
							]
						},
						"description": "GET schema validation"
					},
					"response": []
				},
				{
					"name": "details.json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"pm.test(pm.variables.get(\"schema_details\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_details_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_details}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{module}}",
								"schemas",
								"{{schema_details}}"
							]
						},
						"description": "GET schema validation"
					},
					"response": []
				},
				{
					"name": "location.json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"pm.test(pm.variables.get(\"schema_location\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_location_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_location}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{module}}",
								"schemas",
								"{{schema_location}}"
							]
						},
						"description": "GET schema validation"
					},
					"response": []
				},
				{
					"name": "physical.json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"pm.test(pm.variables.get(\"schema_physical\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_physical_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_physical}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{module}}",
								"schemas",
								"{{schema_physical}}"
							]
						},
						"description": "GET schema validation"
					},
					"response": []
				},
				{
					"name": "vendor_detail.json",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"pm.test(pm.variables.get(\"schema_vendor_detail\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_vendor_detail_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_vendor_detail}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{module}}",
								"schemas",
								"{{schema_vendor_detail}}"
							]
						},
						"description": "GET schema validation"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b589a48-d3fa-4985-85c4-8b7dcda638a9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b882afd4-d85f-4006-9746-08bea97bbdf5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "GET /_/proxy/modules - mod-orders is deployed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"modules exist\", function () {",
									"    pm.expect(jsonData).to.have.length > 1;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							]
						},
						"description": "GET /_/proxy/modules requests that returns 200"
					},
					"response": []
				},
				{
					"name": "GET /orders - get list of orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Multiple orders exist\", function () {",
									"    pm.expect(jsonData.composite_purchase_orders).to.have.length > 1;",
									"});",
									"",
									"pm.test(\"Each order has required fields\", function(){",
									"    pm.expect(jsonData.composite_purchase_orders[0].id).to.exist;",
									"    pm.expect(jsonData.composite_purchase_orders[0].notes).to.exist;",
									"    pm.expect(jsonData.composite_purchase_orders[0].po_number).to.exist;",
									"    pm.expect(jsonData.composite_purchase_orders[0].po_lines).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders"
							]
						},
						"description": "GET /orders/ requests that returns 200"
					},
					"response": []
				},
				{
					"name": "POST /orders - create empty order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Empty list of notes exist\", function () {",
									"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
									"});",
									"",
									"pm.test(\"Each order has required fields\", function(){",
									"    pm.expect(jsonData.id).to.exist;",
									"      pm.globals.set(\"empty_order_id\", jsonData.id); ",
									"    pm.expect(jsonData.notes).to.exist;",
									"    pm.expect(jsonData.po_number).to.exist;",
									"    pm.expect(jsonData.po_lines).to.exist;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders"
							]
						},
						"description": "GET /orders/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "POST /orders - create complete order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.environment.set(\"order_id\", jsonData.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"po_lines exist\", function () {",
									"    pm.expect(jsonData.po_lines).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"Each order has these optional fields\", function(){",
									"    pm.expect(jsonData.id).to.exist;",
									"    pm.globals.set(\"complete_order_id\", jsonData.id); ",
									"    pm.expect(jsonData.approved).to.exist;",
									"    pm.expect(jsonData.po_number).to.exist;",
									"    pm.expect(jsonData.notes).to.exist;",
									"    pm.expect(jsonData.total_items).to.exist;",
									"    pm.expect(jsonData.vendor).to.exist;",
									"    pm.expect(jsonData.po_lines).to.exist;",
									"    pm.globals.set(\"complete_poline_id\", jsonData.po_lines[0].id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /orders/id - get orders by order id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Multiple notes exist\", function () {",
									"    pm.expect(jsonData.notes).to.have.length >= 1;",
									"});",
									"",
									"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
									"     //Create and add schemas for validation",
									"     //https://github.com/folio-org/acq-models/blob/master/composite_purchase_order.json",
									"    tv4.addSchema(\"mod-orders-storage/schemas/adjustment.json\", JSON.parse(pm.environment.get(\"schema_adjustment_content\")));",
									"    tv4.addSchema(\"composite_purchase_order.json\", JSON.parse(pm.environment.get(\"schema_composite_purchase_order_content\")));",
									"    tv4.addSchema(\"composite_po_line.json\", JSON.parse(pm.environment.get(\"schema_composite_po_line_content\")));",
									"    tv4.addSchema(\"mod-orders-storage/schemas/cost.json\", JSON.parse(pm.environment.get(\"schema_cost_content\")));",
									"    tv4.addSchema(\"mod-orders-storage/schemas/details.json\", JSON.parse(pm.environment.get(\"schema_details_content\")));",
									"    tv4.addSchema(\"mod-orders-storage/schemas/location.json\", JSON.parse(pm.environment.get(\"schema_location_content\")));",
									"    tv4.addSchema(\"mod-orders-storage/schemas/physical.json\", JSON.parse(pm.environment.get(\"schema_physical_content\")));",
									"    tv4.addSchema(\"mod-orders-storage/schemas/vendor_detail.json\", JSON.parse(pm.environment.get(\"schema_vendor_detail_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_composite_purchase_order_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    //make sure no schemas are missing",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{order_id}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "/orders/id - bad ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
								"exec": [
									"pm.test(\"Status code is 404 - resource does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error string in response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fb40b2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/fb40b2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"fb40b2"
							]
						},
						"description": "GET /orders/id requests that returns 404"
					},
					"response": []
				},
				{
					"name": "/orders/{{order_id}} - valid token, invalid tenant - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ea0cb79-8f57-490d-b2a9-c368ac95914a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "fs12345678"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{order_id}}"
							]
						},
						"description": "GET /orders/id requests that return 400"
					},
					"response": []
				},
				{
					"name": "/orders/{{order_id}} - valid token, missing tenant - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "63145320-5160-4511-b040-bd72005f8468",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{order_id}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "/orders/{{order_id}} - invalid token - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e41e5c9e-c396-4f1e-81ff-10b79f737233",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{order_id}}"
							]
						},
						"description": "GET /orders/id request that return 401"
					},
					"response": []
				},
				{
					"name": "/orders/id - invalid order ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c51240b-34ce-4a8b-9db1-a1150320f0fe",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{$guid}}"
							]
						},
						"description": "GET /orders/id requests that return 404"
					},
					"response": []
				},
				{
					"name": "/orders/ - empty order ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								""
							]
						},
						"description": "GET /orders/ requests that return 404"
					},
					"response": []
				}
			]
		},
		{
			"name": "cleanup",
			"item": [
				{
					"name": "DELETE /orders/id - delete complete order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{complete_order_id}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "DELETE /orders/id - delete empty order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{empty_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{empty_order_id}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "DELETE /orders/id - delete non-existent order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"//should this be 404?",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"{{$guid}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "/po_line - verify delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/po_line/{{complete_poline_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"po_line",
								"{{complete_poline_id}}"
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "/purchse_order - verify delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/purchase_order/{{complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"purchase_order",
								"{{complete_order_id}}"
							]
						},
						"description": "GET /purchase_order returns a 404 after delete"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4ceb92dd-df9c-40a2-8d54-a6c595439992",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "6055da93-6880-48de-a0d9-b7eb56de521e",
			"key": "schema_composite_purchase_order",
			"value": "composite_purchase_order.json",
			"type": "string"
		},
		{
			"id": "568e4f64-6afb-40e4-82bd-5d11841a627d",
			"key": "schema_adjustment",
			"value": "adjustment.json",
			"type": "string"
		},
		{
			"id": "cf6dda24-bc4d-4b90-b66d-7990119de6ce",
			"key": "schema_composite_po_line",
			"value": "composite_po_line.json",
			"type": "string"
		},
		{
			"id": "201a71da-e549-4bc7-a1ab-6488860cfe4c",
			"key": "schema_cost",
			"value": "cost.json",
			"type": "string"
		},
		{
			"id": "54f35ccc-231b-4c26-8481-4e0c28ce4b7a",
			"key": "schema_details",
			"value": "details.json",
			"type": "string"
		},
		{
			"id": "09335df3-adc3-4464-9430-e13691140b1a",
			"key": "schema_location",
			"value": "location.json",
			"type": "string"
		},
		{
			"id": "3b8a550e-4d11-4896-913c-f12056e491e7",
			"key": "schema_physical",
			"value": "physical.json",
			"type": "string"
		},
		{
			"id": "0e121f3b-d145-4101-8db0-b1b870750a50",
			"key": "schema_vendor_detail",
			"value": "vendor_detail.json",
			"type": "string"
		},
		{
			"id": "b11aa64a-f5fe-493a-830b-1211b3381089",
			"key": "module",
			"value": "mod-orders-storage",
			"type": "string"
		},
		{
			"id": "23551492-e406-462c-a2e3-2bdd17fde6a4",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org/acq-models/master",
			"type": "string"
		}
	]
}