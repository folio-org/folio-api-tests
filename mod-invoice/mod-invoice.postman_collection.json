{
	"info": {
		"_postman_id": "dd0f5c9a-ac91-410a-af17-44a50136cd91",
		"name": "mod-invoice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a5689a4-0f6a-400b-b764-d641b787f474",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e00c2a8d-1978-4073-a5e0-112b93dd7a9d",
										"exec": [
											"pm.test(\"Preparing request to create test tenant. Tenant creation might take up to 1 minute...\", () => {",
											"    pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0141abca-c40b-4ada-8b3f-8c81f8f31471",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - created (201) or already exists (400 with Duplicate tenant id error)\", () => {",
											"    pm.expect(pm.response.code).be.oneOf([201, 400]);",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response.text()).to.include(\"Duplicate tenant id\");",
											"        purgeMudulesData();",
											"    } else {",
											"        // All is okay, running further requests",
											"        postman.setNextRequest();",
											"    }",
											"});",
											"",
											"function purgeMudulesData() {",
											"    let utils = eval(globals.loadUtils);",
											"    let tenantBaseUrl = utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\"));",
											"    pm.sendRequest(tenantBaseUrl + \"/modules\", (err, res) => {",
											"        let modulesToDisable = null;",
											"        pm.test(\"Preparing request to disable modules if any installed before...\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res.code).to.equal(200);",
											"",
											"            modulesToDisable = res.json();",
											"            modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"            console.log(modulesToDisable);",
											"        });",
											"",
											"        if (modulesToDisable !== null) {",
											"            // In case the response indicates that there are some modules are already installed, their data have to be purged first",
											"            if (modulesToDisable.length > 0) {",
											"                pm.sendRequest({",
											"                    url: tenantBaseUrl + \"/install?purge=true\",",
											"                    method: \"POST\",",
											"                    header: {",
											"                        \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\"),",
											"                        \"Content-type\": \"application/json\"",
											"                    },",
											"                    body: JSON.stringify(modulesToDisable)",
											"                }, (error, response) => {",
											"                    pm.test(\"Purging the data for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                        pm.expect(error).to.equal(null);",
											"                        pm.expect(response).to.be.ok;",
											"                        // All the data have been purged. Now wait for a minute and run next request",
											"                        setTimeout(() => postman.setNextRequest(), 61000);",
											"                    });",
											"                });",
											"            } else {",
											"                pm.test(\"No modules to purge for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                    // Run next request",
											"                    postman.setNextRequest();",
											"                });",
											"            }",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9760620d-a706-4026-9b77-382804245418",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-invoice\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f9ea3255-3288-4d2d-a382-ec35ce497500",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "240da821-8732-445b-ad3d-49f28014776a",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2dc3c23c-55b1-4ab0-9064-325d2be387b4",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "557b989f-ef48-45f2-a3ae-25c0ba5f0554",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a55db5b-ec5e-4d6c-8e12-3aa2d5d84512",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e2c5ac3-784e-41a2-9615-c7f857c4d2e5",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e4419e2b-3d55-4ae9-9ba5-59a55c4160e3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiUrl('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "17b3d95a-11c8-4c75-bfba-b861b7098eb1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "83e8dc32-1bff-4d36-ba3d-434274e92464",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cd9e9a4-b19f-4eeb-966d-36b02414d64f",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "03cc294a-0425-4ead-8618-95c79c31f130",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae1bc320-2085-4081-9b03-3ac29b851aed",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "05a74aed-ba73-47d5-b199-8fb2b201f771",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e7b893b-8e74-4811-9893-2e942f29757f",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff010bf5-b740-4ff5-a3a9-c73533b38e36",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add invoice permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09da233f-e984-40f9-96a1-c5725c2e85be",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f905c16-971b-4526-aba8-e59684c226aa",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "090c4937-3201-45ad-8050-40a53666b374",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6c7df31-a7dc-4c4f-b9d0-ad4675464e28",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check invoice configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c395422c-3b0f-45df-9ff0-dd7e7b667197",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.invoicesConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-invoices-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
											"}",
											"// Store current version of configs",
											"pm.environment.set(\"current-invoices-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c15381db-770f-49dc-915c-4050bd63f8f8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check orders configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "884c480f-e8d8-47fe-9651-858ac92270ee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.ordersConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c32cb28-d8ff-49c3-98a2-caba15d288e5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a842b195-2d0c-4aca-b901-5791acd0356e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "87da1497-ee1d-45e7-8edf-909cdb14da30",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7869d97e-1ebe-49ca-8ccf-408469027378",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modInvoiceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8955b9c3-51cd-4aa5-91a9-1835224fbae6",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-invoice';\r",
											"\r",
											"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"        pm.variables.set('modInvoiceId', moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modInvoiceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbcdda59-658f-44eb-81fd-5fcff556e769",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a927c48-3816-469d-babc-bb3dbb7ad9b3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare vendors",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1be4cf25-3a62-42cc-9f7e-a5d0a8b2b47e",
										"exec": [
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb3ae485-0a80-4256-b545-4241169bb5ee",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f2cd54f-2016-4332-aa9e-594bdb447807",
										"exec": [
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "417b1880-c63a-4935-8526-7743a89408e2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory data",
					"item": [
						{
							"name": "Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22b5376a-f02d-4305-b3cf-aa39dd937786",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"identifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5fef007-fe42-4929-b39c-13e9542895b1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-identifierTypeName}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ISBN Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80489963-9c69-4b8c-81cc-741c0121067f",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"isbnIdentifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fe9482f-8337-4719-aff3-f389b6fe72e2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
							},
							"response": []
						},
						{
							"name": "Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d23ce93-540b-414b-9623-329043e22d97",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "676faa83-d345-46b8-8d8d-ff1732fcc720",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceTypeCode}}\",\r\n  \"name\": \"{{inventory-instanceTypeCode}}\",\r\n  \"source\": \"apiTests\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed812f1f-c329-4373-878f-ce31002a8bea",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceStatusId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9308b05f-79d9-43b7-a593-8bbf1e6c2b5a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceStatusCode}}\",\r\n  \"name\": \"{{inventory-instanceStatusCode}}\",\r\n  \"source\": \"apiTests\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41ac6273-7e85-467d-aca4-b7e933074d10",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"materialTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56b5fa90-2d13-4061-893e-7cd69a5601cd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "FiscalYear",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5fcbb6f-6f62-4543-8835-1025c16ed6df",
										"exec": [
											"pm.test(\"Fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fiscYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "150f5d34-597b-4dbc-98b5-17b84af0d167",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"FY2019\",\n    \"name\": \"Test fiscal year\",\n    \"periodStart\": \"2019-01-01T00:00:00Z\",\n    \"periodEnd\": \"2025-12-30T23:59:59Z\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5843c53-bbf6-47e0-a593-f5645ae78515",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7705ad96-ffcf-451f-9407-802c497dd647",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\",\r\n\t\"fiscalYearOneId\": \"{{fiscYearId}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d90db752-b9b2-435b-bce3-3e407ced1bf3",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fundId\", pm.response.json().fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81c556b4-dc6f-4676-894e-c4a8a0d93570",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"code\": \"TST-FND\",\n        \"description\": \"Fund for orders API Tests\",\n        \"externalAccountNo\": \"1111111111111111111111111\",\n        \"fundStatus\": \"Active\",\n        \"ledgerId\": \"{{ledgerId}}\",\n        \"name\": \"Fund for orders API Tests\"\n    },\n    \"groupIds\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29e35306-f712-4f0f-8dc2-51afbeb6c416",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fund2Id\", pm.response.json().fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "676c4d6a-cc02-4382-b498-007981393aac",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"code\": \"TST2-FND\",\n        \"description\": \"2nd Fund for orders API Tests\",\n        \"externalAccountNo\": \"2222222222222222222222222\",\n        \"fundStatus\": \"Active\",\n        \"ledgerId\": \"{{ledgerId}}\",\n        \"name\": \"2nd Fund for orders API Tests\"\n    },\n    \"groupIds\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "781cbc9e-27df-4ef6-a469-3b35f6ebecda",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79e127b8-ff22-4ed4-913f-876e261c2843",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allocated\": \"1000000\",\n    \"budgetStatus\": \"Active\",\n    \"name\": \"Budget for invoice API tests\",\n    \"fundId\": \"{{fundId}}\",\n    \"fiscalYearId\": \"{{fiscYearId}}\",\n    \"allowableEncumbrance\": 100,\n    \"allowableExpenditure\": 100\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Budget-2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "190c4e07-be7a-499b-879d-ccc98f2f99a0",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budget2Id\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "230a0226-a22f-42a1-a471-3c52c1d7e2df",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allocated\": \"1000000\",\n    \"budgetStatus\": \"Active\",\n    \"name\": \"Budget 2 for invoice API tests\",\n    \"fundId\": \"{{fund2Id}}\",\n    \"fiscalYearId\": \"{{fiscYearId}}\",\n    \"allowableEncumbrance\": 100,\n    \"allowableExpenditure\": 100\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare orders",
					"item": [
						{
							"name": "Create Pending order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5f0f8222-10c7-432c-b4fb-22489cfc30bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    delete order.poNumber;",
											"    order.compositePoLines[0].paymentStatus = \"Awaiting Payment\";",
											"    order.compositePoLines[1].paymentStatus = \"Awaiting Payment\";",
											"    // Set retrieved content for further requests",
											"    order.compositePoLines.forEach(it=>it.eresource.accessProvider = pm.environment.get(\"activeVendorId\"));",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b958b48-a344-4665-a250-2a234d97d724",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"completeOrderId\", order.id); ",
											"    pm.globals.set(\"poLine1Id\",  order.compositePoLines[0].id);",
											"    pm.globals.set(\"poLine2Id\",  order.compositePoLines[1].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load mock data",
					"item": [
						{
							"name": "Load mock invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff73be90-3a6a-4d2b-867d-3facbe4b9055",
										"exec": [
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6a25e14-c4c9-4278-939a-375c9ff0f835",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
											"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
											"",
											"    let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
											"    invoice.note += \" - for batch-group system record delete test\";",
											"    invoice.status = \"Reviewed\";",
											"    delete invoice.adjustments;",
											"    delete invoice.voucherNumber;",
											"    delete invoice.approvalDate;",
											"    delete invoice.approvedBy;",
											"    ",
											"    pm.environment.set(\"mockInvoice\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{mockInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare invoice data",
					"item": [
						{
							"name": "Create batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbbf1e63-686e-42b1-94ce-72556d5ab7bc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroup = {};",
											"",
											"pm.test(\"Batch-group is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    pm.expect(batchGroup.name).to.exist;",
											"    pm.environment.set(\"batchGroupId\", batchGroup.id);",
											"    ",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0288813-e14d-4714-8729-22f378acdd66",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.metadata;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb9eb27d-62d2-42f3-bf65-f18c22c464fb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"minInvoiceId\", invoice.id);",
													"    pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    ",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "93dc9ac3-f496-4956-995d-001a8fa6441b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with new vendor invoice number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a5d394f2-9c5f-4b24-bdf8-204e7f4e800e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    let number = \"UPD\" + invoice.vendorInvoiceNo;",
													"    invoice.vendorInvoiceNo = number;",
													"    pm.variables.set(\"updatedNumber\", number);",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d6c1d82c-a5f2-44e1-b3b2-1914078fca76",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"        pm.test(\"Verify invoice updated with new vendor invoice number\", () => {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.vendorInvoiceNo).to.equal(pm.variables.get(\"updatedNumber\"));",
													"            utils.validateInvoice(invoice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								},
								{
									"name": "Get invoice by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "251b983a-9f68-4ad2-87a7-c6dc1617582c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // Validate fields",
													"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"minInvoiceId\"));",
													"    pm.response.to.have.jsonBody(\"folioInvoiceNo\", pm.environment.get(\"folioInvoiceNo\"));",
													"",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee069cfe-2f44-48da-a57d-a0a52113e2ab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Filter invoices",
							"item": [
								{
									"name": "Create another invoice for filtering",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fba1ce98-58e6-4ac2-ac27-df7a30fca581",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"filterInvoiceId\", invoice.id);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8c69c963-f3e9-4de9-a229-ae5c60163c4b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
													"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
													"    let invoice = utils.prepareInvoice(res.json().invoices[1]);",
													"",
													"    invoice.note += \" - filtering\";",
													"",
													"    pm.variables.set(\"invoiceToFilterContent\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceToFilterContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af6a4cfb-7961-47f8-bee1-e5aefd09f342",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.at.least(2);",
													"    invoices = pm.response.json().invoices;",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c4e6eab0-6030-4663-8bee-4c0949463568",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices filter by query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87536bd3-02ce-49ef-80bd-bce99e1715ab",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
													"    invoices = pm.response.json().invoices;",
													"    pm.expect(invoices[0].note).to.equal('Invoice for API Tests - filtering');",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6efff9ee-460f-4e8f-b03d-fa2e92829b10",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=1&query=note=\"filtering\" and note=\"Invoice for API Tests\"",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "query",
													"value": "note=\"filtering\" and note=\"Invoice for API Tests\""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Invoice and associated lines",
							"item": [
								{
									"name": "Create invoice for deletion test",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ff60997-ec7f-48ad-b6f3-51f146dd9ae1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.environment.set(\"InvoiceIdForDelete\", invoice.id);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22d6a478-64e7-4250-9a2c-a9ad705cdace",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceForDelete\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice line for delete with invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "107da0af-4d56-4bf3-a7ad-3e20a1ba304f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"InvoiceIdForDelete\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.environment.set(\"InvoiceLineIdForDelete\", invoiceLine.id);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c879a31-23c2-43bd-9f63-d0eaefb2aa36",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"InvoiceIdForDelete\"));",
													"",
													"pm.variables.set(\"InvoiceLineForDelete\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceLineForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete  invoice and associated lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dac1d0c0-be5c-43e7-a874-d4cacf881293",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"invoce line deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"InvoiceIdForDelete\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoice-lines?query=invoiceId==\" + invoiceId , (err, response) => {",
													"        pm.expect(response).to.have.status(200);",
													"        pm.expect(response.json().invoiceLines.length).to.be.equal(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53921945-e157-4cd5-b929-650438fd9a1b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceIdForDelete}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceIdForDelete}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Documents",
							"item": [
								{
									"name": "Create document with url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4bed63e-fba3-4bf3-aba4-c2764190c365",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceDocument = pm.response.json();",
													"    pm.environment.set(\"documentWithUrlId\", invoiceDocument.documentMetadata.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0a70123b-0131-4d58-9be9-f5779a085585",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let sampleFileURL = pm.variables.get(\"resourcesUrl\") + \"/mockdata/documents/10a34f8a-98d1-45af-a9f6-14b7174ceb51.json\";",
													"",
													"pm.sendRequest(sampleFileURL, (err, res) => {",
													"    let invDocumentWithUrl = res.json();",
													"    invDocumentWithUrl.documentMetadata.invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    pm.environment.set(\"documentWithURL\", JSON.stringify(invDocumentWithUrl));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{documentWithURL}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document with base64 content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae993a7f-c8bb-4853-b7cb-029dfef2ca63",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceDocument = pm.response.json();",
													"    pm.environment.set(\"documentWithBase64Id\", invoiceDocument.documentMetadata.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "910e8927-58a6-46f4-926e-e87b91308e0c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let sampleFileURL = pm.variables.get(\"resourcesUrl\") + \"/mockdata/documents/b3ed45f1-9347-43b7-992d-519048d8041c.json\";",
													"",
													"pm.sendRequest(sampleFileURL, (err, res) => {",
													"    let invDocument = res.json();",
													"    invDocument.documentMetadata.invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    pm.environment.set(\"documentWithBase64Content\", JSON.stringify(invDocument));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{documentWithBase64Content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1594861-4850-4f7a-aede-f55ad01df5b4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"    pm.expect(invoiceDocument.documents.length, \"document list size\").to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e0729a3-327b-4610-888b-59d6b419417d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document list by query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1990cc11-eb5e-405b-b423-2c9e1ad9b73d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"    pm.expect(invoiceDocument.documents.length, \"document list size\").to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "36e5b6f5-9d35-4add-b568-0c01f86372a2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents?query=url<>null",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											],
											"query": [
												{
													"key": "query",
													"value": "url<>null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "983e2c36-49bc-49b3-842e-a1b885c39439",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2b573d6d-5d25-4f45-8309-025a6797fab8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithBase64Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithBase64Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document with base64 content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4ef683a-c75e-48a4-8a8f-5c9b8c149cfa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Docoment was deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"Verify document was deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    let docId = pm.environment.get(\"documentWithBase64Id\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + invoiceId + \"/documents/\" + docId, (err, response) => {",
													"        pm.expect(response).to.have.status(404);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0336e145-b8ee-4d6b-a557-ae66520fc35c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithBase64Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithBase64Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document with url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "195a8b2f-61d0-47fc-89a8-1223c7523dbf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Verify document was deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    let docId = pm.environment.get(\"documentWithUrlId\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + invoiceId + \"/documents/\" + docId, (err, response) => {",
													"        pm.expect(response).to.have.status(404);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48ce2a9e-26d1-4776-b090-50882f9d7549",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithUrlId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithUrlId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a994e75d-7305-4f7f-bfb4-4a832921f58d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Invoice content is valid\", function() {",
											"    pm.expect(invoice.id).to.exist;",
											"    pm.expect(invoice.folioInvoiceNo).to.exist;",
											"    pm.environment.set(\"invoiceId\", invoice.id);",
											"    ",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0017245d-04b1-425a-af60-97f97ca4f64b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/52fd6ec7-ddc3-4c53-bc26-2779afc27136.json\", function (err, res) {",
											"    pm.variables.set(\"invoiceContent\", JSON.stringify(utils.prepareInvoice(res.json())));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with minimal content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f9a27ac3-ddb9-4af8-b5d4-824a0ca1718a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ac12890-6467-4f3c-a40a-8228e0d423fe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceId\"), (err, res) => {",
											"        utils.validateInvoiceWithMinimalContent(res.json());",
											"      ",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with invoices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "54651f00-205e-4a95-af58-5764330c255e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12540fdb-ab5d-4b6e-9a66-0c24119f2a1d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5304a80-8702-4bef-84a0-2626caf5ca14",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"minInvoiceId\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1f32d915-d8fc-4af2-a3b9-6707385bb312",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"",
													"pm.variables.set(\"minContentInvoiceLine\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{minContentInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3e643cf2-522b-4b7c-b3c8-a4f8602d8cd6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ab6cbda2-fa13-40a4-833f-23a8a7d70778",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice Line has minimal content\", function () {",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.test(\"Validate schema for invoice_line.json\", function () {",
													"    utils.validateInvoiceLine(invoiceLine);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by empty query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "25db10ea-44e3-49a1-969a-36f16ecf0d37",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "96b13869-4a8b-4ab2-98af-c10a6b3cd5ef",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLines = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(invoiceLines.invoiceLines).to.have.lengthOf.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86592dde-8e94-4f77-8174-d2a5f8d744b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e8554aa0-9f6f-4172-985f-36d33d1d8429",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var resp = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    resp = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(resp.invoiceLines).to.have.lengthOf.above(0);",
													"});",
													"",
													"pm.test(\"Validate that response contains lines with proper status\", function () {",
													"    for(var i = 0; i < resp.invoiceLines.length; i++) {",
													"    \tpm.expect(resp.invoiceLines[i].invoiceLineStatus).to.equal(\"Open\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?limit=30&query=invoiceLineStatus==Open",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											],
											"query": [
												{
													"key": "limit",
													"value": "30"
												},
												{
													"key": "query",
													"value": "invoiceLineStatus==Open"
												}
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f94d8692-59d1-4ea4-8169-3d4cba3fa9d5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.variables.get(\"invoiceLineId\"), function (err, res) {",
													"    pm.expect(err).to.equal(null);",
													"    let invoiceLine  = res.json();",
													"    pm.test(\"Verify updated fields\", function () {",
													"       pm.expect(res.json().description).to.equal(pm.variables.get(\"invLineDescription\"));",
													"       pm.expect(res.json().quantity).to.equal(pm.variables.get(\"invLineQuantity\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e0690a27-478a-491d-b36d-585b5f989446",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());",
													"",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"invoiceLine.description = \"Updating given description\";",
													"invoiceLine.quantity = 4;",
													"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));",
													"pm.variables.set(\"invLineDescription\",invoiceLine.description);",
													"pm.variables.set(\"invLineQuantity\",invoiceLine.quantity);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete invoice line by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fad80ec5-c7d7-4e41-9cc0-006db152f3a2",
												"exec": [
													"pm.test(\"Invoice is deleted\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "adjustments",
							"item": [
								{
									"name": "Create invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5d07982-f4e9-4961-930c-a583db470fd3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to include only In addition to relation\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(10.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ede5aff7-0db0-44e1-9a8c-b740ea2db3ba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoiceLines/e0d08448-343b-118a-8c2f-4fb50248d672.json\", function (err, res) {",
													"    let invoiceLine = res.json();",
													"    delete invoiceLine.id;",
													"    delete invoiceLine.invoiceLineNumber;",
													"    pm.globals.set(\"mock-invoiceLine\",  JSON.stringify(invoiceLine));",
													"    ",
													"    ",
													"    delete invoiceLine.adjustments;",
													"    ",
													"    invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"    invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"    let adjustment1 = utils.buildAdjustmentObject();",
													"    adjustmentsArray.push(adjustment1);",
													"",
													"    let adjustment2 = utils.buildAdjustmentObject();",
													"    adjustment2.relationToTotal = \"Included in\";",
													"    adjustmentsArray.push(adjustment2);",
													"    ",
													"    let adjustment3 = utils.buildAdjustmentObject(12.222, \"Percentage\");",
													"    adjustmentsArray.push(adjustment3);",
													"",
													"    invoiceLine.adjustments = adjustmentsArray;",
													"",
													"    pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Create invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "147fa5a7-193c-4ade-8b0b-9d168225e59e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"negativeAdjInLineId\",invoiceLine.id)",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.below(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to be negative\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(-28.21);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c547fc9-0c2b-4f58-8122-28638d6edab9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = utils.getMockInvoiceLine();",
													"delete invoiceLine.id;",
													"delete invoiceLine.invoiceLineNumber;",
													"delete invoiceLine.adjustments;",
													"delete invoiceLine.fundDistribution;",
													"invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"let adjustment1 = utils.buildAdjustmentObject();",
													"adjustment1.value = -13.88;",
													"adjustmentsArray.push(adjustment1);",
													"",
													"let adjustment2 = utils.buildAdjustmentObject();",
													"adjustment2.value = -14.33;",
													"adjustmentsArray.push(adjustment2);",
													"",
													"invoiceLine.adjustments = adjustmentsArray;",
													"",
													" pm.environment.set(\"negativeInvoiceLineContent\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64286c86-0544-41b9-9023-41a9605b13d7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "be4cba63-f543-4e65-abc1-eeb3f8c94a43",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"negativeInvoiceLineContent\"));",
													"invoiceLine.adjustments[0].value = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df63c64e-df0f-4c9a-8b83-54850872fe49",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is successfully retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total is recalulated\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(0.67);",
													"    pm.expect(invoiceLine.total).to.equal(2.87);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "91277ba2-bd35-422b-8289-727eefa30729",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										},
										"description": "validate that the adjustments are recalculated after a PUT with adjustment values changed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with invoice lines. The invoices are used from `Invoices` tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "85e36ad6-f73d-40a6-a45a-73f8c5ce982e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7a362b21-10d5-46b2-afb1-8c68434a3c3f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice calculated totals",
					"item": [
						{
							"name": "Create invoice with locked total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "86da81f8-0878-4a45-a573-c892ccb00184",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"delete invoice.approvedBy;",
											"delete invoice.approvalDate;",
											"invoice.lockTotal = true;",
											"invoice.total = 12.34;",
											"invoice.note += \" - locked total\";",
											"invoice.status = \"Open\";",
											"",
											"invoice.adjustments = [];",
											"invoice.adjustments.push(utils.buildAdjustmentObject(10));",
											"",
											"pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "598f21e7-26e9-4acb-9198-495258ce25e1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"invoiceWithLockedTotalId\", invoice.id);",
											"",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(10);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add adjustments to invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e3149d7-7b15-40d1-bd02-39e4672dd3aa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"",
											"    // The adjustment with fixed amount should affect adjustment total",
											"    invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Amount\"));",
											"    // The adjustment with percentage amount should not affect adjustment total now because there is no any line yet i.e. subTotal is 0",
											"    invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Percentage\"));",
											"",
											"    // The adjustments with 'relationToTotal' other than 'In addition to' do not affect calculated totals",
											"    let adj1 = utils.buildAdjustmentObject(100, \"Amount\");",
											"    adj1.relationToTotal = \"Included in\";",
											"    invoice.adjustments.push(adj1);",
											"",
											"    let adj2 = utils.buildAdjustmentObject(50, \"Amount\");",
											"    adj2.relationToTotal = \"Separate from\";",
											"    invoice.adjustments.push(adj2);",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7a1408ff-94ef-4071-8c9d-23e036e80a50",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice without lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f38ed4-db22-4261-87c8-3b4ed4d67137",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(35);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a153e1ad-c1f5-4e31-b794-f803f644496e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Create invoice line with adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "680492c6-eb53-42c3-889a-b6cf2c772673",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoiceLine = {};",
											"",
											"pm.test(\"Invoice Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoiceLine = pm.response.json();",
											"});",
											"",
											"pm.test(\"Calculated totals\",function(){",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4334c767-7658-4313-9fcc-5f0b87b0675f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"",
											"invoiceLine.adjustments = [];",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceWithLockedTotalId\");",
											"invoiceLine.subTotal = 54.32;",
											"",
											"let adjustment1 = utils.buildAdjustmentObject(21.35);",
											"invoiceLine.adjustments.push(adjustment1);",
											"",
											"// Should no affect calculations",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Included in\";",
											"invoiceLine.adjustments.push(adjustment2);",
											"",
											"let adjustment3 = utils.buildAdjustmentObject(-11, \"Percentage\");",
											"invoiceLine.adjustments.push(adjustment3);",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Verify invoice line totals persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d38eea4-8c8f-42bf-8f07-3f5eb6f98d4b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(1);",
											"    let invoiceLine = lines[0];",
											"",
											"    // validate calculated totals are persisted",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f45ef6b7-746d-49c5-bfb8-cb129b7331d4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a62dca4d-a787-4a20-8a5f-4267ff34b8d4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ff98593-e0b6-4db2-b079-f84c7bab64fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice with 1 line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca250dbd-19b4-4903-b664-e8c7d2634d77",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8a881b8-aed2-45c8-b3a0-1c2113530d10",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Create second line with adjustment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5f09f59-5089-434d-abb0-ba71ab9d3466",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoiceLine = {};",
											"",
											"pm.test(\"Invoice Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoiceLine = pm.response.json();",
											"    pm.environment.set(\"invoiceWithLockedTotalSecondInvoiceLineId\", invoiceLine.id);",
											"});",
											"",
											"pm.test(\"Calculated totals\",function(){",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(6.65);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(15.87);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(22.52);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4f5a379-31d5-4c21-babd-6e203ef298ab",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"invoiceLine.adjustments = [];",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceWithLockedTotalId\");",
											"invoiceLine.subTotal = 15.87;",
											"",
											"invoiceLine.adjustments.push(utils.buildAdjustmentObject(6.65));",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Verify invoice lines totals persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca254bd6-5510-4232-b5df-4a58fc5ed9fe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(2);",
											"    lines.forEach(invoiceLine => {",
											"        // validate calculated totals are persisted",
											"        pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.be.oneOf([15.37, 6.65]);",
											"        pm.expect(invoiceLine.subTotal, \"subTotal\").to.be.oneOf([54.32, 15.87]);",
											"        pm.expect(invoiceLine.total, \"total\").to.be.oneOf([69.69, 22.52]);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87905cf6-36fe-4a88-930c-a1137d311311",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d298f60-596d-41d7-b2b5-b6efe4397f65",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.02 + 35 + 17.55);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ad85538-3276-496a-813c-919a51f23ede",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice with 2 lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b89ba93-36d3-41d5-b6e4-10694c792a50",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.02 + 35 + 17.55);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91ec7453-6a39-4b7c-9fdd-bec0fcb19ead",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Set invoice's lock total to false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2fd75b05-d3a9-493b-b2b1-1571547eec52",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"",
											"    // Changing lock total to false to verify calculated total",
											"    invoice.lockTotal = false;",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03c5db28-3b90-463e-b739-149cac30024e",
										"exec": [
											"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify invoice total is recalculated and persisted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c59b2ed-1291-452c-9b4c-a201465874e7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(74.57);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(144.76);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12ae9de2-c2d1-4408-9f26-ee3a37e68f8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Get invoice with 2 lines and non locked total",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "368beb36-ca0d-413f-9a00-139610cf60aa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(74.57);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(144.76);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4c7cc9a-8818-4ff6-871b-49147e62021c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Update second line removing adjustments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b847fa03-6d92-444f-9bf6-7cb7ce9e5080",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.environment.get(\"invoiceWithLockedTotalSecondInvoiceLineId\"), (err, res) => {",
											"    let invoiceLine = res.json();",
											"",
											"    delete invoiceLine.adjustments;",
											"    invoiceLine.subTotal = 8.13;",
											"",
											"    pm.variables.set(\"invoiceLineUpdatedContent\", JSON.stringify(invoiceLine));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "13e56c29-2781-405b-bdbd-6624a7c06454",
										"exec": [
											"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineUpdatedContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceWithLockedTotalSecondInvoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceWithLockedTotalSecondInvoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify second invoice line totals updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "835022b7-0c24-444d-913b-cef0f2b2ee14",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(2);",
											"    lines.forEach(invoiceLine => {",
											"        // validate calculated totals are persisted",
											"        pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.be.oneOf([15.37, 0.0]);",
											"        pm.expect(invoiceLine.subTotal, \"subTotal\").to.be.oneOf([54.32, 8.13]);",
											"        pm.expect(invoiceLine.total, \"total\").to.be.oneOf([69.69, 8.13]);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0d5735a-f132-44b7-bbd1-eaee974e6df1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4c6a1df-b4da-468d-acbf-f37aec3832c4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.98);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(62.45);",
											"    pm.expect(invoice.total, \"total\").to.equal(128.43);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1be8ef88-44a5-4fc9-860e-1c2fa3acf19a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "The invoice should have at this step 2 lines created. Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41c19338-1c06-47f1-9c2b-4463e9707665",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.98);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(62.45);",
											"    pm.expect(invoice.total, \"total\").to.equal(128.43);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a31c57d8-8efb-4bee-927b-ab585a9ba6e7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Delete second invoice line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f28f734-b3fc-41eb-8ac2-cc495330c9bf",
										"exec": [
											"pm.test(\"Invoice line is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithLockedTotalSecondInvoiceLineId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c85a4816-c889-41ee-8c87-8a20aec7a374",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceWithLockedTotalSecondInvoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceWithLockedTotalSecondInvoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice lines for invoice - only one left",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b38d0146-ed78-434c-bbb3-d3680cd7c3e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let lines = [];",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    lines = pm.response.json().invoiceLines || [];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.expect(lines).to.have.lengthOf(1);",
											"    let invoiceLine = lines[0];",
											"",
											"    // validate calculated totals are persisted",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e2c4d4d-1a4a-4529-860c-29439af174f0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?query=invoiceId=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceId=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoice lines by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Verify invoice totals are updated - by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "236b7617-02bd-4214-8f8b-48c2ef9a65cc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    let invoices = pm.response.json().invoices;",
											"    pm.expect(invoices).to.have.lengthOf(1);",
											"    invoice = invoices[0];",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(118.27);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d25bf9d8-d3dd-4a82-b210-5248f4d86ffb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?query=id=={{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{invoiceWithLockedTotalId}}"
										}
									]
								},
								"description": "Sending `GET` collection of invoices by invoice id to verify total amounts are persisted."
							},
							"response": []
						},
						{
							"name": "Get invoice to check totals - by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a03a0c5-cb30-46e3-a01e-838ffb2bfeea",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(118.27);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74d68ba2-6751-41ab-a0a4-86eb9b2bed11",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Delete  invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ccde13b-a99c-4018-b522-b657388ac051",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithLockedTotalId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "732cc01e-d3ff-4c40-8a83-981e8fb186f9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice with adjustments without lines and verify adjustmentTotal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a82a76c-1566-406e-95af-02dfccce307f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let inv = utils.buildInvoiceWithMinContent();",
											"inv.status = \"Reviewed\";",
											"inv.adjustments = [];",
											"",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"Not prorated\"));",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"By line\"));",
											"inv.adjustments.push(utils.buildAdjustmentObject(10, \"Amount\", \"By quantity\"));",
											"",
											"pm.variables.set(\"invoiceContent\", JSON.stringify(inv));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "38691084-e855-4de7-9d0f-ae8acaf02cea",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"invoiceWithAdjustmentTotalId\", invoice.id);",
											"",
											"    utils.validateInvoice(invoice);",
											"",
											"    // MODINVOICE-103",
											"    // validate calculated adjustment totals: 10(Not prorate) + 10(By line) = 20 ",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(30);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(30);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Invoice with 1 prorated and 1 not prorated adjustments with no lines - adjustmentTotal should always be calculated irrespective if there are any invoiceLines or not"
							},
							"response": []
						},
						{
							"name": "Delete invoice by id for adjustment total calculation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aadbd20f-addd-4698-b9c5-5d23592fcaff",
										"exec": [
											"pm.test(\"Success response expected\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "444b3c8a-754c-4fad-822a-4ddf128a3f4f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithAdjustmentTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithAdjustmentTotalId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests to verify calculated totals of the invoice: [MODINVOICE-52](https://issues.folio.org/browse/MODINVOICE-52).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac3a419c-1a9e-42d9-8295-8c1211d081ae",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "10acf66f-fa6a-4d42-9f49-d367e545e49c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prorated adjustments",
					"item": [
						{
							"name": "Invoice without lines and one prorated adjustment",
							"item": [
								{
									"name": "Create invoice with percentage adjustment prorated by line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "66099a8b-f638-4b79-aa55-8fb6fe803a9d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let invoice = utils.prepareInvoice(utils.buildInvoiceWithMinContent(\"MODINVOICE-54\"));",
													"",
													"invoice.note += \" - prorated adjustments\";",
													"invoice.status = \"Open\";",
													"",
													"invoice.adjustments = [utils.buildAdjustmentObject(10, \"Percentage\", \"By line\")];",
													"",
													"pm.variables.set(\"invoiceContentBody\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cb926bbf-3713-4ee3-9522-bf18dcc4e944",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsId\", invoice.id);",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    // The invoice has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate totals are zero",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContentBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice without lines yet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9c6a33c-1962-4503-97a6-5d5e60539d3e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"One adjustment and zero totals\", function() {",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"    // The invoice has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17c5fb65-7c37-40cb-a84f-be3acb0c42c1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add first line",
							"item": [
								{
									"name": "Create invoice line with 1 non prorated adjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c62e10e-a41e-4a7e-87da-9caf69bc364f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsId\", invoiceLine.id);",
													"",
													"    // The invoice line has one non prorated and one prorated adjustments.",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 1);",
													"",
													"    // 2 adjustments. Total adj amount is 10% of 100.15 plus 11.11",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d7a385ee-9796-4dc6-82bf-a1551053f0aa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 100.15;",
													"invoiceLine.quantity = 5;",
													"invoiceLine.adjustments = [utils.buildAdjustmentObject(11.11)];",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify invoice line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00aa7118-e326-499a-b9cc-044c207ece55",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and one prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 1);",
													"",
													"    // 2 adjustments. Total adj amount is 10% of 100.15 plus 11.11",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc51bd5b-e15b-4b95-85d6-e4be68bfbbf4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with one line and one prorated adj",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd85b319-76a0-4cee-9fa5-76a86964a242",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate totals\", function() {",
													"    // The invoice still has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate calculated totals - same as in line",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoice.total, \"total\").to.equal(121.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e9950f07-e311-4476-ae8b-1c7efc0eabb4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add second prorated adjustment",
							"item": [
								{
									"name": "Add fixed amount adjustment prorated by line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1b1f846d-6f2f-4b58-8dc8-6186ddc50c70",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Amount\", \"By line\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a22bbb8a-ddee-4a72-bcfe-3bf39c3b5d8b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with one line and two prorated adj",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9efca185-a024-459f-9bda-dc92b1b8dd36",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // The invoice has 2 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - same as in line",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(46.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoice.total, \"total\").to.equal(146.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cea09233-4b82-42f7-bd26-ab02ad1d2cd6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83456b58-78c3-4fc7-a5a1-7584fbaec4e6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 10% of 100.15 plus 11.11 plus 25",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(46.12);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(146.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d10090ed-8ef2-40fb-85d2-1622aa5f2088",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add second line",
							"item": [
								{
									"name": "Create invoice line without non prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a6dc5ae-d811-4312-b9a9-05640c268770",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine2WithProratedAdjustmentsId\", invoiceLine.id);",
													"",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // 2 adjustments. Total adj amount is 5% of 200.20 plus 12.5",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.51);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(222.71);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "713a77fa-1d94-4dce-bbb0-a70c39121791",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 200.20;",
													"invoiceLine.quantity = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "432bf61e-5c03-4e74-beda-c4f4ab88ce72",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 5% of 200.20 plus 12.5",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.51);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(222.71);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b710d183-510c-48bd-8fc5-47cd30ac5aee",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "316f5464-1474-4e0d-96d8-11b3df46b484",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 11.11 plus 5% of 100.15 (10% devided by 2) plus 12.5 (25 devided by 2)",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(28.62);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(128.77);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e7648ab-ca1a-4e93-afd4-8fe4a27863b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "596fafb9-87f2-4e5b-bbf2-8fe460f107a1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 2 prorated adjustments",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(51.13);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(351.48);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f490f24b-c347-4a82-8ddc-b14dde1ae022",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add third prorated adjustment",
							"item": [
								{
									"name": "Add fixed amount adjustment prorated by amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2ad873d6-99ec-4a2c-924a-e43dcb18a338",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(50, \"Amount\", \"By amount\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c903fa17-35d8-4dcd-aaa7-d6aa34babb44",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals - 3 prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dbbd4b2-b1a3-4bd3-a3a0-34d4e8c679a9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 3 prorated adjustments",
													"    utils.validateInvoiceProratedAdjustments(invoice, 3);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(101.13);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(401.48);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5cf7b20d-d669-4006-92df-98fcff84923b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99b9bd45-f030-434e-a7b2-a454ed61f3fb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 3);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 5% of 100.15 (10% devided by 2)",
													"     * 3. 12.5 (25 devided by 2)",
													"     * 4. 16.67 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(45.29);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(145.44);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b33ba6c9-b206-4412-a9ce-1fa559006508",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f4d9644-6055-4281-b91b-55c73a51fbab",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 3);",
													"",
													"    // 3 adjustments. Total adj amount is 5% of 200.20 (10% devided by 2) plus 12.5 (25 devided by 2) plus 33.33 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(55.84);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(256.04);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3b162ae3-13fa-4769-92f9-3b1df7e2ea2f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add fourth prorated adjustment",
							"item": [
								{
									"name": "Add percentage adjustment prorated by amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "11bc7198-f408-4e00-b2ff-93bc67ffb0e4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(5, \"Percentage\", \"By amount\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "525f86a2-6ca0-4f0c-8378-4d57f13ad6fc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals - 4 prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9db1916-d720-4587-9ec2-7fb8a9559f2a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 4);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(116.15);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(416.50);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c740a15-c588-460b-9d0e-35618b3d39ec",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f096d539-e5ed-49ed-a405-ae96f70083e3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 5% of 100.15 (10% devided by 2)",
													"     * 3. 12.5 (25 devided by 2)",
													"     * 4. 16.67 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 5. 5% of 100.15 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(50.30);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(150.45);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7bbf6e5d-02e3-4617-98c2-56a09810eaeb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03c47ae1-a90c-450b-ab50-64e3bb72c468",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 5% of 200.20 (10% devided by 2)",
													"     * 2. 12.5 (25 devided by 2)",
													"     * 3. 33.33 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 5% of 200.20 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(65.85);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(266.05);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "abcd4145-0500-4c9b-9d10-42b3fd595f99",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add third line",
							"item": [
								{
									"name": "Create invoice line without non prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2e3de3d-7e51-4df8-96f2-9f97347338fd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsId\", invoiceLine.id);",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    invoiceLine.adjustments.forEach(adjustment => pm.expect(adjustment, \"adjustment must have id to invoice's adjustment\").to.exist);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(44.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(244.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d24d2f10-7730-4be5-9213-c1417a21a56c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 199.65;",
													"invoiceLine.quantity = 30;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify third line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c73d6a52-cb8e-4df8-80e8-c7486e697c92",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(44.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(244.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5ca02de1-d5f3-4176-a59b-a5031b5018d7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eafe550a-91ec-4c0f-aafe-35d876a5f472",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 3.3383333333333329995 i.e. 3.333..% (10% devided by 3) of 100.15",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 10.02 (portion of 50 proportionate to the invoiceLine's (100.15) contribution to the invoice subTotal (500))",
													"     * 5. 5.0075 i.e. 5% of 100.15 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(37.81);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(137.96);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dc30963c-c10e-480c-8a7f-c00b792d722b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9de9a031-2389-453c-9d7f-4a58545b1ea8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 20.02 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal (500))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(45.03);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(245.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d813095a-3c26-4733-9321-04b3b0675efe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6748dc14-f1e5-423a-8b14-e606dde89d44",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 4);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(127.78);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(500);",
													"    pm.expect(invoice.total, \"total\").to.equal(627.78);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4bea6ea2-2e95-4cec-a219-e98297d1d704",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add fifth prorated adjustment",
							"item": [
								{
									"name": "Add amount adjustment prorated by quantity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "75c2605e-448a-4e79-8492-c21e6fdef8c7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(125, \"Amount\", \"By quantity\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f35f03b3-a3f6-47d0-852e-bf41266f5bf6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3bbdc1-362a-4e44-bc69-9e3f85d11208",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(252.78);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(500);",
													"    pm.expect(invoice.total, \"total\").to.equal(752.78);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2fb66409-0729-485a-ad64-a8287cdce50c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ad72812-eb75-4d2e-ae33-8166af685f46",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 3.3383333333333329995 i.e. 3.333..% (10% devided by 3) of 100.15",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 10.02 (portion of 50 proportionate to the invoiceLine's (100.15) contribution to the invoice subTotal (500))",
													"     * 5. 5.0075 i.e. 5% of 100.15 (5% adjustment is added to each line)",
													"     * 6. 12.5 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(50.31);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(150.46);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "163b9e41-779d-4e98-ac9c-dea237ba9eed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adaad9b8-a863-4e25-b919-89c8db26c507",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 20.02 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal (500))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 37.5 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(82.53);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(282.73);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b7de31ef-a364-401c-bf18-28967572e73a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9043055-2a5e-4e8e-adc3-9c8617ccd166",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 75 (portion of 125 proportionate to the invoiceLine's quantity (30) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(119.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(319.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1f281e04-e66d-4d54-895f-fb4b3817d7ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make subTotal of  first line negative",
							"item": [
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d11f7b41-2152-4c88-b098-d127b3c4f10b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.subTotal = -399.85;",
													"",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d5415cae-02cd-4823-a82f-d1071bd20532",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0532d01-b2c1-4e4b-810c-53c1fefc36b0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 13.3283333333333320005 i.e. 3.333..% (10% devided by 3) of abs(-399.85)",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 25 (portion of 50 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 12.5 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(90.26);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-309.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c1510cb7-b174-4aa7-8e0c-b5ad63a6fdb6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b7d8492-9fc1-4936-890c-e1d39f2cda8c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 12.52 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 37.5 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(75.03);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(275.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "af1b45de-be36-4fb9-8dd6-699a24f18222",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1eec8b2e-00c1-474d-bc55-aa771b5f9b0b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 12.48 (portion of 50 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (799.7))",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 75 (portion of 125 proportionate to the invoiceLine's quantity (30) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(112.46);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(312.11);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9efaaf9a-04ea-490a-baf0-4e5efe15be55",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "666d0ab9-b74c-4715-9046-3a3d2f9360a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(277.75);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(277.75);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f5efef3d-d9fd-4c29-a203-ab390b61b997",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make adjustments value so that they are not evenly distributed.",
							"item": [
								{
									"name": "Update third line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a809098f-a2f9-4387-ab3d-03875995fec0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine3WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.quantity = 11;",
													"",
													"pm.variables.set(\"invoiceLine3WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "192517c1-edb2-4522-98d2-300d5aefbf12",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine3WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update adjustments value so that they are not evenly distributed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c39d09a6-5cbd-4301-a5a5-98f31b928dc2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"invoice.adjustments.push(utils.buildAdjustmentObject(125, \"Amount\", \"By quantity\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(50.05, \"Amount\", \"By amount\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(26, \"Amount\", \"By line\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b8f4b379-7acd-448a-b172-d8c8e4b8b87a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "081b5c67-f25b-48ab-afe0-2a1a5b18c414",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(278.8);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(278.8);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ecaa906f-a769-4f34-aaf8-6d27cbef8a57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c0125d9-87b2-4aa8-901e-7cd80a434eec",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 13.3283333333333320005 i.e. 3.333..% (10% devided by 3) of abs(-399.85)",
													"     * 3. 8.66 (26 devided by 3)",
													"     * 4. 25,02 (portion of 50,05 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 20,16 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (31))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.66);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(25.02);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(20.16);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(98.27);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-301.58);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e853884-efdc-4c0a-a4ca-7e3c2f7eed20",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2207f12a-75da-4915-b6d5-8ec900da09be",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.673333333333332666 i.e. 3.33333...% of 200.20 (10% devided by 3)",
													"     * 2. 8.66 (26 devided by 3) + 0.01 extra penny",
													"     * 3. 12.53 (portion of 50.05 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 60,48 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (31))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.67);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(12.53);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(60.48);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(98.36);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(298.56);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "68f44ca5-d06c-4964-b67e-446004281042",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4072fffd-379f-43d0-8de6-9e09c0abc834",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 6.6549999999999993345 i.e. 3.3333...% of 199.65 (10% devided by 3) ",
													"     * 2. 8.66 (26 devided by 3) + 0.01 extra penny",
													"     * 3. 12.49 (portion of 50.05 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (799.7)) + extra penny",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 44,35 (portion of 125 proportionate to the invoiceLine's quantity (11) contribution to the total quantity (31)) + 1 extra penny",
													"     */",
													"     ",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.67);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(12.50);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(44.36);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(82.17);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(281.82);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b185dcfb-d984-4d51-ae89-f2ba83e448d9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete second line",
							"item": [
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8d64cf6a-2d95-4008-b580-b742abb9eee4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1dc1feba-9973-43b0-8961-fb4004bfa257",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "103a03b3-2ab6-4c4b-b7c5-fd462793349c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 19.9925 i.e. 5% (10% devided by 2) of abs(-399.85)",
													"     * 3. 13 (26 devided by 2)",
													"     * 4. 33.38 (portion of 50.05 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (599.5))",
													"     * 5. 19.9925 i.e. 5% of abs(-399.85) (5% adjustment is added to each line)",
													"     * 6. 39.06 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (16))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(136.54);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-263.31);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "484e3f52-d932-4f4e-b6b4-35816755682a",
												"exec": [
													"// Wait for 1 second before sending request",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify former \"third\" line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "631ccfdb-a8d2-46af-9bcf-785543dc597f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 9.9825 i.e. 5% of 199.65 (10% devided by 2) ",
													"     * 2. 13 (26 devided by 2)",
													"     * 3. 16.67 (portion of 50.05 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (599.5))",
													"     * 4. 9.9825 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 85.94 (portion of 125 proportionate to the invoiceLine's quantity (11) contribution to the total quantity (16))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(135.58);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(335.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0f0778de-c8d1-496f-b727-561d2623e7bb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27296e65-a613-4aff-845e-64454a418faa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(272.12);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(-200.20);",
													"    pm.expect(invoice.total, \"total\").to.equal(71.92);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a20fa6d-a78a-4a20-8368-6917defabe34",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make adjustments value negative and that they are not evenly distributed.",
							"item": [
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f5d0abf9-c677-4239-9a68-47ce819f43b3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 200;",
													"invoiceLine.adjustments = [utils.buildAdjustmentObject(11)];",
													"",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cefd9f14-1837-4518-9238-592165d31781",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update third line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "70254b8d-2fb0-4501-a76e-aa6cb8e2a2f7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine3WithProratedAdjustmentsContent\"));",
													"",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 200;",
													"",
													"pm.variables.set(\"invoiceLine3WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "75012304-30b0-4a27-a547-729f5d11c886",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine3WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update adjustments value so that they are not evenly distributed. Set currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fc9fa85d-d404-41e2-99cc-29bb74298082",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-125, \"Amount\", \"By quantity\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-51, \"Amount\", \"By amount\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-25, \"Amount\", \"By line\"));",
													"invoice.currency = \"JPY\";",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3de3f9c1-16c4-4682-812e-b3547f773541",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f49da67-3163-4f20-b505-b0f0b9941e59",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-150);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(400);",
													"    pm.expect(invoice.total, \"total\").to.equal(250);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "faa913ca-09c9-4638-b923-94e1c176a62e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa22252f-fe53-4ec5-98d7-478d5786fecf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11 not prorated adjustment",
													"     * 2. 10 i.e.5% (10% devided by 2) of abs(200)",
													"     * 3. -12 (-25 devided by 2)",
													"     * 4. -25 (portion of -51 proportionate to the invoiceLine's abs(200) contribution to the invoice subTotal by absolute value (400))",
													"     * 5. 10 i.e. 5% of abs(200) (5% adjustment is added to each line)",
													"     * 6. -62 (portion of -125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (10))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(-12);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(-25);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(-62);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-68);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(132);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "599abe44-8855-421f-a075-3b9147e68a3c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f72b2b6-06f0-4163-a1b2-62ac8ea9f8a9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 10 i.e. 5.% of 200 (10% devided by 2) ",
													"     * 2. -12 (-25 devided by 3) - 1 extra yena",
													"     * 3. -25 (portion of -51 proportionate to the invoiceLine's contribution (200) to the invoice subTotal by absolute value (400)) - extra yena",
													"     * 4. 10 i.e. 5% of 200 (5% adjustment is added to each line)",
													"     * 5. -62 (portion of -125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (10)) - 1 extra yena",
													"     */",
													"     ",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By line\")[0];",
													"        pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(-13);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By amount\")[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(-26);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.prorate === \"By quantity\")[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(-63);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-82);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(118);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "81063672-e510-49a2-b417-60600b5eedfe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ad4e6bee-1f9a-47cb-9522-bb2171e093a3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd92e8c0-4c2d-4f1e-a2a9-bf3c6aecc298",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove prorated adjustments with amount value",
							"item": [
								{
									"name": "Update invoice leaving only percentage prorated adjustments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ae37b0f6-d29d-4852-b024-9a0588b01960",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "198128a3-8cb5-4729-aa19-da47c8e0dc3d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d149945d-34da-4b2e-9a8c-621772c9ee6d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 2 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(51);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(400);",
													"    pm.expect(invoice.total, \"total\").to.equal(451);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38745176-32f3-4338-b26c-9ccebf8cca67",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87da284f-a544-4232-b899-08a0085389d6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 2 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11 (non prorated adjustment)",
													"     * 2. 10 i.e. 5% (10% devided by 2) of abs(200)",
													"     * 3. 10 i.e. 5% of abs(200) (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(31);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(231);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6644c8c-646e-4aba-93fa-ac58fef20d7f",
												"exec": [
													"// Wait for 1 second before sending request",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify former \"third\" line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59aa8d42-f48e-4e24-a73a-8b9d32e1dd72",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 10 i.e. 5% of 200 (10% devided by 2) ",
													"     * 2. 10 i.e. 5% of 200 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(20);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(220);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd31d972-e8ec-4bc0-b180-9bf6ee40cb46",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete  invoice with prorated adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c56f26ff-4378-4708-a0bc-4bce77bd5864",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceWithProratedAdjustmentsContent\");",
											"    pm.environment.unset(\"invoiceLine1WithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceLine1WithProratedAdjustmentsContent\");",
											"    pm.environment.unset(\"invoiceLine2WithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceLine3WithProratedAdjustmentsId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34159c08-537e-4a25-bd70-0881c59f791f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithProratedAdjustmentsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c932086a-ab23-43b5-915c-5bbc8f981abd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Voucher\", function () {",
											"    pm.response.to.have.status(200);",
											"    voucher = pm.response.json();",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    utils.validateVoucher(voucher);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90f8141c-7bca-4898-9801-f95656a9ca51",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/vouchers/vouchers.json\", function (err, res) {",
											"    let voucher = res.json().vouchers[0];",
											"    voucher.invoiceId = pm.environment.get(\"minInvoiceId\");",
											"    delete voucher.id;",
											"    delete voucher.metadata;",
											"    voucher.voucherNumber = \"APITESTS\";",
											"    ",
											"  utils.sendPostRequest(\"/voucher-storage/vouchers\", voucher, function(err,response){",
											"      pm.test(\"voucher is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.environment.set(\"voucherId\", response.json().id);",
											"      });",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get vouchers and filter by query param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eda56815-2bdc-4993-b1b3-844bcae7d535",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let vouchers = [];",
											"",
											"pm.test(\"Successfully get Vouchers\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    vouchers = pm.response.json().vouchers;",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    vouchers.forEach(voucher => utils.validateVoucher(voucher));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3292a902-0a92-41f5-b16b-e748674ea9f9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers?query=voucherNumber=APITESTS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers"
									],
									"query": [
										{
											"key": "query",
											"value": "voucherNumber=APITESTS"
										}
									]
								},
								"description": "The test gets list of voucher"
							},
							"response": []
						},
						{
							"name": "Edit voucher editable fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efafc75d-72f8-40da-8749-acdc11ae28a3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => utils.validateVoucher(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c3b305e-070f-4b89-a404-328ea864855d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify editable fields",
											"    voucher.voucherNumber = \"APITESTS123\";",
											"    voucher.disbursementNumber = \"EFT123456\";",
											"    voucher.disbursementDate = \"2020-05-05T00:00:00.000+0000\";",
											"    voucher.disbursementAmount = 4.0;",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c37cbe2-f82d-47a6-84ef-94573962001e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "79aec4d7-9fac-4dca-8d11-d289e9b11327",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch Vouchers",
					"item": [
						{
							"name": "Get batch voucher by id JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c305849-f67b-4281-8eac-00968761cf7d",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dfe4ff68-4874-4ae2-a728-36ba12ca28d9",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVouchers/35657479-83b9-4760-9c39-b58dcd02ee14.json\", function (err, res) {\r",
											"    let batchVoucher = res.json();\r",
											"    delete batchVoucher.id;\r",
											"    \r",
											"  utils.sendPostRequest(\"/batch-voucher-storage/batch-vouchers\", batchVoucher, function(err,response){\r",
											"      pm.test(\"batchVoucher is created in storage\", function(){\r",
											"          pm.expect(err).to.equal(null);\r",
											"          pm.expect(response).to.have.property('code', 201);\r",
											"          pm.environment.set(\"validBatchVoucherId\", response.json().id);\r",
											"      });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get batch voucher by id XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc5d80f5-eedd-4d3d-9956-f60afeefd73c",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(200);",
											"    let jsonData = xml2Json(pm.response.body);",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/xml\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4a3455c-e454-4580-ba0d-4143dfb5ea37",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVouchers/35657479-83b9-4760-9c39-b58dcd02ee14.json\", function (err, res) {\r",
											"    let batchVoucher = res.json();\r",
											"    delete batchVoucher.id;\r",
											"    \r",
											"  utils.sendPostRequest(\"/batch-voucher-storage/batch-vouchers\", batchVoucher, function(err,response){\r",
											"      pm.test(\"batchVoucher is created in storage\", function(){\r",
											"          pm.expect(err).to.equal(null);\r",
											"          pm.expect(response).to.have.property('code', 201);\r",
											"          pm.environment.set(\"validBatchVoucherId\", response.json().id);\r",
											"      });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4c8b33d-43d7-4fba-85d9-4bfbf5f0eb87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "87e0a5de-ca81-4b01-b0a9-b0dbda351d13",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Get voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "60a010ae-8e50-402f-96ab-2c30888c138f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/voucherLines/voucher_lines.json\", function (err, res) {",
													"    let voucherLine = res.json().voucherLines[0];",
													"    voucherLine.voucherId = pm.environment.get(\"voucherId\");",
													"    delete voucherLine.id;",
													"    ",
													"  utils.sendPostRequest(\"/voucher-storage/voucher-lines\", voucherLine, function(err,response){",
													"      pm.test(\"voucherLine is created in storage\", function(){",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"voucherLineId\", response.json().id);",
													"      });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "458ba5a8-1fff-4c0a-ac1d-34e3a4784a7f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Successfully get Voucher line\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucher = pm.response.json();",
													"});",
													"",
													"pm.test(\"Voucher line content is valid\", function() {",
													"    utils.validateVoucherLine(voucher);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get voucher lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f0f2ec88-baf5-4e0b-a11e-f86fa2e97209",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f5daf0dc-2803-4397-b998-eda897f0f7cf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let voucherLines = {};",
													"",
													"pm.test(\"Successfully get Voucher lines\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucherLines = pm.response.json();",
													"    pm.expect(voucherLines.voucherLines.length).to.be.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines"
											]
										},
										"description": "GET /voucher/voucher-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get voucher lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "637b3a57-a2c6-427a-8585-5ab413a604fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97021c70-d1cf-4413-894e-756aa7099446",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let voucherLines = {};",
													"",
													"pm.test(\"Successfully get Voucher lines\", function() {",
													"    pm.response.to.have.status(200);",
													"    voucherLines = pm.response.json();",
													"    pm.expect(voucherLines.voucherLines.length).to.be.above(0);",
													"});",
													"",
													"pm.test(\"Voucher line response is valid\", function() {",
													"    voucherLines.voucherLines.forEach(vLine => {",
													"        pm.expect(vLine.amount).to.be.above(30);",
													"        utils.validateVoucherLine(vLine);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=amount>/number 30",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines"
											],
											"query": [
												{
													"key": "query",
													"value": "amount>/number 30"
												}
											]
										},
										"description": "GET /voucher/voucher-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "65b21476-160f-477c-af0a-22476b7f6290",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Voucher line and update voucherLineAmount only (MODINVOICE-40)",
													"utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"    let voucherLine  = res.json();",
													"    let updatedVoucherLineAmount = 10.00;",
													"    voucherLine.amount = updatedVoucherLineAmount;",
													"    pm.variables.set(\"updatedVoucherLineAmount\", updatedVoucherLineAmount);",
													"    pm.variables.set(\"updatedVoucherLine\", JSON.stringify(voucherLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "52021795-cebe-46a3-9dff-bb943c99f9d5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeeded",
													"    utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"        pm.test(\"Verify voucher line updated with new VoucherLine Amount\", () => pm.expect(res.json().amount).to.equal(pm.variables.get(\"updatedVoucherLineAmount\")));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedVoucherLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with voucher lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c4ef65f-7aef-4499-8262-7a5ea8ac909f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "631cb69c-5ebf-4ae2-886c-8897d6fef744",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(set) current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be750a4e-a557-4761-9a0a-c735a7dc44e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5f53678f-3363-4773-a0d0-197ce73f4dec",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully re(set) voucher start value\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "636b533a-b5d8-4340-bf6c-4c56a6bfe59a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "360a87e1-80ea-47aa-82a0-5a01805b3d7f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully got voucher start value\", function () {",
											"    pm.response.to.have.status(200);",
											"    utils.validateSequenceNumber(pm.response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with voucher number configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f936fb25-9ca0-4d29-a950-282a4f1f80e2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa1df152-3a7c-4843-b2ed-4d1deaea6572",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Workflows with configs",
							"item": [
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice with 4 lines, 2 of lines have negative total",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1382484e-52e4-447b-9b61-b33ad3535a3c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"workflow-invoiceWith4LinesId\", invoice.id);",
															"    pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"    createLines(invoice.id);",
															"  ",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(0);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															"",
															"",
															"function createLines(invoiceId) {",
															" ",
															"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
															"",
															"    // Now creating 4 invoice lines",
															"    for (let i = 1; i < 5; i++) {",
															"        if (i % 2 === 0) {",
															"            invoiceLine.poLineId = pm.globals.get(\"poLine1Id\");",
															"        } else {",
															"            invoiceLine.poLineId = pm.globals.get(\"poLine2Id\");",
															"            invoiceLine.subTotal = -invoiceLine.subTotal;",
															"        }",
															"  ",
															"        invoiceLine.releaseEncumbrance = i === 4;",
															"        ",
															"        utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
															"            pm.test(\"Invoice line #\" + i + \" is created in storage\", () => {",
															"              pm.expect(err).to.equal(null);",
															"              pm.expect(response).to.have.property('code', 201);",
															"            });",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "40fb2961-9fc0-43bc-819c-a13a54c81d1b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
															"",
															"invoice.note += \" - with 4 lines for transition through workflow\";",
															"invoice.status = \"Open\";",
															"invoice.currency=\"EUR\";",
															"",
															"delete invoice.adjustments;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e403f457-639e-4078-8904-b184aa36ae53",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0ecc159c-1821-4cdb-b646-383c8f16cd71",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Verify that voucher has been created",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"One voucher created\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    let voucher = res.json().vouchers[0];",
															"                    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"                    pm.environment.set(\"workflow-voucherWith4LineId\", voucher.id);",
															"                    let voucherNumberPrefixValue = JSON.parse(pm.variables.get(\"voucherNumber\")).voucherNumberPrefix;",
															"                    pm.expect(voucher.voucherNumber).to.include(voucherNumberPrefixValue);",
															"                    //check acqUnitIds list of invoice and created voucher are equal",
															"                    pm.expect(utils.arraysOfStringsAreEqual(invoice.acqUnitIds, voucher.acqUnitIds)).to.be.true;",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check voucher lines created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8f5d3bde-35f5-4ca3-9e8f-bd2b17c07f1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e49c722f-e687-4218-af6a-28b58ef1ef8e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucherLines = {};",
															"",
															"pm.test(\"Successfully get voucher lines\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucherLines = pm.response.json().voucherLines;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of voucher lines\", function() {",
															"",
															"    pm.expect(voucherLines).to.have.length(1);",
															"});",
															"",
															"pm.test(\"Check all lines have amount type distributions\", function() {",
															"    voucherLines[0].fundDistributions.forEach(distr => pm.expect(distr.distributionType).is.to.equal(\"amount\"));",
															"});",
															"",
															"pm.environment.unset(\"workflow-voucherWith4LineId\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=voucherId=={{workflow-voucherWith4LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"voucher-lines"
													],
													"query": [
														{
															"key": "query",
															"value": "voucherId=={{workflow-voucherWith4LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ccf5a451-cdcd-4b60-920a-2811cc410663",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b47116ea-6fc2-4a64-997e-3fb406da9437",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Validate voucher",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"Still only one voucher but already Paid\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    pm.expect(res.json().vouchers[0].status).to.eql(\"Paid\");",
															"                });",
															"            });",
															"",
															"            // Validate order lines",
															"            utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
															"                pm.test(\"Associated order lines payment status updated\", function () {",
															"                    res.json().compositePoLines.forEach(poLine => {",
															"                        let expectedStatus = (poLine.id === globals.poLine1Id) ? \"Fully Paid\" : \"Partially Paid\";",
															"                        pm.expect(poLine.paymentStatus).to.equal(expectedStatus);",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check number of payments created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e4470356-20f9-49e3-9f4f-ae151b1374c0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "de989701-f4b0-44b7-82d5-457c61b4cd89",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of payments\", function() {",
															"",
															"    pm.expect(transactions).to.have.length(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check number of credits created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73d31e98-089e-401c-8609-44e7f787c4be",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1e4c5fad-26c8-4f9c-9eb7-18730ac650d8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of credits\", function() {",
															"    pm.expect(transactions).to.have.length(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Credit",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Credit"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Workflows with empty configs",
							"item": [
								{
									"name": "Delete invoice configs",
									"item": [
										{
											"name": "Get invoice configs and delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a950cc9-f6b7-4ba1-a3d5-9a9686eb1318",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let currentConfigs;",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"",
															"    currentConfigs = pm.response.json().configs;",
															"    console.log(\"Current configs: \", currentConfigs);",
															"});",
															"",
															"let configsToProcess = globals.testData.invoicesConfigs.configNames;",
															"for (var i = 0; i < configsToProcess.length; i++) {",
															"    let configName = configsToProcess[i];",
															"     if (currentConfigs.length > 0) {",
															"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
															"        utils.deleteConfig(configId);",
															"    } else {",
															"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "de695635-217d-4114-bb5a-bb3101cfbf91",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICE"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d12747fb-fa09-4faa-8477-7ab954824dda",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineId\", invoice.id);",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(10);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(10);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4523a24b-4f7f-48b6-b6e8-e6dbe98c6a5d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
															"",
															"invoice.note += \" - with 1 line for transition through workflow\";",
															"invoice.status = \"Open\";",
															"",
															"invoice.adjustments[0].fundDistributions = [{",
															"    \"fundId\": pm.environment.get(\"fund2Id\"),",
															"    \"distributionType\": \"percentage\",",
															"    \"value\": 50",
															"},",
															"{",
															"    \"fundId\": pm.environment.get(\"fundId\"),",
															"    \"distributionType\": \"amount\",",
															"    \"value\": 5",
															"}]",
															"delete invoice.voucherNumber;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create order-summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87d0c908-4587-422a-b102-a9796c7f5847",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Order transaction summaries line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fcad7a18-e6d3-4863-95fe-fe22f1dcd14d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\": \"{{completeOrderId}}\",\n\t\"numTransactions\": 2\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 1st encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e1843760-7218-472e-9925-fa4a0ca9ae90",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Encumbrance is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    transaction = pm.response.json();",
															"    pm.environment.set(\"encumbranceId1\", transaction.id);",
															"    pm.environment.set(\"encumbrance1\", JSON.stringify(transaction));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "20b7db46-bd5b-4cae-8add-f005b11750a8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 1500,\n  \"currency\": \"USD\",\n  \"description\": \"PO_Line: History of Incas\",\n  \"encumbrance\": {\n    \"amountAwaitingPayment\": 0,\n    \"initialAmountEncumbered\": 1500,\n    \"status\": \"Unreleased\",\n    \"orderType\":  \"Ongoing\",\n    \"subscription\": false,\n    \"reEncumber\": true,\n    \"sourcePurchaseOrderId\": \"{{completeOrderId}}\",\n    \"sourcePoLineId\": \"{{poLine1Id}}\"\n  },\n  \"sourceInvoiceId\": \"{{emptyConfigWorkflow-invoiceWith1LineId}}\",\n  \"fiscalYearId\": \"{{fiscYearId}}\",\n  \"fromFundId\": \"{{fundId}}\",\n  \"source\": \"PoLine\",\n  \"transactionType\": \"Encumbrance\" \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 2nd encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d34e3647-b110-49d3-8e5f-82a66ec82fdc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Encumbrance is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    transaction = pm.response.json();",
															"    pm.environment.set(\"encumbranceId2\", transaction.id);",
															"    pm.environment.set(\"encumbrance2\", JSON.stringify(transaction));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1b182621-af7d-4959-b662-4aeeec43a4f2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 1000,\n  \"currency\": \"USD\",\n  \"description\": \"PO_Line: History of Incas\",\n  \"encumbrance\": {\n    \"amountAwaitingPayment\": 0,\n    \"initialAmountEncumbered\": 1000,\n    \"status\": \"Unreleased\",\n    \"orderType\":  \"Ongoing\",\n    \"subscription\": false,\n    \"reEncumber\": true,\n    \"sourcePurchaseOrderId\": \"{{completeOrderId}}\",\n    \"sourcePoLineId\": \"{{poLine2Id}}\"\n  },\n  \"sourceInvoiceId\": \"{{emptyConfigWorkflow-invoiceWith1LineId}}\",\n  \"fiscalYearId\": \"{{fiscYearId}}\",\n  \"fromFundId\": \"{{fund2Id}}\",\n  \"source\": \"PoLine\",\n  \"transactionType\": \"Encumbrance\" \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice line without poLineId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "48808881-9c7a-4866-b49e-f45451e35376",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Invoice line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4ec66bbb-37d6-47c9-9ee9-96c2d3f65b38",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"",
															"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"));",
															"    invoiceLine.subTotal = 101;",
															"    invoiceLine.fundDistributions[0].value = 50;",
															"    invoiceLine.fundDistributions[0].encumbrance = pm.environment.get(\"encumbranceId1\");",
                                                            "    delete invoiceLine.fundDistributions[0].code;",
															"    let amoutDistribution = {\"fundId\": pm.environment.get(\"fund2Id\"), \"distributionType\": \"amount\", \"value\": 55.6, \"encumbrance\" : pm.environment.get(\"encumbranceId2\")};",
															"    invoiceLine.fundDistributions.push(amoutDistribution);",
															"    delete invoiceLine.poLineId;",
															"",
															"pm.variables.set(\"emptyConfigWorkflow-invoiceLineContent\", JSON.stringify(invoiceLine));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceLineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoice-lines"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 1 line",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "28facc19-b22c-41de-b439-54cbac1d42a0",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "71bd4208-b3b0-4357-aade-2266dcc31145",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"            ",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"            // Verify that voucher has been created",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"One voucher created\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    let voucher = res.json().vouchers[0];",
															"                    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"                    pm.environment.set(\"emptyConfigWorkflow-voucherWith1LineId\", voucher.id);",
															"                    let voucherNumberPrefixValue = JSON.parse(pm.variables.get(\"voucherNumber\")).voucherNumberPrefix;",
															"                    pm.expect(voucher.voucherNumber).to.not.include(voucherNumberPrefixValue);",
															"                    //check acqUnitIds list of invoice and created voucher are equal",
															"                    pm.expect(utils.arraysOfStringsAreEqual(invoice.acqUnitIds, voucher.acqUnitIds)).to.be.true;",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get voucher lines by query",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "71cdafc5-0a42-41c7-a195-c240bfe25bf3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "be7685b9-9646-46d2-8f52-f85a19e5621d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucherLines = {};",
															"",
															"pm.test(\"Successfully get Voucher lines\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucherLines = pm.response.json();",
															"    pm.expect(voucherLines.voucherLines.length).to.equal(2);",
															"});",
															"",
															"pm.test(\"Check all lines have amount type distributions\", function() {",
															"   voucherLines.voucherLines.forEach(line => line.fundDistributions.forEach(distr => { ",
															"      pm.expect(distr.distributionType).is.to.equal(\"amount\");",
															"      pm.expect(distr).to.have.property(\"code\");",
															"   }));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=voucherId=={{emptyConfigWorkflow-voucherWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"voucher-lines"
													],
													"query": [
														{
															"key": "query",
															"value": "voucherId=={{emptyConfigWorkflow-voucherWith1LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check pending payments has been created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cc87cd2e-b488-4e97-8338-4f5f8d1550d7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eb1427d2-30d8-49a6-8003-3f21d33d8111",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Successfully get encumbrance\", function() {",
															"    pm.response.to.have.status(200);",
															"    transaction = pm.response.json();",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var transactions = pm.response.json().transactions;",
															"    pm.expect(transactions.length).to.eql(4);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Pending payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Pending payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check invoice transaction summary created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7cfea445-6196-4668-92c4-1bc96a49155c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7bc336a6-933b-4ee0-bdf1-9536936269cc",
														"exec": [
															"pm.test(\"Successfully get encumbrance\", function() {",
															"    pm.response.to.have.status(200);",
															"    transaction = pm.response.json();",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var numPendingPayments = pm.response.json().numPendingPayments;",
															"    pm.expect(-4).to.eql(numPendingPayments);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with line w/o poLineId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "baa84cf1-322c-493f-9100-6259b7a1a3a2",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4e485dfe-c695-44d9-a5b9-7eee75de6995",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"            // Validate voucher",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"Still only one voucher but already Paid\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    pm.expect(res.json().vouchers[0].status).to.eql(\"Paid\");",
															"                });",
															"            });",
															"",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check number of payments created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b70223f5-1f7f-443b-baee-1b3ad40b44ac",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ad997c28-709c-4f1c-b9d5-95313b1a6464",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of payments\", function() {",
															"",
															"    pm.expect(transactions).to.have.length(4);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Restore invoice configs",
									"item": [
										{
											"name": "Check invoice configs and restore",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fb9242e-5866-4259-ad01-a57db3d2282b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let testConfigs = globals.testData.invoicesConfigs;",
															"",
															"let configs = [];",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"    configs = pm.response.json().configs;",
															"});",
															"",
															"let configNamesToProcess = testConfigs.configNames;",
															"console.log(\"Config codes to process: \" + configNamesToProcess);",
															"",
															"for (var i = 0; i < configNamesToProcess.length; i++) {",
															"    let configName = configNamesToProcess[i];",
															"    let value = pm.variables.get(configName);",
															"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b6591ec3-3ae0-4c51-9b86-6a3379a8c76f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICE"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "This directory contains various tests related to transition of the invoices/vouchers through the workflow",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch groups",
					"item": [
						{
							"name": "Get batch-groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6f4c2cc-f084-4d81-8098-42a66449c7f8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroups = [];",
											"",
											"pm.test(\"Successfully get batch-groups\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    batchGroups = pm.response.json().batchGroups;",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    batchGroups.forEach(batchGroup => utils.validateBatchGroup(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39734802-dbaa-46c5-91de-4e2c1e3d5dec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b93d67d-eb0d-49e7-b7d6-37a872a1a426",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroup = {};",
											"",
											"pm.test(\"Batch-group is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    pm.expect(batchGroup.name).to.exist;",
											"    pm.environment.set(\"originBatchGroupId\", batchGroup.id);",
											"    ",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "404e95dd-ec2f-48e4-887c-90f3b2685e35",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.id",
											"    delete batchGroup.metadata;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-group by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b55ca19f-8db7-42c8-bbc9-2fa07b62706d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Batch-group\", function () {",
											"    pm.response.to.have.status(200);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be15ac0c-860c-408d-a428-9382d9654907",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7968f8ed-23bb-499b-a197-d0bb3df83b5b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-groups/\" + pm.environment.get(\"originBatchGroupId\"), (err, res) => utils.validateBatchGroup(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cda55601-2ff0-4e9f-8983-371918b021f7",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    batchGroup.name = \"New Name\";",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03c03edf-2e5b-4b79-893c-49f8775ef2bb",
										"exec": [
											"pm.test(\"Batch-group is deleted\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "314adf09-e195-4204-a999-a2216687c91b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher exports",
					"item": [
						{
							"name": "Create voucher for batch-voucher-export",
							"item": [
								{
									"name": "Create order One-Time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "79867ea6-4f1f-4999-8ad5-e114ca633248",
												"exec": [
													"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
													"if (bePoNumberNum === null) {",
													"    pm.environment.set(\"bePoNumberNum\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cf6fd8d3-b0cb-42bc-b8bb-e0b829046ac4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrder = pm.response.json();",
													"    pm.environment.set(\"beOrder\", beOrder);",
													"    pm.environment.set(\"beOrderId\", beOrder.id);",
													"    pm.environment.set(\"beOrderNumber\", beOrder.poNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add order lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d1c74a7-14c9-47db-8988-dc8b3e7ed307",
												"exec": [
													"console.log(pm.environment.get(\"beOrderId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "efdb92b6-af99-446f-a62b-b81343289e55",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrderLine = {};",
													"",
													"pm.test(\"Order line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrderLine = pm.response.json();",
													"    pm.environment.set(\"beOrderLine\", beOrderLine);",
													"    pm.environment.set(\"beOrderLineId\", beOrderLine.id);",
													"});",
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Open order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48d149af-1075-4a97-b843-b8b06e7484db",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{beOrderId}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{beOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47c44d26-d716-487f-96c5-22fe71d60d1e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"Order after open\", function () {",
													"    beOrder = pm.response.json();",
													"    console.log(beOrder.id);",
													"    pm.environment.set(\"beOrder\", beOrder);",
													"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
													"    pm.environment.set(\"bePOLEncumbrance\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{beOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "03f7775d-8e48-4a7e-9a37-d50d049ff031",
												"exec": [
													"var beInvoiceNumber = pm.environment.get(\"beInvoiceNumber\");",
													"if (beInvoiceNumber === null) {",
													"    pm.environment.set(\"beInvoiceNumber\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"beInvoiceNumber\", ++beInvoiceNumber);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c4139dc5-645c-4700-a8c4-d5d6fe7ecd2b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beInvoice = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beInvoice = pm.response.json();",
													"    pm.environment.set(\"beInvoiceId\", beInvoice.id);",
													"    console.log(\"Invoice after create id : \" + beInvoice.id)",
													"});",
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chkSubscriptionOverlap\": true,\r\n  \"currency\": \"USD\",\r\n  \"source\": \"User\",\r\n  \"batchGroupId\" : \"{{batchGroupId}}\",\r\n  \"adjustments\": [\r\n    \r\n  ],\r\n  \"invoiceDate\": \"2020-04-19\",\r\n  \"accountingCode\": \"G64758-74837\",\r\n  \"vendorId\": \"{{activeVendorId}}\",\r\n  \"vendorInvoiceNo\": \"{{beInvoiceNumber}}\",\r\n  \"paymentMethod\": \"Cash\",\r\n  \"status\": \"Open\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add invoice lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c4448f6-3a26-4459-a849-f9666cd8150f",
												"exec": [
													"   console.log(\"BE order line id : \" + pm.environment.get(\"beOrderLineId\"));",
													"   console.log(\"bePOLEncumbrance : \" + pm.environment.get(\"bePOLEncumbrance\"));",
													"   console.log(\"fundId : \" + pm.environment.get(\"fundId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0b7fcf16-e028-4470-8dda-29c00ed0ec1d",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"invoiceId\": \"{{beInvoiceId}}\",\r\n  \"invoiceLineStatus\": \"Open\",\r\n  \"description\": \"Environment and identity politics in colonial Africa Fulani migrations and land conflict by Emmanuel M. Mbah\",\r\n  \"poLineId\": \"{{beOrderLineId}}\",\r\n  \"fundDistributions\": [\r\n    {\r\n      \"encumbrance\": \"{{bePOLEncumbrance}}\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"distributionType\": \"percentage\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"quantity\": 2,\r\n  \"subTotal\": 0.9,\r\n  \"accountNumber\": \"BRXXXXX-01\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get for the invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57d22702-2fe7-41e3-b648-f3979daa2c68",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beInvoice = {};",
													"",
													"pm.test(\"Order after open\", function () {",
													"    pm.response.to.have.status(200);",
													"    beInvoice = pm.response.json();",
													"    console.log(\"Invoice : \" + beInvoice.id);",
													"    pm.environment.set(\"beInvoice\", beInvoice);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{beInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{beInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve invoice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "af73a655-9aef-4f46-82b5-afe5b79de057",
												"exec": [
													"    beInvoice = pm.environment.get(\"beInvoice\");",
													"    console.log(\"Udated invoice\" + beInvoice)",
													"    beInvoice.status = \"Approved\";",
													"    pm.environment.set(\"beUpdatedInvoice\", JSON.stringify(beInvoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b60b275e-64b3-45bd-bf4e-4249295d9df3",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{beUpdatedInvoice}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{beInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{beInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f680219-c30b-4296-9687-28c5f878f832",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchVoucherExports = [];",
											"",
											"pm.test(\"Successfully get batch-voucher-exports\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.exist;",
											"    batchVoucherExports = pm.response.json().batchVoucherExports;",
											"});",
											"",
											"pm.test(\"Batch-voucher-export content is valid\", function() {",
											"    batchVoucherExports.forEach(batchVoucherExports => utils.validateBatchVoucherExport(batchVoucherExports));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a0a4c56-3c54-4115-afd0-3942cfa6f3a2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30d3f0f5-e31c-4cdb-a250-16cf848e05d4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchVoucherExport = {};",
											"",
											"pm.test(\"Batch-voucher-export is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchVoucherExport = pm.response.json();",
											"    pm.environment.set(\"batchVoucherExportId\", batchVoucherExport.id);",
											"});",
											"",
											"setTimeout(function(){}, 3000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80842d27-2f9d-4c73-9899-a1f8e39be3f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t  \"status\" : \"Pending\",\n      \"message\": \"Batch voucher export message\",\n      \"batchGroupId\": \"{{batchGroupId}}\",\n      \"start\": \"2020-03-16T00:00:00.000+0000\",\n      \"end\": \"2020-08-22T00:00:00.000+0000\",\n      \"metadata\": {\n        \"createdDate\" : \"2020-04-13T00:00:35.222+0000\",\n        \"createdByUserId\" : \"6618f188-4ec9-52e2-88ec-9632793c357e\",\n        \"updatedDate\" : \"2020-04-28T00:01:16.111+0000\",\n        \"updatedByUserId\" : \"6618f188-4ec9-52e2-88ec-9632793c357e\"\n      }\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "742452d1-313e-4a31-b313-141f029ba3fb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully get Batch-voucher-exports\", function () {",
											"    pm.response.to.have.status(200);",
											"    batchVoucherExport = pm.response.json();",
											"    pm.expect(batchVoucherExport.batchVoucherId).not.eql(null);",
											"    pm.environment.set(\"batchVoucherId\", batchVoucherExport.batchVoucherId);",
											"});",
											"",
											"pm.test(\"Batch-voucher-export content is valid\", function() {",
											"     utils.validateBatchVoucherExport(batchVoucherExport);",
											"});",
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3af8097-b66d-45f2-9db4-efb0580f5eb8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{batchVoucherExportId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{batchVoucherExportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch voucher by id JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98f82e4b-6c6c-4bc9-8f65-3dd901905870",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f262cd95-cde7-407a-9e72-088f8656ecd8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{batchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{batchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Edit batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2219f43-534a-42a2-bb94-d2c004327891",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-voucher/batch-voucher-exports/\" + pm.environment.get(\"batchVoucherExportId\"), (err, res) => utils.validateBatchVoucherExport(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "498e89e6-d745-4855-a8d7-2b8826646da9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/batch-voucher/batch-voucher-exports/\" + pm.environment.get(\"batchVoucherExportId\"), function (err, res) {",
											"    let batchVoucherExport = res.json();",
											"    batchVoucherExport.message = \"Updated message\";",
											"    ",
											"    pm.environment.set(\"batchVoucherExportContent\", JSON.stringify(batchVoucherExport));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchVoucherExportContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{batchVoucherExportId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{batchVoucherExportId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials",
					"item": [
						{
							"name": "Create credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66a15f00-c63a-4aa3-b9ae-f5d0978d731c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let credentials = {};",
											"",
											"pm.test(\"Credentials is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    credentials = pm.response.json();",
											"});",
											"",
											"pm.test(\"Credentials content is valid\", function() {",
											"    // check required fields",
											"    pm.expect(credentials.exportConfigId).to.exist;",
											"    pm.expect(credentials.username).to.exist;",
											"    ",
											"    pm.environment.set(\"credentialsId\", credentials.id);",
											"    ",
											"    utils.validateCredentials(credentials);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a28c5907-aade-47e3-a64f-db51762249a3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// create mock export configuration",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVoucherExportConfigs/configs.json\", function (err, res) {",
											"    let exportConfig = res.json().exportConfigs[0];",
											"    exportConfig.batchGroupId = \"2a2cb998-1437-41d1-88ad-01930aaeadd5\";",
											"    delete exportConfig.metadata;",
											"    ",
											"  utils.sendPostRequest(\"/batch-voucher/export-configurations\", exportConfig, function(err,response){",
											"      pm.test(\"Export configuration is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.environment.set(\"exportConfigurationId\", response.json().id);",
											"      });",
											"    });",
											"});",
											"",
											"// prepare credentials body",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/credentials/574f0791-beca-4470-8037-050660cfb73a.json\", function (err, res) {",
											"    let credentials = res.json();",
											"    credentials.exportConfigId = pm.environment.get(\"exportConfigurationId\");",
											"    delete credentials.metadata;",
											"    ",
											"    pm.environment.set(\"credentialsBody\", JSON.stringify(credentials));",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{credentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b60413d-577d-419f-9e85-79c71845b349",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let credentials = {};",
											"",
											"pm.test(\"Successfully get credentials\", function () {",
											"    pm.response.to.have.status(200);",
											"    credentials = pm.response.json();",
											"});",
											"",
											"pm.test(\"Credentials content is valid\", function() {",
											"    utils.validateCredentials(credentials);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9b381f0-060f-4c39-ad3c-acd79653883b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11615ba6-2609-454e-bfdb-da6c1435ec56",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => utils.validateCredentials(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2310b2ff-372c-4224-84f9-ff40c9caa126",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => {",
											"    let credentials = res.json();",
											"    credentials.username = \"newName\";",
											"    credentials.password = \"newPassword\";",
											"    delete credentials.metadata;",
											"    pm.environment.set(\"modifiedCredentialsBody\", JSON.stringify(credentials));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedCredentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7bfdd228-4028-4240-ac3f-be2413387c64",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dba9607a-0781-4b6c-bc2c-79e8f0c49dd0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create invoices for negative tests",
					"item": [
						{
							"name": "Reviewed",
							"item": [
								{
									"name": "Create reviewed invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "712efc05-1941-474a-889e-53a805003b36",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeReviewedToApprovedInvoiceId\", invoice.id);",
													"    pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));",
													"",
													"    createLine(invoice.id);",
													"",
													"    // Verify that voucher has not been created",
													"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
													"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
													"    });",
													"});",
													"",
													"function createLine(invoiceId) {",
													"",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
													"",
													"    // Now creating invoice line",
													"    utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
													"        pm.test(\"Invoice line is created in storage\", () => {",
													"          pm.expect(err).to.equal(null);",
													"          pm.expect(response).to.have.property('code', 201);",
													"        });",
													"    });",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6e7eeb8-31e7-4dd7-906f-69a33d67da3f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Approved\";",
													"invoice.status = \"Reviewed\";",
													"delete invoice.adjustments;",
													"delete invoice.voucherNumber;",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Paid",
							"item": [
								{
									"name": "Create paid invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1db65280-e324-4ae8-aa78-df2baa30959f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativePaidStatusInvoiceId\", invoice.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6521fd48-47ae-4d40-974a-edd5bd88c1fb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Approved\";",
													"invoice.status = \"Paid\";",
													"delete invoice.adjustments;",
													"delete invoice.voucherNumber;",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"",
													"pm.environment.set(\"negativePaidStatusInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativePaidStatusInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Approved 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe05e006-76e2-4e34-bf1d-27e5515e6c63",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Required properties are missing\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"",
													"    pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"    pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"    pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ab9bf9d1-6e1e-4d7f-a126-cd5c8769b748",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Approved\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Reviewed 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dadd6cd2-a38b-4c38-80d3-6e008b6229a0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "93e76854-a8b7-4a3a-b968-80e8a704630f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Reviewed\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Cancelled 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f9709b1-a923-41c9-bf4d-63dd4f02c61c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2b5e0254-d99c-4179-83bd-f65e5cc6caf5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Cancelled\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Open 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29f31901-af62-4ed4-8e6b-ab4352bc8b89",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "72a7b54c-c6a5-448d-aef4-c4d84fb15517",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Open\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d85dcf0e-2227-4b5c-a8fc-8fb16f68e049",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eadc7846-5526-4e56-aebd-cb2dacf201f2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Approved",
							"item": [
								{
									"name": "Create to be approved invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9de5ef4f-b240-40bd-a042-96f7d522ee62",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeApprovedToPaidInvoice\", invoice.id);",
													"    pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeApprovedToPaidInvoice\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"negativeApprovedToPaidInvoiceLineId\", response.json().id);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "11b235bf-89e0-4a61-ba82-374aa44c3903",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Open\";",
													"",
													"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedToPaidInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with status Approved",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b1bb467f-cdcc-4402-be9c-18ff8564382f",
												"exec": [
													"let invoice = JSON.parse(globals.negativeApprovedToPaidInvoiceContent);",
													"invoice.status = \"Approved\";",
													"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e36f321b-79f3-4007-9d5d-d0d3674b6752",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
													"        pm.expect(res.json().status).to.equal(\"Approved\");",
													"        pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(res.json()));",
													"      ",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedToPaidInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedToPaidInvoice}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								},
								{
									"name": "Create approved invoice with locked total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9e6961e3-708a-47fc-be7e-7cd26163dc53",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
													"",
													"invoice.lockTotal = true;",
													"invoice.total = 12.34;",
													"invoice.note += \" - locked total\";",
													"invoice.status = \"Open\";",
													"",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"delete invoice.adjustments;",
													"",
													"pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e536b2c-302b-4a1b-8d9c-66d91627f327",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalId\", invoice.id);",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addLine(invoice);",
													"});",
													"",
													"function addLine(invoice) {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoice.id);",
													"    invoiceLine.poLineId = pm.globals.get(\"poLine1Id\");",
													"",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(err).to.equal(null);",
													"          pm.expect(response).to.have.property('code', 201);",
													"          utils.updateInvoiceStatus(invoice, \"Approved\");",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContentLockedTotal}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify invoice with locked total and delete voucher",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d3873a50-95bb-4112-b704-fd8f6e5e32a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1a632973-8c4f-4500-a556-595a38e7421c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is Approved\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));",
													"    pm.expect(invoice).to.have.property('status', \"Approved\");",
													"    utils.deleteVouchersForInvoice(invoice.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedInvoiceWithLockedTotalId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create approved invoice with non-existing fund",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebd27f8c-bca5-48d7-84d4-8ecacdb9549a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeInvoiceWithUnexistingFund\", invoice.id);",
													"    pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeInvoiceWithUnexistingFund\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    invoiceLine.fundDistributions[0].fundId = require('uuid').v4();",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7b9d6ac3-30e1-4ae1-9d51-91d5ba7c13b8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceWithUnexistingFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create approved invoice with big invoiceLine.total",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4138ef9-be9f-42dd-9849-4bbee2f58576",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeInvoiceOwerexpended\", invoice.id);",
													"    pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeInvoiceOwerexpended\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    invoiceLine.subTotal = 2000000000;",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"negativeOwerexpendedInvoiceLineId\", response.json().id);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a8ac23b8-3e4e-42ba-8d72-65531108095f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceOwerexpendedContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch Vouchers",
					"item": [
						{
							"name": "Test GET batch voucher by id without Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d56857d9-3c98-4728-8d7a-2336672b5c60",
										"exec": [
											"pm.test(\"Error get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "72b5fb01-04d9-4fe3-a439-62501b79bc8b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Test GET Non-Existing batch voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "226e6b7c-17ce-40bb-9db4-208f382fd09d",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0a67afa-c042-47d8-a28d-06904cda235a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/1cc2d3ec-b239-4f5e-b34e-fc63dea23d98",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"1cc2d3ec-b239-4f5e-b34e-fc63dea23d98"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1db1d130-5c91-45e6-bd0e-4659734db4f6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "90ddb7b9-4ff2-4bfc-87fb-c28328460452",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Documents",
					"item": [
						{
							"name": "Update document - PUT metod not implemented",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc7fab10-9da5-4678-aca3-2f05e61c41ad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Method not implemented\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5758c0bc-0f1c-4fd6-8d76-b4e86e1db6d5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{documentWithURL}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}/documents/{{documentWithUrlId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeReviewedToApprovedInvoiceId}}",
										"documents",
										"{{documentWithUrlId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Protected Fields Modification",
							"item": [
								{
									"name": "Update Invoice with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fa692e27-6c3e-424c-b854-c98183f236e9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.currency = \"TUGRIK\";",
													"    invoice.total = 100.500;",
													"    pm.variables.set(\"updatedApprovedInvoiceBody\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2811f660-0c48-435e-92be-9fa513fb8593",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let errors = pm.response.json().errors;",
													"    pm.expect(errors).to.have.lengthOf(1);",
													"    pm.expect(errors[0].message).to.include(\"Field can't be modified\");",
													"    pm.expect(errors[0].code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(errors[0].protectedAndModifiedFields).to.include.members([\"currency\", \"total\"]);",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedApprovedInvoiceBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedToPaidInvoice}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get invoice by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6feca98d-d10c-42b8-be3a-03111417aa23",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e207ad47-398f-4b55-9f2d-b9072aeb2c31",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04cf59a2-66ac-4d93-814b-4190afd463de",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48d1fe36-2cad-4b14-a72a-b68d0d944349",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69949de8-a3ec-4019-9bfd-6257b96661e6",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "820429ed-f87d-433e-a954-80a68b3d3282",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "365db622-7343-42e3-8e52-5ca9d7557075",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "baf47ebc-bce9-46fb-8b63-e219ff5458d5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc2d6ed0-b9d5-4799-b344-736db32b66b3",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb739dc1-d95b-42db-b49b-da81a368eabc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bd2bf5-7861-457b-9cdc-972b19b77c41",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f1a2d47-eb3d-408d-8260-b5abf6b323d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice with locked total but without total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b9d8056-266f-4bac-9c8e-60668e7aeaa4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"",
											"delete invoice.total;",
											"invoice.lockTotal = true;",
											"",
											"pm.variables.set(\"invoiceBodyWithLockedTotal\", JSON.stringify(invoice));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b10c819b-ba0d-46ec-baa7-7838acd2ea6e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected creation\", function () {",
											"    pm.response.to.have.status(422);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"invoiceTotalRequired\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceBodyWithLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create empty invoice with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8de7fdb9-142d-43f2-8497-dc9ba7d292fb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75c2221d-683f-4a59-87d8-fbeaf017da89",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(7);",
											"",
											"        let requiredProps = utils.getInvoiceSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length - 1);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Update invoice by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2d5eede-8161-4e8a-bb08-14aa5fef6587",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d60a9f2-631d-4578-997c-4e44ec602d9d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57f24aad-dfa5-4d25-acde-dde976e08550",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9cf508d-ccf8-4785-9829-e1449e5855b3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b29e6fd-5753-41e2-965f-efac22bcf9b6",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1335295a-0043-4c90-ba69-317815c8e916",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b0ac79a-1fd5-4bc9-8788-7fd7ec165f00",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "983f70c9-51e0-4803-86b1-bebeaee93420",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with status Piad, and missing poLine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c8577025-f693-479f-be0f-1421b3565cd5",
										"exec": [
											"let invoice = JSON.parse(globals.negativeApprovedToPaidInvoiceContent);",
											"invoice.status = \"Paid\";",
											"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "085bc80f-f066-44a4-a6e5-13e789627716",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
											"        pm.expect(res.json().status).to.equal(\"Approved\");",
											"      ",
											"    });",
											"});",
											"",
											"pm.globals.unset(\"negativeApprovedToPaidInvoiceContent\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{negativeApprovedToPaidInvoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedToPaidInvoice}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Update invoice with locked total changing total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4356763d-7956-4cbc-b4d4-fe78177879ae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"    invoice.total += invoice.total;",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "18b78cc4-c2b1-412c-8519-91becc6e2337",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected updates\", function () {",
											"    pm.response.to.have.status(400);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"protectedFieldChanging\");",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"One 'protectedAndModifiedFields' is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].protectedAndModifiedFields[0], \"The only changed property should be 'total'\").to.equal(\"total\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Update invoice with locked total to false and delete total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ded73c0-6596-428a-b7f5-717037729929",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"    invoice.lockTotal = false;",
											"    delete invoice.total;",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f263e4f0-bb0d-433e-ab77-1d4e2da66748",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected updates\", function () {",
											"    pm.response.to.have.status(400);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"protectedFieldChanging\");",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"Two elements in 'protectedAndModifiedFields' are expected\").to.have.lengthOf(2);",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"Unexpected changed properties\").to.have.members([\"total\", \"lockTotal\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Delete invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2768289-47ca-4a2f-899b-1225b1ea9470",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1532e20-6b99-4bd4-a8b8-bfe6ed9d8fca",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a843cd0-c76f-40df-aa48-602df9052134",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "734b0f84-afc8-48b3-b5e5-4b7030b132b7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd56798b-2541-41cc-b897-0a2acca1faf8",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "23a24757-4a20-4179-b8e7-7d6069a39d8b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd4f9031-e737-40d9-b0fc-30f5237cb2da",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d998746f-45a6-4307-8ab1-61934caacb10",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Protected Fields Modification",
							"item": [
								{
									"name": "Update Invoice-Line with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ebf4a38b-f92a-4840-84d0-16f831d1fb0c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.environment.get(\"negativeApprovedToPaidInvoiceLineId\"), (err, res) => {",
													"    let invoiceLine  = res.json();",
													"    invoiceLine.quantity = 10;",
													"    invoiceLine.subTotal = 100.500;",
													"    pm.variables.set(\"updatedApprovedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3583d9de-b789-4e51-8168-2049b3446039",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let errors = pm.response.json().errors;",
													"    pm.expect(errors).to.have.lengthOf(1);",
													"    pm.expect(errors[0].message).to.include(\"Field can't be modified\");",
													"    pm.expect(errors[0].code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(errors[0].protectedAndModifiedFields).to.include.members([\"quantity\", \"subTotal\"]);",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedApprovedInvoiceInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeApprovedToPaidInvoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeApprovedToPaidInvoiceLineId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create empty invoice-lines with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b3d6780a-51d4-4633-b981-14f5318af6c2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "abf70ec5-61f6-4901-a9ce-604ecfcb11a9",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"",
											"        requiredObj(errors, \"description\");",
											"        requiredObj(errors, \"invoiceId\");",
											"        requiredObj(errors, \"invoiceLineStatus\");",
											"        requiredObj(errors, \"subTotal\");",
											"        requiredObj(errors, \"quantity\");",
											"",
											"        // releaseEncumbrance is also required but has default value",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Create invoice line - without required fields- 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "52cb55fc-42bc-485e-a245-a79a11475d89",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"delete line.invoiceId;",
											"delete line.invoiceLineStatus;",
											"delete line.subTotal;",
											"delete line.quantity;",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ea28068-bc7f-4cb4-929b-db2805cca5a8",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    ",
											"});",
											"pm.test(\"4 validation errors\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1185cc4-9b26-4d5c-a1f7-9c79ee54b9da",
										"exec": [
											"pm.test(\"Status code is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c2da353-f095-4c7a-8b81-363221d8f244",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "477f81d4-7e43-43d4-a200-5eea50f7dd8a",
										"exec": [
											"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0875048b-ed22-41e6-aad1-38257f999c98",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"invoiceLine.invalidProperty = \"invalid\";",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice line by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "848c39af-0dc3-4d41-95ff-c3f8c0e86c07",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3ad2c5ef-3e1a-4f58-8bd1-6042ea65a1ca",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invoice Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3ab287a8-0a93-4b59-838d-d7d26d9c57f7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0fd33768-9056-40a4-b68e-3d6a6c6ffd23",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get invoice lines by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6adb305-3794-4e65-96b2-35dfd344abb4",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice-line by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7b3e34b-5134-4f02-8e7f-9f6f8cbcb058",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ca36da5-cbd5-4267-a152-fb7ea757328d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice line with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "581c654e-751e-47ec-ae85-7da30c545124",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3283ebfd-366c-4618-94d3-ed743928283e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted invoice line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c46f420a-f918-40bf-8afd-c6d5c2e84d46",
										"exec": [
											"pm.test(\"Invoice line is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ced37a67-6483-41aa-8223-0726cdd1b042",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice-line with invalid adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7bdf078-8eb8-411b-97bd-0056a3d4e93e",
										"exec": [
											"pm.test(\"Invoice Line creation fails\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d2a24b36-0fac-47d1-98b2-c986418e4d28",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let adjustmentsArray = [];",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"delete invoiceLine.adjustments;",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
											"",
											"let adjustment1 = utils.buildAdjustmentObject();",
											"adjustmentsArray.push(adjustment1);",
											"",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Not Included in\";",
											"adjustmentsArray.push(adjustment2);",
											"",
											"invoiceLine.adjustments = adjustmentsArray;",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Create invoice-line for approved invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b4c2d29-8438-4ff8-85a4-602ab709406f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let error = {};",
											"",
											"pm.test(\"Can't add invoice line to the invoice that has been approved\", function () {",
											"    pm.response.to.have.status(500);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.equal(\"prohibitedInvoiceLineCreation\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb6e9b0b-b861-45c0-8588-f8d8cba9c0bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"negativeApprovedToPaidInvoice\"));",
											"",
											"pm.variables.set(\"approvedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{approvedInvoiceInvoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "01f25535-7509-44c2-ac55-3af1427992a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71689929-da15-4009-aa7e-ff40ccd124b5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29a8c8fd-bbf2-4e66-8302-3685e5234d9f",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update voucher protected fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "039f7196-dba9-4121-8b35-94fde4eaa020",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"    pm.expect(pm.response.json().errors[0].protectedAndModifiedFields).to.have.members([\"systemCurrency\", \"exchangeRate\", \"voucherDate\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3daaf5e6-beba-4e3f-a8f0-88ae1b98668d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify protected fields",
											"    voucher.systemCurrency = \"EUR\";",
											"    voucher.exchangeRate = 1.123;",
											"    voucher.voucherDate = \"2020-05-06T00:00:00.000+0000\";",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update voucher bad id format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d2e2fe0-4c59-4776-9542-42ebf4ae07ec",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e0980eb-bb09-46e0-8e79-a832b0ba5d01",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify protected fields",
											"    voucher.systemCurrency = \"EUR\";",
											"    voucher.exchangeRate = 1.123;",
											"    voucher.voucherDate = \"2020-05-06T00:00:00.000+0000\";",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id-format"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Get voucher line by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3fea4ec5-cd34-4d2c-8f94-052b872b11df",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d79422ed-a98c-45da-ba8e-76aeaa6f671c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3175fd68-8bab-46b5-ab2b-685e1d4e05e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildVoucherLineWithMinContent();",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c729c397-22ef-470a-bcb1-7345ed02438c",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher line by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ca15536-5a83-4da1-87fc-0faa43fedce0",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(setting) with negative start value - illegal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7086331a-4e8c-4243-aa12-2e9a3d0b94f2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7bc53c4d-28ea-468e-af11-35c0f805efe0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Re(setting) with negative voucher start value not allowed\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/-150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"-150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get start value with wrong lang param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b48991e-da62-414b-9b42-0b30e329ee7c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f29db7bd-fbd7-4c8f-801e-448c8178db37",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f5f9953c-a7b0-40d9-8470-aa5f31ec549c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8bd26ad9-11b5-4490-8d35-2883f5775b7f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Transition to Approved",
							"item": [
								{
									"name": "Prepare invalid vousherNumberPrefix config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a944a066-e595-44db-8db9-0905d8b8629c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function() {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"voucherNumber\";",
													"let value = \"{\\\"voucherNumberPrefix\\\": \\\"invalidPrefix86\\\"}\";",
													"",
													"utils.updateOrCreateInvoicesConfig(configs, configName, value);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e33c0652-8226-4fcc-ba6a-09e68d2496da",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE and configName==voucherNumber",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==INVOICE and configName==voucherNumber"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with status Approved",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "74ed99d1-2702-4261-8803-909e2c8ff499",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeReviewedToApprovedInvoiceContent\"));",
													"invoice.status = \"Approved\";",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b86203a1-cef3-47b7-8baa-5df41d8f2c8c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(\"Internal Server Error\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeReviewedToApprovedInvoiceId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function () {",
													"            pm.expect(invoice.status).to.equal(\"Reviewed\");",
													"        });",
													"        pm.test(\"Voucher number not exist\", function () {",
													"             pm.expect(invoice.voucherNumber).to.not.exist;",
													"        });",
													"        ",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"reviewedToApprovedInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeReviewedToApprovedInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Paid",
							"item": [
								{
									"name": "Pay invoice with locked total (no voucher)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d09ef521-e02b-4b99-b5f2-d34b21295cb5",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d4d49ac7-03b9-47e9-912b-38c03639858d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: voucher is not available\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"voucherNotFound\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
													"        pm.test(\"Invoice status updated\", function () {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.status).to.equal(\"Approved\");",
													"",
													"            // Validate voucher",
													"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
													"                pm.test(\"Still no voucher\", () => pm.expect(res.json().vouchers).to.be.empty);",
													"            });",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedInvoiceWithLockedTotalContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedInvoiceWithLockedTotalId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay invoice with non-existing fund",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3277470c-eeac-4c8b-9e3d-d2ca6cd566cd",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeInvoiceWithUnexistingFundContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5d9455e4-d34c-4d86-aff9-f3ba4cf23a27",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: fund not found\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"fundsNotFound\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"value\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"key\", \"funds\");",
													"",
													"});",
													"",
													"pm.environment.unset(\"negativeInvoiceWithUnexistingFund\");",
													"pm.environment.unset(\"negativeInvoiceWithUnexistingFundContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceWithUnexistingFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeInvoiceWithUnexistingFund}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeInvoiceWithUnexistingFund}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay invoice with owerexpended line.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "01086cd3-c97c-493a-8afd-dfad9435c1c3",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeInvoiceOwerexpendedContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6dba9ee8-fbce-455b-b099-62db2421dee5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: fund not found\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"transactionCreationFailure\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"value\", pm.environment.get(\"negativeOwerexpendedInvoiceLineId\"));",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"key\", \"invoiceLineId\");",
													"    pm.expect(pm.response.json().errors[0].parameters[1]).to.have.property(\"value\", pm.environment.get(\"fundId\"));",
													"    pm.expect(pm.response.json().errors[0].parameters[1]).to.have.property(\"key\", \"fundId\");",
													"",
													"});",
													"",
													"pm.environment.unset(\"negativeOwerexpendedInvoiceLineId\");",
													"pm.environment.unset(\"negativeInvoiceOwerexpended\");",
													"pm.environment.unset(\"negativeInvoiceOwerexpendedContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceOwerexpendedContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeInvoiceOwerexpended}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeInvoiceOwerexpended}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Approved with Empty FundDistributions",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c34aa2c-7249-41f2-b2c5-7dd2a16b90c4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosId\", invoice.id);",
													"    // pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));",
													"",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"",
													"    utils.validateInvoice(invoice);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "894139d6-0cd9-40c3-87f6-6db1a530480f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8bcc37d6-96c1-42c1-bacd-050ef1c2c973",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].value=50;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe574aff-e19d-4974-8483-88bf4f91f18f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "35c27c12-779d-411b-a388-5f395827ac48",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77fbfd5d-e58c-470f-bbc4-0f6fb8904ec9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update line  FundDistros amount !=invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "773d21f0-674c-4e3b-a3f6-1f7d3862c0f2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].distributionType = \"amount\";",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "faca128c-07df-4b01-baaf-6e37d22cdf76",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros amount != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb6b481a-55c7-409c-ae26-59ffaebc1c3c",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e09ddbc6-70c9-47e0-8156-68b00f7a757b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update line  FundDistros mixed distr type != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f253e2cb-703b-4960-b56e-ebaf600026e9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].distributionType = \"amount\";",
													"invoiceLine.fundDistributions[0].value = 50;",
													"let percentageDistr = {\"fundId\":  invoiceLine.fundDistributions[0].fundId, \"distributionType\": \"percentage\", \"value\": 50};",
													"invoiceLine.fundDistributions.push(percentageDistr);",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f73998e1-5529-49f5-9820-842a92bf38fa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros mixed type != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "55324821-2982-4185-a10c-5867a4ecba15",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b3779591-a222-4d72-9689-ca1a68c8a681",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line without FundDistributions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c6fc2edc-10b8-4790-9488-1a5d74fcab59",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"delete invoiceLine.fundDistributions;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0c3d96c7-180e-4dbd-8d8a-8cbfbf516cd3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit ot approved invoice without FundDistros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52f6e304-e5a5-4a3c-a3e9-caa3ac38a3a4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eba541e2-2360-4269-bb5b-d07eef67c6f5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"InvoiceWithEmptyFundDistrosContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage = 100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1b162170-99e2-4e63-83ed-8ecf4cfd0e52",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].value=100;",
													"pm.environment.set(\"lineWithFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ce1657d9-a7b3-4ae9-ab24-177a7b941035",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3af3dc5a-e5d7-4a76-8371-4eeebf09417d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Percentage\");",
													"adjustment.fundDistributions = [];",
													"let fundDistribution = {",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"percentage\",",
													"        \"value\": 99.99",
													"    };",
													"adjustment.fundDistributions.push(fundDistribution);",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "273db1f2-93eb-40ec-be9b-d93d9ccbc08f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros amount != adjustment total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b0a7fe91-7611-4391-8890-e0fee01e7adc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"let fundDistribution = {",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"amount\",",
													"        \"value\": 99.99",
													"    };",
													"adjustment.fundDistributions.push(fundDistribution);",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5b88c50a-e2a0-4788-bff0-95a5b4f9c022",
												"exec": [
													"",
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros mixed != adjustment total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "844f4860-f924-4798-8dba-cbb1695e0e7c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"",
													"adjustment.fundDistributions.push({",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"amount\",",
													"        \"value\": 99.99",
													"    });",
													"    adjustment.fundDistributions.push({",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"percentage\",",
													"        \"value\": 99.99",
													"    });",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c675b983-2aae-4dd1-bfe7-8d032c554fa5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment without fundDistr",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "19cee57f-9c7d-4b61-937f-e7f07a2a3c33",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b3beee29-b39d-4d1d-8e5f-92e3bc4fb69f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "603f3bc4-41ad-4071-bda7-18e1f508cf73",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0cf1ddb3-0d95-49f6-868f-552414d48638",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice with incompatible fields",
							"item": [
								{
									"name": "Create Open invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f636219-6677-4cf9-a4cf-67a254d636fa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(pm.response.json()));",
													"    pm.environment.set(\"incompatibleFieldsInvoiceId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3fb7ecc0-8657-45c5-9fb4-7e922da16788",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23d8b285-82ac-4c13-97d5-705f0ccc3faf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not updated\", function() {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.environment.unset(\"incompatibleFieldsInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c53f4261-b16d-4c61-a600-da390348849e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let incompatibleFieldsInvoice = JSON.parse(pm.environment.get(\"incompatibleFieldsInvoiceContent\"));",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{incompatibleFieldsInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{incompatibleFieldsInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79b933df-337b-4bf9-8c36-4fa80cc80137",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8fd47466-c719-457d-90b1-d9deec6cec0b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch groups",
					"item": [
						{
							"name": "Create batch-group missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e13ebca9-7acc-4106-b1c4-f743438982d6",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"    batchGroup = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "962eeb7b-0f2c-4f30-a5a9-c4444fde93a7",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.metadata;",
											"    delete batchGroup.name;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-groupby id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ba59315-45ed-499b-a610-d079eaa6adad",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "684bc7fb-30dd-4923-a518-ed6575694fda",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-group by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfd91a54-9116-4f26-b9bb-cd8088ede12e",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d457edb-0c54-49fa-8565-c76371c1b116",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45835d30-2e37-41f4-9001-9842ae06e9d6",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dfaad512-b75f-421a-a649-774fc189b0a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8777be9-ca1a-4b74-8602-e259d8802419",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "23faf257-93d4-4f51-90a6-fa026a3c3d66",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc7ac529-c8ce-44b7-835f-c2b99de895d6",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68dd2c49-6eaa-4d08-a833-dae6876634bd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b477bda-a63b-4974-a92a-6a00dc4b595b",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcc76b5c-08b3-4b3a-b7ca-c979d516062d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d64b5a4-8ea2-4677-a5a2-1a7a49eeaa1a",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba950a0a-4837-4d80-b618-10c6e49dff9f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2175876e-e4b2-440b-baba-18a6ceb8f4a2",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "523a7a4d-1224-4684-8059-d98f2a4028a3",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    batchGroup.name = \"New Name\";",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group missing requred fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6aa03b4f-9e68-45b5-80f0-7306a2185aab",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8dc2af08-7473-49bd-92b8-60e94b28c3e7",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.name;",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{batchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{batchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch group by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e23c7de1-6f3e-4525-88f7-4c193b33e52c",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8b5f024-76fd-406c-9738-0f39f3b48965",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98a4877c-1ea8-4576-bc58-2cecfe17e005",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb14bce3-4c00-4f82-afa1-f75594625799",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62092c00-7c4b-4aef-be2b-e60d5c8500f6",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "86778e60-1f0a-459f-9b00-43a17e3a9423",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b71343df-a5e9-49aa-8e7e-44eaab7aa714",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ead3ce21-976c-4c20-b32f-f5f2e267a2fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group with UUID in use",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b40e669e-c38b-4452-bb93-7c615833b1fc",
										"exec": [
											"pm.test(\"Batch-group is in use\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75d51ffc-f990-44fa-b7fe-1146c694a18a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{batchGroupSystemRecordId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{batchGroupSystemRecordId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher exports",
					"item": [
						{
							"name": "Create batch-voucher-export missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "652b7beb-77a2-4fca-94be-c5a14d6ba5cf",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"    batchGroup = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5963448-9ab9-4f43-b8ab-d46176f4b7d0",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVoucherExports/batch_voucher_exports_collection.json\", function (err, res) {",
											"    let batchVoucherExport = res.json().batchVoucherExports[0];",
											"    delete batchVoucherExport.batchGroupId;",
											"    pm.environment.set(\"batchVoucherExportContent\", JSON.stringify(batchVoucherExport));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchVoucherExportContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "003f8e87-f9a8-4943-b81e-f7b1ba468110",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "989ae24d-c985-4079-a7f4-1ac9d92aa10c",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d821b6d0-9b82-4769-8be7-c62b63be9156",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f4df448-71b9-42ff-96cd-9a7ebcc12dea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "842299c5-00d3-4c93-ae11-9f48a7ff91f3",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e359093-2ed4-4165-aed8-44391badea69",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1f8538c-0a80-45cc-8240-eaf2ad9bc176",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "500da3a2-003b-4bc5-a6e6-5ff89675c872",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b531ad90-9779-401d-9716-1c1b144fbc09",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7893a032-a092-49d8-8326-856debc30585",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "feb9e89e-e913-4f08-9e3f-879f377324fe",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53e2fadf-236f-4326-8433-c24d92a816cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-voucher-export by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3a5e887-3947-49cb-a890-8a8902cbc96f",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18b47ce8-6c4b-4373-83b6-27b0f300fc02",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d804f58-9f23-474b-bd3c-c50f486b1480",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ee24b97-8b91-4740-920f-69b6b7992dd9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cbecf1f-5d20-45ed-a31c-5aeed41ae7c5",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fbe63ac-4ced-4dee-ab5d-27ed5e8015cb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4613bb5f-f0bd-4ca9-adb8-2e9b01915b23",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "406aacb3-3005-4131-b689-f086f75c4ced",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ced0ceee-3dbb-477c-8321-c04cd29b4241",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "89d6d260-bd0c-48d2-80e0-217238be5f1e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher export configs",
					"item": [
						{
							"name": "Get export config by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3b9905b6-48f3-44df-aae6-653c89a26e98",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd66c613-9268-41cc-9aec-bc1fdcd6b5be",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c9f740b-00ea-4a40-ba27-93e42acb4d81",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create export config w/ missing required fields - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3df157e9-98e1-4c2b-adf7-d9cf162ec151",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b75f0b26-70c9-45ad-a621-06af2c5f4592",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(1);",
											"",
											"        let requiredProps = utils.getExportConfigSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update export config - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff8ca2a2-a6de-4e08-80d6-5a614db9e441",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "59520374-86e4-4c8b-897b-62ede0d85925",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"batchGroupId\": \"075f9308-40a1-41ba-9238-b8a27adc8d39\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/075f9308-40a1-41ba-9238-b8a27adc8d39",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"075f9308-40a1-41ba-9238-b8a27adc8d39"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64fffdba-196a-4e36-ba27-b8771d81e92d",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"batchGroupId\": \"075f9308-40a1-41ba-9238-b8a27adc8d39\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete export config - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bcbb3576-66af-40c4-be32-5d5c522e3647",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e0e1a453-d594-4fbf-9f0c-6bafa4646463",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4df0c02a-4698-4535-8220-7bd283ca67c4",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials",
					"item": [
						{
							"name": "Create credentials missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd2e866e-620d-4a46-8ce3-0a9a24ecadce",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90f68c0a-1fb4-4f13-847e-5be1cf2334fd",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/credentials/574f0791-beca-4470-8037-050660cfb73a.json\", function (err, res) {",
											"    let credentials = res.json();",
											"    delete credentials.exportConfigId;",
											"    delete credentials.username;",
											"    delete credentials.metadata;",
											"    ",
											"    pm.environment.set(\"credentialsBody\", JSON.stringify(credentials));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{credentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11b34acf-56f3-459a-a0b3-7af2f39a2b2f",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "665d45e6-d1ab-4e05-a678-68b31206a5d6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{UUIDDoesNotExists}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{UUIDDoesNotExists}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b7e2dfe-96da-41dc-9df0-4ccc24cf5e6a",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "334da518-df90-4b46-a765-024b2d475e5f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/foo/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"foo",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update credentials - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3f5c444-6d20-48b9-8445-d9eb95ca9351",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76ce25fe-3cec-4b32-8e22-78ab36ab34a1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update credentials missing requred fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d2ee1cb-dde0-4e3c-9a70-5d96a4dd8eba",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b10710bd-9657-4ff0-b686-ae5da2fa16ea",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => {",
											"    let credentials = res.json();",
											"    credentials.password = \"newPassword\";",
											"    delete credentials.username;",
											"    delete credentials.metadata;",
											"    pm.environment.set(\"modifiedCredentialsBody\", JSON.stringify(credentials));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedCredentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d179df7b-0c99-41e8-b817-2b9c20b6c7b5",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1034b2d0-c253-4127-b6a1-30064bff4963",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c80bb65c-aa73-4b63-9cd3-cb2c6468761e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "87359ce0-78ae-4f5a-9b82-a4ac52db22b7",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "dfaaccaf-4486-43f1-bb9e-a6370e30da73",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    invoicesConfigs: {",
					"        configNames: [\"voucherNumber\"],",
					"        bodyTemplate: {",
					"            \"module\": \"INVOICE\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    ordersConfigs: {",
					"        configNames: [",
					"            \"poLines-limit\",",
					"            \"inventory-instanceTypeCode\"",
					"        ],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Invoices API - Admin\",",
					"                    \"lastName\": \"Invoices Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-invoices-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-invoices-user\",",
					"                \"password\": \"mod-invoices-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"invoice.all\",",
					"                    \"orders.all\",",
					"                    \"acquisitions-units.memberships.all\",",
					"                    \"acquisitions-units.units.all\",",
					"                    \"organizations-storage.organizations.all\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test invoices tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.INVOICE_NOTE = \"Invoice for API Tests\";",
					"    utils.schemaPrefix = \"invoices_schema_\";",
					"",
					"    utils.prepareInvoice = function(invoice) {",
					"        delete invoice.id;",
					"        delete invoice.approvedBy;",
					"        delete invoice.approvalDate;",
					"        delete invoice.folioInvoiceNo;",
					"        delete invoice.subTotal;",
					"",
					"        invoice.note = utils.INVOICE_NOTE;",
					"",
					"        return invoice;",
					"    };",
					"",
					"    utils.prepareInvoiceLine = function(invoiceLine, invoiceId) {",
					"        invoiceLine.invoiceId = invoiceId;",
					"",
					"        delete invoiceLine.id;",
					"        delete invoiceLine.metadata;",
					"",
					"        invoiceLine.fundDistributions.forEach(distro => {",
					"            distro.fundId = pm.environment.get(\"fundId\");",
					"            delete distro.encumbrance;",
					"        });",
					"",
					"        return invoiceLine;",
					"    };",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getMockInvoiceLine = function() {",
					"        return JSON.parse(pm.globals.get(\"mock-invoiceLine\"));",
					"    };",
					"",
					"    utils.getMockInvoice = function(i) {",
					"        let invoices = JSON.parse(pm.globals.get(\"mock-invoices\"));",
					"        return invoices.invoices[i];",
					"    };",
					"",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => utils.sendDeleteRequest(path, (err, res) => resolve(res.code)));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"",
					"        for (var i = 0; i < order.compositePoLines.length; i++) {",
					"            utils.preparePoLine(order.compositePoLines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function(poLine) {",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        delete poLine.alerts;",
					"        delete poLine.reportingCodes;",
					"        delete poLine.fundDistribution;",
					"        delete poLine.details;",
					"    ",
					"        return poLine;",
					"    };",
					"",
					"",
					"    /**",
					"     * Adds Invoice line id to `completeInvoicelineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberInvoiceLineId = function(invoiceLine) {",
					"        if (invoiceLine && invoiceLine.id) {",
					"            let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"            completeInvoicelineIds.push(invoiceLine.id);",
					"            pm.environment.set(\"completeInvoicelineIds\", JSON.stringify(completeInvoicelineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completeInvoicelineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastInvoiceLineId = function(withRemoval) {",
					"        let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"        if (completeInvoicelineIds.length > 0) {",
					"            let lineId = completeInvoicelineIds.pop();",
					"            if (withRemoval) {",
					"                pm.environment.set(\"completePolineIds\", JSON.stringify(completeInvoicelineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the Invoice line is empty except line and order ids",
					"     */",
					"    utils.validateInvoiceLineWithMinimalContent = function(invoiceLine) {",
					"        let expectedLine = utils.buildInvoiceLineWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoiceLine.id, \"Invoice line: id expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description does not match to expected\").to.eql(expectedLine.description);",
					"        pm.expect(invoiceLine.invoiceId, \"Invoice line: invoiceId expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineNumber, \"Invoice line: invoiceLineNumber expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus does not match to expected\").to.eql(expectedLine.invoiceLineStatus);",
					"        pm.expect(invoiceLine.metadata, \"Invoice line: metadata expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal  does not match to expected\").to.eql(expectedLine.subTotal);",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity is expected\").to.exist;",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity does not match to expected\").to.eql(expectedLine.quantity);",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance expected\").to.exist;",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance does not match to expected\").to.eql(expectedLine.releaseEncumbrance);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoiceLine.adjustments, \"Invoice line: adjustments as empty array expected\").to.be.an('array').that.is.empty;",
					"        pm.expect(invoiceLine.adjustmentsTotal, \"Invoice line: adjustments total not expected\").to.exist;",
					"        pm.expect(invoiceLine.comment, \"Invoice line: comment is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.poLineId, \"Invoice line: PO line Id is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productId, \"Invoice line: productId not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productIdType, \"Invoice line: productIdType not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionInfo, \"Invoice line: subscriptionInfo not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionStart, \"Invoice line: subscriptionStart not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionEnd, \"Invoice line: subscriptionEnd not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.total, \"Invoice line: total expected\").to.exist;",
					"        pm.expect(invoiceLine.vendorRefNo, \"Invoice line: vendorRefNo not expected\").to.not.exist;",
					"    };",
					"",
					"",
					"    /**",
					"     * Build Invoice line with minimal required fields.",
					"     */",
					"    utils.buildInvoiceLineWithMinContent = function(invoiceId) {",
					"        return {",
					"            \"description\": \"Some description\",",
					"            \"invoiceId\": invoiceId,",
					"            \"invoiceLineStatus\": \"Open\",",
					"            \"subTotal\": 2.20,",
					"            \"quantity\": 3,",
					"            \"releaseEncumbrance\": false",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Voucher line with minimal required fields.",
					"     */",
					"    utils.buildVoucherLineWithMinContent = function() {",
					"        return {",
					"            \"amount\": 33.55,",
					"            \"externalAccountNumber\": \"54321099\",",
					"            \"fundDistributions\": [",
					"                {",
					"                    \"fundId\": pm.environment.get(\"fundId\"),",
					"                    \"distributionType\": \"percentage\",",
					"                    \"value\": 50",
					"                }",
					"            ],",
					"            \"sourceIds\": [\"0726fc17-38c3-4249-81d3-97ffddada92b\"],",
					"            \"voucherId\": \"d384a4c2-9f85-4072-a305-800b3f6f5143\"",
					"        };",
					"    };",
					"",
					"    utils.buildAdjustmentObject = function(amount, type, prorate){",
					"        return {",
					"            \"description\": \"Adjustment for API test\",",
					"            \"type\": type || \"Amount\",",
					"            \"value\": amount || 10,",
					"            \"prorate\": prorate || \"Not prorated\",",
					"            \"relationToTotal\":\"In addition to\"",
					"        };",
					"    };",
					"",
					"    /* === BEGIN - Functions specific to prorated adjustments tests === */",
					"    /**",
					"     * Validates the invoice's prorated adjustments",
					"     */",
					"    utils.validateInvoiceProratedAdjustments = function(invoice, expectedQuantity) {",
					"        let proAdjustments = invoice.adjustments.filter(adjustment => adjustment.prorate !== \"Not prorated\");",
					"        pm.expect(proAdjustments, \"Adjustments size\").to.have.lengthOf(expectedQuantity);",
					"        proAdjustments.forEach(adjustment => {",
					"            pm.expect(adjustment.id, \"Adjustment must have `id` which is going to be referenced by invoice line's adjustment\").to.exist;",
					"            pm.expect(adjustment.adjustmentId, \"`adjustmentId` is not expected\").to.not.exist;",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice line's prorated adjustments",
					"     */",
					"    utils.validateInvoiceLineProratedAdjustments = function(invoiceLine, expectedQuantity) {",
					"        let invoiceAdjustmentIds = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\")).adjustments.map(adj => adj.id);",
					"        let proAdjustments = invoiceLine.adjustments.filter(adjustment => adjustment.prorate !== \"Not prorated\");",
					"",
					"        pm.expect(proAdjustments, \"Adjustments size\").to.have.lengthOf(expectedQuantity);",
					"        proAdjustments.forEach(adjustment => {",
					"            pm.expect(adjustment.adjustmentId, \"Adjustment must have id to invoice's adjustment\").to.be.oneOf(invoiceAdjustmentIds);",
					"            pm.expect(adjustment.id, \"Adjustment id is not expected - only invoice's prorated adjustment can have it\").to.not.exist;",
					"        });",
					"    };",
					"    /* === END - Functions specific to prorated adjustments tests === */",
					"",
					"    utils.updateInvoiceStatus = function(invoice, status) {",
					"        invoice.status = status;",
					"        utils.sendPutRequest(\"/invoice/invoices/\" + invoice.id, invoice, (err,response) => {",
					"            pm.test(\"Invoice is now \" + status, () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(response).to.have.property('code', 204);",
					"            });",
					"        });",
					"    };",
					"",
					"",
					"    utils.deleteVouchersForInvoice = function(invoiceId) {",
					"        utils.getVouchersForInvoice(invoiceId, (err, res) => {",
					"            utils.deleteVouchers(res.json().vouchers);",
					"        });",
					"    };",
					"",
					"    utils.deleteVouchers = function(vouchers) {",
					"        if (vouchers.length !== 0) {",
					"            const timerId = setTimeout(() => {}, 60000);",
					"",
					"            let promises = vouchers.map(voucher => utils.deleteVoucherLines(voucher.id).then(ok => utils.deleteVoucher(voucher.id)));",
					"",
					"            Promise.all(promises)",
					"                .then(result => clearTimeout(timerId))",
					"                .catch(err => {",
					"                    console.log(\"Error happened on voucher record(s) deletion:\", err);",
					"                    clearTimeout(timerId);",
					"                });",
					"        }",
					"    };",
					"",
					"    utils.deleteVoucher = function(voucherId) {",
					"        return utils.processDeleteRequest(\"/voucher-storage/vouchers/\" + voucherId);",
					"    };",
					"",
					"    utils.deleteVoucherLines = function(voucherId) {",
					"        return new Promise((resolve) => {",
					"            utils.getVoucherLines(voucherId, (err, res) => {",
					"                let promises = [];",
					"                res.json().voucherLines.forEach(line => {",
					"                    promises.push(utils.processDeleteRequest(\"/voucher-storage/voucher-lines/\" + line.id));",
					"                });",
					"                Promise.all(promises)",
					"                    .then(ok => resolve())",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on voucher line record(s) deletion:\", err);",
					"                        resolve();",
					"                    });",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.getVouchersForInvoice = function(invoiceId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/vouchers?query=invoiceId==\" + invoiceId, handler);",
					"    };",
					"",
					"    utils.getVoucherLines = function(voucherId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/voucher-lines?query=voucherId==\" + voucherId, handler);",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function() {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function(configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function(configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function(configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function(configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateInvoicesConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.invoicesConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.ordersConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function(err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.environment.unset(\"completeInvoicelineIds\");",
					"        pm.environment.unset(\"current-invoices-configs\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"documentWithURL\");",
					"        pm.environment.unset(\"documentWithUrlId\");",
					"        pm.environment.unset(\"documentWithBase64Content\");",
					"        pm.environment.unset(\"documentWithBase64Id\");",
					"        pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineContent\");",
					"        pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"folioInvoiceNo\");",
					"        pm.environment.unset(\"filterInvoiceId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"incompatibleFieldsInvoiceId\");",
					"        pm.environment.unset(\"InvoiceIdForDelete\");",
					"        pm.environment.unset(\"InvoiceLineIdForDelete\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosContent\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosId\");",
					"        pm.environment.unset(\"invoiceId\");",
					"        pm.environment.unset(\"isbnIdentifierTypeId\");",
					"        pm.environment.unset(\"lineWithoutFundDistros\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"minInvoiceId\");",
					"        pm.environment.unset(\"mod-invoices-configs\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"negativeAdjInLineId\");",
					"        pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalContent\");",
					"        pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoiceLineId\");",
					"        pm.environment.unset(\"negativeInvoiceLineContent\");",
					"        pm.environment.unset(\"negativeReviewedToApprovedInvoiceContent\");",
					"        pm.environment.unset(\"negativeReviewedToApprovedInvoiceId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoice\");",
					"        pm.environment.unset(\"UUIDDoesNotExists\");",
					"        pm.environment.unset(\"voucherId\");",
					"        pm.environment.unset(\"voucherLineId\");",
					"        pm.environment.unset(\"workflow-invoiceWith4LinesContent\");",
					"        pm.environment.unset(\"workflow-invoiceWith4LinesId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"encumbrance1\");",
					"        pm.environment.unset(\"encumbrance2\");",
					"        pm.environment.unset(\"encumbranceId1\");",
					"        pm.environment.unset(\"encumbranceId2\");",
					"        ",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"mock-invoices\");",
					"        pm.globals.unset(\"mock-invoiceLine\");",
					"        pm.globals.unset(\"poLine1Id\");",
					"        pm.globals.unset(\"poLine2Id\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        console.log(\"Starting validating against schemas\");",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice against schema",
					"     */",
					"    utils.validateInvoice = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceSchema());",
					"    };",
					"",
					"    utils.getInvoiceSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice line against schema",
					"     */",
					"    utils.validateInvoiceLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceLineSchema());",
					"    };",
					"",
					"    utils.getInvoiceLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher against schema",
					"     */",
					"    utils.validateVoucher = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherSchema());",
					"    };",
					"",
					"    utils.getVoucherSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher line against schema",
					"     */",
					"    utils.validateVoucherLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherLineSchema());",
					"    };",
					"",
					"    utils.getVoucherLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates batch voucher export config against schema",
					"     */",
					"    utils.validateExportConfig = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getExportConfigSchema());",
					"    }",
					"",
					"    utils.getExportConfigSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"export_configuration.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch voucher export config collection against schema",
					"     */",
					"    utils.validateExportConfigCollection = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getExportConfigCollectionSchema());",
					"    }",
					"",
					"    utils.getExportConfigCollectionSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"export_configuration_collection.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice is empty except required fields, invoice id and folioInvoiceNo",
					"     */",
					"    utils.validateInvoiceWithMinimalContent = function(invoice) {",
					"        let expectedInvoice = utils.buildInvoiceWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoice.id, \"Invoice id expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total not expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total should be zero\").to.eql(0);",
					"        pm.expect(invoice.currency, \"Invoice currency expected\").to.exist;",
					"        pm.expect(invoice.currency, \"Invoice currency does not match to expected\").to.eql(expectedInvoice.currency);",
					"        pm.expect(invoice.invoiceDate, \"Invoice date expected\").to.exist;",
					"        pm.expect(invoice.invoiceDate, \"Invoice date does not match to expected\").to.eql(expectedInvoice.invoiceDate);",
					"        pm.expect(invoice.lockTotal, \"Invoice lock total does not match to expected\").to.eql(false);",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method expected\").to.exist;",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method does not match to expected\").to.eql(expectedInvoice.paymentMethod);",
					"        pm.expect(invoice.status, \"Invoice status expected\").to.exist;",
					"        pm.expect(invoice.status, \"Invoice status does not match to expected\").to.eql(expectedInvoice.status);",
					"        pm.expect(invoice.folioInvoiceNo, \"Folio Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.metadata, \"Invoice metadata expected\").to.exist;",
					"        pm.expect(invoice.note, \"Invoice note\").to.equal(utils.INVOICE_NOTE);",
					"        pm.expect(invoice.source, \"Invoice source does not match to expected\").to.eql(expectedInvoice.source);",
					"        pm.expect(invoice.subTotal, \"Invoice subTotal not expected\").to.exist;",
					"        pm.expect(invoice.subTotal, \"Invoice subtotal should be zero\").to.eql(0);",
					"        pm.expect(invoice.total, \"Invoice total not expected\").to.exist;",
					"        pm.expect(invoice.total, \"Invoice total should be zero\").to.eql(0);",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice number does not match to expected\").to.eql(expectedInvoice.vendorInvoiceNo);",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id does not match to expected\").to.eql(expectedInvoice.vendorId);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoice.adjustments, \"Invoice adjustments expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.acquisitionsUnit, \"Invoice acquisitions unit not expected\").to.not.exist;",
					"        pm.expect(invoice.approvedBy, \"Invoice approved by not expected\").to.not.exist;",
					"        pm.expect(invoice.approvalDate, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.chkSubscriptionOverlap, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementNumber, \"Invoice disbursement number not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementDate, \"Invoice disbursement date not expected\").to.not.exist;",
					"        pm.expect(invoice.manualPayment, \"Invoice manual payment not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentDue, \"Invoice payment due not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentId, \"Invoice payment id not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentTerms, \"Invoice payment terms not expected\").to.not.exist;",
					"        pm.expect(invoice.poNumbers, \"Invoice PO numbers expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.voucherNumber, \"Invoice voucher number not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Build invoice with minimal required fields.",
					"     */",
					"    utils.buildInvoiceWithMinContent = function(vendorInvoiceNo) {",
					"        return {",
					"            \"currency\": \"USD\",",
					"            \"invoiceDate\": \"2018-07-20T00:00:00.000+0000\",",
					"            \"paymentMethod\": \"EFT\",",
					"            \"status\": \"Open\",",
					"            \"source\": \"API\",",
					"            \"vendorInvoiceNo\": vendorInvoiceNo || \"YK75851\",",
					"            \"vendorId\": \"168f8a63-d612-406e-813f-c7527f241ac3\",",
					"            \"note\": utils.INVOICE_NOTE",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, body, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"",
					"    /**",
					"     * Check if two arrays are equal",
					"     */",
					"    utils.arraysOfStringsAreEqual = function(array1, array2) {",
					"        return JSON.stringify(array1)==JSON.stringify(array2);",
					"    };",
					"    ",
					"    /**",
					"     * Build batch-group.",
					"     */",
					"    utils.buildBatchGroup = function() {",
					"        return {",
					"            \"id\": \"5082b4c2-1504-421e-9da0-0ee8c9e8b07d\",",
					"            \"name\": \"Marx Library\",",
					"            \"description\": \"University of South Alabama\"",
					"            ",
					"        };",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch-voucher-export against schema",
					"     */",
					"    utils.validateBatchVoucherExport = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getBatchVoucherExportSchema());",
					"    };",
					"",
					"    utils.getBatchVoucherExportSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"batch_voucher_export.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch-group against schema",
					"     */",
					"    utils.validateBatchGroup = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getBatchGroupSchema());",
					"    };",
					"",
					"    utils.getBatchGroupSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"batch_group.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates export configuration credentials against schema",
					"     */",
					"    utils.validateCredentials = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getCredentials());",
					"    };",
					"",
					"    utils.getCredentials = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"credentials.json\"));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines for Fund Distribution.",
					"     */",
					"    utils.prepareOrderFundDistri = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLineFundDistri(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"    ",
					"        /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data for Fund Distribution.",
					"     */",
					"    utils.preparePoLineFundDistri = function(poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }        ",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }        ",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"    ",
					"        /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function(productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"    ",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8d17a0e3-d540-42b1-9a4e-b76a5289c5b2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "05010f61-c4b8-4b15-8d3e-8eab3cbbb74c",
			"key": "testTenant",
			"value": "invoice_api_tests",
			"type": "string"
		},
		{
			"id": "2dd0ae03-0c4f-4267-8dee-40741432bb8a",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-invoice/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "e5101718-f056-4b5a-8714-6e16a7071071",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "85ec482a-77b1-410d-ab06-2a5874861ca3",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		},
		{
			"id": "32e2d3c2-62cb-472c-ad18-cfdf061e8a15",
			"key": "inventory-instanceTypeCode",
			"value": "invoicingApiTestsIdentifierType",
			"type": "string"
		},
		{
			"id": "e10cbc54-3c06-48a8-b366-feced8fbbfa6",
			"key": "finance-ledgerCode",
			"value": "invoicingApiTests",
			"type": "string"
		},
		{
			"id": "ac19ba60-8d34-43a9-8727-c50b870546ee",
			"key": "finance-fundCode",
			"value": "invoicingApiTests",
			"type": "string"
		},
		{
			"id": "90a3a74f-a960-4ff7-bf39-391c614a3e86",
			"key": "voucherNumber",
			"value": "{\"voucherNumberPrefix\": \"testPrefix\"}",
			"type": "string"
		},
		{
			"id": "e04aeb67-0b1b-431a-a13f-307c967cde94",
			"key": "batchGroupSystemRecordId",
			"value": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}