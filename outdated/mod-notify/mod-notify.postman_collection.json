{
	"info": {
		"_postman_id": "bbe3e86a-39be-4e75-8d59-029f39851f1f",
		"name": "mod-notify",
		"description": "Test: \n/notify\n/notify/_username/{username}\n/notify/_self\n/notify/{id}\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "parameters.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad455e26-7dc6-4d08-a023-8910e4368b53",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_parameters_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_parameters}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_parameters}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_metadata_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_metadata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_metadata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "notify.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "469491a2-9e84-4322-9f4b-ab913b2738fa",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_notify\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_notify_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_notify}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_notify}}"
							]
						},
						"description": "This is to get location.jsonn to be used in later tests."
					},
					"response": []
				},
				{
					"name": "notifyCollection.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61fa1122-b663-44cc-9765-873871edbf57",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_notifyCollection\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_notifyCollection_content\", responseBody);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_notifyCollection}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_notifyCollection}}"
							]
						},
						"description": "This is to get locations.jsonn to be used in later tests."
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba3fd24c-3964-4dc7-82a0-8e0b3105911a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "Set okapi-token header to be used by following tests."
					},
					"response": []
				}
			]
		},
		{
			"name": "Happy path - /notify",
			"item": [
				{
					"name": "/notify 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a32123d4-3265-4f1c-851f-e0eec4a563dd",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 201  - required fields only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a7d9033-c4a8-464c-85d9-f7cc68018cfb",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_notification_required_only\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"recipientId\", pm.environment.get(\"test_recipientId\"));",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification with mocked recipientId\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4d80fe8a-ec73-44cc-bc6b-97cf696656ba",
								"type": "text/javascript",
								"exec": [
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = pm.environment.get(\"xokapitoken\");",
									"let path = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/users?limit=10\";",
									"",
									"pm.sendRequest({",
									"    url: path,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"            }",
									"} , function (err, response) {",
									"    ",
									"    if(response.code === 200){",
									"        let length = response.json().users.length;",
									"        if (length > 0) {",
									"            console.log(response.json().users[length-1].id);",
									"            pm.environment.set(\"test_recipientId\",response.json().users[length-1].id);",
									"        }",
									"        else{",
									"            postman.setNextRequest(\"/notify 201  - required fields only - mocked data\");",
									"        }",
									"    }",
									"    else {",
									"        postman.setNextRequest(\"/notify 201  - required fields only - mocked data\");",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipientId\": \"{{test_recipientId}}\",\r\n  \"text\": \"This is very basic notification with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify new notification - all fields required",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9752238c-77f6-4014-a745-99eac8278011",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().notifications.length).to.equal(1);",
									"",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?query=id={{new_notification_required_only}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{new_notification_required_only}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2efeab4e-3004-4046-a28c-c55df872c80e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"new_notification_required_only\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{new_notification_required_only}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{new_notification_required_only}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 201  - required fields only  - duplicate entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2db31334-da28-4ae7-b1aa-bff52731eeb5",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_notification_duplicate\", jsonData.id);",
									"",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"recipientId\", pm.environment.get(\"test_recipientId\"));",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification with mocked recipientId\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04ad217f-e068-431c-b39c-d6a08fabf523",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipientId\": \"{{test_recipientId}}\",\r\n  \"text\": \"This is very basic notification with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify new notification - duplicate entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9752238c-77f6-4014-a745-99eac8278011",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().notifications.length).to.equal(1);",
									"",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?query=id={{new_notification_duplicate}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{new_notification_duplicate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a78eea87-3fc6-40f5-ab1a-d7152d188278",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"new_notification_duplicate\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{new_notification_duplicate}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{new_notification_duplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 201  - required fields only - mocked data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b8e906f-c56a-4061-9e15-b8c3c29a70c6",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"new_notification_mocked\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"recipientId\", pm.environment.get(\"mock_recipientId\"));",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification with mocked recipientId\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "05e442e7-0ce2-4ef8-821c-b43e8b62197f",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"mock_recipientId\", uuid.v4());",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipientId\": \"{{mock_recipientId}}\",\r\n  \"text\": \"This is very basic notification with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify new notification - mocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9752238c-77f6-4014-a745-99eac8278011",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().notifications.length).to.equal(1);",
									"",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?query=id={{new_notification_mocked}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{new_notification_mocked}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ada2f3d5-d504-4497-81bb-4350eb8069f5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"new_notification_mocked\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{new_notification_mocked}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{new_notification_mocked}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 201  - all fields - mocked data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18a564ee-7083-4852-b4fe-905946dcf6b7",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_notification_mocked_all\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification with mocked all fields\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "126542af-a9d6-40ba-a035-4e1ec66b376a",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{$guid}}\",\r\n  \"recipientId\": \"{{$guid}}\",\r\n  \"text\": \"This is very basic notification with mocked all fields\",\r\n  \"seen\": true,\r\n  \"link\": \"/here/is/my/link\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify new notification - mocked all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9752238c-77f6-4014-a745-99eac8278011",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().notifications.length).to.equal(1);",
									"",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?query=id={{new_notification_mocked_all}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{new_notification_mocked_all}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf8ee3a9-17f5-4fc2-8d87-b0c7aa2d05d7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"new_notification_mocked_all\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{new_notification_mocked_all}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{new_notification_mocked_all}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 201  - all fields - mocked data - text in Japanese",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85b4be3d-47e8-4ebb-8f88-87c298a200ef",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_notification_JAP\", jsonData.id);",
									"",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"text\", pm.variables.get(\"notifyText\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "059d0927-76a1-4521-b9dc-ddd05ec60c87",
								"type": "text/javascript",
								"exec": [
									"let notifyTextInJapanese= \"相詳ル結地スニ志殖リづ作組オナヒ並輝ぎスぐ教賠ぴせでフ抑72茶評スコミヤ中政ずドっ的刑イ京実え読聞キトハユ易熱クヲナ春直供リヌウ戦助えラ。5失のち片販じへ万漏アヒ属戦をじもゆ著告ちぴえで著近康下オユ胆弟ヒキイラ馬拠モヘ需怪永カ進体ばょね国稿ランぴ存暮ホワ徳絡72禁ぞくおち台進ルちたす。\";",
									"",
									"pm.variables.set(\"notifyText\", notifyTextInJapanese);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{$guid}}\",\r\n  \"recipientId\": \"{{$guid}}\",\r\n  \"text\": \"{{notifyText}}\",\r\n  \"seen\": true,\r\n  \"link\": \"/here/is/my/link\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify new notification - JAP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9752238c-77f6-4014-a745-99eac8278011",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().notifications.length).to.equal(1);",
									"",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?query=id={{new_notification_JAP}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{new_notification_JAP}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0b5b25c-eedf-491a-83a2-8952d4f78dc9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"new_notification_JAP\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{new_notification_JAP}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{new_notification_JAP}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 201  - all fields - mocked data - text in German",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90fe65dc-7e62-49ce-b85f-7146f55d8049",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_notification_GER\", jsonData.id);",
									"",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"text\", pm.variables.get(\"notifyText\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f10ffee4-bb3b-466c-9e45-79f4513bc910",
								"type": "text/javascript",
								"exec": [
									"let notifyTextInGerman= \"Das Wort Ärger wird mit einem großen Ä geschrieben\";",
									"",
									"pm.variables.set(\"notifyText\", notifyTextInGerman);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{$guid}}\",\r\n  \"recipientId\": \"{{$guid}}\",\r\n  \"text\": \"{{notifyText}}\",\r\n  \"seen\": true,\r\n  \"link\": \"/here/is/my/link\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify new notification - GER",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9752238c-77f6-4014-a745-99eac8278011",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().notifications.length).to.equal(1);",
									"",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?query=id={{new_notification_GER}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{new_notification_GER}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f2d4671-b19f-4fe3-8b80-3800380aa54a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"new_notification_GER\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{new_notification_GER}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{new_notification_GER}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 201  - all fields - mocked data - special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c46c1fbf-c56f-4ea1-be4c-5e669a334438",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"new_notification_SPEC\", jsonData.id);",
									"",
									"",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"text\", pm.variables.get(\"notifyText\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c78d523f-7487-48ce-9ef7-8984a8df83b4",
								"type": "text/javascript",
								"exec": [
									"let notifyTextSpecialCharacters= \"&>@/\\'{[]}%$#@&\";",
									"",
									"pm.variables.set(\"notifyText\", notifyTextSpecialCharacters);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{$guid}}\",\r\n  \"recipientId\": \"{{$guid}}\",\r\n  \"text\": \"{{notifyText}}\",\r\n  \"seen\": true,\r\n  \"link\": \"/here/is/my/link\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify new notification - special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9752238c-77f6-4014-a745-99eac8278011",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().notifications.length).to.equal(1);",
									"",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?query=id={{new_notification_SPEC}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{new_notification_SPEC}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d150b186-3736-4fab-b99e-57a140f8e1fd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"new_notification_SPEC\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{new_notification_SPEC}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{new_notification_SPEC}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - limit = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60998d8-be65-41aa-9d40-d4f503aaedb2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - limit 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76f6e52b-35ab-412b-9fcc-04607bfcd000",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - limit 1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17580fe5-87a3-41aa-b165-4713903c6b4b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=1000",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - limit = max integer value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "814f76c8-6d5f-43df-906f-7d85156b8ebc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da652143-ae9e-4916-835a-f78c87added5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=2147483647",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483647"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - offset=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "872bbca0-d28c-48f2-83e5-c2e1dcf5afc0",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"notifications_count\", jsonData.totalRecords);",
									"",
									"if(jsonData.notifications.length > 0) {",
									"pm.environment.set(\"first_notification_record\", jsonData.notifications[0].id);",
									"}",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?offset=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - offset=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05c2e542-54ce-4dcd-8580-a0395b3e7b0c",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"",
									"pm.test(\"Verify that the first record is ommitted\", function() {",
									"    let firstId = pm.environment.get(\"first_notification_record\");",
									"    if(firstId !== null) {",
									"         pm.expect(jsonData.notifications).not.to.include(firstId);",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?offset=1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - offset=1000 (max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "939bcee0-818c-486b-a11d-73da6b6899e6",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Correct number of records returned\", function() {",
									"    let count = pm.environment.get(\"notifications_count\");",
									"    if(count<1000) {",
									"             pm.expect(jsonData.notifications.length).to.equal(0);  ",
									"    }",
									"    else",
									"    {",
									"         pm.expect(jsonData.notifications.length > 0 ).to.be.true;",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?offset=1000&limit=1000",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "offset",
									"value": "1000"
								},
								{
									"key": "limit",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - lang= EN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff13cbbf-9874-409b-9bc6-bbc2bef65c8d",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"notifications_count\", jsonData.totalRecords);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?lang=EN",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "lang",
									"value": "EN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - lang= POL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dddce9ed-f38a-4090-bb01-9f35483e6464",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\" 'lang' parameter is incorrect. parameter value {POL} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?lang=POL",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "lang",
									"value": "POL"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - lang= polski",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4c37373-569e-44f8-8ea6-1a1510e55570",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\" 'lang' parameter is incorrect. parameter value {polski} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?lang=polski",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "lang",
									"value": "polski"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - lang=",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53d671af-8f18-4e0c-8516-fe7b8cf1f905",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\" 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?lang=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "lang",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - non-existing parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff13cbbf-9874-409b-9bc6-bbc2bef65c8d",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"notifications_count\", jsonData.totalRecords);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?krakow=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "krakow",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8892c-44ce-4177-a157-6249fada76c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d2a70e9-61a4-490b-8e9e-cf078d6e34da",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative tests - /notify",
			"item": [
				{
					"name": "/notify 400 - limit  > max integer value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efb93a31-13fb-4ad0-8375-648f6bbeeb28",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"        pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - limit not integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df6117d5-2866-4fb3-805f-eeef44985638",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=3.14",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "3.14"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - limit string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05a66304-b62f-4f16-91db-32908fbdb366",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=\"any value\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "\"any value\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - offset = max integer value +1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4176570e-3d57-4a71-9cc2-622f6ac35469",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 401 - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1a5f694-dcf6-46a7-8ab6-4e39b5969c5a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 401\", function () {",
									"     pm.response.to.have.status(401)",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "invalidtoken"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 403 - Access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46959f8b-4e4a-4d91-b8c6-468a66641ac5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 403\", function () {",
									"     pm.response.to.have.status(403)",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 422  -  missing required field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "963ac8ce-b484-48cc-8dfc-c948b6cfad66",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is Unprocessable Entity\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									"",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.expect(pm.response.json().errors[0].message = \"Required\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key = \"recipientId\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].value = \"\");",
									"    ",
									"});  ",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "126542af-a9d6-40ba-a035-4e1ec66b376a",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"This is very basic test notification\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 422  -  malformed json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dbee0a6-42fe-468b-8066-4c76faf02afa",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});   ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "126542af-a9d6-40ba-a035-4e1ec66b376a",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipientId\": \"{{mock_recipientId}}\",\r\n  \"text\": \"This is malformed notification with mocked recipientId\",\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 401  -  Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89d9c7da-a9b7-481b-9dcc-86b44e0d49db",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});   ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "126542af-a9d6-40ba-a035-4e1ec66b376a",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "invalidtoken"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipientId\": \"{{mock_recipientId}}\",\r\n  \"text\": \"This is unauthorized notification with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 403  -  Access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89252962-d6ff-483e-ba75-79a7087a5ab4",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});   ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "126542af-a9d6-40ba-a035-4e1ec66b376a",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipientId\": \"{{mock_recipientId}}\",\r\n  \"text\": \"This is access denied notification with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - limit < 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20eed029-e6cd-42cd-8a5d-67aa1ddb36a8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'limit' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - limit < -max integer value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d38128ef-a43c-4782-83db-e11f1257a084",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'limit' parameter is incorrect. parameter value {-2147483648} is not valid: must be greater than or equal to 0\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=-2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "-2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - offset=-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7f96fea-0595-4561-b168-3d0ecb0cd61c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'offset' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 400 - offset=-max integer value + 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a6f4277-ff1d-4f09-b588-f3b2802b4391",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'offset' parameter is incorrect. parameter value {-2147483648} is not valid: must be greater than or equal to 0\");",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?offset=-2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "offset",
									"value": "-2147483648"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "89d25c77-5e96-4e5c-9d63-a1a3036ac5d3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "25b2edca-6010-496a-850c-7e1fb3d93a0f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Happy path - /notify/_username/{username}",
			"item": [
				{
					"name": "/notify/_username/{username} 201  - required field only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97ddfaef-0ad0-4f39-a74e-9905051718da",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"added_notification_required\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"recipientId\", pm.variables.get(\"userid\"));",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification for \" + pm.environment.get(\"username\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52c48408-290d-4e77-a966-9a221b989c22",
								"type": "text/javascript",
								"exec": [
									"let endpointUsers = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/users?query=(username=\" + pm.environment.get(\"username\") + \")\";",
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: endpointUsers,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().users.length>0){",
									"     pm.variables.set(\"userid\",  res.json().users[0].id);",
									"    }",
									" }",
									");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"text\": \"This is very basic notification for {{username}}\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify username notification - required fields only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6ba703e-1932-47d7-8bbf-d5ea8fcff4be",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"added_notification_required\"));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{added_notification_required}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{added_notification_required}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7794a74d-7cc2-4d27-94b0-1d97f8e11d26",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"added_notification_required\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{added_notification_required}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{added_notification_required}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_username/{username} 201  - required field only -duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ff16a1a-685c-4f6c-8d97-69eb64e645e2",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"added_notification_duplicate\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"recipientId\", pm.variables.get(\"userid\"));",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification for \" + pm.environment.get(\"username\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d752bc50-d0a5-4497-87a7-01eec6a8e28a",
								"type": "text/javascript",
								"exec": [
									"var endpointUsers = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/users?query=(username=\" + pm.environment.get(\"username\") + \")\";",
									"//console.log(endpointUsers);",
									" var tenant = pm.environment.get(\"xokapitenant\");",
									" var token = pm.environment.get(\"xokapitoken\");",
									"",
									"//get material type",
									"pm.sendRequest({",
									"    url: endpointUsers,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().users.length>0){",
									"        ",
									"     //   console.log(res.json().users[0]);",
									"     pm.variables.set(\"userid\",  res.json().users[0].id);",
									"    }",
									" }",
									");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"text\": \"This is very basic notification for {{username}}\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify username notification - duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "249834f2-bc2b-402d-a3e5-75bff57edcdd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"added_notification_duplicate\"));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{added_notification_duplicate}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{added_notification_duplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08f0c201-2265-4dd7-938c-14418be42456",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"added_notification_duplicate\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{added_notification_duplicate}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{added_notification_duplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_username/{username} 201  - all fields - mocked user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f4a201-f3c2-491a-bf20-2a7cf034ef94",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"added_notification_mocked\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"recipientId\", pm.variables.get(\"userid\"));",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification with all fields\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe98d49f-9ef3-4a03-b105-aec3ed13d7b9",
								"type": "text/javascript",
								"exec": [
									"var endpointUsers = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/users?query=(username=\" + pm.environment.get(\"username\") + \")\";",
									"//console.log(endpointUsers);",
									" var tenant = pm.environment.get(\"xokapitenant\");",
									" var token = pm.environment.get(\"xokapitoken\");",
									"",
									"//get material type",
									"pm.sendRequest({",
									"    url: endpointUsers,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().users.length>0){",
									"        ",
									"       // console.log(res.json().users[0]);",
									"     pm.variables.set(\"userid\",  res.json().users[0].id);",
									"    }",
									" }",
									");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{$guid}}\",\r\n  \"text\": \"This is very basic notification with all fields\",\r\n  \"seen\": true,\r\n  \"link\": \"/here/is/my/link\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 200 - verify username notification - mocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cea72d6f-13d6-4cfd-8085-fc6a8fd477c3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify all newly added notifications are returned\", function(){",
									"     pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"added_notification_mocked\"));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{added_notification_mocked}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{added_notification_mocked}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify 204 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bb29476-b33d-459c-8d1c-63ab5173bff0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.environment.unset(\"added_notification_mocked\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "54cb7f47-7d89-4c14-b9bd-93ab9232c9e5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{added_notification_mocked}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{added_notification_mocked}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8892c-44ce-4177-a157-6249fada76c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d2a70e9-61a4-490b-8e9e-cf078d6e34da",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative tests - /notify/_username/{username}",
			"item": [
				{
					"name": "/notify/_username/{username} 400  - invalid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4f2d507-1bde-43b4-98b8-a9193a453ff3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () { ",
									" pm.expect(pm.response.text()).to.equal(\"User lookup failed. Can not find user foo\");",
									" });  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "065e0e06-480f-42bc-a8b0-03d3a0588add",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"text\": \"This is very basic notification for {{username}} with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_username/{username} 400  - invalid json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dcceedd-4ba2-4647-b1e4-5693e29a0d54",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});   ",
									"    ",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "065e0e06-480f-42bc-a8b0-03d3a0588add",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"text\": \"This is very basic notification for {{username}} with mocked recipientId\",\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_username/{username} 422  - empty json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa9a14e7-8a05-4225-8a45-bd6dbaa0100b",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});   ",
									" ",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "065e0e06-480f-42bc-a8b0-03d3a0588add",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_username/{username} 404 - missing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "926890c6-7d6e-4060-b6bf-c52ff73b5974",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () { ",
									" pm.expect(pm.response.text()).to.equal(\"No suitable module found for path /notify/_username for tenant \" + pm.environment.get(\"xokapitenant\"));",
									" });",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "065e0e06-480f-42bc-a8b0-03d3a0588add",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"text\": \"This is very basic notification for {{username}} with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_username/{username} 401  - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45159efa-d4d8-4843-8f8b-1b273e2e2479",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});   ",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "126542af-a9d6-40ba-a035-4e1ec66b376a",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "invalidtoken"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{$guid}}\",\r\n  \"text\": \"This is very basic notification with mocked all fields\",\r\n  \"seen\": true,\r\n  \"link\": \"/here/is/my/link\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_username/{username} 403  - Access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5f64079-0afd-4db3-bf0f-78ae0f1a331c",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status code is Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});   ",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "126542af-a9d6-40ba-a035-4e1ec66b376a",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{$guid}}\",\r\n  \"text\": \"This is very basic notification with mocked all fields\",\r\n  \"seen\": true,\r\n  \"link\": \"/here/is/my/link\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"{{username}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8892c-44ce-4177-a157-6249fada76c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d2a70e9-61a4-490b-8e9e-cf078d6e34da",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Happy path - GET /notify/_self",
			"item": [
				{
					"name": "/notify/_self 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aef1be8a-02f2-472e-a724-5c71408047c9",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"self_notifications_count\", jsonData.totalRecords);",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"",
									"pm.test(\"Self notifications is a subset of the all notifications\", function() {",
									"     pm.expect(jsonData.totalRecords <= pm.environment.get(\"notifications_count\")).to.be.true; ",
									"    ",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 200 - limit 1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "862cad20-1588-4a38-8f71-2954a6bd67b0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?limit=1000",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "limit",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 200 - limit = max integer value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4a48d49-bb06-4440-a903-44581d5ee366",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da652143-ae9e-4916-835a-f78c87added5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?limit=2147483647",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483647"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 200 - offset=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecdb71cf-b5d2-4067-a60a-29185e4083e9",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"self_notifications_count\", jsonData.totalRecords);",
									"",
									"if(jsonData.notifications.length > 0) {",
									"pm.environment.set(\"first_self_notification_record\", jsonData.notifications[0].id);",
									"}",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?offset=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 200 - offset=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d22830a-f158-4278-a20d-a144bbcfd464",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Verify that the first record is ommitted\", function() {",
									"    let firstId = pm.environment.get(\"first_self_notification_record\");",
									"    if(firstId !== null) {",
									"         pm.expect(jsonData.notifications).not.to.include(firstId);",
									"    }",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?offset=1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 200 - offset=1000 (max value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bda0d03b-ea5c-4d54-bed4-4f72391c9e45",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"pm.test(\"Correct number of records returned\", function() {",
									"    let count = pm.environment.get(\"self_notifications_count\");",
									"    if(count<1000) {",
									"             pm.expect(jsonData.notifications.length).to.equal(0);  ",
									"    }",
									"    else",
									"    {",
									"         pm.expect(jsonData.notifications.length > 0 ).to.be.true;",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?offset=1000&limit=1000",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "offset",
									"value": "1000"
								},
								{
									"key": "limit",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 200 - lang= EN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff13cbbf-9874-409b-9bc6-bbc2bef65c8d",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"notifications_count\", jsonData.totalRecords);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?lang=EN",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "lang",
									"value": "EN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 200 - non-existing parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff13cbbf-9874-409b-9bc6-bbc2bef65c8d",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"notifications_count\", jsonData.totalRecords);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"notify.json\", JSON.parse(pm.environment.get(\"schema_notify_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notifyCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?krakow=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "krakow",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8892c-44ce-4177-a157-6249fada76c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d2a70e9-61a4-490b-8e9e-cf078d6e34da",
						"type": "text/javascript",
						"exec": [
							"let response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Notifications have the same recipient and creator\", function () {",
							"    let lenght = response.notifications.lenghth;",
							"    if(lenght > 0){",
							"     for(i=0; i<length; i++){",
							"      pm.expect(response.notifications[i].recipientId).to.equal(response.notifications[i].metadata.createdByUserId);  ",
							"     }",
							"    }   ",
							"});",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative tests - /notify_self",
			"item": [
				{
					"name": "/notify/_self 400 - limit  > max integer value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21506c51-3fbb-4858-80eb-e24fbaf7f71e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"   ",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - limit not integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e8a402c-5f60-4b52-a645-87c5cfe8967c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify?limit=3.14",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							],
							"query": [
								{
									"key": "limit",
									"value": "3.14"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - limit string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e1833a2-c201-4107-b465-d66497ed0414",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?limit=\"any value\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "limit",
									"value": "\"any value\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - offset = max integer value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0bfece7-c63b-4b7e-aaac-3c23d692c0ca",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 401 - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cd461b8-d2a8-4290-937e-5e1d95e17707",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 401\", function () {",
									"     pm.response.to.have.status(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "invalidtoken"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 403 - Access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00ddd1c6-7eef-4dc2-95c7-a14b1c18eabd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 403\", function () {",
									"     pm.response.to.have.status(\"Forbidden\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 404 - not implemented",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "257fbd58-7eb8-4274-a535-c3acd0676d3c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct error\", function () {    ",
									"    pm.expect(pm.response.text()).to.contain(\"No suitable module found for path /notify/_self\");",
									"});  ",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "05e442e7-0ce2-4ef8-821c-b43e8b62197f",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"mock_recipientId\", uuid.v4());",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"This is very basic _self notificatin with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - limit < 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8d8953e-f813-41f0-8021-e22ba0ae0d5c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'limit' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - limit < -max integer value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddb0fbe4-f816-491f-8bd2-d34e9a31342e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'limit' parameter is incorrect. parameter value {-2147483648} is not valid: must be greater than or equal to 0\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?limit=-2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "limit",
									"value": "-2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - offset=-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d05312e-43f8-4d0b-9444-d9ca6b5cd066",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'offset' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - offset=-max integer value + 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c343fdc5-0e87-42f8-b75d-d86f622a6364",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'offset' parameter is incorrect. parameter value {-2147483648} is not valid: must be greater than or equal to 0\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?offset=-2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "offset",
									"value": "-2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - lang= POL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "609f7a3a-f633-4c72-9ec1-ec654c41c1ab",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'lang' parameter is incorrect. parameter value {POL} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?lang=POL",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "lang",
									"value": "POL"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - lang= polski",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5141d40-043f-4f93-853f-b0e9a494db34",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'lang' parameter is incorrect. parameter value {polski} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?lang=polski",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "lang",
									"value": "polski"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 400 - lang=",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d758329-6dcc-4cef-b617-a2399560edc0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c27e31a-1b13-49f4-9ddb-f9fc5172e2c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?lang=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "lang",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cbcbe306-6d21-49ce-83aa-9b641f1c6ddc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e5593c52-ff3a-4e76-acbd-a8de5f289a5e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DELETE /notify/_self",
			"item": [
				{
					"name": "setting up test data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03f4a201-f3c2-491a-bf20-2a7cf034ef94",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"added_notification_mocked\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"recipientId\", pm.variables.get(\"userid\"));",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification with all fields\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe98d49f-9ef3-4a03-b105-aec3ed13d7b9",
								"type": "text/javascript",
								"exec": [
									"var endpointUsers = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/users?query=(username=\" + pm.environment.get(\"username\") + \")\";",
									"//console.log(endpointUsers);",
									" var tenant = pm.environment.get(\"xokapitenant\");",
									" var token = pm.environment.get(\"xokapitoken\");",
									"",
									"//get material type",
									"pm.sendRequest({",
									"    url: endpointUsers,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().users.length>0){",
									"        ",
									"       // console.log(res.json().users[0]);",
									"     pm.variables.set(\"userid\",  res.json().users[0].id);",
									"    }",
									" }",
									");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{$guid}}\",\r\n  \"text\": \"This is very basic notification with all fields\",\r\n  \"seen\": true,\r\n  \"link\": \"/here/is/my/link\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_username",
								"{{username}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 204 - whitout olderthan parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ae25c6-8647-45a2-9476-66f8ab42ebab",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 404 - without  olderthan parameter - consecutive run",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dd1dfc7-3a71-43bb-98c1-ce90e972eb66",
								"type": "text/javascript",
								"exec": [
									"//JIRA!!",
									"pm.test(\"Returns status 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/_self 404 - with olderthan parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db167f1b-2116-4993-8c75-333bb8b737dd",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Returns status 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/_self?olderthan=\"2017-12-25\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"_self"
							],
							"query": [
								{
									"key": "olderthan",
									"value": "\"2017-12-25\""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "10556892-8d6b-4719-ad3b-3d05adb72b24",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2def6846-c2fa-4178-ba4c-4f962dee08af",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Happy path - /notify/{id}",
			"item": [
				{
					"name": "setting up test data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16fb23e0-50e9-43a5-933e-eecd7aecc424",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"test_notification_id\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"recipientId\", pm.environment.get(\"test_recipientId\"));",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic notification with mocked recipientId\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4d80fe8a-ec73-44cc-bc6b-97cf696656ba",
								"type": "text/javascript",
								"exec": [
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = pm.environment.get(\"xokapitoken\");",
									"let path = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/users?limit=10\";",
									"",
									"pm.sendRequest({",
									"    url: path,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"            }",
									"} , function (err, response) {",
									"    ",
									"    if(response.code === 200){",
									"        let length = response.json().users.length;",
									"        if (length > 0) {",
									"            console.log(response.json().users[length-1].id);",
									"            pm.environment.set(\"test_recipientId\",response.json().users[length-1].id);",
									"        }",
									"        else{",
									"            postman.setNextRequest(\"/notify 201  - required fields only - mocked data\");",
									"        }",
									"    }",
									"    else {",
									"        postman.setNextRequest(\"/notify 201  - required fields only - mocked data\");",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipientId\": \"{{test_recipientId}}\",\r\n  \"text\": \"This is very basic notification with mocked recipientId\"\r\n\t\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7b4d948-f73d-4332-a454-ddb4176703f4",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"test_metadata\", jsonData.metadata);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.variables.get(\"test_notification_id\"));",
									"}); ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e18f6c73-b87c-420c-b1d4-ca2add0f836a",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200  - empty parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "926863da-0063-413a-ae5e-b5529ace6398",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.variables.get(\"test_notification_id\"));",
									"}); ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1a1a08ab-9659-49b3-ad02-3f06199de3f3",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200  - lang=EN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "926863da-0063-413a-ae5e-b5529ace6398",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.variables.get(\"test_notification_id\"));",
									"}); ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "33ba8828-29c4-43be-ade3-69c499c224ed",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}?lang=EN",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "EN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200  - limit=10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "926863da-0063-413a-ae5e-b5529ace6398",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.variables.get(\"test_notification_id\"));",
									"}); ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1af4a70-8283-43a0-8211-6bd092c56aac",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}?limit=10",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200  - limit=max integer value + 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "926863da-0063-413a-ae5e-b5529ace6398",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.variables.get(\"test_notification_id\"));",
									"}); ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d87a3b7b-6404-40cd-8647-990379cb8cd0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 201 - required fields only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02a531d5-e61c-4084-9c73-265cfdfdbb4d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ffde410a-2cde-48a9-b690-7926392f6062",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipientId\": \"{{mock_recipientId}}\",\n    \"text\": \"This is very basic updated notification\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200 -verify text update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e96b6b13-b238-45d5-9591-e97b55d22999",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic updated notification\");",
									"}); ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "37c158cd-0dee-4fe3-9c7a-7041a4e669f9",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 201 - \"seen\" field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e9dd5c5-1eaa-473b-806d-e68b78ae4e74",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2a95ffd3-d067-4be5-8763-90cad9a5d543",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipientId\": \"{{mock_recipientId}}\",\n    \"text\": \"This is very basic updated notification\",\n    \"seen\": \"true\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200 -verify \"seen\" update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d913a30-4893-4cb2-bb57-e1479a5e2d06",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic updated notification\");",
									"    pm.response.to.have.jsonBody(\"seen\", true);",
									"}); ",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c4d0c8af-a789-45ff-8fb7-eb2f013e8459",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 201 - metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e9dd5c5-1eaa-473b-806d-e68b78ae4e74",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18c7ba5d-2254-4983-9a3b-178e567c2a7c",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"recipientId\": \"f37e2e70-3497-44f8-a1d3-3e292f56a2fa\",\n    \"text\": \"This is very basic updated notification\",\n    \"seen\": true,\n    \"metadata\": {\n        \"createdDate\": \"2020-04-26\",\n        \"createdByUserId\": \"{{$guid}}\",\n        \"updatedDate\": \"2019-04-27\",\n        \"updatedByUserId\": \"{{$guid}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200 -verify metadata update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "723d47de-2739-4c58-b621-13af308f1f54",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"console.log(\"update.data\" + pm.environment.get(\"test_metadata\").createdDate);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_notify_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"text\", \"This is very basic updated notification\");",
									"    pm.response.to.have.jsonBody(\"seen\", true);",
									"}); ",
									"",
									"pm.test(\"Only updatedDate in metadata has been modified\", function () { ",
									"    pm.expect(jsonData.metadata.createdDate).to.equal(pm.environment.get(\"test_metadata\").createdDate);",
									"    pm.expect(jsonData.metadata.createdByUserId).to.equal(pm.environment.get(\"test_metadata\").createdByUserId);",
									"    pm.expect(jsonData.metadata.updatedByUserId).to.equal(pm.environment.get(\"test_metadata\").updatedByUserId);",
									"    ",
									"    pm.expect(jsonData.metadata.updatedDate).to.not.equal(pm.environment.get(\"test_metadata\").updatedDate);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1d50f1c3-b6f8-4b60-a6a3-3831fa67ee45",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8bf4734-a9cd-4574-99c3-badb79351880",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aaba7bc6-7c86-4a70-8b86-089b90c97cc2",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 200 -verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28122ed4-3537-4227-ba9a-c716d2646263",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9de9e0e-fd6a-4079-a41a-d1f6be709b3d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8892c-44ce-4177-a157-6249fada76c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d2a70e9-61a4-490b-8e9e-cf078d6e34da",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative tests - /notify/{id}",
			"item": [
				{
					"name": "/notify/{id} 400 - invalid id - not uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "872ee923-230e-47db-b313-b7c29833b7a8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"     pm.response.to.have.status(422)",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/{id} 401 - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1a5f694-dcf6-46a7-8ab6-4e39b5969c5a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 401\", function () {",
									"     pm.response.to.have.status(401)",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "85a74282-6b80-4c6b-83d4-f759bcf688f7",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "invalidtoken"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/{id} 403 - Access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46959f8b-4e4a-4d91-b8c6-468a66641ac5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 403\", function () {",
									"     pm.response.to.have.status(403)",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/{id} 404 - non-existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db31b112-f616-46f8-b804-679b223c7b44",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 404\", function () {",
									"     pm.response.to.have.status(404)",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 400 - invalid json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbe4da99-b844-496c-a4f8-40c15fff2b5c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f4ec576-4be1-47a7-b632-dbcfb4f91362",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"This is very basic updated notification\",\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 401 - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82cac21c-92be-4fb1-95b9-451c7d1e81bf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 401\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "16d89359-b8c0-446b-a98c-bcd2adfc961e",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "invalidtoken"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipientId\": \"{{mock_recipientId}}\",\n    \"text\": \"This is very basic updated notification\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 403 - Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6abc845-94a0-4179-b59b-751767aa21a5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 403\", function () {",
									"    pm.response.to.have.status(\"Forbidden\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a953a4b1-73cd-4a2f-80cd-dd7a21c5b4ec",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipientId\": \"{{mock_recipientId}}\",\n    \"text\": \"This is very basic updated notification\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 422 - missing recipientId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "640af377-0931-4f5d-a214-9ff67d9f791d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									"",
									"pm.test(\"Response contains correct error message\", function () {    ",
									"    pm.response.to.have.jsonBody(\"errors[0].message\", \"Required\");",
									"    pm.response.to.have.jsonBody(\"errors[0].parameters[0].key\", \"recipientId\");",
									"    pm.response.to.have.jsonBody(\"errors[0].parameters[0].value\", \"\");",
									"}); "
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a5009d8-527b-4d7b-99f9-acc29645bca2",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"This is very basic updated notification\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 404 - non-existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d14033e3-1e3c-4432-8114-4d5d43ef127d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8668058-03f2-49cf-b86a-a08a1abfa428",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipientId\": \"{{mock_recipientId}}\",\n    \"text\": \"This is very basic updated notification\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 422 - non-existing id - not uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68b8d8c7-6650-4fa9-a6ad-cbd2996a390f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ecde1afa-7b52-4f94-83f5-24cdcf044fc0",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipientId\": \"{{mock_recipientId}}\",\n    \"text\": \"This is very basic updated notification\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/{id} 400 - invalid id - not uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27d6b6b5-0fd0-44cc-a6f7-1cbc619f6f4d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"     pm.response.to.have.status(422);",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/{id} 401 - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1820ac27-069a-4697-98c3-f282f310a9e4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 401\", function () {",
									"     pm.response.to.have.status(401)",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aded7090-3750-4c1b-951b-fb243784c1a6",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "invalidtoken"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/{id} 403 - Access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46959f8b-4e4a-4d91-b8c6-468a66641ac5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 403\", function () {",
									"     pm.response.to.have.status(403)",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify/{id} 404 - non-existing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db31b112-f616-46f8-b804-679b223c7b44",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 404\", function () {",
									"     pm.response.to.have.status(404)",
									"});",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e72371e9-1621-479e-ade1-398c0004a2fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 400  - lang=POL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca5e16c5-ec62-43c5-80d0-ecf75e630af7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'lang' parameter is incorrect. parameter value {pol} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b79d7f8b-c289-4318-ab34-96a62daebc75",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}?lang=pol",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "pol"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/notify{id} 400  - lang=",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e8440ed-3e02-457b-a908-768676c59ac4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"Returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c0a7f60-b5a8-40ad-8f54-efd97b407e2b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify/{{test_notification_id}}?lang=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify",
								"{{test_notification_id}}"
							],
							"query": [
								{
									"key": "lang",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "29232e3b-6ca6-405a-a423-cee71afdb8d5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4bae6a08-6922-4766-a482-70e0441c337b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "/notify - 200 - unset environment variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db3e217a-1a77-485c-a1f5-323c7db252cc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET /notify returns 200 status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.unset(\"mock_recipientId\");",
									"pm.environment.unset(\"test_recipientId\");",
									"pm.environment.unset(\"notifications_count\");",
									"pm.environment.unset(\"self_notifications_count\");",
									"pm.environment.unset(\"test_metadata\");",
									"pm.environment.unset(\"test_notification_id\");",
									"",
									"//schema variables",
									"pm.environment.unset(\"schema_parameters_content\");",
									"pm.environment.unset(\"schema_error_content\");",
									"pm.environment.unset(\"schema_errors_content\");",
									"pm.environment.unset(\"schema_metadata_content\");",
									"pm.environment.unset(\"schema_notify_content\");",
									"pm.environment.unset(\"schema_notifyCollection_content\");",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7c6171b6-548e-42b9-82b7-f39e1b4a07d1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notify",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notify"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b40ffdb5-a9bf-4777-bf6d-b541ea2eb968",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a61b31e1-f5af-4f7a-b6b7-183f49573686",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f7463ae5-2c8e-462c-b8da-319cf59e011b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3cd1b95c-ad30-49b0-9bb1-84211ed68777",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a2d57354-3c84-4806-9491-9f0085e15e44",
			"key": "mod_name",
			"value": "mod-notify",
			"type": "string"
		},
		{
			"id": "e1e6d300-712e-4cec-b0af-bc6e8eadad43",
			"key": "mod_version",
			"value": "v1.1.5",
			"type": "string"
		},
		{
			"id": "9c74c83f-19ee-4963-bba1-bd77ab0b2452",
			"key": "schema_notify",
			"value": "notify.json",
			"type": "string"
		},
		{
			"id": "a5b8852e-1188-4384-a097-11b0f894605b",
			"key": "schema_notifyCollection",
			"value": "notifyCollection.json",
			"type": "string"
		},
		{
			"id": "b6aea7b7-2f43-41ac-876b-c67500562007",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "18f66415-714b-46db-abc5-50a9ec07ece2",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "b0e26975-942e-4e23-8856-57023f2a21df",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "dcf982b3-aa7b-4ac3-b810-159b367c134f",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "ffe44611-ce1e-4d89-81f7-97641e288fda",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "0e93fa64-9ceb-471e-9ede-f268c68b69f9",
			"key": "schema_commit",
			"value": "bf5b23978b71776c59eca1fd6b33c7fb315b0f2a",
			"type": "string"
		}
	]
}