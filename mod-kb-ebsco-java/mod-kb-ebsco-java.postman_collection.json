{
	"info": {
		"_postman_id": "3613db50-f282-4c24-8988-eb0993e8c105",
		"name": "mod-kb-ebsco-java",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "schemas",
					"item": [
						{
							"name": "setup environment variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dff4017-3422-4737-8afa-bd40eedb85f8",
										"exec": [
											"const moduleName = 'mod-kb-ebsco-java';",
											"pm.test(\"GET json schemas response OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"GET json schemas has JSON body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.test(\"GET contains ebsco-java module\", function () {",
											"    pm.expect(pm.response.text()).to.include(moduleName);",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"json.forEach((element) => {",
											"\tvar moduleId = element.id;",
											"\tif(moduleId.includes(moduleName)){",
											"\t\tpm.environment.set('kb-ebsco-java-module-id', moduleId);",
											"\t}",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/_jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{xokapitenant}}",
										"interfaces",
										"_jsonSchemas"
									]
								}
							},
							"response": []
						},
						{
							"name": "get schemas",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a115d51-6166-4948-b743-e40fe4dae5b3",
										"exec": [
											"pm.test(\"GET schema_parameters OK\", function () {pm.response.to.be.ok;});",
											"",
											"pm.test(\"GET schema_parameters has JSON body\", function () {pm.response.to.have.jsonBody();});",
											"",
											"function checkVariableExist(name){return pm.environment.has(\"schema_\"+ name);}",
											"",
											"function setEnvironmentVariable(name, data){pm.environment.set(\"schema_\"+ name, data) }",
											"",
											"function extractName(url){ return url.substring(url.lastIndexOf(\"/\") + 1, url.lastIndexOf(\".\")); }",
											"",
											"function replaceResponseRefWithName(text){ return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"schema_\"); }",
											"",
											"function getURL(path) {return pm.variables.get(\"protocol\") + \"://\" + ",
											"        pm.variables.get(\"url\") + \":\" + ",
											"        pm.variables.get(\"okapiport\") + ",
											"        \"/_/jsonSchemas?path=\" + path;",
											"}",
											"        ",
											"function getRequest(url){",
											"  const echoGetRequest = {",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"      'X-Okapi-Module-Id' : pm.variables.get(\"kb-ebsco-java-module-id\"),",
											"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\")",
											"    }",
											"  }",
											"    return echoGetRequest;",
											"}        ",
											"",
											"function fetchSchema(echoGetRequest, delay){",
											"",
											"return new Promise((resolve, reject) => {",
											"     setTimeout(function(){",
											"       pm.sendRequest(echoGetRequest, (err, response) => {",
											"       if (!err) {",
											"        resolve(response.text());",
											"       }else{",
											"        reject(err, echoGetRequest);",
											"       }",
											"      });",
											"     }, delay);",
											"  });",
											"}",
											"",
											"function addAdditionalSchemas(data){",
											"    data.push(\"raml-util/schemas/tags.schema\");",
											"    data.push(\"raml-util/schemas/errors.schema\");",
											"    data.push(\"raml-util/schemas/error.schema\");",
											"    data.push(\"raml-util/schemas/parameters.schema\");",
											"    data.push(\"raml-util/schemas/metadata.schema\");",
											"    data.push(\"raml-util/schemas/uuid.schema\");",
											"}",
											"",
											"var interval = setTimeout(() => {}, 30000);",
											"function traverse(data){",
											"    addAdditionalSchemas(data);",
											"     var promises = Object.entries(data).map(([key, value]) => {",
											"         ",
											"        var url = getURL(value);",
											"        var request = getRequest(url);",
											"        ",
											"        return fetchSchema(request, 200 * key)",
											"        .then(function(response) {",
											"            response = replaceResponseRefWithName(response.toString());",
											"            var name = extractName(value);",
											"            if(!checkVariableExist(name)){",
											"                setEnvironmentVariable(name, response);",
											"            }",
											"        })",
											"        .catch((err, req) => {",
											"            console.log(err);",
											"            console.log(req);",
											"        });",
											"    });",
											"    ",
											"    Promise.all(promises)",
											"        .then(() => {",
											"            clearTimeout(interval)",
											"        })",
											"        .catch((err, req) => {",
											"            console.log(err);",
											"            console.log(req);",
											"            clearTimeout(interval);",
											"        });",
											"}",
											"",
											"traverse(JSON.parse(responseBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{kb-ebsco-java-module-id}}",
										"type": "text"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authentication",
					"item": [
						{
							"name": "/authn/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var token = postman.getResponseHeader(\"x-okapi-token\")",
											"pm.environment.set(\"xokapitoken\", token);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"id": "c959771a-f014-4984-b5a2-60d8cc018a8b"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup permission",
					"item": [
						{
							"name": "Get user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9c50002-f58f-47ed-bf4f-850f0e104085",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"userId\", jsonData.user.id);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "551e58c3-2ac0-43fb-bb89-91af45a70b6c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"bl-users",
										"by-username",
										"{{username}}"
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "Add permission if it doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "068844b9-bb1e-476f-8a32-0b531c6fa644",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var permissionExists = jsonData!==null && jsonData.permissions.filter(permission => (permission === \"kb-ebsco.all\")).length > 0;",
											"pm.environment.set(\"permissionExists\", permissionExists);",
											"",
											"if(!permissionExists) {",
											"    jsonData.permissions.push(\"kb-ebsco.all\")",
											"    ",
											"    const permissionsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/json',",
											"        raw: JSON.stringify(jsonData)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"        pm.expect(res).to.have.property('status', 'OK');",
											"      });",
											"    });",
											"    ",
											"    postman.setNextRequest(\"/authn/login\");",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc0840ba-14fe-44c2-83ba-7751e5a8a30a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for kb-credentials",
					"item": [
						{
							"name": "Create credentials if not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e8874fa-0ebc-4600-8b59-e26e833a3233",
										"exec": [
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var credentialsExist = jsonData !== undefined && jsonData.data[0] !== undefined;",
											"",
											"if (credentialsExist) {",
											"    var credentials = jsonData.data[0];",
											"    credentials.attributes.name = \"University of Massachusettss\";",
											"    credentials.attributes.apiKey = pm.variables.get(\"rm.apiKey\");   ",
											"    credentials.attributes.customerId = pm.variables.get(\"rm.apiCustomer\");",
											"    credentials.attributes.url = pm.variables.get(\"rm.apiUrl\");",
											"",
											"    var requestBody = {",
											"        data: credentials",
											"    };",
											"    const credentialsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/kb-credentials/' + credentials.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/vnd.api+json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/vnd.api+json',",
											"        raw: JSON.stringify(requestBody)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(credentialsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 204);",
											"        pm.environment.set(\"kb-credentials-id1\", credentials.id);",
											"      });",
											"    });",
											"} else {",
											"",
											"    var credentials = {",
											"        type: 'kbCredentials',",
											"        attributes: {",
											"            name: 'University of Massachusettss',",
											"            apiKey: pm.variables.get(\"rm.apiKey\"),",
											"            url: pm.variables.get(\"rm.apiUrl\"),",
											"            customerId: pm.variables.get(\"rm.apiCustomer\")",
											"        }",
											"    }",
											"",
											"    var requestBody = {",
											"        data: credentials",
											"    };",
											"",
											"    const credentialsPostRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/kb-credentials',",
											"      method: 'POST',",
											"      header: {",
											"        'Content-Type' : 'application/vnd.api+json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/vnd.api+json',",
											"        raw: JSON.stringify(requestBody)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(credentialsPostRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 201);",
											"        pm.environment.set(\"kb-credentials-id1\", res.json().id);",
											"      });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for assignment users",
					"item": [
						{
							"name": "POST assign user1 to KB Credentials1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d7c9cec6-7ce4-4124-8496-659633ab31f9",
										"exec": [
											"pm.environment.set(\"assigned-user-id1\", pm.environment.get(\"userId\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ef43596-a611-4bba-bfa9-085abc3ab59c",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for user credentials",
					"item": [
						{
							"name": "staff user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5633f0a3-564f-44b5-a8fd-55345530feb7",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"staff-user-group-id\", jsonData.usergroups[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a623fa4-c6f2-437b-b189-55b08bbf8022",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?query=(group==staff)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"groups"
									],
									"query": [
										{
											"key": "query",
											"value": "(group==staff)"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "108e2d0e-2184-4f5d-8b78-48c9cbd0f3a8",
										"exec": [
											"pm.environment.set(\"cred-user-name\", \"emilia_briggs\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "004fb2ae-45c3-4aff-a6da-eb95b55eee41",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"cred-user-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{cred-user-name}}\",\r\n  \"patronGroup\": \"{{staff-user-group-id}}\",\r\n  \"active\": true,\r\n  \"personal\": {\r\n    \"preferredContactTypeId\": \"002\",\r\n    \"lastName\": \"Briggs\",\r\n    \"firstName\": \"Emilia\",\r\n    \"middleName\": \"Gemma\",\r\n    \"email\": \"emilia_briggs@example.com\"\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9287783-c8d3-43f4-9f35-5b3c68e0e728",
										"exec": [
											"pm.environment.set(\"cred-user-pass\", \"eb_pass\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "946d5b02-7d56-4e69-8db5-95e92088ef13",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"{{cred-user-id}}\",\r\n  \"username\": \"{{cred-user-name}}\",\r\n  \"password\": \"{{cred-user-pass}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user credentials permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d23a2f3-9b39-4089-ad45-130ac41a0e8b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "385e572e-26b9-40bb-9513-94f896960e29",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"kb-cred-perm-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"permissionName\": \"kb-ebsco.user-kb-credential.get\",\r\n\t\"displayName\": \"get user KB credentials\",\r\n\t\"description\": \"Get user KB credentials\",\r\n\t\"tags\": [],\r\n\t\"subPermissions\": [],\r\n\t\"mutable\": false,\r\n\t\"visible\": false\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign permission to user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0267e094-abec-452b-b6cc-b447bf39468d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "614e77fb-ce03-4ef2-ae5e-8b42826bc663",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"kb-cred-perm-assigned-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"{{cred-user-id}}\",\r\n  \"permissions\": [\"kb-ebsco.user-kb-credential.get\"]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign user to KB Credentials1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fa3407dc-35a0-4d87-87bc-2686f80dc356",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"cred-user-assigned-id\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ea3c4721-70bb-4ab7-a61e-3be70e5f4c94",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{cred-user-assigned-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Emilia\",\n      \"middleName\": \"Gemma\",\n      \"lastName\": \"Briggs\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"{{cred-user-name}}\"\n    }\n  }\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/authn/login user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d48f07f-e87e-487e-886c-f20020ac6dd4",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var token = postman.getResponseHeader(\"x-okapi-token\")",
											"pm.environment.set(\"cred-user-xokapitoken\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{cred-user-name}}\",\"password\":\"{{cred-user-pass}}\"}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for tags",
					"item": [
						{
							"name": "Create custom package for tags test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3ce3425-1d80-4c7f-b01a-e0d698f6bc3f",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-created-for-tags-id\", response.data.id);",
											"        pm.environment.set(\"custom-package-created-for-tags-name\", response.data.attributes.name);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"    ",
											"    //Test that data.attributes has expected attributes",
											"    pm.test('expected data.attributes are present', function() {",
											"        pm.expect(response.data.attributes).to.be.an('object');",
											"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
											"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
											"    });",
											"  ",
											"    //Test that customCoverage matches what was passed in POST request",
											"    pm.test('custom coverage matches value passed in', function() {",
											"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"    });",
											"    ",
											"    //Test that isCustom is true",
											"    pm.test('isCustom is true', function() {",
											"        pm.expect(response.data.attributes.isCustom).to.be.true;",
											"    });",
											"    ",
											"    //Test that isSelected is true",
											"    pm.test('isSelected is true', function() {",
											"        pm.expect(response.data.attributes.isSelected).to.be.true;",
											"    });",
											"    ",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.variables.get(\"custom-package-tags-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0490108-c6a3-4241-b52c-875759113edd",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-tags-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-tags-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package with multiple tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04970020-f453-4456-9715-e18aa68d31ed",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    pm.environment.set(\"tag-name-for-multiple-adding-a\", response.data.attributes.tags.tagList[0]);",
											"    pm.environment.set(\"tag-name-for-multiple-adding-b\", response.data.attributes.tags.tagList[1]);",
											"    ",
											"    //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('TagList is not empty', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tag in tagList matches with value",
											"    pm.test('Creating tagList', function(){",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"a-test\");",
											"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"b-test\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-created-for-tags-name}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"a-test\",\n    \t\t\t\"b-test\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d50564fd-d6cb-4826-ae60-3c9f0065d1dc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45907e41-8950-43c8-8c9e-44dd8051838b",
								"type": "text/javascript",
								"exec": [
									"    tv4.addSchema(\"schema_package.json\", JSON.parse(pm.variables.get(\"schema_package\")));",
									"    tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"    tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"    tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"    tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"    tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"    tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"    tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"    tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"    tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"    tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"    tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"    tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for packages test",
					"item": [
						{
							"name": "Create custom package for testing deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3634c56-6528-4954-a4fd-cea454b5977b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-id-created-in-post\", response.data.id);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"    ",
											"    //Test that data.attributes has expected attributes",
											"    pm.test('expected data.attributes are present', function() {",
											"        pm.expect(response.data.attributes).to.be.an('object');",
											"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
											"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
											"    });",
											"        ",
											"    //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"    ",
											"    //Test that customCoverage matches what was passed in POST request",
											"    pm.test('custom coverage matches value passed in', function() {",
											"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"    });",
											"    ",
											"    //Test that isCustom is true",
											"    pm.test('isCustom is true', function() {",
											"        pm.expect(response.data.attributes.isCustom).to.be.true;",
											"    });",
											"    ",
											"    //Test that isSelected is true",
											"    pm.test('isSelected is true', function() {",
											"        pm.expect(response.data.attributes.isSelected).to.be.true;",
											"    });",
											"    ",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ade3bb57-812b-4cb3-bbb4-6256678f1746",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set(\"custom-package-one-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package1 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "710077f0-b4a0-45c0-a71f-e409c16cff19",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "47d0b2e4-25be-4dc6-9eec-79b5f489234c",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"    ",
											"    pm.environment.set(\"tagName\", response.data.attributes.tags.tagList[0]);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom package for testing deletion in PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d58bf4a-bf22-4df1-8c93-b94a3e0c9723",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-name-created-in-post-again\", response.data.attributes.name);",
											"        pm.environment.set(\"custom-package-id-created-in-post-again\", response.data.id);",
											"        pm.environment.set(\"provider-with-tags-id\", pm.environment.get(\"custom-package-id-created-in-post-again\").split('-')[0]);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-two-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f10384c-b8f2-4ca6-9d46-009bd9d1dc62",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set(\"custom-package-two-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-two-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package2 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cd865200-0968-4d89-9515-78385adbaaf0",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16cf8e54-cde9-4a0a-a2c1-d4c698d0d1af",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-again}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-again}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7450021-fb93-42a0-a68e-8f271545ae27",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a json body\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"var matchingPackages = jsonData.data.filter(\r",
											"  function(packageRecord) {\r",
											"    if (!packageRecord.attributes.isCustom && packageRecord.attributes.titleCount > 1) {\r",
											"      return packageRecord;\r",
											"    }\r",
											"  }\r",
											");\r",
											"\r",
											"pm.test('at least 1 matching package is returned from query', function() {\r",
											"  pm.expect(matchingPackages.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"if (matchingPackages.length > 0) {\r",
											"  pm.environment.set(\"partially-selected-package-id\", matchingPackages[0].id);\r",
											"} else {\r",
											"  console.log(\"Unable to find package id for testing partially selected packages\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[selected]=false\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									],
									"query": [
										{
											"key": "filter[selected]",
											"value": "false\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get resource in not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c9fa9fc-90a8-45c0-a650-1e5b224e874b",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a json body\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"partially-selected-package-resource-id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}/resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{partially-selected-package-id}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select 1 resource in not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9d49240-9c5c-45fc-a670-1d8ae07f94e7",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{partially-selected-package-resource-id}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": false\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{partially-selected-package-resource-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{partially-selected-package-resource-id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "18980006-138c-4e37-aeb4-5986873295ed",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6f75e118-219c-4986-870a-d55d50788f4d",
								"type": "text/javascript",
								"exec": [
									"    tv4.addSchema(\"schema_package.json\", JSON.parse(pm.variables.get(\"schema_package\")));",
									"    tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"    tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"    tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"    tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"    tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"    tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"    tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"    tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"    tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"    tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"    tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"    tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for providers adding tags",
					"item": [
						{
							"name": "Update provider with adding tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9516c848-934e-4242-925a-c83d62c4dcdf",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"tagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8bb06ee6-5f7e-4392-8739-4d96f84c5e9d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"{{tagName}}\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"18",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second provider with tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9d440d9-9329-4307-848b-73c6a3fbb4ce",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('EBSCO');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"secondTagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af65762b-7abd-4f8d-a7cc-28c1d77c8d3a",
										"exec": [
											"pm.environment.set(\"secondTagName\", \"bar-tag\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"EBSCO\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"{{secondTagName}}\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"19",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8c888e90-35f3-461d-a08e-b254bca33f19",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28d6cf14-c196-4cea-9a39-af3ac92cae50",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
									"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
									"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
									"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
									"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
									"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));",
									"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for titles test",
					"item": [
						{
							"name": "GET Customer Specific Provider Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4892a52-cc78-45ac-a15f-7eca3a46f633",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"if (jsonData.data.length > 0) {",
											"    pm.environment.set(\"custom-providerid\", jsonData.data[0].id);",
											"} else {",
											"    console.log(\"Unable to find customer specific provider id for custom title testing\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q={{custid}}\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers"
									],
									"query": [
										{
											"key": "q",
											"value": "{{custid}}\n"
										}
									]
								},
								"description": "Retrieves unique id of the customer specific provider. All Custom Packages are created as part of a customer specific provider. "
							},
							"response": []
						},
						{
							"name": "Create Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16d1de7d-c830-4412-a473-ac3a2d601aa0",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.environment.set(\"custom-packageid\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f3bc703b-0a15-4b27-881f-6714b67391db",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"package-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Update custom package3 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61db36ee-e66a-4647-b401-060f40557e69",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6716e821-b958-4bc1-8f0b-b0d431924e15",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('Unknown');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"Unknown\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9bfa4b8-c313-4157-8d78-1c996aa4a17e",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var managedPackages = jsonData.data.filter(",
											"    function(packageRecord) {",
											"        if (!packageRecord.attributes.isCustom) {",
											"           return packageRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed package is returned from query', function() {",
											"    pm.expect(managedPackages.length).to.be.above(0);",
											"});",
											"",
											"if (managedPackages.length > 0) {",
											"    pm.environment.set(\"managed-packageid\", managedPackages[0].id);",
											"} else {",
											"    console.log(\"Unable to find managed package id for custom title testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=abc\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									],
									"query": [
										{
											"key": "q",
											"value": "abc\n"
										}
									]
								},
								"description": "Locate a random managed package to test custom title create error scenario."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for resources test",
					"item": [
						{
							"name": "Create Custom Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebbbb55c-b68c-4bc7-bf8f-b6279667be92",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titleid-for-resource\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "653262be-29c2-4a8e-9a2b-de1521ef1927",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Create Custom Title for duplicate check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc7a60fa-e9af-4e74-bf16-581325dda704",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titlename-for-resource-duplicate\", jsonData.data.attributes.name);",
											"pm.environment.set(\"custom-titleid-for-resource-duplicate\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13f4680f-3cda-4f5a-9ba3-7cc37287a4ba",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-uuid2\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-uuid2}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Create Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fb9ba08-e816-47f3-9195-d86df32f3559",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-packageid-for-resource\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6cffbe5-4d4c-4964-a8bb-7536ce14291f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-for-resource-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ddacb86-3eee-4cac-b30c-4c05dc0964c7",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var managedTitles = jsonData.data.filter(",
											"    function(titleRecord) {",
											"        if (!titleRecord.attributes.isCustom) {",
											"           return titleRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed title is returned from query', function() {",
											"    pm.expect(managedTitles.length).to.be.above(0);",
											"});",
											"",
											"if (managedTitles.length > 0) {",
											"    pm.environment.set(\"managed-titleid\", managedTitles[0].id);",
											"    pm.environment.set(\"managed-titlename\", managedTitles[0].attributes.name);",
											"} else {",
											"    console.log(\"Unable to find managed title id for resource testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=abc\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "abc\n"
										}
									]
								},
								"description": "Locate a random managed package to test custom title create error scenario."
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34502745-0e52-4090-a2b3-15eed478fca5",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var managedResources = jsonData.included.filter(",
											"    function(resourceRecord) {",
											"        if (!resourceRecord.attributes.isPackageCustom) {",
											"           return resourceRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed resource is returned from query', function() {",
											"    pm.expect(managedResources.length).to.be.above(0);",
											"});",
											"",
											"if (managedResources.length > 0) {",
											"    pm.environment.set(\"managed-title-package-resourceid\", managedResources[0].id);",
											"} else {",
											"    console.log(\"Unable to find managed resource id for resource testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{managed-titleid}}?include=resources\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles",
										"{{managed-titleid}}"
									],
									"query": [
										{
											"key": "include",
											"value": "resources\n"
										}
									]
								},
								"description": "Locate a random managed resource to test resource delete functionality"
							},
							"response": []
						},
						{
							"name": "Create custom title for tags test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82724d57-a9e3-480e-b45a-10a874fe2972",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-tags-test-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b903b915-8241-4f56-b987-bb86ec89145f",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titleid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-tags-test-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Custom package for resource tag test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "af5bd0f0-411d-4ed8-bd4e-4d088e190b15",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-from-setup-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3999258d-bb1c-49de-9309-d760d4834027",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-packageid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{custom-package-from-setup-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST add custom title to custom package with resource tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ff82ad7-bdca-481b-b8da-ad822e61e926",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store custom resource id for future reference in other tests/cleanup",
											"pm.environment.set(\"custom-resourceid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-from-setup}}\",\n      \"titleId\": \"{{custom-titleid-from-setup}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add tags to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "046364dc-a950-4deb-9c43-344106d4191e",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-resource-with-tags-uuid\", uuid.v4());",
											"pm.environment.set(\"tag-name-for-resource\", \"tag one\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b15af61f-26f1-45d7-aa18-dde8237c22ed",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.variables.get(\"custom-resource-with-tags-uuid\"));",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tags', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"tag-name-for-resource\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"tags\",\r\n    \"attributes\": {\r\n      \"name\": \"custom title-{{custom-resource-with-tags-uuid}}\",\r\n      \"tags\": {\r\n        \"tagList\": [\r\n          \"{{tag-name-for-resource}}\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add custom labels to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "99c97ce0-27ff-4e88-987b-4cfd9cd5f6d4",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-resource-with-tags-uuid\", uuid.v4());",
											"pm.environment.set(\"tag-name-for-resource\", \"tag one\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "55f1bb64-08da-48b4-a7a6-96ae11b106d3",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is resources",
											"pm.test('type is resources', function(){",
											"    pm.expect(response.data.type).eq('resources');",
											"});",
											"    ",
											"    ",
											"// Test that attributes have the expected keys",
											"let attributes = response.data.attributes;",
											"pm.test('expected attributes are present in a record', function() {",
											"    pm.expect(attributes).to.be.an('object');",
											"    pm.expect(attributes).to.include.all.keys(\"isTitleCustom\", \"titleId\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
											"});",
											"",
											"//Check that userDefinedFields are correct",
											"pm.test('UserDefinedFields are correct', function(){",
											"    pm.expect(attributes.userDefinedField1).eq(\"test 1\");",
											"    pm.expect(attributes.userDefinedField2).eq(\"test 2\");",
											"    pm.expect(attributes.userDefinedField3).eq(\"test 3\");",
											"    pm.expect(attributes.userDefinedField4).eq(\"test 4\");",
											"    pm.expect(attributes.userDefinedField5).eq(\"test 5\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"test 3\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add tags to managed resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7ce23062-27ab-4d03-95fb-dfe12eb20d08",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"managed-resource-with-tags-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7297242-e949-4929-9abe-a4de3ca67aef",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('managed-resource-' + pm.variables.get(\"managed-resource-with-tags-uuid\"));",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tags', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"secondTagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"managed-resource-{{managed-resource-with-tags-uuid}}\",\n      \"tags\": {\n        \"tagList\": [\n          \"{{secondTagName}}\"\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{managed-title-package-resourceid}}",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2176b47-d943-42ec-b8a9-064501cb0f7e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0863ccbd-3389-4a14-860f-60076979b107",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_resourceTagsItem.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsItem\")));",
									"tv4.addSchema(\"schema_resourceTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
									"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
									"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
									"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
									"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
									"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
									"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for custom labels",
					"item": [
						{
							"name": "PUT /custom-labels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d839753-0a2d-45c0-a602-3451d106b4a6",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"//Get the first record",
											"let firstRecord = jsonData.data[0];",
											"    ",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in a record', function() {",
											"    pm.expect(firstRecord).to.be.an('object');",
											"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
											"    pm.expect(firstRecord.type).eq('customLabels');",
											"});",
											"",
											"// Test that attributes have the expected keys",
											"let firstAttributes = firstRecord.attributes;",
											"pm.test('expected attributes are present in a record', function() {",
											"    pm.expect(firstAttributes).to.be.an('object');",
											"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test custom label 1\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 2,\n                \"displayLabel\": \"test custom label 2\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"custom-labels"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cef266ee-6449-4f7f-b58e-8bf5a85f5daf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e629356-efd5-4e18-ad01-04b4f9dc92f4",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_customLabel.json\", JSON.parse(pm.variables.get(\"schema_customLabel\")));",
									"tv4.addSchema(\"schema_customLabelsCollection.json\", JSON.parse(pm.variables.get(\"schema_customLabelsCollection\")));",
									"tv4.addSchema(\"schema_customLabelDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_customLabelDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for access types",
					"item": [
						{
							"name": "Create new access type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9be4417-764e-4ab7-8485-251b1cd0b58b",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id1\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed\",\n            \"description\": \"some description\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new access type 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9db3f8b-7249-40df-9183-c7fd186fa502",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id3\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33970b4c-d1da-4026-af07-4a3acb34f6b8",
										"exec": [
											"pm.environment.set(\"access-type-name3\", \"Subscribed2\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"{{access-type-name3}}\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new access type 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01d17ad4-02d0-4ecf-84cb-84505b4d13b1",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id4\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "931ad070-d5e1-40ce-860f-9388e8e6bbc3",
										"exec": [
											"pm.environment.set(\"access-type-name4\", \"Trial\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"{{access-type-name4}}\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package1 with access-type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fa8b0f85-6249-42e3-81a4-d036aa31309d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "80fc77b2-f354-4151-b6ca-de2582ae3cde",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
											"});",
											"",
											"//Test that id matches what was provided in query",
											"pm.test('id matches as provided in query', function(){",
											"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
											"});    ",
											"",
											"//Test that type is packages",
											"pm.test('type is packages', function(){",
											"    pm.expect(response.data.type).eq('packages');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
											"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
											"});",
											"",
											"//Test that contentType matches as provided in request",
											"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
											"pm.test('contentType matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.contentType).eq('Print');",
											"});",
											"",
											"//Test that isSelected matches as provided in request",
											"pm.test('isSelected matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.isSelected).to.be.true;",
											"});",
											"",
											"//Test that visibilityData matches as provided in request",
											"pm.test('visibilityData matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
											"});",
											"",
											"//Test that custom coverage matches provided in request",
											"pm.test('customCoverage matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"});",
											"",
											"//Test that resources are not included in relationships",
											"pm.test('relationships meta should not include resources', function() {",
											"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
											"});",
											"",
											"//Test that access type assigned",
											"pm.test('access type should be assigned', function() {",
											"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
											"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id3\"));",
											"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id3\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-package-id-created-in-post}}\",\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n            \"contentType\": \"Print\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            },\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id3}}\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package2 with access-type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c3e8542-5088-4020-8458-7ddd4b5ff315",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
											"});",
											"",
											"//Test that id matches what was provided in query",
											"pm.test('id matches as provided in query', function(){",
											"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-created-for-tags-id'));",
											"});    ",
											"",
											"//Test that type is packages",
											"pm.test('type is packages', function(){",
											"    pm.expect(response.data.type).eq('packages');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
											"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
											"});",
											"",
											"//Test that contentType matches as provided in request",
											"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
											"pm.test('contentType matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.contentType).eq('E-Journal');",
											"});",
											"",
											"//Test that isSelected matches as provided in request",
											"pm.test('isSelected matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.isSelected).to.be.true;",
											"});",
											"",
											"//Test that visibilityData matches as provided in request",
											"pm.test('visibilityData matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
											"});",
											"",
											"//Test that resources are not included in relationships",
											"pm.test('relationships meta should not include resources', function() {",
											"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
											"});",
											"",
											"//Test that access type assigned",
											"pm.test('access type should be assigned', function() {",
											"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
											"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id4\"));",
											"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id4\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"{{custom-package-created-for-tags-name}}\",\n            \"contentType\": \"E-Journal\",\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id4}}\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update custom resource with access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05496408-e164-4f06-800c-6d056e929b4e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e4aae2c-25bb-4445-abea-c24a862fcb5e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"{{access-type-id3}}\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "kb-credentials",
			"item": [
				{
					"name": "GET kb-credentials collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET credentials collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b21da599-13e5-417e-888d-41d8cc17bb18",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentialsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is kbCredentials",
													"        pm.expect(firstRecord.type).eq('kbCredentials');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"        });",
													"    } else {",
													"        console.log(\"No credentials exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a222a645-92d3-4b7e-bdd1-81e50eb8c608",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "29bbea0d-ec1f-47ba-a78f-0e16213ab739",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST credentials valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c535ff7-2fb5-4cce-a066-70bfcc38fb67",
												"exec": [
													"//Check that status is 201",
													"pm.test(\"Status is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"         ",
													" //Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"        pm.expect(response.attributes).to.be.an('object');",
													"        pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"        ",
													" //Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function() {",
													"        pm.expect(response.attributes.name).to.be.equals('University of Illinois');",
													"        pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"        pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"        pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function() {",
													"        pm.expect(response.meta).to.be.an('object');",
													"        pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});",
													"",
													"pm.environment.set(\"kb-credentials-id2\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST credentials invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cad04f1b-84e7-44b6-bdb0-36ca6f94ec1a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"KB API Credentials are invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with name longer than 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "561b57b4-55f0-4d0c-afbf-57d2db6480c4",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 255 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"zxehyhvsiucipujicjhuziczzjvqhwmaepkvdmupcaqrscjiilqlnumrxyttwgfoqlxztlpsosldoqjcbrkyvvaxzcklqlzbdkofjkqtbmvhkuyhdlvyeuqmebrulxqzryqzpcxkbezpdwbwzguwwnjswhwfexngtxgkizjdwvcnxqlhsszbavqndixyxeqvceqdssviqaotmsvnuehsmghhwsnhwktzrrqizhckmwtgpcsdhdyxhgnrgnqzxbcu\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28707c18-3bcf-4733-b98e-6f715b87e0dd",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with already existed name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5c09094-7d8f-434d-b0fe-ff3e77f98fcb",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Duplicate name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"Credentials with name 'University of Illinois' already exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42eec2b4-2cef-429e-b4fb-5301815de77a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"url must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b84eb92b-63a9-4343-b893-77d9b5e44718",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid customerId\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"customerId must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77f980bc-2160-41ef-9e3b-d3ac9dc551f8",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/kb-credentials/\" + pm.environment.get(\"kb-credentials-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    var response = res.json();",
													"    pm.test(\"Check changes\", function () {",
													"        pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"        pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"        pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"        pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"    });",
													"    ",
													"    pm.test('expected meta are present', function() {",
													"        pm.expect(response.meta).to.be.an('object');",
													"        pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "105629f1-53c0-44f5-83f0-bc2f2d470bd6",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6534f4e4-173b-4058-b6cd-a153a1c4145b",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "795e7fcf-8722-444d-a3dd-9e67d82bba29",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"KB API Credentials are invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with name longer than 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a17459d4-b0db-46c4-aada-c6f6c16fafdd",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 255 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"zxehyhvsiucipujicjhuziczzjvqhwmaepkvdmupcaqrscjiilqlnumrxyttwgfoqlxztlpsosldoqjcbrkyvvaxzcklqlzbdkofjkqtbmvhkuyhdlvyeuqmebrulxqzryqzpcxkbezpdwbwzguwwnjswhwfexngtxgkizjdwvcnxqlhsszbavqndixyxeqvceqdssviqaotmsvnuehsmghhwsnhwktzrrqizhckmwtgpcsdhdyxhgnrgnqzxbcu\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "475294d2-f8ec-4415-8c40-b931eebd253f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with already existed name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb061c37-4c33-4b8e-87ca-a0ea5ea9e7db",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Duplicate name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"Credentials with name 'University of Illinois' already exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "542ac372-4238-4a1c-9997-98ea11f4e519",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"url must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca5d237c-75ab-4a69-8423-00cf07c1633d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid customerId\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"customerId must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90e92342-38a1-4da8-b854-a0016eca3891",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b6c69a3e-2754-430c-b9b9-944485d72884",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PATCH kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PATCH credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98dba4ce-2ae2-42d0-a332-5be6e344e5e2",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/kb-credentials/\" + pm.environment.get(\"kb-credentials-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    var response = res.json();",
													"    pm.test(\"Check changes\", function () {",
													"        pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Patched');",
													"        pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"        pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"        pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"    });",
													"    ",
													"    pm.test('expected meta are present', function() {",
													"        pm.expect(response.meta).to.be.an('object');",
													"        pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Patched\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PATCH credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ca9c193-c04e-4bd0-bcc5-c2a9b6636ea1",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08f115d7-7684-47c8-bd0b-faacff7183e9",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "162150a0-5fcb-4456-b229-5ee62e17de94",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"KB API Credentials are invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials with name longer than 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd914a80-185d-4dbf-afb6-fc6796a66025",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 255 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"zxehyhvsiucipujicjhuziczzjvqhwmaepkvdmupcaqrscjiilqlnumrxyttwgfoqlxztlpsosldoqjcbrkyvvaxzcklqlzbdkofjkqtbmvhkuyhdlvyeuqmebrulxqzryqzpcxkbezpdwbwzguwwnjswhwfexngtxgkizjdwvcnxqlhsszbavqndixyxeqvceqdssviqaotmsvnuehsmghhwsnhwktzrrqizhckmwtgpcsdhdyxhgnrgnqzxbcu\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "381fd4dd-d150-4109-87e3-74a253d0922b",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials with empty url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a0ce6df-3e12-4d0b-af84-662feeee294a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"url must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH credentials with empty customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb51631b-d385-4d7a-a619-8ed2b7a2658f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid customerId\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"customerId must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b088bf41-546f-4364-ac85-8e350084bdaa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b98d58e4-2643-4a9a-9364-4b65d96f9a07",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET kb-credentials by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET credentials by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1aa852b0-4dd3-4c7f-81a8-e09c669bdb6e",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function () {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"",
													"//Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function () {",
													"    pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"    pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"    pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"    pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function () {",
													"    pm.expect(response.meta).to.be.an('object');",
													"    pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a65553e-7e13-42d3-ac87-69cf2ffc4290",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm-api-url-value}}\",\n      \"customerId\": \"{{rm-api-custid-value}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29e7df5f-5380-40b4-9fe3-17fc53ee4373",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1e6d01b4-77a2-48fd-a8d2-95a3d70f3862",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "816b5814-89dd-4366-a810-07c0ecc8500c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "DELETE credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d6e9612-826e-4bd4-8b5b-502a77a0e609",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss\",\r\n      \"apiKey\": \"QTh4lr58lK6RS44WI1wwY4tbXuXjHSJXaDO15wo1\",\r\n      \"url\": \"https://sandbox.ebsco.io\",\r\n      \"customerId\": \"apidvgvmt\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9794ea1-16a0-4109-89de-150f6b77be3f",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a614e776-6ea1-491e-88ca-f6dd7160e004",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE credentials with assigned user(s)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47ea8e76-143b-4bb6-928b-c2dfb32c2b3b",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"Credentials have related records and can't be deleted\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb625757-e5e1-4f1e-bcba-8176b0689094",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b2351945-c443-4c20-9f5a-37d6da50703e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6cb631e5-1235-4948-a69d-8459ecd0115b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4c390f1d-b2dc-4442-95a2-603e055bca06",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_kbCredentialsCollection.json\",pm.variables.get(\"schema_kbCredentialsCollection\"));",
							"tv4.addSchema(\"schema_kbCredentials.json\", pm.variables.get(\"schema_kbCredentials\"));",
							"tv4.addSchema(\"schema_kbCredentialsDataAttributes.json\",pm.variables.get(\"schema_kbCredentialsDataAttributes\"));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user assignment",
			"item": [
				{
					"name": "GET users assigned to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET users collection for KB Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa6ec91c-b12a-40d3-86cd-4db23162c804",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type assignedUsers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is assignedUsers",
													"        pm.expect(firstRecord.type).eq('assignedUsers');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"credentialsId\", \"userName\", \"firstName\", \"middleName\", \"lastName\", \"patronGroup\");",
													"        });",
													"    } else {",
													"        console.log(\"No user exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET with non-existing KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b503cff1-f7bb-41b7-9c5f-7243fca7831f",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"non-existing-credentials-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c3e4245f-cb53-4242-ae08-caa1cd85b529",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify attibutes",
													" pm.test('expected attributes are present', function() {",
													"    pm.expect(jsonData.data).to.be.an('array');",
													"     ",
													"    pm.expect(jsonData.meta).to.be.an('object');",
													"    pm.expect(jsonData.meta).to.include.all.keys(\"totalResults\");",
													"    ",
													"    pm.expect(jsonData.jsonapi).to.be.an('object');",
													"    pm.expect(jsonData.jsonapi).to.include.all.keys(\"version\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET with invalid KB Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da35fa70-f083-4897-9fb9-fb01131b3b6f",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.contains(\"'credentialsId' parameter is incorrect\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST assign user to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST assign user2 to KB Credentials1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a4e32a06-dc8c-4d00-858a-cbaa5b6c7065",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"assigned-user-id2\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c377a9cd-79fe-4688-ba50-a03dbdceb9aa",
												"exec": [
													"//Check that status is 201",
													"pm.test(\"Status is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_assignedUser\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is assignedUsers",
													"pm.expect(response.type).eq('assignedUsers');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"         ",
													" //Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"credentialsId\", \"userName\", \"firstName\", \"middleName\", \"lastName\", \"patronGroup\");",
													"});",
													"        ",
													" //Test that credentialsId as expected",
													"pm.test('test credentialsId as expected', function() {",
													"    pm.expect(response.attributes.credentialsId).to.be.equals(pm.environment.get(\"kb-credentials-id1\"));",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST with non-existing KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5b487e1e-6416-4df1-90f6-102f4efbd0a9",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"non-existing-credentials-id\", uuid.v4());",
													"pm.globals.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c79b5da9-ec08-442e-9a88-4f351f5ab9ed",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"not found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{non-existing-user-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST with invalid KB credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e7abc16a-fecb-46fa-82fa-4b446af1db12",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9628c795-b32a-40da-b178-b1e5b65090d5",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.equal(\"must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"\");",
													"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"data.attributes.credentialsId\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"invalid-id\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST without required attributes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "93390420-8835-4a90-816b-87a1d06df831",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7cab9be3-24dc-46b1-87e8-447d8ab88b7b",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 6 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(6);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.userName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.credentialsId\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.lastName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.patronGroup\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n\n    \"attributes\": {\n      \n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST with too long user name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8eee1992-4050-4441-9e9c-5b359f8dbef6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79f52cb5-baa4-4dfc-b960-b8be4e55ecff",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"value too long for type character varying(100)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean ma\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST assign already assigned user to another KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "27adc2e8-8396-41a7-addc-bec594586386",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51f083f4-fe92-4808-b226-f89e3aea5225",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"The user is already assigned to another credentials\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"john_doe\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT update user assignment to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT update user2 information",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9782c5cd-cf18-4bd0-81bc-d45eead7688f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "437d7332-ccdc-4d22-b724-bc672f438d61",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Member\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT with invalid user id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "49032e5d-fbbe-41b8-8607-76f9b9ad5a45",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "10f28afd-f3cd-477d-bb5f-963def404877",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.equal(\"must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"\");",
													"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"invalid-id\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with non-existing user id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "858f4686-1145-4a17-a449-a110a0e17f60",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e97e5e24-5abc-4aaf-93e4-00ace9291c98",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{non-existing-user-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{non-existing-user-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{non-existing-user-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT without required attributes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9045a603-6d6e-40ba-81c9-e774441e6ff9",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64b4bcca-f6b3-4969-bfab-e2d00bdcb27d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 6 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(6);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.userName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.credentialsId\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.lastName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.patronGroup\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"attributes\": {\n     \n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with too long user name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "476455f7-3cea-4f3e-96a0-66b8cc9aac16",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ff8f6cce-d4c3-4b29-8c31-b5c4370936e4",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"value too long for type character varying(100)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean ma\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with changing credentials for user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3cca91dc-665d-4c42-89b5-92b88c298c76",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4f51c52-8a81-4b1c-8fb5-acf52a5b434a",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Credentials ID and user ID can't be updated\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE unassign user from KB Credentials",
					"item": [
						{
							"name": "Posistive",
							"item": [
								{
									"name": "DELETE unassign user1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e3bfff2d-9ddb-41af-bdbe-58a297365cf1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eef9003b-322e-407b-a16a-1fbdffb469d3",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE already deleted item",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f35929d1-187e-422b-952a-c8ded97fd9a0",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "02dbf485-4bc5-4ca3-924b-27050313715d",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id2}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE non-existing user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7d945ac3-817d-4795-902d-132e4ea33dea",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e3ab9f73-b375-4883-8586-7f3b4c5833a0",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"   pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{non-existing-user-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{non-existing-user-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE with invalid id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8cccd600-94ea-4a77-8f2c-6e29ec49f30b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01faa1cb-29f2-4ba4-908c-dc86219be32a",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"   pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"parameter is incorrect.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"invalid-id"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "91c5c821-ab4d-4899-8280-f1014491461a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "01c94672-23ea-49ad-9951-ac2644152e68",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_assignedUserCollection.json\", JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")));",
							"tv4.addSchema(\"schema_assignedUser.json\", JSON.parse(pm.environment.get(\"schema_assignedUser\")));",
							"tv4.addSchema(\"schema_assignedUserDataAttributes.json\", JSON.parse(pm.environment.get(\"schema_assignedUserDataAttributes\")));",
							"tv4.addSchema(\"schema_assignedUserPostRequest.json\", JSON.parse(pm.environment.get(\"schema_assignedUserPostRequest\")));",
							"tv4.addSchema(\"schema_assignedUserPutRequest.json\", JSON.parse(pm.environment.get(\"schema_assignedUserPutRequest\")));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user credentials",
			"item": [
				{
					"name": "GET user credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET users credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41ed0a4b-d1dc-44eb-8826-13f3d2a517fa",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"",
													"pm.expect(response.id).to.be.equals(pm.environment.get('kb-credentials-id1'));",
													"",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function () {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"",
													"//Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function () {",
													"    pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"    pm.expect(response.attributes.apiKey).to.be.equals(pm.environment.get('rm.apiKey'));",
													"    pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"    pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function () {",
													"    pm.expect(response.meta).to.be.an('object');",
													"    pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75662be0-5713-4d08-af61-025e101fa072",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{cred-user-xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/user-kb-credential",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"user-kb-credential"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "unassign user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c36f8160-46a0-43ae-b273-d37e95951cea",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bcfbcda2-60ac-4bb6-8eb3-be55f8eb2e7e",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{cred-user-assigned-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{cred-user-assigned-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials for unassigned user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51638586-0786-48f4-a2b4-98ba56ee9166",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + ",
													"        JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"User credentials not found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1bacddb8-19cf-4b0c-a319-f78ed9e6a562",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{cred-user-xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/user-kb-credential",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"user-kb-credential"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "access-types",
			"item": [
				{
					"name": "GET access-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET access types collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfcdfef3-57ce-41af-81aa-fae5e0aeb68f",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypesCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is accessTypes",
													"        pm.expect(firstRecord.type).eq('accessTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"usageNumber\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"credentialsId\");",
													"        });",
													"    } else {",
													"        console.log(\"No Access types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types collection by user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72314f72-7042-4735-8465-39de8de0314a",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypesCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is accessTypes",
													"        pm.expect(firstRecord.type).eq('accessTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"usageNumber\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"credentialsId\");",
													"        });",
													"    } else {",
													"        console.log(\"No Access types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "31a722a3-09d4-457d-a63d-65659479e1ae",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3c47a351-9d72-4b25-9450-c2bb189a4b1b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET access types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a7df2e5-15af-4048-a456-cbbdc28aaa65",
												"exec": [
													"pm.test(\"success test\", function() {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"//Check that status is 200\r",
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"//Check that content-type is application/vnd.api+json\r",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { \r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"//Validate response against json api schema\r",
													"pm.test(\"Validate schema\", function () {\r",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));\r",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));\r",
													"});\r",
													"\r",
													"pm.test('expected fields are present', function() {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"creator\", \"usageNumber\", \"metadata\");\r",
													"});\r",
													"\r",
													"pm.expect(response.id).eq(pm.environment.get(\"access-type-id1\"));\r",
													"\r",
													"pm.expect(response.type).eq('accessTypes');\r",
													"\r",
													"pm.test('expected attributes are present', function() {\r",
													"    pm.expect(response.attributes).to.be.an('object');\r",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\", \"credentialsId\");\r",
													"});\r",
													"\r",
													"pm.test('expected creator are present', function() {\r",
													"    pm.expect(response.creator).to.be.an('object');\r",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");\r",
													"});\r",
													"\r",
													"pm.test('expected metadata are present', function() {\r",
													"    pm.expect(response.metadata).to.be.an('object');\r",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types by id and user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a52d7424-b43d-4dd8-acbc-97dab1a55d22",
												"exec": [
													"pm.test(\"success test\", function() {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"//Check that status is 200\r",
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"//Check that content-type is application/vnd.api+json\r",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { \r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"//Validate response against json api schema\r",
													"pm.test(\"Validate schema\", function () {\r",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));\r",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));\r",
													"});\r",
													"\r",
													"pm.test('expected fields are present', function() {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"creator\", \"usageNumber\", \"metadata\");\r",
													"});\r",
													"\r",
													"pm.expect(response.id).eq(pm.environment.get(\"access-type-id1\"));\r",
													"\r",
													"pm.expect(response.type).eq('accessTypes');\r",
													"\r",
													"pm.test('expected attributes are present', function() {\r",
													"    pm.expect(response.attributes).to.be.an('object');\r",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\", \"credentialsId\");\r",
													"});\r",
													"\r",
													"pm.test('expected creator are present', function() {\r",
													"    pm.expect(response.creator).to.be.an('object');\r",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");\r",
													"});\r",
													"\r",
													"pm.test('expected metadata are present', function() {\r",
													"    pm.expect(response.metadata).to.be.an('object');\r",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET missing access types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edc92248-7cf4-471d-bd97-b2efb1f4a3dd",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if (response) {",
													"    pm.test('expected one error with title', function () {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"Access type not found: id = 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da92c5d6-4db4-45e3-9441-e1d37859668f",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'accessTypeId\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/9999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"9999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ad81522-311c-466d-8613-008661de8b86",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc9b4c16-0a83-4af2-85bd-e60a7abb8171",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST to access-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Create access type 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a1c8724-2a22-4ef4-a9f4-f464239e684e",
												"exec": [
													"pm.test(\"Status is 201\", function () {",
													"    // pm.response.to.be.success;",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"    ",
													"pm.expect(response.type).eq('accessTypes');",
													"    ",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"});",
													"    ",
													"pm.test('expected creator are present', function() {",
													"    pm.expect(response.creator).to.be.an('object');",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"});",
													"    ",
													"pm.test('expected metadata are present', function() {",
													"    pm.expect(response.metadata).to.be.an('object');",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});",
													"    ",
													"// Store access type id for future reference in other tests/cleanup",
													"pm.environment.set(\"access-type-id2\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2219e377-3f35-4753-b8f2-6a0fef8fe518",
												"exec": [
													"pm.environment.set(\"access-type-name2\", \"Trial updated\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Trial updated\",\n            \"description\": \"Indicates subscription of the entity\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Create access type (with no type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3880ba8e-f22c-4532-8f22-f75d87b1ba11",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"attributes\": {\n            \"name\": \"Trial\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with name too long)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59140431-eacb-4380-a6ed-1ba03a90654b",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 75 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo lig\",\n            \"description\": \"Indicates subscription of the entity\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with description too long)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22434188-016f-4f1e-a72b-18ae68d6ce14",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid description\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"description is too long (maximum is 150 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum\",\n            \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis pa\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with unknown property)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98abec90-1371-42d3-bef2-1906fafcaa84",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.contain(\"Unrecognized field\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum\",\n            \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\"\n        },\n        \"unknownProperty\": \"unknownValue\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ac2481f-b002-413b-9f69-98983d238b92",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b6b86e75-93ed-40ea-a24c-85792f86a112",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update access-type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4aa78be6-b42f-4c22-a252-d6d198db55c4",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") +\"/eholdings/kb-credentials/\" ",
													"    + pm.environment.get(\"kb-credentials-id1\") + \"/access-types/\" + pm.environment.get(\"access-type-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check changes\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.type).to.equal(\"accessTypes\");",
													"        ",
													"        pm.test('expected attributes are present', function() {",
													"        pm.expect(response.attributes).to.be.an('object');",
													"        pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"        ",
													"        pm.expect(response.attributes.name).to.equal(\"Subscribed updated\");",
													"        pm.expect(response.attributes.description).to.equal(\"Indicates subscription of the entity\");",
													"    });",
													"    ",
													"    pm.test('expected creator is present', function() {",
													"        pm.expect(response.creator).to.be.an('object');",
													"        pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"     pm.test('expected updater is present', function() {",
													"        pm.expect(response.updater).to.be.an('object');",
													"        pm.expect(response.updater).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"    pm.test('expected metadata are present', function() {",
													"        pm.expect(response.metadata).to.be.an('object');",
													"        pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "205c4d08-ae0b-4ec8-9d73-3f52df2144f0",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.contains('\\'accessTypeId\\' parameter is incorrect');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "with not existed id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c451476d-c207-4311-8362-1bacfb525d18",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.contain('not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e36c031d-4560-4a69-9a86-0018ac35f82d",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"notExistedId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{notExistedId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{notExistedId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "DELETE access types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2146ac5-658a-421f-b029-c3931b25184f",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE access-type assigned to records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70c81341-2815-4584-9145-434d77e2a7d5",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"Can\\'t delete access type that has assigned records\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE access types with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da47fca2-de17-4055-b92d-85cd264f9105",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contains(\"\\'accessTypeId\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/9999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"9999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28ea210e-be6e-4e0f-a9ac-b4e5e6256328",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0394a0c4-3a7a-42f2-87b0-29bcd6456525",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "de730505-693b-448e-a394-d26a31e47f78",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d9de4448-88ca-4397-af9f-1ea7b1bbadf9",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_accessTypesCollection.json\", pm.variables.get(\"schema_accessTypesCollection\"));",
							"tv4.addSchema(\"schema_accessType.json\", pm.variables.get(\"schema_accessType\"));",
							"tv4.addSchema(\"schema_accessTypeDataAttributes.json\", pm.variables.get(\"schema_accessTypeDataAttributes\"));",
							"tv4.addSchema(\"schema_userDisplayInfo.json\", pm.variables.get(\"schema_userDisplayInfo\"));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "providers",
			"item": [
				{
					"name": "GET provider collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "916856d1-2fcf-46c9-abd8-73d6d0691995",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"supportsCustomPackages\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute types",
													"        pm.test('expected data.attributes types are present', function() {",
													"            pm.expect(firstRecord.attributes.name).to.be.a('string');",
													"            pm.expect(firstRecord.attributes.packagesTotal).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.packagesSelected).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.supportsCustomPackages).to.be.a('boolean');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"packages\")",
													"        });",
													"        ",
													"        //Test that relationships.packages has expected attributes",
													"        pm.test('expected relationships.packages are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages).to.include.all.keys(\"meta\")",
													"        });",
													"        ",
													"        //Test that relationships.packages.meta has expected attributes",
													"        pm.test('expected relationships.packages.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that packages are not included in relationships",
													"        pm.test('relationships meta should not include packages', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No providers found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c92558f-17ea-446d-8af8-c97029109125",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        })",
													"        //Test that name contains either basket or weaving in it",
													"        pm.test('name contains query string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('Basket');",
													"        })",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Basket",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Basket"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "224af011-13c3-4763-8e71-7d3447055375",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that 12 records equal to or less than count are in response",
													"        pm.test('number of records less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(15);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=12",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64a4fa28-70db-44d8-8017-41b8b84342a0",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that number of records returned are less than or equal to count",
													"        pm.test('number of provider records returned are less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&page=1&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1160e66c-9136-4d60-8611-8f57dadd0cb5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid filter[tags]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f1a04f1-af80-4e8c-8ca0-3945c30c9756",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"let len = response.data.length;",
													"pm.test('response contains 1 provider', function() {",
													"    pm.expect(len).to.eq(1);",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/providers/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with filter[tags] with non-existing tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "037abea2-58ab-4887-a1a6-e3ea53096c4d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let len = response.data.length;",
													"pm.test('response is empty', function() {",
													"    pm.expect(len).to.eq(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "70437e65-3801-42be-a230-8ebd1cc7e27e",
												"exec": [
													"pm.variables.set(\"non-existing-tag\", \"non-existing-tag\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{non-existing-tag}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{non-existing-tag}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with filter[tags] with list of tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa170bb8-7a2d-402a-bb89-28c26d64cf75",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let len = response.data.length;",
													"pm.test('response contains both providers with tags', function() {",
													"    pm.expect(len).to.eq(2);",
													"});",
													"",
													"function providerByIdRequest(id){",
													"    return {",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/providers/\" + id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"    }",
													"}",
													"",
													"pm.sendRequest(providerByIdRequest(response.data[0].id), function(err, res) {",
													"    pm.test(\"Check name of second tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"secondTagName\"));",
													"    });",
													"});",
													"",
													"pm.sendRequest(providerByIdRequest(response.data[1].id), function(err, res) {",
													"    pm.test(\"Check name of first tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "07fc20eb-9940-4c4a-bbcf-7372bd710a42",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{tagName}},{{secondTagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}},{{secondTagName}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b523e5da-06ee-40dd-860e-4cdcd28ab5d3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcfda38a-91ce-44a0-a7e0-87210c560f24",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid sort parameter');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=invalidsort",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "invalidsort"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04deff4d-1bd8-422d-a73c-3b6c32421562",
												"exec": [
													"let response = pm.response;",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43f24c7e-ecd4-4d9b-b5a8-52d85d359385",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "006fe063-8605-44a2-a449-b668a143a192",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq('18');",
													"});    ",
													"",
													"//Test that type is providers",
													"pm.test('type is providers', function(){",
													"    pm.expect(response.data.type).eq('providers');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"providerToken\",\"supportsCustomPackages\", \"proxy\");",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId including packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e226b63b-c25e-4167-a320-025e15732d67",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that packages are included in relationships",
													"pm.test('relationships meta should include packages', function() {",
													"    pm.expect(response.data.relationships.packages.data).is.not.empty;",
													"});",
													"",
													"//Test that list of packages are included",
													"pm.test('include packages list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No packages included\");",
													"    } else {",
													"        //Test that packages are included",
													"        pm.test('should include packages', function() {",
													"            pm.expect(response.included[0].type).to.eq('packages');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": "packages"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "548f0475-c58c-40e8-87e8-01e6ed8f5911",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59796e6f-ce5a-4907-a415-52afa23f7277",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Provider id is invalid - and');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/and",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"and"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff8d7f0e-2f86-41ea-8744-976687961220",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update proxy - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba834b53-e931-4b0a-b588-2ef07bdec137",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that proxy value matches value passed in",
													"if (Object.keys(response.data.attributes.proxy).length !== 0) {",
													"    pm.test(\"Proxy id matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.proxy.id).eq('<n>');",
													"    });",
													"} else {",
													"    console.log(\"Proxy not updated as expected\");",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"19\",\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"packagesSelected\": 19,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edb128a7-00ea-4b81-bcee-f82f59413469",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"18\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"factName\", \"prompt\", \"helpText\", \"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('hello test token');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"18\",\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"packagesSelected\": 7,\n      \"providerToken\": {\n        \"factName\": \"[[galesiteid]]\",\n        \"prompt\": \"/itweb/\",\n        \"helpText\": \"<ul>\\r\\n    <li>Enter your Gale<sup>®</sup> site ID in the space provided below. The site ID may contain a combination of alpha/numeric characters, varying in length. <blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\">\\r\\n    <p> Example: The site ID immediately follows /itweb/ in a URL. The site ID in the following URL is <i>aa11bb22</i>. </p>\\r\\n    </blockquote></li>\\r\\n</ul>\\r\\n<blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\"><blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\">\\r\\n<p><span style=\\\"text-decoration: underline;\\\">http://infotrac.galegroup.com/itweb/aa11bb22?db=AIM</span></p>\\r\\n</blockquote></blockquote><br />\\r\\n<ul>\\r\\n    <li>If no site ID is specified, your Gale Group links may not function properly, as Gale Group requires this information for authentication. </li>\\r\\n    <li>If you are unable to locate the site ID, please contact Gale Group. For contact information, visit: <a href=\\\"http://access.gale.com/authentication/\\\">http://access.gale.com/authentication/</a>. </li>\\r\\n</ul>\\r\\n\",\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": true\n      }\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token when value is number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fa67f0b-576b-4f87-8073-18b558efb2ce",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('123');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": 123\n      },\n      \"packagesSelected\": 1,\n      \"proxy\": {\n        \"id\": \"<n>\"\n      }\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update proxy - invalid proxy id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0fb1c38-d816-4cd8-b752-6035e2b7612f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": null\n      },\n      \"packagesSelected\": 1,\n      \"proxy\": {\n        \"id\": \"invalid\"\n      }\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update request - invalid json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b3b0974-d92c-464c-9182-d7b3df6270fc",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed.",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update provider tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "633d7eac-2f6f-4480-bf27-3c83561c0b45",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"providers",
														"18",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update provider tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "207098d0-fb3c-41e4-bb44-7b487fe93689",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"providers",
														"18",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET packages included to provider",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "for provider that exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9329516-c2fc-40c1-b47b-6aa8626db59b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\")",
													"        });",
													"        ",
													"        //Test that providerId matches what we passed in ",
													"        pm.test('providerId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.providerId).to.eq(19);",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\", \"provider\")",
													"        });",
													"    ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No packages found for this provider');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "q and count and sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b05bd919-f731-452a-af53-7646aa762377",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"            pm.expect(secondRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"            pm.expect(secondRecord.attributes.name).to.include('Search');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55c550a4-65bc-49f3-82f4-b1b13838bd3d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] and filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c2497d6-f5a2-4cab-8baf-b0f49ff9d32a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"        ",
													"        //Test that contentType matches whats passed in query",
													"        pm.test('check contentType', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Aggregated Full Text');",
													"        });",
													"    }",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=aggregatedfulltext",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "aggregatedfulltext"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "list of packages with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82c8b806-58b5-462d-a491-c769bcd7a522",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"",
													"//Test that particular package has a correct tag list",
													"pm.test('Particular package has a correct tag list', function(){",
													"    pm.expect(response.data[0].attributes.tags.tagList[0]).eq(pm.environment.get(\"tagName\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q={{custom-package-name-created-in-post-again}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "{{custom-package-name-created-in-post-again}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "list of packages with valid providerId and valid query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56028cfb-8c81-40c8-9959-83c1aea8504f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q=E-Journal",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "E-Journal"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered by tags ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "822b906b-d0b0-4bdc-accb-5a5bf08ca6d9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tagOne = pm.environment.get(\"tag-name-for-multiple-adding-a\");",
													"    var tagTwo = pm.environment.get(\"tag-name-for-multiple-adding-b\");",
													"    pm.expect(_.includes(responseTags,tagOne)).to.eq(true);",
													"    pm.expect(_.includes(responseTags,tagTwo)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(2); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75f9d08c-5a91-4971-ac26-17438c8e186b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[tags]={{tag-name-for-multiple-adding-a}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-a}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and non existing tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ce174bc-e604-4c90-b34a-7aef443d0d13",
												"exec": [
													"var packageId = pm.environment.get(\"custom-package-created-for-tags-id\");",
													"var providerId = packageId.split(\"-\")[0];",
													"pm.environment.set(\"provider-id\", providerId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ff7ca70f-4257-4e07-86d1-37c48ec6a042",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-id}}/packages?filter[tags]=non-existing-tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "non-existing-tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered by access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54d8c2b3-16ac-49bf-89a5-57a5d10dda13",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[access-type]={{access-type-name3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered bynon existing access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a995214b-e159-4c4f-8df8-1cfd4cab7028",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]=Not Existing",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "Not Existing"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "for non-existing provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd0282cf-6429-4205-bf94-daebd8f4f6f6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f57a23fd-d9c7-4bf9-a436-b92b960b3e98",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(response.errors[0].title).eq(\"Search parameter cannot be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458a90c8-2643-4dd1-8007-9bfa212aaa8a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c932d9d6-6934-4926-ae08-a2bd21c789f3",
												"exec": [
													"//Ensure that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that response contains expected error message",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													"",
													"//Check that X-Okapi-Trace header is present",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "q and sort param invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44be08b4-97b1-4a16-95f1-a60f32329ec0",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for sort');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "filter[selected] invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d12cb49b-9aae-46b0-aaf1-819754d955c4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//This should actually be a 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[selected]');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcf6f0a6-8aa3-4e94-ac8c-2c958469d184",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[type]');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=unsupported",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "unsupported"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f85b9287-c618-46c8-884b-6658ac209eb8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b15f7ac-0278-4124-a067-404db1b5394b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "991c3c38-27a1-45fc-9e1b-936f99202989",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc36c71a-0642-4161-a2ec-b175982827b4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "928af745-0b97-448f-b313-9cfc798ae1da",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
							"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
							"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
							"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
							"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
							"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));",
							"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
							"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
							"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
							"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "packages",
			"item": [
				{
					"name": "GET package collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24fabbd3-697f-43cf-baeb-8713d70acd8e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
													"            \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\");",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\")",
													"        });",
													"        ",
													"        //Test that relationships.resources has expected attributes",
													"        pm.test('expected relationships.resources are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources).to.include.all.keys(\"meta\");",
													"        });",
													"        ",
													"        //Test that relationships.resources.meta has expected attributes",
													"        pm.test('expected relationships.resources.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No packages found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e458c241-cef8-4348-ad14-de3e781d38e8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"",
													"        //Test that query string is present in package name",
													"        pm.test('query string is present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    } else {",
													"        console.log('No packages found for this query search');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08ac37e6-9e94-4773-94e7-b72d933b4283",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that query string is present in package name",
													"        pm.test('query string present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5090e1fb-1622-497e-9514-a83fb5443adf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let totalResults;",
													"if(response.meta) {",
													"    totalResults = response.meta.totalResults;",
													"}",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(7);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Ensure that total results is greater than count",
													"        pm.test('totalResults greater than count', function() {",
													"            pm.expect(len) < totalResults;",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=7",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6d4659f-4815-43cf-9bc8-a1dcd19435af",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a3850538-bbdc-47cc-85a4-ed73fe203291",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        pm.variables.set(\"packagename-pageone\", response.data[0].attributes.name);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset two",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3183adc8-bb19-4195-a7e6-ab036fc9dcb4",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        let firstRecordPageTwo = response.data[0].attributes.name;",
													"        ",
													"        //Check that page 1 and page 2 do not have same records",
													"        pm.test('page 1 and page 2 should not have same records', function() {",
													"            pm.expect(pm.variables.get(\"packagename-pageone\")).to.not.eql('firstRecordPageTwo');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid sort - by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98ab304a-db9d-4ec3-8944-a9699ebba879",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0030356-d0ff-4f16-b2cc-a7715dd2cf2f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=true&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27e7d397-bebb-4481-859d-0b836c3647a5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1490f7c8-e648-4a06-b065-0a80a65b87c7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] multiple param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff7808ab-990e-49ba-af0a-f58ec68cdfbf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tag-name-for-multiple-adding-a\"));",
													"        pm.expect(response.data.attributes.tags.tagList[1]).to.eq(pm.environment.get(\"tag-name-for-multiple-adding-b\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{tag-name-for-multiple-adding-a}},{{tag-name-for-multiple-adding-b}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-a}},{{tag-name-for-multiple-adding-b}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] with non existing tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "669ca6c4-6f64-4818-a597-0de00bf14bdc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8e43599c-6845-49e2-a5df-d059bc581c7a",
												"exec": [
													"pm.variables.set(\"non-existing-tag\", \"nonExisting\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{non-existing-tag}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{non-existing-tag}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01946a33-523d-4f2a-b946-496bed51fbb3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]={{access-type-name3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] multiple param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d442bdad-a93f-439e-9cbb-5c17be21c836",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]={{access-type-name4}}&filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name4}}"
												},
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] with non existing access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd604759-0174-4319-b280-062947117be2",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[access-type]=Not Existing",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "Not Existing"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d6c6b5-fc8f-4387-b17a-b355be68dada",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).eq(5);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that contentType matches passed value",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Abstract and Index');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=abstractandindex&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "abstractandindex"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7837752-b109-443b-9c9a-b7fad7625278",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name.toLowerCase()).to.include('package');",
													"            pm.globals.set(\"custom-package-name-that-exists\", firstRecord.attributes.name);",
													"        });",
													"        ",
													"        //Test that isCustom is true",
													"        pm.test('check isCustom', function() {",
													"            pm.expect(firstRecord.attributes.isCustom).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with empty search string q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cea2ef68-8679-4420-b76d-8b7d0fb5e29c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that we get the expected error message",
													"    pm.test('Ensure that errors title is as expected', function() {",
													"        pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "258aede1-5c2e-48ed-a7fa-98e4dd7bda44",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort filter param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e11cde56-dd9e-4ce1-ac5d-4e21dbe16c30",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for sort');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "280b478b-657a-4226-af77-01c9b5e05dc4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[selected]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dff1591-fbca-442d-a5f4-9e745f666906",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[type]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "608b057a-4f54-45eb-b61f-f27605e5166f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[custom]=invalid&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[custom]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad9b101c-d1e1-4bd6-8ee6-67a6156c692d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"// Per https://issues.folio.org/browse/UIEH-483 -- only true is allowed",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=false&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "false"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "084747c7-101e-4fed-b4d0-33faf9cc56a6",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST package",
					"item": [
						{
							"name": "With Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create custom package with access type id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84720cd3-63e1-477a-a7e8-5faa03bc2d2a",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Check if we get a collection of packages in response",
															"if(response.data) {",
															"    if(response.data.id !== 0) {",
															"        pm.environment.set(\"custom-package-id-created-in-post-valid2\", response.data.id);",
															"    }",
															"    ",
															"    //Test that type is packages",
															"    pm.test('type is packages', function(){",
															"        pm.expect(response.data.type).eq('packages');",
															"    });",
															"    ",
															"    //Test that data.attributes has expected attributes",
															"    pm.test('expected data.attributes are present', function() {",
															"        pm.expect(response.data.attributes).to.be.an('object');",
															"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
															"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
															"    });",
															"        ",
															"    //Test that contentType matches what was passed in POST request",
															"    pm.test('content type matches value passed in', function() {",
															"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
															"    });",
															"    ",
															"    //Test that customCoverage matches what was passed in POST request",
															"    pm.test('custom coverage matches value passed in', function() {",
															"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"    });",
															"    ",
															"    //Test that isCustom is true",
															"    pm.test('isCustom is true', function() {",
															"        pm.expect(response.data.attributes.isCustom).to.be.true;",
															"    });",
															"    ",
															"    //Test that isSelected is true",
															"    pm.test('isSelected is true', function() {",
															"        pm.expect(response.data.attributes.isSelected).to.be.true;",
															"    });",
															"    ",
															"    //Test that name matches value passed in",
															"    pm.test('name matches value passed in', function() {",
															"        pm.expect(response.data.attributes.name).to.eq('custom package');",
															"    });",
															"    ",
															"    //Test that package type is custom",
															"    pm.test('packageType is custom', function() {",
															"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
															"    });",
															"    ",
															"    //Test that allowKbToAddTitles is false",
															"    pm.test('allowKbToAddTitles is false', function() {",
															"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
															"    });",
															"    ",
															"    //Test that accessType is assigned",
															"    pm.test('accessType is assigned', function() {",
															"        pm.expect(response.data.relationships.accessType.data.id).to.eq(pm.environment.get(\"access-type-id2\"));",
															"    });",
															"    ",
															"} else {",
															"    console.log('Custom package not created');",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3b99b029-debf-4c8f-84bd-5105623a986d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom package\",\n            \"contentType\": \"E-Journal\",\n            \"accessTypeId\": \"{{access-type-id2}}\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            }\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67bc8474-4177-4bcf-9fb8-9f3c63bfb98c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f01e0794-70c1-483c-925f-f5e721937e79",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create custom package with invalid access type id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a8aa7249-e200-4c5b-8af6-6c38da501893",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function() {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.accessTypeId');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('9999');",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom package\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"9999\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create custom package with missing access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4e4003c3-cc47-44e3-8065-8e2c28288ba2",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.eq('Access type not found: id = 99999999-9999-1999-a999-999999999999');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"99999999-9999-1999-a999-999999999999\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Without Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create custom package valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d011be33-742d-4b16-a363-3d9f93275d59",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Check if we get a collection of packages in response",
															"if(response.data) {",
															"    if(response.data.id !== 0) {",
															"        pm.environment.set(\"custom-package-id-created-in-post-valid1\", response.data.id);",
															"    }",
															"    ",
															"    //Test that type is packages",
															"    pm.test('type is packages', function(){",
															"        pm.expect(response.data.type).eq('packages');",
															"    });",
															"    ",
															"    //Test that data.attributes has expected attributes",
															"    pm.test('expected data.attributes are present', function() {",
															"        pm.expect(response.data.attributes).to.be.an('object');",
															"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
															"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
															"    });",
															"        ",
															"    //Test that contentType matches what was passed in POST request",
															"    pm.test('content type matches value passed in', function() {",
															"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
															"    });",
															"    ",
															"    //Test that customCoverage matches what was passed in POST request",
															"    pm.test('custom coverage matches value passed in', function() {",
															"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"    });",
															"    ",
															"    //Test that isCustom is true",
															"    pm.test('isCustom is true', function() {",
															"        pm.expect(response.data.attributes.isCustom).to.be.true;",
															"    });",
															"    ",
															"    //Test that isSelected is true",
															"    pm.test('isSelected is true', function() {",
															"        pm.expect(response.data.attributes.isSelected).to.be.true;",
															"    });",
															"    ",
															"    //Test that name matches value passed in",
															"    pm.test('name matches value passed in', function() {",
															"        pm.expect(response.data.attributes.name).to.eq('custom packages api test valid');",
															"    });",
															"    ",
															"    //Test that package type is custom",
															"    pm.test('packageType is custom', function() {",
															"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
															"    });",
															"    ",
															"    //Test that allowKbToAddTitles is false",
															"    pm.test('allowKbToAddTitles is false', function() {",
															"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
															"    });",
															"    ",
															"} else {",
															"    console.log('Custom package not created');",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test valid\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "with package name that already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9908cf8a-9e38-426a-a91c-3d8914fc9c8d",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Custom Package with the provided name already exists');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test valid\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "with invalid contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c95d8fd6-8ad9-46b2-909c-0ed79856ad15",
														"exec": [
															"//Check that status is 400",
															"// This test should be re-visited after https://issues.folio.org/browse/UIEH-488 is fixed.",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text()).to.contains('Json content error');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": 123,\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "bad data for customCoverage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f9b0ec5b-0180-412f-9c82-a54047321a34",
														"exec": [
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text()).to.contains('Json content error');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"123\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": 2003-01-01,\n\t\t\t\t\"endCoverage\": 2003-12-01\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "package without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99d49706-7b60-4e92-883d-8a56e43a685f",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"   pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('may not be null');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.name');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "package without content type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab2378d2-efad-471d-a349-ba2e0f6bbe5b",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('may not be null');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.contentType');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"xxx\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "15faabd1-3e62-4626-b736-446d420bf3db",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad799da2-e773-4191-b1e3-e18bcf0c0ea8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST packages bulk",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST packages bulk",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b5f084c-6e36-468a-b127-ad86617b1bf6",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test packages empty list",
													"pm.test(\"no failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk not existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3be123c7-5892-40ab-a931-a13ee1e9ac3d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(1);",
													"   pm.expect(meta.failed.packages[0]).to.eql(\"111-111\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"111-111\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk invalid id format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a26d4aa6-2771-4838-85f2-0f63df84981a",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test packages list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(1);",
													"   pm.expect(meta.failed.packages[0]).to.eql(\"19-9223372036854775808\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"19-9223372036854775808\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18e82a9e-a653-44a8-9656-639136c9c18a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de37e3b2-75c0-4065-89fb-8be56c017b06",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST packages bulk invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20a61156-bb89-4b2e-b331-be34a7c05cdb",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"413-3757-9g04662\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d0858b7-ea99-431e-854c-a1c4634eeaff",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk invalid size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "239c0f08-6009-42c8-a29e-a1b0bb076cfc",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('size must be between 0 and 20');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"packages\": [\n        \"123356-102084161\",\n        \"123356-102084162\",\n        \"123356-102084163\",\n        \"123356-102084164\",\n        \"123356-102084165\",\n        \"123356-102084166\",\n        \"123356-102084167\",\n        \"123356-102084168\",\n        \"123356-102084169\",\n        \"123356-102084111\",\n        \"123356-102084112\",\n        \"123356-102084113\",\n        \"123356-102084114\",\n        \"123356-102084115\",\n        \"123356-102084116\",\n        \"123356-102084117\",\n        \"123356-102084118\",\n        \"123356-102084119\",\n        \"123356-102084120\",\n        \"123356-102084121\",\n        \"123356-102084122\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd051f4b-d678-40d5-9368-33cc06b95909",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54056634-d0e2-4d45-8ff3-16e8518aa548",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e422502-356c-47cc-af8c-6b1eab5d1ec4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data.type).eq('packages');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
													"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b05d121f-dd73-43c2-86ae-e11591a85a23",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});",
													"",
													"//Test that provider is included in relationships",
													"pm.test('relationships meta should include provider', function() {",
													"    pm.expect(response.data.relationships.provider.data).is.not.empty;",
													"});",
													"",
													"//Test that provider is included",
													"pm.test('include provider', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No provider included\");",
													"    } else {",
													"        //Test that provider is included",
													"        pm.test('should include provider', function() {",
													"            pm.expect(response.included[0].type).to.eq('providers');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9ddce49-45c5-4ebc-9b2a-0ee839b64baf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(response.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            pm.expect(response.included[0].type).to.eq('resources');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including resource with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0b236f5-1434-4239-8530-3291dc9e7593",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(response.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            let firstRecord = response.included[0];",
													"            pm.expect(firstRecord.type).to.eq('resources');",
													"            pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"            pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"            pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"            pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0be0c0-1df0-4ab6-a8f7-2106f76bdb9e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tag = pm.environment.get(\"tag-name-for-resource\");",
													"    pm.expect(_.includes(responseTags,tag)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(1); ",
													"});",
													"",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(1);",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f53c645f-3073-4328-9770-ecf64b77a536",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and empty included resources tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1524aced-8fd7-48ed-9674-691e3310a2a7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that record has empty tag list",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(0); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "016a6d02-9185-430d-bc63-d928358a9ace",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources filtered by tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1669e77-8154-44ae-9d82-4e7799eb9880",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tag = pm.environment.get(\"tag-name-for-resource\");",
													"    pm.expect(_.includes(responseTags,tag)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(1); ",
													"});",
													"",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(1);",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0149883f-175d-43a6-95e4-942dcaeb22e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]={{tag-name-for-resource}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-resource}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and including resources non existing tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d5900dfd-f239-4601-8c7a-9f1a4d87101e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "87fa53f2-9287-4446-8a10-f186fc8dee4f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]=non-existing-tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "non-existing-tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources empty tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "475989a4-7635-46aa-8a0f-f7baba9dc9b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1895e045-1690-4948-84a7-6aafc476a239",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2252867f-7e55-440f-8653-095958d33f22",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212bd346-ff66-419b-9b8e-dde8cba7d88c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "180a455c-89dd-4543-a19b-c7f1be32a234",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2026823-f1ba-47d3-9d16-66d845ff9653",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId with providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3d75ba4-1aa9-47c3-946b-57e3e6dc2a7f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c69ed74e-2e9c-4743-8fb2-13b16008778e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "662302cc-cd9f-41e4-837d-f26c8bab50b3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT package by packageId",
					"item": [
						{
							"name": "Custom Package",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update custom package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a4e1c657-e595-4445-9f03-21a46c3b7b7b",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3951fe66-0839-4498-b681-30b8d4a7e2d2",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															"",
															"//Test that access type assigned",
															"pm.test('access type should be assigned', function() {",
															"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
															"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-package-id-created-in-post}}\",\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n            \"contentType\": \"Print\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            },\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id2}}\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "visibility data and coverage update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9f6138cc-1676-4d89-9a83-de2bd8fd004d",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.false;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2004-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2004-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2004-01-01\",\n        \"endCoverage\": \"2004-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update custom package without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fe6a7984-320f-4ccb-a411-7c8929cab957",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package without contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e539b84b-6936-4564-817f-8b69b08d3f5e",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid contentType');",
															"        pm.expect(response.errors[0].detail).to.eq('contentType must not be null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"some test custom package\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package with name that already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ccf4f3cf-7051-49fc-83a0-e629f37f841c",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Package name already exists');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a7f3ff5b-8e0b-4d89-8434-c41345a2ff07",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"{{custom-package-name-that-exists}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package with isSelected false should delete it",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "593b2b7c-61f6-42b4-aa2a-9cf7355b36f0",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 404",
															"pm.test(\"Status is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Package not found');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"random test package\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": false,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-again}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post-again}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3aab34fb-a811-47e5-9584-5aa2cfa6aae2",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"hello world\",\n      \"contentType\": \"invalid\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type when it is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "610fceda-e31d-4234-8ba4-0e53e10c08af",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      },\n      \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\"\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type invalid id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a016faf6-ff84-440a-8056-b786914e6b21",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      },\n      \"accessTypeId\": \"invalid-id\"\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Managed Package",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update managed package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "650e67c1-0a1c-49fc-8771-a80498fb0524",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that allowKbToAddTitles matches as provided in request",
															"pm.test('allowKbToAddTitles matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.allowKbToAddTitles).to.be.true;",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "75bce625-2be5-413e-b5bc-cfff73ad389a",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that allowKbToAddTitles matches as provided in request",
															"pm.test('allowKbToAddTitles matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.allowKbToAddTitles).to.be.true;",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															"",
															"//Test that access type assigned",
															"pm.test('access type should be assigned', function() {",
															"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
															"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"{{access-type-id2}}\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package with isFullPackage=false",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "69e3c60b-e869-4eb3-8e43-1f298219c204",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"titles in package were not selected\", function() {",
															"    pm.expect(response.data.attributes.selectedCount).to.not.equal(response.data.attributes.titleCount);",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"package was updated\", function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.equal(\"2018-01-12\");",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.equal(\"2018-02-13\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-01-12\",\n        \"endCoverage\": \"2018-02-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"isFullPackage\" : false,\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{partially-selected-package-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package with isFullPackage=true",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1c546aac-e8f0-47c6-bc07-8389b30d3743",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"titles in package were all selected\", function() {",
															"    pm.expect(response.data.attributes.selectedCount).to.equal(response.data.attributes.titleCount);",
															"});",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"package was updated\", function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.equal(\"2018-03-12\");",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.equal(\"2018-04-13\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-03-12\",\n        \"endCoverage\": \"2018-04-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"isFullPackage\" : true,\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{partially-selected-package-id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "invalid access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed865717-3463-43b8-8aa8-091d82f6dbcf",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"invalid-id\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid dates for coverage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55cffde7-de9d-49fc-a3bc-396349497261",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid beginCoverage');",
															"        pm.expect(response.errors[0].detail).to.eq('beginCoverage has invalid format. Should be YYYY-MM-DD');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"13-08-2018\",\n        \"endCoverage\": \"13-09-2018\"\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid isSelected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0a7e89e7-7f4b-4a18-8782-3940b5164662",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": \"invalid\",\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-12\"\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid isHidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bb04c67d-41d6-48ca-994d-ee3580668104",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": \"invalid\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-13\"\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid allowKbToAddTitles",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "465218da-e473-4c21-8210-fedaedc1c2de",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"allowKbToAddTitles\": \"invalid\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-13\"\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid json in request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b6ed5b40-1abb-4388-bd4e-8d3c247dd854",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": 13-08-2018,\n        \"endCoverage\": 13-09-2018\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b4949a4-9e9c-4780-a62e-69780d18a632",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3b79f203-335c-4a58-9ebd-1e659b0062cf",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.contains('Package is not updatable');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"{{access-type-id2}}\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": false,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update package tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fc1b271f-6c65-46c5-a8f1-c6dda4f89e8c",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update package tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50f11b6f-d7d2-43c0-ab52-09ce398babdb",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"contentType\": \"Print\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										},
										{
											"name": "update package tags without contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e028173f-425d-4d8f-b8e9-036b21cd7fbc",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid contentType');",
															"        pm.expect(response.errors[0].detail).to.eq('contentType must not be null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": null,\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Delete custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a1cb96f-72b0-4a96-9c00-d8baa927d3ad",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-package-id-created-in-post-valid2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid providerId in packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04cc7676-180d-4dcc-ae99-b37d402fbe06",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"/* Tests below should be re-visited after https://issues.folio.org/browse/UIEH-427 is fixed.*/",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that appropriate error message is being returned",
													"pm.test('Ensure that appropriate error message is returned', function(){",
													"    pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31526cde-14a6-457f-a775-9c5c541380e8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"/* Tests below should be re-visited after https://issues.folio.org/browse/UIEH-427 is fixed.*/",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete a managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44d18dec-4bf9-483b-9274-e58a52993f3a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package cannot be deleted');",
													"        pm.expect(response.errors[0].detail).to.eq('Invalid package');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resources included to package",
					"item": [
						{
							"name": "valid filter[access-type] param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91cd5fef-e27d-4661-b1a7-387b27c37be0",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    let len = response.data.length;",
											"    if(len > 0){",
											"        //Test that count is equal to number of records returned in response",
											"        pm.test('count equals number of records in response', function() {",
											"            pm.expect(len).to.be.above(0);",
											"        });",
											"        //Get the first record",
											"        let firstRecord = response.data[0];",
											"        ",
											"        //Test that type is packages",
											"        pm.test('type is resources', function(){",
											"            pm.expect(firstRecord.type).eq('resources');",
											"        });",
											"        ",
											"        //Test that isSelected is true",
											"        pm.test('check isSelected', function() {",
											"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
											"        });",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[access-type]={{access-type-name2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-from-setup}}",
										"resources"
									],
									"query": [
										{
											"key": "filter[access-type]",
											"value": "{{access-type-name2}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "34ef2dec-4328-42e7-9ce6-41efbe6dde3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "83827433-5719-4422-9e5d-95a8434bb281",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
							"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
							"tv4.addSchema(\"schema_packageTagsItem.json\", JSON.parse(pm.variables.get(\"schema_packageTagsItem\")));",
							"tv4.addSchema(\"schema_packageTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
							"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"",
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));",
							"tv4.addSchema(\"schema_packageBulkFetchCollection.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchCollection\")));",
							"tv4.addSchema(\"schema_packageBulkFetchCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchCollectionItem\")));",
							"tv4.addSchema(\"schema_packageBulkFetchDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchDataAttributes\")));",
							"tv4.addSchema(\"schema_packageFailedInformation.json\", JSON.parse(pm.variables.get(\"schema_packageFailedInformation\")));",
							"tv4.addSchema(\"schema_packageFailedIds.json\", JSON.parse(pm.variables.get(\"schema_packageFailedIds\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "resources",
			"item": [
				{
					"name": "POST resource",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources POST add managed title to custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3c1d592-13eb-4a2e-8391-17b412f1c50f",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"pm.test(\"url is as expected\", function () {",
													"    pm.expect(firstAttributes.url).eq(\"http://test\");",
													"});",
													"",
													"// Store custom resource id for future reference in other tests/cleanup",
													"pm.environment.set(\"managed-resourceid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1b75483-6b04-490c-84e8-c3e757d5f364",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{managed-titleid}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST add custom title to custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdac2ace-91d5-4d97-8166-c34100eedef1",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"custom-titleid-for-resource\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"pm.test(\"url is as expected\", function () {",
													"    pm.expect(firstAttributes.url).eq(\"http://test\");",
													"});",
													"// Store custom resource id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-resourceid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "30f03d5c-c06a-4829-9ff9-fd1b3a5e83e9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources POST add managed title to managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4f89695-9053-4678-9d39-ef734c1e8c7c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid PackageId\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Packageid Cannot associate Title with a managed Package\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a49cee07-1585-4c52-8eae-9e9cde4a5820",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{managed-packageid}}\",\n      \"titleId\": \"{{managed-titleid}}\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST add custom title to managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e30fecfa-3c1b-4b30-a732-4caee05fd6a0",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid PackageId\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Packageid Cannot associate Title with a managed Package\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1234533c-9df3-4677-bdff-37ec4d240470",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{managed-packageid}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebe75b2e-bc44-4e33-9209-060c3a428c1e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"// confirm error returns invalid url",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Url\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Url has invalid format\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8d8f0caf-22ea-4bbe-99cd-0dd9e1dd71c6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"not a url\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcccff57-6f47-4c1a-b2be-8a30c0b80ce1",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(jsonData.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(jsonData.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "befc6da0-4534-4de7-ae72-1344d8c072ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"1\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid titleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "045b2f6b-d72e-48ce-aea6-45b8c019bcea",
												"exec": [
													"",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73180ef9-3513-43db-9a57-dde7422b1e7c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"1\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "530311f9-e316-4aca-a99d-7d77a4eb9829",
												"exec": [
													" pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected error message is returned\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.be.equal('Content-type header must be [\"application/vnd.api+json\"] but it is \"application/json\"');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4fd2ffca-5936-4f74-b7be-36474f5dcf18",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST resources bulk",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST resources bulk",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94ed3082-5f95-47e1-aa1c-c8f57fcc7ba9",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources empty list",
													"pm.test(\"no failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1da383b6-d100-4b08-bc5b-74ad27a423aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df634c97-28fe-4d9e-8012-7bf095d42c4c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST resources bulk invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cddd6d7-3373-4b7c-96b2-8b3f71efba05",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"413-3757-9g04662\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk not existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f046967-1f97-46c1-96d5-431b749fe770",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(1);",
													"   pm.expect(meta.failed.resources[0]).to.eql(\"111-111-111\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"111-111-111\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk invalid id format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "059ecb73-3da8-4be4-81d8-321c92708a42",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(1);",
													"   pm.expect(meta.failed.resources[0]).to.eql(\"19-9223372036854775808-904661\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"19-9223372036854775808-904661\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ababff99-09d0-47c3-b13d-c646650834c5",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk invalid size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7476cce9-be75-46e1-abc5-627e4e018ff2",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('size must be between 0 and 20');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"123356-102084166-1145851\", \"123356-102084166-1145852\", \"123356-102084166-1145853\", \"123356-102084166-1145854\",\n\t\"123356-102084166-1145856\", \"123356-102084166-1145857\", \"123356-102084166-1145858\", \"123356-102084166-1145859\", \"123356-102084166-1145860\",\n\t\"123356-102084166-1145861\", \"123356-102084166-1145862\", \"123356-102084166-1145863\", \"123356-102084166-1145864\", \"123356-102084166-1145865\",\n\t\"123356-102084166-1145866\", \"123356-102084166-1145867\", \"123356-102084166-1145868\", \"123356-102084166-1145869\", \"123356-102084166-1145870\",\n\t\"123356-102084166-1145871\"\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8aa278f9-b497-41e2-8e7a-cf049c6ea183",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83c045ab-bdf7-4738-aec1-2ae8056374b1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resource by resourceId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources GET specific resource (managed title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d06dd5f-3f36-4e67-ac76-4452b1a14e7c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"managed-resourceid\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a7ad8d0-fe6d-4751-89d9-351bd27073b1",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"custom-resourceid\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3acbe221-a4b8-444f-a956-0a10f64ceb42",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
													"});",
													"",
													"pm.test(\"userDefinedFields are present\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"    pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"    pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"    pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"    pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b751927d-fd29-4060-9409-c0e3f6a24b67",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"",
													"//Get the provider relationship",
													"let providerRelationship = firstRecord.relationships.provider.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in provider relationship', function() {",
													"    pm.expect(providerRelationship).to.be.an('object');",
													"    pm.expect(providerRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(providerRelationship.id).eq(firstAttributes.providerId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"providers\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.providerId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a829a3e-ff40-41b4-8e06-2d1300e52835",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"",
													"//Get the package relationship",
													"let packageRelationship = firstRecord.relationships.package.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in package relationship', function() {",
													"    pm.expect(packageRelationship).to.be.an('object');",
													"    pm.expect(packageRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(packageRelationship.id).eq(firstAttributes.packageId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.packageId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=package",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "package"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "856bb009-af4d-4187-8e97-9f40d4f439fd",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"",
													"//Get the title relationship",
													"let titleRelationship = firstRecord.relationships.title.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in title relationship', function() {",
													"    pm.expect(titleRelationship).to.be.an('object');",
													"    pm.expect(titleRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(titleRelationship.id).eq(firstAttributes.titleId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.titleId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include provider,package,title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8e0d988-58d3-4a22-977e-1630cc036e73",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"    ",
													"//Get the provider relationship",
													"let providerRelationship = firstRecord.relationships.provider.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in provider relationship', function() {",
													"    pm.expect(providerRelationship).to.be.an('object');",
													"    pm.expect(providerRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(providerRelationship.id).eq(firstAttributes.providerId.toString());",
													"});",
													"",
													"//Get the package relationship",
													"let packageRelationship = firstRecord.relationships.package.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in package relationship', function() {",
													"    pm.expect(packageRelationship).to.be.an('object');",
													"    pm.expect(packageRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(packageRelationship.id).eq(firstAttributes.packageId.toString());",
													"});",
													"",
													"//Get the title relationship",
													"let titleRelationship = firstRecord.relationships.title.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in title relationship', function() {",
													"    pm.expect(titleRelationship).to.be.an('object');",
													"    pm.expect(titleRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(titleRelationship.id).eq(firstAttributes.titleId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 3 records and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(3);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"     ",
													"var includedTitles = includedItems.filter(",
													"        function(titles) {",
													"            if (titles.type.toLowerCase().includes(\"titles\")) {",
													"               return titles;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included title is as expected', function() {",
													"    pm.expect(includedTitles.length).eq(1);",
													"    pm.expect(includedTitles[0].id).eq(firstAttributes.titleId.toString());",
													"});     ",
													"",
													"var includedPackages = includedItems.filter(",
													"        function(packages) {",
													"            if (packages.type.toLowerCase().includes(\"packages\")) {",
													"               return packages;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included package is as expected', function() {",
													"    pm.expect(includedPackages.length).eq(1);",
													"    pm.expect(includedPackages[0].id).eq(firstAttributes.packageId.toString());",
													"});          ",
													"",
													"var includedProvider = includedItems.filter(",
													"        function(providers) {",
													"            if (providers.type.toLowerCase().includes(\"providers\")) {",
													"               return providers;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included provider is as expected', function() {",
													"    pm.expect(includedProvider.length).eq(1);",
													"    pm.expect(includedProvider[0].id).eq(firstAttributes.providerId.toString());",
													"});           ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=provider,package,title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider,package,title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource with tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81467a5c-d814-439d-8a57-cd1bb6199ef2",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"tags\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"custom-resourceid-from-setup\"));",
													"});",
													"",
													"pm.test('resource tags expected', function() {",
													"    pm.expect(firstAttributes.tags.tagList).to.be.an('array').that.is.not.empty;",
													"});",
													"  ",
													"pm.test(\"resource tags size as expected\", function () {",
													"   pm.expect(Object.keys(firstAttributes.tags.tagList).length).to.eql(1);",
													"});",
													"",
													"pm.test(\"tags content as expected\", function () {",
													"   pm.expect(firstAttributes.tags.tagList[0]).to.eql(\"tag one\");",
													"});  ",
													"  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources GET invalid resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "742efe8e-0e06-4ee1-ac2d-2f1cc2225dc4",
												"exec": [
													"// status should be 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Errors array should return a more relevant response",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Resource id is invalid - 1\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and invalid include",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44a02bf0-e420-495e-80d4-c7c2c210e829",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes and invalid include is ignored",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "52dd2a49-8b55-4fc7-9fc2-ba7a435808f1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "603598b3-2f15-4f44-aee7-f0e403898fe3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT resource by resourceId",
					"item": [
						{
							"name": "Custom Resource",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "/resources PUT update custom resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "200fbdc2-ba04-48a3-8d00-a4158d3dfd5c",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"coverageStatement\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"custom embargo period is as expected\", function () {",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoUnit).to.eql(\"Months\");",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoValue).to.eql(5);",
															"});",
															"",
															"pm.test(\"custom coverages is as expected\", function () {",
															"   pm.expect(firstAttributes.customCoverages.length).to.eql(1);",
															"   pm.expect(firstAttributes.customCoverages[0].beginCoverage).to.eql(\"2001-01-01\");",
															"   pm.expect(firstAttributes.customCoverages[0].endCoverage).to.eql(\"2004-02-01\");",
															"});",
															"",
															"pm.test(\"coverage statement is as expected\", function () {",
															"   pm.expect(firstAttributes.coverageStatement).to.eql(\"Test Coverage Statement\");",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "18b04fe7-ef45-4d4b-8ce2-f8dff99eedc7",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": \"{{custom-providerid}}\",\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"customEmbargoPeriod\": {\n        \"embargoUnit\": \"Months\",\n        \"embargoValue\": 5\n      },\n      \"customCoverages\": [\n        {\n          \"beginCoverage\": \"2001-01-01\",\n          \"endCoverage\": \"2004-02-01\"\n        }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n      \"publisherName\": \"test publisher\",\n      \"edition\": \"test edition\",\n      \"description\": \"test description\",\n      \"subjects\": [],\n      \"contributors\": [\n        {\n          \"type\": \"author\",\n          \"contributor\": \"smith, john\"\n        },\n        {\n          \"type\": \"illustrator\",\n          \"contributor\": \"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n          \"id\": \"11-2222-3333\",\n          \"type\": \"ISSN\",\n          \"subtype\": \"Online\"\n        }\n      ],\n      \"isTitleCustom\": true,\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource - custom only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e0f8126-e3cf-4d7b-bf05-37ea28f31054",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isTitleCustom\", \"titleId\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"url is as expected\", function () {",
															"   pm.expect(firstAttributes.url).to.eql(\"https://test\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1d739fc1-ed8a-4078-bfa0-01ebb95b9c64",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": true,\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "/resources PUT update custom resource invalid url",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3eb816a3-2bc4-4d30-92ed-8ac572b5bc1d",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"   pm.expect(jsonData.errors.length).to.eql(1);",
															"   pm.expect(jsonData.errors[0].title).to.equal(\"Invalid url\");",
															"   pm.expect(jsonData.errors[0].detail).to.equal(\"url has invalid format. Should start with https:// or http://\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "dc1b0320-a1d2-46eb-9a6e-1991dde10a0f",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isPeerReviewed\": false,\n            \"name\": \"custom title-b72f107f-ceff-49e1-8a3f-e7a9b8dffa13\",\n            \"publicationType\": \"Book\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"url\": \"not a url\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid proxy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "11761ecb-71b5-4eb4-8644-85a0dda59c6e",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Proxy ID\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6619a0e3-2a2e-4794-ae11-2ed5c0fed148",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"invalid\"\n            },\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid coverageStatement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1dcb559f-6b7c-448f-9775-c4e8d55623df",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute CoverageStatement is longer than 200 characters.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "457b3730-abf8-4212-ba30-b7f25ee4c5ce",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-coverage\", toRepeat.repeat(201));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"{{long-coverage}}\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid customCoverages",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ead4bf81-862c-4e4b-9586-f02273c084bd",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"BeginCoverage should be smaller than EndCoverage.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e8d38700-575f-4414-9cbf-1682622b04d5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2004-01-01\",\n                    \"endCoverage\": \"2001-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid embargoValue",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24d842a0-bb07-483b-a073-7e52a31a7a7c",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute EmbargoValue is less than 0.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b7f291cd-015f-4683-ba3e-33d827e88ac0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": -1\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid embargoUnit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4cfb2352-5860-4485-84cc-601b2f69437b",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b0be41c-286b-436b-a1d4-d302d0d98ff1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"minutes\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid visibilityData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d55d184c-d921-4ec7-9597-7fed3fd85e7d",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7560ab47-c704-435b-af9b-e8c804922ef6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": \"invalid\"\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid custom label",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ca89e72f-c68c-4e80-a3b0-8cce841986b2",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].title).to.equal('Invalid userDefinedField3');",
															"    pm.expect(pm.response.json().errors[0].detail).to.equal('userDefinedField3 is too long (maximum is 100 characters)');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0298bf18-42e9-4a3d-aee5-4f0d9acbc05c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ],\n            \"userDefinedField3\": \"*****************************************************************************************************\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Managed Resource",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "/resources PUT update managed resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e16bd35e-2d6d-4372-b41b-49126b48b798",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"coverageStatement\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"custome embargo period is as expected\", function () {",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoUnit).to.eql(\"Months\");",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoValue).to.eql(5);",
															"});",
															"",
															"pm.test(\"custom coverages is as expected\", function () {",
															"   pm.expect(firstAttributes.customCoverages.length).to.eql(1);",
															"   pm.expect(firstAttributes.customCoverages[0].beginCoverage).to.eql(\"2001-01-01\");",
															"   pm.expect(firstAttributes.customCoverages[0].endCoverage).to.eql(\"2004-02-01\");",
															"});",
															"",
															"pm.test(\"coverage statement is as expected\", function () {",
															"   pm.expect(firstAttributes.coverageStatement).to.eql(\"Test Coverage Statement\");",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "690d5689-6351-4b07-b05a-4eaf3cc24a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{managed-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"titleId\": \"{{managed-titleid}}\",\n            \"name\": \"ABC of Diabetes (ABC Series)\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"isSelected\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Wiley-Blackwell\",\n            \"edition\": \"\",\n            \"subjects\": [\n                {\n                    \"subject\": \"MEDICAL / Endocrinology & Metabolism\",\n                    \"type\": \"BISAC\"\n                }\n            ],\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Kumar, Sudhesh\"\n                },\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Watkins, Peter J.\"\n                },\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Holt, Tim A.\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"978-1-4051-7784-9\",\n                    \"subtype\": \"Print\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-118-68486-3\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-282-46121-5\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-4443-1697-1\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                }\n            ],\n            \"isTitleCustom\": false,\n            \"description\": \"\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource in custom package - custom resource only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70105348-fd01-45ab-827a-9ac78b26aa9f",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"//description should be undefined because user is not allowed to update description for a managed resource",
															"pm.test(\"description should be undefined\", function () {",
															"   pm.expect(firstAttributes.description).to.eq(undefined);",
															"});",
															"",
															"//edition should be undefined because user is not allowed to update edition for a managed resource",
															"pm.test(\"edition should be undefined\", function () {",
															"   pm.expect(firstAttributes.edition).to.eql(undefined);",
															"});",
															"",
															"//isPeerReviewed should be false because user is not allowed to update isPeerReviewed for a managed resource",
															"pm.test(\"isPeerReviewed should be null\", function () {",
															"   pm.expect(firstAttributes.isPeerReviewed).to.be.false;",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d39884f3-8d4f-4f89-98be-55994a617c33",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"Update a managed title name\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource in managed package - custom resource only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "424713af-f775-4efb-b49d-0fc626a97f8b",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"//description should be undefined because user is not allowed to update description for a managed resource",
															"pm.test(\"description should be undefined\", function () {",
															"   pm.expect(firstAttributes.description).to.eql(undefined);",
															"});",
															"",
															"//edition should be undefined because user is not allowed to update edition for a managed resource",
															"pm.test(\"edition should be undefined\", function () {",
															"   pm.expect(firstAttributes.edition).to.eql(undefined);",
															"});",
															"",
															"//isPeerReviewed should be false because user is not allowed to update isPeerReviewed for a managed resource",
															"pm.test(\"isPeerReviewed should be null\", function () {",
															"   pm.expect(firstAttributes.isPeerReviewed).to.be.false;",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e92a5cef-d340-4260-9beb-0850575680cf",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"Update a managed title name 2\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-title-package-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "/resources PUT update managed resource invalid JSON",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a8810c49-3aea-4a0c-ab34-a8f8a34259d8",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ad49eeb4-c302-4d14-ab5a-4a2046a75e52",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": false,\n      \"visibilityData\": null,\n      },\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-02\"\n      }\n      ]\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource coverageStatement if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d21bda48-b784-459f-8fb5-1417d0fe2f49",
														"exec": [
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute CoverageStatement is longer than 200 characters.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "88175d4d-9068-4ff0-b8b2-e127853ecb53",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-coverage\", toRepeat.repeat(201));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\":null,\n      \"customCoverages\" : [],\n      \"coverageStatement\": \"{{long-coverage}}\"\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource embargo if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "11ca5933-b0d6-4b1b-91d9-756e330a906a",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entries\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute EmbargoValue is less than 0.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6b2a77bb-b46f-49d7-bef8-422839debbab",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Weeks\",\n      \"embargoValue\" : -1\n      },\n      \"customCoverages\" : []\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource custom coverage if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9ffca9c3-5522-43dc-9799-fe642d380eba",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entries\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid beginCoverage\");",
															"    pm.expect(jsonData.errors[0].detail).to.equal(\"beginCoverage has invalid format. Should be YYYY-MM-DD\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4bdb956d-1868-4060-aa32-060fcb06b7f2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : [\n      {\n        \"beginCoverage\" : \"200\",\n    \t\"endCoverage\" : \"2001-01-02\"\n      }\n      ]\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource visibility if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a3eddbbb-7755-4d71-a44f-5ac263822155",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e66fcbfa-fb4e-49a8-a910-6d9c2b41eb95",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": {\n    \t\"isHidden\" : \"invalid\"\n      },\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : []\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource custom label",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "865828c2-dcd9-4d02-96b0-38a10dc4c431",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].title).to.equal('Invalid userDefinedField3');",
															"    pm.expect(pm.response.json().errors[0].detail).to.equal('userDefinedField3 is too long (maximum is 100 characters)');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "97509a56-c528-4ebf-9309-57316610e704",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n\t  \"userDefinedField3\" : \"*****************************************************************************************************\",\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : []\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b38d7db5-051d-4cef-b114-53990b3caecb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2b05d62b-0a01-4618-8ea1-6383137e59e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update resource tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1572737e-ec75-4539-b241-5426d3724185",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.globals.get(\"custom-resource-uuid\"));",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update resource tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "adfff3e8-4f10-4d18-92b6-8df10060d86b",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "delete tags for particular record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11b20fa3-6082-484c-950c-13ecf1e06ca9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
													"});",
													"",
													"//Test that type is tags",
													"pm.test('type is tags', function(){",
													"    pm.expect(response.data.type).eq('tags');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
													"});",
													"",
													"//Test that name matches name provided in request",
													"pm.test('name matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.globals.get(\"custom-resource-uuid\"));",
													"});",
													"",
													"//Check that tagList contains correct tags",
													"pm.test('Existing tags', function(){",
													"    pm.expect(response.data.attributes.tags.tagList.size) === 1;",
													"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"test tag\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"test tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}",
												"tags"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update custom resource with access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0881630a-3fed-4662-a16a-5002d59b9e64",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});",
															"",
															"pm.test(\"relationships is as expected\", function () {",
															"   pm.expect(firstRecord.relationships.accessType.data.type).to.eq(\"accessTypes\");",
															"   pm.expect(firstRecord.relationships.accessType.data.id).to.eq(pm.environment.get(\"access-type-id2\"));",
															"   pm.expect(jsonData.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "af2eb4fd-2c36-4338-9619-b77539429bfc",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"{{access-type-id2}}\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update custom resource with access type when it is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "73cf35b4-19e3-4593-b138-1626b2e36d4c",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "22182c42-b02c-4e18-8739-8e5758f99845",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom resource with access type invalid id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c6aa7626-44c5-47ce-94f9-5f4ec340da34",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ab422815-bf40-44df-a1a9-3f47c9a88dc5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"invalid id\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1fafface-2e52-462a-99a7-8d0c393c67c8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bd6ee769-e54a-4f67-aea9-72a4294dc05a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE resource by resourceId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources DELETE specific resource (custom title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96e39cca-b151-4de2-86c5-52a1360249ce",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE specific resource (managed title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33ae530f-5ea8-40a2-a3cd-55b6f909823b",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources DELETE previously deleted resource id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "682c14b7-c83f-4c9c-bc32-4e87533ccd05",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"   pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE managed title in managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1ff1a3d-5398-4c93-9f86-78f2fe0cb2c1",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Resource cannot be deleted\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Resource is not in a custom package\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-title-package-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c13b361-354d-44ca-97f1-a2f7bdd8e30f",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"  pm.expect(jsonData.errors[0].title).to.equal(\"Resource id is invalid - 1\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resources by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd7502ac-c2c6-430a-977c-0f308e717f98",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of resources in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is resources",
													"        pm.test('type is resources', function() {",
													"            pm.expect(firstRecord.type).eq('resources');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", ",
													"            \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\", \"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\", \"visibilityData\", \"managedCoverages\", \"customCoverages\");",
													"        });",
													"        ",
													"        //Test that packageId matches what we passed in ",
													"        pm.test('packageId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.packageId).to.eq(pm.variables.get('packageId'));",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"title\", \"provider\", \"package\");",
													"        });",
													"    ",
													"        //Test that title is not included in relationships",
													"        pm.test('relationships meta should not include title', function() {",
													"            pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that package is not included in relationships",
													"        pm.test('relationships meta should not include package', function() {",
													"            pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No resources found for this package');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22a0ac79-d37f-4368-8db6-104f72c9e446",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of resources in response",
													"if(response.data) {",
													"    //Get the first record",
													"    let firstRecord = response.data[0];",
													"    ",
													"    //Test that type is resources",
													"    pm.test('type is resources', function() {",
													"        pm.expect(firstRecord.type).eq('resources');",
													"    });",
													"    ",
													"    //Test that data.attributes has expected attributes",
													"    pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
													"    });",
													"    ",
													"    ",
													"    pm.test('userDefinedFields are correct', function() {",
													"        pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"        pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"        pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"        pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9ac1971-9d04-4502-91f4-7ae82941b53b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af082d5e-35e6-40ac-a711-6889878b1254",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId and providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7b732b1-24dc-4ed0-b6dd-09c6d1ad11bc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75018506-92b9-4e13-bc44-7399fbe86f85",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51b7973f-8437-45ca-af84-bb8cc67ec02c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "14240076-9cfc-405c-b30b-5dc222c11657",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "da4a51d3-c996-4696-a947-9e011760b556",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceTagsItem.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsItem\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchCollection.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchCollection\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceFailedInformation.json\", JSON.parse(pm.variables.get(\"schema_resourceFailedInformation\")));",
							"tv4.addSchema(\"schema_resourceFailedIds.json\", JSON.parse(pm.variables.get(\"schema_resourceFailedIds\")));",
							"tv4.addSchema(\"schema_errors.schema\", JSON.parse(pm.variables.get(\"schema_errors\")));",
							"tv4.addSchema(\"schema_error.schema\", JSON.parse(pm.variables.get(\"schema_error\")));",
							"tv4.addSchema(\"schema_parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "GET title collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles query only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e6ed581-a23e-41f8-b05e-07a40d2cbfef",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"        ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"            ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"        ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"        ",
													"    // Test that first title contains search term",
													"    pm.test('title name in first result includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with name sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "609780c7-dcbf-44ad-8e3e-86cfdba9a260",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"    ",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Save first id to compare with a relevance sort result -- the 2 should be different",
													"    pm.environment.set(\"name-sort-id1\", firstRecord.id);",
													"} else {",
													"    console.log(\"Sample Title Query with name sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with relevance sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9190395-cf07-40cf-b939-c370715e8337",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Test that first sorted by relevance title id does not equal name sort title id",
													"    pm.test('first title name does not equal first title in relevance sort', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"} else {",
													"     console.log(\"Sample Title Query with relevance sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=relevance",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "relevance"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb61da78-face-437f-b4bb-57980996766a",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[publisher]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fe29c11-74ec-48db-ae38-3d11f0acf7c0",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"data array contains the default (25) entries\", function () {",
													"    pm.expect(jsonData.data.length).to.eql(25);",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publisherName.toLowerCase()).to.include('academic');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[publisher] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[publisher]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[publisher]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[subject]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd0e26aa-6fdf-4cd6-9ef6-c5f356ae78b5",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingSubjects = [];",
													"        jsonData.data.filter(",
													"            function(item){",
													"                item.attributes.subjects.filter(",
													"                    function(subject) {",
													"                        if (subject.subject.toLowerCase().includes('history')) {",
													"                            matchingSubjects.push(subject.subject);",
													"                        }",
													"                    }",
													"                );",
													"            }",
													"        );",
													"    ",
													"    pm.test('at least 1 subject includes query term', function() {",
													"        pm.expect(matchingSubjects.length).to.be.above(0);",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[subject] returned 0 results\");",
													"}",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[subject]=history",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[subject]",
													"value": "history"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6014baf0-9cd7-4110-8c24-f5590a1f3b07",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingIdentifiers = firstAttributes.identifiers.filter(",
													"        function(identifier) {",
													"            if (identifier.id.toLowerCase().includes('99')&&(['issn', 'isbn'].includes(identifier.type.toLowerCase()))) {",
													"               return identifier.id;",
													"            }",
													"        }",
													"    );",
													"    ",
													"    pm.test('at least 1 issn or isbn identifier includes query term', function() {",
													"        pm.expect(matchingIdentifiers.length).to.be.above(0);",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Title Query with filter[isxn] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter for no results",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edf1d8fd-7cd2-4082-86b7-304f9907f715",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[type]&filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3db8e126-07f4-42b3-85c2-e7330cb6c2d4",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "279cc5ad-02ff-4715-a40a-efd1a9acdf5f",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response includes tagged title', function() {",
													"    let titleIds = jsonData.data.map(record => record.id);",
													"    let taggedTitleId = pm.environment.get('managed-title-package-resourceid').split('-')[2];",
													"    pm.expect(titleIds).to.include(taggedTitleId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {},
											"options": {
												"file": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags] with multiple tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9907a230-eb4d-44b0-ab00-3d0303051b71",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type' header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response includes tagged titles', function() {",
													"    let titleIds = jsonData.data.map(record => record.id);",
													"    let taggedTitleId = pm.environment.get('managed-title-package-resourceid').split('-')[2];",
													"    let taggedCustomTitleId = pm.environment.get('custom-resourceid-from-setup').split('-')[2];",
													"    pm.expect(titleIds).to.include.all.members([taggedTitleId,taggedCustomTitleId]);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											},
											"options": {
												"file": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}},test tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}},test tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags] with pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "834a6061-90c1-45ce-8886-5c49956717f1",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    console.log(firstAttributes);",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response has 1 title', function() {",
													"    pm.expect(jsonData.data.length).eq(1);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {},
											"options": {
												"file": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}},test tag&count=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}},test tag"
												},
												{
													"key": "count",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca6e1116-2ec4-4276-b1bd-d5b21db8f090",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    // Test that first title on page 2 does not have same id as first title on page 1 ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Titles Query with paging returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[access-type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b1e1e15-4943-446f-8c2d-52db8e9ce252",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publicationType\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[access-type]={{access-type-name2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name2}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles no parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b355d343-b53f-4e29-b8fb-e98825386e51",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24c00bce-01f4-44e9-b4e2-2db894867ad5",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Value of required parameter filter[name], filter[isxn], filter[subject] or filter[publisher] is missing.\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query with sort only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c35a261-4fe4-4bfb-a915-49a2c3319a84",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn] &filter[name] conflicting filter parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9903cade-d0ec-45a8-8f5e-eceed857fba9",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Conflicting filter parameters\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99&filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												},
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid too large",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41185038-2150-46e9-b685-2510cd503c9a",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"2147483648\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2147483648&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2147483648"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e645c2fb-6820-4148-b63f-c7e5f15df2d3",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"\\n 'page' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 1\");",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=-1&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid non numeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a35f2286-b40d-46f9-92fd-73d456f3b720",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"a\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=a&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "a"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET title by  titleid",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles GET specific title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "559a95c7-edd5-426e-9757-688e53df862c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f791bae-59ec-4ceb-9f82-5563a87e717d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.data.length).to.be.above(0);",
													"});",
													"",
													"if (relationships.resources.data.length > 0) {",
													"    pm.test(\"data array contains the default entries\", function () {",
													"        pm.expect(relationships.resources.data[0].type).to.eql(\"resources\");",
													"    });",
													"} else {",
													"      console.log(\"Sample Titles GET byId including resources returned 0 relationships\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources with tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "452156a8-5c72-4b87-8711-673ef8bb77d4",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"    ",
													"pm.test(\"included resource with tags\", function () {",
													"    let taggedCustomResourceId = pm.environment.get('custom-resourceid-from-setup');",
													"    let taggedResource = jsonData.included.filter(resource => resource.id === taggedCustomResourceId)[0];",
													"    pm.expect(taggedResource.attributes.tags.tagList).to.include(\"test tag\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17ce7c6d-bf5c-4b13-9171-c3e81938e8bf",
												"exec": [
													"pm.environment.set('custom-titleid-with-tags', pm.environment.get('custom-resourceid-from-setup').split('-')[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid-with-tags}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid-with-tags}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2211c4f-edab-4c53-9a80-ab814a43c2a9",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"    ",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(jsonData.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(jsonData.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (jsonData.included === undefined || jsonData.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            let resourceWithLabels = jsonData.included.filter(resource => resource.id === pm.environment.get(\"custom-resourceid-from-setup\"))[0];",
													"            pm.expect(resourceWithLabels.type).to.eq('resources');",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField1).eq(\"test 1\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField2).eq(\"test 2\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField4).eq(\"test 4\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField5).eq(\"test 5\");",
													"        });",
													"    }",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f8cd002-51b0-4b8f-8292-0bcec9fe0597",
												"exec": [
													"pm.environment.set('custom-titleid-with-tags', pm.environment.get('custom-resourceid-from-setup').split('-')[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid-from-setup}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid-from-setup}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources bad value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f515f27-1ee9-4267-b9ce-f80df68e1875",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.meta.included).to.be.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=badValue",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "badValue"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles GET non existing title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8eacc1b-cf71-4445-9414-8298cef84900",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles POST valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37bc5cf7-ff05-4b6d-9652-7f455d0c232d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"edition\", \"description\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"title name is as expected\", function () {",
													"    pm.expect(firstAttributes.name).eq(\"custom title-\" + pm.variables.get(\"custom-title-uuid\"));",
													"});",
													"",
													"pm.test(\"publisher name is as expected\", function () {",
													"    pm.expect(firstAttributes.publisherName).eq(\"test publisher\");",
													"});",
													"",
													"pm.test(\"isTitleCustom is true\", function () {",
													"    pm.expect(firstAttributes.isTitleCustom).eq(true);",
													"});",
													"",
													"pm.test(\"subjects are as expected\", function () {",
													"   pm.expect(firstAttributes.subjects).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"identifiers are as expected\", function () {",
													"   pm.expect(firstAttributes.identifiers).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.identifiers.length).to.eql(1);",
													"   pm.expect(firstAttributes.identifiers[0].id).to.eql(\"11-2222-3333\");",
													"   pm.expect(firstAttributes.identifiers[0].type).to.eql(\"ISSN\");",
													"   pm.expect(firstAttributes.identifiers[0].subtype).to.eql(\"Online\");",
													"});",
													"",
													"pm.test(\"publicationType is as expected\", function () {",
													"   pm.expect(firstAttributes.publicationType).to.eql(\"Database\");",
													"});",
													"",
													"pm.test(\"edition is as expected\", function () {",
													"   pm.expect(firstAttributes.edition).to.eql(\"test edition\");",
													"});",
													"",
													"pm.test(\"description is as expected\", function () {",
													"   pm.expect(firstAttributes.description).to.eql(\"test description\");",
													"});",
													"",
													"pm.test(\"isPeerReviewed is as expected\", function () {",
													"   pm.expect(firstAttributes.isPeerReviewed).to.eql(true);",
													"});",
													"",
													"pm.test(\"contributors are as expected\", function () {",
													"   pm.expect(firstAttributes.contributors).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.contributors.length).to.eql(2);",
													"   pm.expect(firstAttributes.contributors[0].type.toLowerCase()).to.eql(\"author\");",
													"   pm.expect(firstAttributes.contributors[0].contributor).to.eql(\"smith, john\");",
													"   pm.expect(firstAttributes.contributors[1].type.toLowerCase()).to.eql(\"illustrator\");",
													"   pm.expect(firstAttributes.contributors[1].contributor).to.eql(\"smith, ralph\");",
													"});",
													"",
													"",
													"",
													"const getResourceRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/resources/' + pm.variables.get(\"custom-packageid\") + \"-\" + jsonData.data.id,",
													"  method: 'GET',",
													"  header: {",
													"    'Content-Type' : 'application/vnd.api+json',",
													"    'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"    'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"      ",
													"  },",
													"};",
													"pm.sendRequest(getResourceRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    attributes = res.json().data.attributes;",
													"    pm.test('userDefinedFields are as expected', function(){",
													"        pm.expect(attributes.userDefinedField1).eq(\"test 1\");",
													"        pm.expect(attributes.userDefinedField2).eq(\"test 2\");",
													"        pm.expect(attributes.userDefinedField3).eq(\"test 3\");",
													"        pm.expect(attributes.userDefinedField4).eq(\"test 4\");",
													"        pm.expect(attributes.userDefinedField5).eq(\"test 5\");",
													"    });",
													"});",
													"",
													"//Check that tagList is empty",
													"pm.test('TagList is empty', function(){",
													"    pm.expect(firstAttributes.tags.tagList.size) === 0;",
													"});",
													"",
													"// Store custom title id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-titleid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "388d8e37-2669-4c74-914f-b60cb73862a3",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": [\n    \t\"title-tag\"\n\t\t\t]\n    \t},\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"test 3\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles POST provider not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c5ce384-f50c-4e2d-862b-6159149f7a69",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Provider not found\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"1-1\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST duplicate title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0fa0ce5-c556-40a1-8be1-944581680460",
												"exec": [
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5ed6846-b592-4c44-b888-5c21317967c4",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11be2647-16e0-4af7-9480-fdd7dc45ea3a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a019e577-43f9-4cb3-bdcf-560d2f8fcbb5",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96c85def-43d6-4f5a-ba35-cd025638a6a5",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST non existing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11b5aa17-7dd6-4aeb-86b5-194a87f0d0e1",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3564378-197f-4539-a5e9-c1eb18e2d4b2",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-pubtype-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-pubtype-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"badpubtype\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d2bbc50-eb7a-44ef-93d8-45960bec3376",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.expect(pm.response.reason()).to.equal(\"Unprocessable Entity\")",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Missing resource\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  }\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5996e46d-dcc1-49b4-86bd-16e4e4847f83",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST cannot add custom title to managed resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d31f8e6-df6f-4199-a3b6-5caa4092022f",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Cannot create custom title because Customer is not the Provider\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{managed-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9021afc9-138c-497d-8662-ea838e7d65ec",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "27ad453b-d9c1-44ef-889f-3d71a8ca6472",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid isPeerReviewed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09308c5d-f92b-489c-a61e-bb0bb5583410",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e99de4c2-0d77-41ee-80bc-f5afbbbd002f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": \"badvalue\",\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd5c355f-4b06-4b87-a048-5b48b19dd8f7",
												"exec": [
													"",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Edition is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f191f331-216c-4f4c-bc77-9de24f5b0a87",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"{{long-edition}}\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f92e8dd9-70ee-4b22-879b-c12226314f44",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d277e0f9-6cba-484a-ab37-b33b9cf99abd",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"{{long-description}}\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid contributor type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "149ce68f-bb0d-4b9a-864e-c77371b88d9b",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Parameter contributorsList.contributorType must be one of (author, editor, illustrator).\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fcaa1855-534a-4050-b26d-4f7a97865e28",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n       {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        }\n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7966a5ac-2552-4467-8441-6dc25b5960fe",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function() {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function() {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function() {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function() {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b1b41324-0f97-41af-af6d-289c2fef4801",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-identifier\", toRepeat.repeat(21));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\":\"{{long-identifier}}\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52eefa9c-acd8-4b5c-9e71-8bc84700fed8",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd2e66c3-9169-429b-9bca-43ac930763f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "188edb29-0189-4374-9b6d-08e20bcd4468",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cb2bb82c-93e0-4891-ad93-7b8d294dac79",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"invalidtype\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6431a702-bb95-45a1-9794-bafb26daf614",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ef2b2cc-721b-4f24-a19c-54fd3a0d5b32",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"invalidsubtype\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update title with adding tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e207c6c-0127-4e3f-94a6-7011a5aaf2c5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is titles",
													"pm.test('type is titles', function(){",
													"    pm.expect(response.data.type).eq('titles');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\",\"publicationType\", \"publisherName\",",
													"    \"isPeerReviewed\", \"edition\", \"contributors\", \"identifiers\", \"tags\");",
													"});",
													"",
													"//Test that publicationType matches as provided in request",
													"pm.test('publicationType matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.publicationType).to.eq(\"Database\");",
													"});",
													"",
													"//Test that publisherName matches provided in request",
													"pm.test('publisherName matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.publisherName).to.eq(\"test publisher\");",
													"});",
													"",
													"//Test that isPeerReviewed is true",
													"pm.test('isPeerReviewed is true', function() {",
													"    pm.expect(response.data.attributes.isPeerReviewed).to.be.true;",
													"});",
													"",
													"//Check that tagList is not empty",
													"pm.test('TagList is not empty', function(){",
													"    pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
													"});",
													"",
													"//Check that tag in tagList matches with value",
													"pm.test('Creating tagList', function(){",
													"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": [\n    \t\"foo-tag\"\n\t\t\t]\n    \t}\n\t}\n\t}\n}\n        ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles PUT update custom title missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "924ab4bb-bc1a-484e-8b4e-4f3a7d9a1c8a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"// Error text as returned from rm api",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.eq(\"Invalid Identifier id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b28ba622-c66f-4212-b22f-b73e1427148a",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid identifer subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5928c884-6f6c-4f4a-95ed-07ca8eb10031",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a0738a29-8f61-4e9e-80ad-545168935669",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Invalid\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid identifer type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e450d5fa-9e1b-4495-a4da-28ba57eb1621",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2b549632-258a-4ca4-8017-34c18a771461",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"Invalid\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid contributor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aec3cdb5-134a-45c5-ba89-4122a8644098",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute Type is invalid.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2261d0d-e976-44a4-8c10-1f6c247e8589",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332c0dc1-db00-4d1f-bd81-4d6ad2e63b01",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 400 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "74002b6a-f6e4-49f9-ad65-453b966800ba",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"{{long-description}}\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2e9e553-3a30-47cb-b346-c50c9f2d9dd0",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d9cf284-5e51-4c05-a7b2-29d4096022fd",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"{{long-edition}}\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d24667f-e9aa-43f0-8f6f-0258ae196f0d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aee7a224-5f55-4e38-9883-aa6626fa223f",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1b534c1-7ab8-4a50-9b2d-b0935eddf949",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7450a54e-39b1-474e-b820-fc5b25260b7f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"invalid\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid peer review",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69155c26-b906-4be3-91d6-5ee4236f441e",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90834b74-f01d-481c-96ca-243059d17f25",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": \"invalid\",\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title duplicate title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "957f6576-cdea-4698-916d-4de4b4230be3",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e4785dbe-c3fe-4ec1-9852-8cdbf34866a5",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"{{custom-titlename-for-resource-duplicate}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title Invalid name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9060fa8e-37e0-4ab1-bb47-05560c4fe91a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "98f0a1ee-8173-465c-a0a8-e4419eb68092",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "54ffcb6e-aebd-43d8-a84a-8f89609df4a3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3226121e-2d98-4b2f-bb4d-e18d799eae45",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_titleData.json\", JSON.parse(pm.variables.get(\"schema_titleData\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_titles.json\", JSON.parse(pm.variables.get(\"schema_titles\")));",
							"tv4.addSchema(\"schema_titleListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_titleListDataAttributes\")));",
							"tv4.addSchema(\"schema_metaIncluded.json\", JSON.parse(pm.variables.get(\"schema_metaIncluded\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "configuration",
			"item": [
				{
					"name": "GET Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b9444ce-3089-4149-9be6-9a6ce5f5f85d",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Delete Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0be292c2-ed98-4d06-9a25-7819bd4724b8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "676571ce-f00e-455f-81e6-b53d4efbe989",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-url-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c961d2c8-1fc5-4d75-b75b-b3b95e7da700",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fd1ada54-0ffd-4bd3-a788-6e7b2fa88eef",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-key-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "84e085ec-5fda-4bd4-ae83-bb124c407024",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ecb42062-5d84-4359-a558-c33058e23a39",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-customer-id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Run tests",
									"item": [
										{
											"name": "GET Configuration - when configuration is not configured",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8fb8ff2c-334e-4e05-a18c-364969a671f9",
														"exec": [
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
															"});",
															"",
															"//Test that id is configuration",
															"pm.test('id is configuration', function(){",
															"    pm.expect(response.data.id).eq('configuration');",
															"});    ",
															"",
															"//Test that type is configurations",
															"pm.test('type is configurations', function(){",
															"    pm.expect(response.data.type).eq('configurations');",
															"});",
															"    ",
															"//Test that default value for rmapiBaseUrl is returned",
															"pm.test('rmapiBaseUrl is returned with default value', function(){",
															"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(\"https://api.ebsco.com\");",
															"});",
															"",
															"//Test apiKey is missing when it is not configured",
															"let apiKey = \"****************************************\";",
															"pm.test('apiKey is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"apiKey\");",
															"});",
															"",
															"//Test that customerId is missing when it is not configured",
															"let custid = pm.environment.get(\"rm-api-custid-value\");",
															"pm.test('customer id is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"custid\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"configuration"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reset Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1bf68e89-1768-4541-9586-9ed6d17c1764",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "31463858-f1e7-46bc-a12c-7628f98c8271",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-url-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-url-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-url-value}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "35093803-6117-44de-8732-46c710501bfd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "213a42ba-54c1-4a3b-9d7a-053b9aa16886",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-key-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-key-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-key-value}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3c004def-9b5c-4743-bc26-ecaac58a9c80",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "19825737-ee7e-4a46-873b-d2bd965db75a",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-customer-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-customer-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-custid-value}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d0c0d5b-22ad-4e4a-be3f-e7f66e88b2f5",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get RM API Url id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc79e7be-4bbf-4013-a37d-5fea8ba138b0",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-url-id\", jsonData.configs[0].id);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bffbd77d-e9e2-4307-92c8-88e342dcdae8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b75e087c-56f2-4812-b06e-e4d384ad9a95",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-customer-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "576c846d-5012-448d-b42c-f122675f7eed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API apiKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40c87196-9d3c-420c-a468-1a6835dcfc6f",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-key-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e65c1617-4a3b-42b0-9183-25a6753cbba0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT Configuration - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b79b96d9-6556-45af-9e9e-e8d8f9f45803",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"not a customer id\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when api key is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f86f6bf2-c70f-4b50-91dd-ce75b908e40a",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"not an apikey\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6240f7d-88b6-4bc6-97b1-8c00e8eaffad",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"not a url\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0aca4d82-a576-4d85-a8c0-026fa2332c1e",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when all fields are empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eae9cf2f-184d-435e-92ee-6093e6747062",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"\",\n            \"apiKey\": \"\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when fields are missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95394a31-c830-4f65-95aa-64744c55a6a4",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid API key');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\"\n        }\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when json is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86f73b2d-957c-4aa4-8c55-29f52371a58e",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed."
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        },\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "019f410a-577a-493a-a566-057de94b675a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c3711f9c-3742-4f84-93e0-b6d80e0bdb18",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_configurationData.json\", JSON.parse(pm.variables.get(\"schema_configurationData\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_configurationAttributes.json\", JSON.parse(pm.variables.get(\"schema_configurationAttributes\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "status",
			"item": [
				{
					"name": "GET status",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Status - when status is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0032496e-8125-4047-8994-d26b0d8f6c19",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is true', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(true);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT invalid RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16d98db2-314e-44d0-ba6c-5c9d358934d1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0de06bfb-eba5-46c3-afc6-2f6e17feb04b",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"not a url\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when api url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c528f20d-f125-4b52-98e2-83071c21deaa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8ba3ece7-d4b3-4f64-9fd3-740bc92fe749",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "814d5b9c-7439-4b8a-b46d-ccb6245bcb25",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-url-value}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9bb53a-8a42-45a6-bdf3-6b5b68b5e3b6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3522550f-e425-473c-8dde-db9705474f30",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"invalid id\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58bdb36d-cfa4-433a-bfcd-88fa3272f0d5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "61104005-e208-4c8e-8069-27233602ff72",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7682f42-17ab-4e52-a3c0-d76eba263865",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-custid-value}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "79e13907-0bbb-41a8-af74-f5bfc530fa52",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2aa8f650-cd7a-44ab-a2b3-c8f5377e90c4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"invalid api key\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when apiKey is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53a632fc-874c-424e-b183-905025cf539a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2df80f7a-41fb-4312-a15d-5333aa6daabc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df04d29c-f23c-4d21-94ef-2a916e4ad4de",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-key-value}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8c1706f8-a130-4592-8e8c-da568211bb07",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "229a6fe9-6ba0-420d-9d2b-933e6d1831f3",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_statusData.json\", JSON.parse(pm.variables.get(\"schema_statusData\")));",
							"tv4.addSchema(\"schema_statusAttributes.json\", JSON.parse(pm.variables.get(\"schema_statusAttributes\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "proxy",
			"item": [
				{
					"name": "GET proxy-types",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Get proxies",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af79bbdb-74d0-4dec-942c-047a9345b1b4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_proxyTypes\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is proxyType",
													"        pm.expect(firstRecord.type).eq('proxyTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"name\", \"urlMask\");",
													"        });",
													"    } else {",
													"        console.log(\"No Proxy types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"proxy-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0348ab56-2bcf-4323-b329-5b7c522a9966",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_proxyTypes\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is proxyType",
													"        pm.expect(firstRecord.type).eq('proxyTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"name\", \"urlMask\");",
													"        });",
													"    } else {",
													"        console.log(\"No Proxy types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"proxy-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Get proxies by non-existing KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec23b105-568f-44ea-aaba-1375650b802b",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"KbCredentials not found by id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"proxy-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by  invalid KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89441ff7-b89f-4210-9d3f-173c37dc4449",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"'id' parameter is incorrect\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"proxy-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d4bc8fb-b2b9-4728-bd52-d76cdbe2ed11",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e9cefe0-2b5f-4b60-83a8-8152373730d9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET root-proxy",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET root proxy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e97e3b26-37e2-4815-b2a7-582ad773c480",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET root proxy by KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed135c80-2138-4178-9464-87976915dc3e",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Get proxies by non-existing KB Credentials id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8dfba9f8-322d-45de-b53a-dd5a48aedf5f",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"KbCredentials not found by id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by  invalid KB Credentials id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5aad4f9-780f-4b01-9826-3fd82d7fb24c",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"'id' parameter is incorrect\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "875f55b8-ec0a-455d-99f5-1ca50b5dbd44",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "376f64e5-bc6a-4af7-8d88-a2b3148d02a7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT root-proxy",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT root proxy when root proxy is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62395e6f-9593-48e8-83b7-96ee408e59bd",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"   pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"<n>\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update root proxy without proxyTypeId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05efdfa9-873f-4fe7-a949-ebd5702acfbd",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 4 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(4);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.id\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.proxyTypeId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"attributes\": {\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy with invalid proxyTypeId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccf5653d-b178-476a-8267-0456300aaa03",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Test that response has expected error message",
													"pm.test('expected error message is present in response', function() {",
													"    pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23f46387-131e-4ed1-af06-37e75eb091e2",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.eq(\"Invalid Proxy ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"invalid\"\n    }\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eb64fdcc-5733-4bd1-acd8-f71b571df50c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4fa6968b-1c3d-48aa-aaaf-11f1f549d1c7",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_proxyTypesData.json\", JSON.parse(pm.variables.get(\"schema_proxyTypesData\")));",
							"tv4.addSchema(\"schema_proxyTypesDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_proxyTypesDataAttributes\")));",
							"tv4.addSchema(\"schema_rootProxyData.json\", JSON.parse(pm.variables.get(\"schema_rootProxyData\")));",
							"tv4.addSchema(\"schema_rootProxyDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_rootProxyDataAttributes\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "GET tags collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d407071-3875-4861-ac89-624c872d92d7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"value\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute type",
													"        pm.test('expected data.attributes type is present', function() {",
													"            pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationship is present', function() {",
													"            pm.expect(firstRecord.relationships.record).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"record\")",
													"        });",
													"    } else {",
													"        console.log('No tags found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											]
										}
									},
									"response": []
								},
								{
									"name": "with all rectypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "429f207c-0c33-4157-b839-ad7cc069ffc4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is tags",
													"        pm.test('type is tags', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        });",
													"    }",
													"}",
													"",
													"    response.data.forEach(function(element) {",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-packageid\")){",
													"        pm.test('Record includes query term packages', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === \"18\"){",
													"        pm.test('Record includes query term providers', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-titleid\")){",
													"        pm.test('Record includes query term titles', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    }",
													"    if (element.relationships.record.data.id === pm.environment.get(\"custom-resourceid-from-setup\")){",
													"        pm.test('Record includes query term resources', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=provider&filter[rectype]=package&filter[rectype]=title&filter[rectype]=resource",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "provider"
												},
												{
													"key": "filter[rectype]",
													"value": "package"
												},
												{
													"key": "filter[rectype]",
													"value": "title"
												},
												{
													"key": "filter[rectype]",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60a9a828-a7af-400e-bbb2-0415caf5a17d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to providers', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10022879-8724-4691-a388-a321bf0157c6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to packages', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=package",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "package"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b3a57dd-a5b7-42a7-a0a9-9c301991f42d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is a string",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to titles', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cffa63ee-4857-4418-ac18-a4dc0c5b82ca",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to resources', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=resource",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid filter(all rectypes)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e533206a-3874-45b2-a0cc-9c4816da595a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is tags",
													"        pm.test('type is tags', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        });",
													"    }",
													"}",
													"",
													"    response.data.forEach(function(element) {",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-packageid\")){",
													"        pm.test('Record includes query term packages', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === \"18\"){",
													"        pm.test('Record includes query term providers', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-titleid\")){",
													"        pm.test('Record includes query term titles', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    }",
													"    if (element.relationships.record.data.id === pm.environment.get(\"custom-resourceid-from-setup\")){",
													"        pm.test('Record includes query term resources', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[r=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[r",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with invalid request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7ee0ca0-615a-4807-9b74-49c2f2c99182",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid \\'filter[rectype]\\' parameter value: providers. Possible values: provider, package, title, resource');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "providers"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03660b0f-a2d1-4b69-b11f-8de44730f7a0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5885aa9a-d437-43e3-92fb-39dba45a7bbd",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
							"tv4.addSchema(\"schema_tagRelationships.json\", JSON.parse(pm.variables.get(\"schema_tagRelationships\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_tagCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_tagCollectionItem\")));",
							"tv4.addSchema(\"schema_tagCollection.json\", JSON.parse(pm.variables.get(\"schema_tagCollection\")));",
							"tv4.addSchema(\"schema_packageTags.json\", JSON.parse(pm.variables.get(\"schema_packageTags\")));",
							"tv4.addSchema(\"schema_tagDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_tagDataAttributes\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "custom-labels",
			"item": [
				{
					"name": "GET collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET custom labels collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7acb5a87-48e4-4d58-9b23-086522e34423",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is customLabel",
													"        pm.expect(firstRecord.type).eq('customLabels');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\", \"displayOnPublicationFinder\");",
													"        });",
													"    } else {",
													"        console.log(\"No Custom Labels exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET custom labels collection by credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28528fdd-b7a8-4ae3-99fc-69afe01c8da0",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is customLabel",
													"        pm.expect(firstRecord.type).eq('customLabels');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"        pm.expect(firstRecord.credentialsId).to.be.equal(pm.environment.get(\"kb-credentials-id1\"))",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\", \"displayOnPublicationFinder\");",
													"        });",
													"    } else {",
													"        console.log(\"No Custom Labels exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET custom-labels by missing credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52178968-63ac-44c4-92ab-1bc0b3deda92",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT custom-labels with one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24b1f868-a0c0-468d-91a2-d114a580a352",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"    pm.expect(firstRecord.type).eq('customLabels');",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT custom-labels with five items",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5999200e-1715-4d36-8e59-8480bdd92484",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test('expected size', function () {",
													"    pm.expect(jsonData.data.length).eq(5);",
													"})",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"    pm.expect(firstRecord.type).eq('customLabels');",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 2,\n                \"displayLabel\": \"test 2 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 3,\n                \"displayLabel\": \"test 3 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 4,\n                \"displayLabel\": \"test 4 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 5,\n                \"displayLabel\": \"test 5 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT /custom-labels with id not in range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e95d91c4-01d8-4012-83d3-962b8de376f8",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Custom Label id should be in range 1 - 5\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 6,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac125f3b-8a6f-49a6-a6f9-37dbcf78e559",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": -1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid name length",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ed3d42-b583-440c-a65e-0e5c55e6cd53",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Custom Label Name is too long (maximum is 50 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid full text finder",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "367518fb-8c08-485a-a68a-4d05b7e98e5c",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].message).to.equal(\"may not be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": null,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid publication finder",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc3f27d-71d7-4d9a-95f1-3b38de7a4f40",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].message).to.equal(\"may not be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": null\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with duplicate ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "576fe610-af94-4a26-929d-c448ba1d2964",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels to missing credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cae7796-a484-4d2f-9463-596e2cc1b697",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "52175b73-423d-423b-b9eb-816df2da8cbc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c5f2ef1c-340a-4a4c-af6b-71352502ff91",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8fd8bb0a-8ea7-436a-be10-28d4fec78879",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8f4b5148-d4b3-4e23-8bb8-dcbb90330842",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_customLabelsCollection.json\", JSON.parse(pm.variables.get(\"schema_customLabelsCollection\")));",
							"tv4.addSchema(\"schema_customLabelDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_customLabelDataAttributes\")));",
							"tv4.addSchema(\"schema_customLabel.json\", JSON.parse(pm.variables.get(\"schema_customLabel\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tear-down",
			"item": [
				{
					"name": "tear-down tags test",
					"item": [
						{
							"name": "Delete tags for provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f001c379-b6d1-416d-b435-faa94b10272d",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Tag list is empty', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n\t\t\t]\n\t\t}\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"18",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for second provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39804f2d-3a3d-49d8-9b43-c0d8722605bb",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('EBSCO');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"EBSCO\",\n      \"tags\": {\n    \t\t\"tagList\": [\n\t\t\t]\n\t\t}\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"19",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cedfa13-ddb5-4f04-8f03-a524bdcdf422",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"//Check that tagList is empty in response",
											" pm.test(\"Package with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"tags\",\n     \"attributes\": {\n       \"name\": \"new-custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\",\n       \"tags\": {\n    \t\"tagList\": [\n\t\t\t]\n    \t}\n     }\n   }\n }",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ac2e355-3035-4594-bba1-80a9aabe6cd1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab08d2ca-9bca-4399-ac7d-f1a05fa70297",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"tags\",\r\n    \"attributes\": {\r\n      \"name\": \"custom title-{{custom-resource-with-tags-uuid}}\",\r\n      \"tags\": {\r\n        \"tagList\": [\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags to test titles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "54cc62f3-46e6-4c65-9ffe-c00c41eb0a5e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96489292-5988-4453-bd18-c0ba9e90576c",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": []\n    \t}\n\t}\n\t}\n}\n        ",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles",
										"{{custom-titleid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for managed resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0409bbda-9703-4d03-a095-6c98ab3b1390",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8208bb6a-0b1c-4e22-9844-116db52cb45b",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"managed-resource-{{managed-title-package-resourceid}}\",\n      \"tags\": {\n        \"tagList\": [\n        ]\n      }\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{managed-title-package-resourceid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom package created for tags test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "737a867d-84a2-4398-9889-c7e92bb25a17",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5923f3c4-5d0c-409b-af90-4385bb5ca42b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a5b024a7-931e-4f3d-954b-bebc516c0045",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "57944d8b-10d5-4524-8876-11a78da5675e",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
									"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
									"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
									"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
									"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
									"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_packageTags.json\", JSON.parse(pm.variables.get(\"schema_packageTags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down resources test",
					"item": [
						{
							"name": "Unassign access mapping from resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83a81163-344b-4f9a-a3ae-9d8f45c5ed57",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a4f6594-f5e1-4fb1-94d2-2e4f0fba15c9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom resource with tags (custom title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2905b5ed-e646-4b79-9904-af8a578ee2f7",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afdbce91-7540-41b8-8857-660ca0dcbbd8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18ea6daa-b8d2-4126-95b6-8348401bc291",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-for-resource}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-for-resource}}"
									]
								},
								"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
							},
							"response": []
						},
						{
							"name": "Delete Custom Package (created for resource tags)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7eb6a386-7625-42b3-8e7f-054a85f0cfdd",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom Resource created for test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cef5ef7-1b2c-4936-a142-493f9f2c1576",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-packageid}}-{{custom-titleid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-packageid}}-{{custom-titleid-from-setup}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deletes newly created custom package which is used for resource testing. Deleting a custom package deletes all custom titles that are contained within the package ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "905656d5-614b-4621-970c-00dc6af8c00f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4fcece25-0771-4c6a-a378-ce4760c5e3e0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down packages",
					"item": [
						{
							"name": "Unassign access mapping from cusom package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee6c3eb2-e129-4bb9-ae60-359a49042bf1",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that access type unassigned",
											"pm.test('access type should be unassigned', function() {",
											"    pm.expect(response.data.relationships).not.to.have.property('accessType');",
											"    pm.expect(response.included.length).to.be.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Journal\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"visibilityData\": {\n        \"isHidden\": false,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign access mapping from managed package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "175c506e-84be-4847-8ed9-e554e8de34a0",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that access type unassigned",
											"pm.test('access type should be unassigned', function() {",
											"    pm.expect(response.data.relationships).not.to.have.property('accessType');",
											"    pm.expect(response.included.length).to.be.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{packageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom package created in post 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84d669a0-7f64-4c7c-973f-3992945524c7",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70e9f7f2-2337-491e-80f2-5ce5bb25c2ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-valid1}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						},
						{
							"name": "Delete custom package created in post 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0714d03-92b9-457b-ba29-dd8574f13480",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f58c9f41-7a45-4cc3-bc4a-692e1d20413f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						},
						{
							"name": "Deselect partially selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "095d02c6-93ba-4916-8175-0cfbbdde9825",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Test that data.attributes has expected attributes",
											"pm.test(\"titles in package were deselected\", function() {",
											"    pm.expect(response.data.attributes.selectedCount).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95cd2e5f-72e3-4fe4-93dc-9f2c4c2c3a38",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{partially-selected-package-id}}\",\r\n    \"type\": \"packages\",\r\n    \"attributes\": {\r\n      \"isCustom\": false,\r\n      \"isSelected\": false\r\n\t}\r\n  }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{partially-selected-package-id}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3047d3d4-6cab-4189-9563-2a38dd9f05b9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "57657e8a-b200-4752-ad7f-022fd69b5762",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down titles test",
					"item": [
						{
							"name": "Delete Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3d84929-eb73-40a9-8f51-ae9989ee1b57",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c9c159a-53bf-45a6-a62b-08c5ede924d0",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}"
									]
								},
								"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
							},
							"response": []
						}
					],
					"description": "Deletes newly created custom package which is used for custom titles testing. Deleting a custom package deletes all custom titles that are contained within the package ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a77afb54-42c2-4c33-8cbb-cda66f6f1687",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c89a1ec3-1dcf-4884-ab80-972f801c6dc6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down permission",
					"item": [
						{
							"name": "Delete permission if it was added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3577c7de-d8f3-42ef-adc6-d7f95f737d22",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(!pm.variables.get(\"permissionExists\")) {",
											"    jsonData.permissions = jsonData.permissions.filter(permission => (permission !== \"kb-ebsco.all\"));",
											"",
											"    const permissionsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"X-Okapi-Token\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/json',",
											"        raw: JSON.stringify(jsonData)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"        pm.expect(res).to.have.property('status', 'OK');",
											"      });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d9257a4-244a-40d2-8145-bd0aab14a42a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down access-type test",
					"item": [
						{
							"name": "DELETE second access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78633888-0535-4789-bcc7-1275ede45c3e",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE third access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdedc466-f7fc-4238-afd9-4322372387e0",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id3}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE fourth access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80c56a66-5960-4015-bd78-734ab0ca8308",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id4}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id4}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down assign-user",
					"item": [
						{
							"name": "DELETE unassign user2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0217bac8-b81b-422f-8758-6924618eafe7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6289afa-2785-46c4-afdf-3feb6fe5f563",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users",
										"{{assigned-user-id2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down user credentials",
					"item": [
						{
							"name": "unassign permission to user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7436350c-01d0-4b3d-b8f6-7c074e394fbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "28bb5a9f-ce45-46b2-9c4c-848b8598e979",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{kb-cred-perm-assigned-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{kb-cred-perm-assigned-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "user credentials permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c8606b82-daab-4aa0-b8e5-1e477e656b70",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c345558-a9c4-49f6-b6a0-25ca7b0994a8",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{kb-cred-perm-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions",
										"{{kb-cred-perm-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "47304f31-c428-492b-83f1-3b1fd519446d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f6505724-8641-455a-a791-0328c2adbb39",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?userId={{cred-user-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{cred-user-id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "733ca0d4-da9a-458d-92f2-072661499365",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f748b2ee-2ad7-45f5-9e0f-c82f62847738",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{cred-user-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users",
										"{{cred-user-id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down kb-credentials test",
					"item": [
						{
							"name": "DELETE missing credentials 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2365def7-4a5d-4e30-9d34-209358d6f5c0",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE missing credentials 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c315b035-11d1-4e99-9c8a-8d3c86eaf6ca",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5d011b58-a5ed-4d9a-9f11-dd93f35cf4d4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fcbb47c6-53fc-46f8-ba13-24e11dc55f86",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "905e7584-62ad-473a-aac1-b0a455395b69",
			"key": "custid",
			"value": "apidvgvmt",
			"type": "string"
		},
		{
			"id": "a89a44b7-aaab-4b31-a59a-4d9bbbe04112",
			"key": "packageId",
			"value": "583-4345",
			"type": "string"
		},
		{
			"id": "6638e53f-b69a-4033-9f8f-ba5667e86cf3",
			"key": "rmapi_api_key",
			"value": "",
			"type": "string"
		},
		{
			"id": "292ac531-b36e-4dee-9073-4a8ea836ca21",
			"key": "rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		},
		{
			"id": "8549c616-bc84-4ba4-bf6a-28fac06670de",
			"key": "default_rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}