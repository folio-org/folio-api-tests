{
	"info": {
		"_postman_id": "78f272a4-0878-487b-b0de-d8d600433b03",
		"name": "mod-notes",
		"description": "Tests for the endpoints:\n/notes\n/note-types\n\nTests include:\n* /notes (CR)\n* /notes/_self (CR)\n* /notes/{id} (RUD)\n* /note-types (CR)\n* /note-types/{id} (RUD)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"id": "6f5fcb10-6d27-4147-9a6c-5f30c1c95b0b"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "schemas",
			"item": [
				{
					"name": "setup environment variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09a1170c-2f60-40b6-9417-aa55039530e9",
								"exec": [
									"const moduleName = 'mod-notes';",
									"pm.test(\"GET json schemas response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET json schemas has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"GET contains mod-notes module\", function () {",
									"    pm.expect(pm.response.text()).to.include(moduleName);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"json.forEach((element) => {",
									"\tvar moduleId = element.id;",
									"\tif(moduleId.includes(moduleName)){",
									"\t\tpm.environment.set('mod-notes-id', moduleId);",
									"\t}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/_jsonSchemas",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces",
								"_jsonSchemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "get schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e83f8c00-8be9-429c-a75e-5b41908092a1",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {pm.response.to.be.ok;});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {pm.response.to.have.jsonBody();});",
									"",
									"function checkVariableExist(name){return pm.environment.has(\"schema_\"+ name);}",
									"",
									"function setEnvironmentVariable(name, data){pm.environment.set(\"schema_\"+ name, data) }",
									"",
									"function extractName(url){ return url.substring(url.lastIndexOf(\"/\") + 1, url.lastIndexOf(\".\")); }",
									"",
									"function replaceResponseRefWithName(text){ return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"schema_\"); }",
									"",
									"function getURL(path) {return pm.variables.get(\"protocol\") + \"://\" + ",
									"        pm.variables.get(\"url\") + \":\" + ",
									"        pm.variables.get(\"okapiport\") + ",
									"        \"/_/jsonSchemas?path=\" + path;",
									"}",
									"        ",
									"function getRequest(url){",
									"  const echoGetRequest = {",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"      'X-Okapi-Module-Id' : pm.variables.get(\"mod-notes-id\"),",
									"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\")",
									"    }",
									"  }",
									"    return echoGetRequest;",
									"}        ",
									"",
									"function fetchSchema(echoGetRequest, delay){",
									"",
									"return new Promise((resolve, reject) => {",
									"     setTimeout(function(){",
									"       pm.sendRequest(echoGetRequest, (err, response) => {",
									"       if (!err) {",
									"        resolve(response.text());",
									"       }else{",
									"        reject(err, echoGetRequest);",
									"       }",
									"      });",
									"     }, delay);",
									"  });",
									"}",
									"",
									"var interval = setTimeout(() => {}, 30000);",
									"function traverse(data){",
									"     var promises = Object.entries(data).map(([key, value]) => {",
									"         ",
									"        var url = getURL(value);",
									"        var request = getRequest(url);",
									"        ",
									"        return fetchSchema(request, 200 * key)",
									"        .then(function(response) {",
									"            response = replaceResponseRefWithName(response.toString());",
									"            var name = extractName(value);",
									"            if(!checkVariableExist(name)){",
									"                setEnvironmentVariable(name, response);",
									"            }",
									"        })",
									"        .catch((err, req) => {",
									"            console.log(err);",
									"            console.log(req);",
									"        });",
									"    });",
									"    ",
									"    Promise.all(promises)",
									"        .then(() => {",
									"            clearTimeout(interval)",
									"        })",
									"        .catch((err, req) => {",
									"            console.log(err);",
									"            console.log(req);",
									"            clearTimeout(interval);",
									"        });",
									"}",
									"",
									"traverse(JSON.parse(responseBody));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{mod-notes-id}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"jsonSchemas"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "setup for note-types",
			"item": [
				{
					"name": "POST create note-type for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea3c30e3-2195-4f88-a77f-56ce0f8b4f23",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteType-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "581e5d82-c700-4591-8272-1c665dbcf653",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteTypeId\", response.id);",
									"pm.environment.set(\"noteTypeName\", response.name);",
									"pm.environment.set(\"noteTypeIdNotExisting\",\"00c00fe0-0000-000f-a00a-e000b000d000\");",
									"pm.environment.set(\"incorrectNoteTypeId\",\"12345\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test - {{noteType-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create another note-type for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "449e7d61-9568-455b-8e04-d09f1a59fc06",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteType-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cefdfbe9-87b3-48f5-89d0-f8fdb4283aae",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteTypeIdSecond\", response.id);",
									"pm.environment.set(\"noteTypeNameSecond\", response.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TestTwo - {{noteType-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4a4c7c8c-a607-4e01-9025-7819a9f7c1c1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7482879b-d40e-44e0-be74-83f2a69e309a",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							" tv4.addSchema(\"schema_uuid.schema\", pm.environment.get(\"schema_metadata\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "setup for notes",
			"item": [
				{
					"name": "POST create notes for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6400464e-06d9-4ad2-bf82-939bb3a0271c",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"note-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "70848b68-1030-40e6-96a2-2d7f7e4f20c5",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteId\", response.id);",
									"pm.environment.set(\"noteTitle\", response.title);",
									"pm.environment.set(\"noteContent\", response.content);",
									"pm.environment.set(\"noteDomain\", response.domain);",
									"pm.environment.set(\"noteLinkId\", response.links[0].id);",
									"pm.environment.set(\"noteLinkType\", response.links[0].type);",
									"pm.environment.set(\"incorrectNoteId\", \"12345\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\" : \"Title - {{note-uuid}}\",\r\n  \"content\": \"Content - {{note-uuid}}\",\r\n  \"type\": \"{{noteTypeName}}\",\r\n  \"typeId\": \"{{noteTypeId}}\",\r\n  \"domain\": \"eholdings\",\r\n  \"links\": [\r\n    {\r\n      \"id\" : \"583-2356521-758038\",\r\n      \"type\": \"resource\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create second note for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c0b8335-edcc-479c-b364-ca80804bdbe1",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"note-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bfa46162-dfae-4149-94a6-1db2c47e16bf",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteIdSecond\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\" : \"SecondTitle - {{note-uuid}}\",\r\n  \"content\": \"SecondContent - {{note-uuid}}\",\r\n  \"type\": \"{{noteTypeNameSecond}}\",\r\n  \"typeId\": \"{{noteTypeIdSecond}}\",\r\n  \"domain\": \"eholdings\",\r\n  \"links\": [\r\n    {\r\n      \"id\" : \"584-2356521-758038\",\r\n      \"type\": \"resource\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1cc6281a-19fc-4e5c-b41c-ca8ced8b27c9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "14118ea5-d371-4e31-b9e0-79dad6eb0b42",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							" tv4.addSchema(\"schema_uuid.schema\", pm.environment.get(\"schema_metadata\"));",
							" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
							" tv4.addSchema(\"schema_link.json\", pm.environment.get(\"schema_link\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "setup for links",
			"item": [
				{
					"name": "assign link to notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37e9b027-532f-444a-8b40-9cb17d962179",
								"exec": [
									"pm.test(\"success test - 204 and no body\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.be.withBody;",
									"});",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"nonExistingId\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\")",
									"    },",
									"}, function(err, res) {",
									"    pm.test(\"Status not found\", function() {",
									"    pm.expect(res.status).eq(\"Not Found\");",
									"});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e1122c38-9c5b-4020-91ab-2ac57c3cd3f2",
								"exec": [
									"pm.environment.set(\"nonExistingId\", \"f62cd001-b574-4dee-9ec4-29994bbe0be5\");",
									"pm.environment.set(\"typeLink\", \"package\");",
									"pm.environment.set(\"linkId\", \"583-2356521-758039\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteIdSecond}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-links",
								"type",
								"{{typeLink}}",
								"id",
								"{{linkId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "notes",
			"item": [
				{
					"name": "GET notes collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1d375bf-2ecf-400c-b97b-db8b31adbf92",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.at.most(10);// limit default",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Returns a list of notes"
									},
									"response": []
								},
								{
									"name": "/notes?query=id=={id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c190fce-c73e-48c2-8b62-dc28e21bac98",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.notes.length).to.equal(1);",
													"    pm.expect(response.notes[0].id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.notes[0].typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"noteTypeId does not match\");",
													"    pm.expect(response.notes[0].type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.notes[0].title).to.equal(pm.environment.get(\"noteTitle\"), \"title does not match\");",
													"    pm.expect(response.notes[0].content).to.equal(pm.environment.get(\"noteContent\"), \"content does not match\");",
													"    pm.expect(response.notes[0].domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"    pm.expect(response.notes[0].links[0].id).to.equal(pm.environment.get(\"noteLinkId\"), \"link's field does not match\");",
													"    pm.expect(response.notes[0].links[0].type).to.equal(pm.environment.get(\"noteLinkType\"), \"link's field does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "21c81462-0e18-42e4-a442-8c25e3421f77",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=id={{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "id={{noteId}}"
												}
											]
										},
										"description": "Returns an existing note via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?query=title={{noteTitle}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ed23263-459f-41e1-acee-1e2ea7444e0a",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.notes.length).to.equal(1);",
													"    pm.expect(response.notes[0].id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.notes[0].typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"typeId does not match\");",
													"    pm.expect(response.notes[0].type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.notes[0].title).to.equal(pm.environment.get(\"noteTitle\"), \"noteTitle does not match\");",
													"    pm.expect(response.notes[0].content).to.equal(pm.environment.get(\"noteContent\"), \"content does not match\");",
													"    pm.expect(response.notes[0].domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"    pm.expect(response.notes[0].links[0].id).to.equal(pm.environment.get(\"noteLinkId\"), \"link's field does not match\");",
													"    pm.expect(response.notes[0].links[0].type).to.equal(pm.environment.get(\"noteLinkType\"), \"link's field does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d4a81694-b118-493c-9c17-362a51aa7b74",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=title=={{noteTitle}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "title=={{noteTitle}}"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?query=domain={{noteDomain}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da40505d-3fed-4220-bb10-bec30d3998bb",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"    pm.test(\"validate domain\", function() {",
													"    if(response.notes.length > 0) {",
													"        for(let i in response.notes) {",
													"            pm.expect(response.notes[i].domain).to.equal(pm.environment.get(\"noteDomain\"), \"noteDomain does not match\");",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=domain={{noteDomain}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "domain={{noteDomain}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/notes?limit=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0da9013-7c84-4829-b4f5-7c1ab64481a7",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.notes.length).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9987e7d0-da44-4508-b656-c1f4ceba016b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?limit=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61e1ddb9-3b3a-4b4e-b9bf-61c7d497f13f",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.notes.length).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aa68c553-57d0-497e-a747-2ec4187664ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?offset=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c8fc40c-427f-44f1-beab-ed5dac7a42f1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.notes.length).to.be.at.most(10);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9620d88f-0f81-44d1-af1b-11bdb647f8e0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?offset=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49f05075-6a2f-4274-9fd7-da70d5970fb9",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.notes.length).to.be.at.most(10);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fb520231-5259-48b8-b653-1d4926f496d6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ff70b41-23e3-4899-8783-d127c2bcb78f",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.domain.all\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e81235a7-76bb-496e-98e0-8d4df4371c5e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-1 - 400 (offset less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fd14704-31bc-432c-9e60-443156f5c67a",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/notes?limit=-1 - 400 (limit less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19fe14f3-b266-4470-9734-cc248775d1e4",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/notes?offset= - 400 (offset is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9595ac08-c79b-4312-8558-d60637514370",
												"exec": [
													"pm.test(\"400 test - empty offset\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": ""
												}
											]
										},
										"description": "Failure case where the offset query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?limit= - 400 (limit is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "473ff534-055c-48fb-bf04-2107f9271c5c",
												"exec": [
													"pm.test(\"400 test - empty limit\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": ""
												}
											]
										},
										"description": "Failure case where the limit query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-2147483649 - 400 (offset less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "139f68f1-3318-49e9-a293-407e62f1df52",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/notes?limit=-2147483649 - 400 (limit less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "470b340d-dbd4-410e-a928-968bf6642b27",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/notes?offset=2147483648 - 400 (offset exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc5cd007-4815-4fca-8b8d-2cb058a06ac3",
												"exec": [
													"pm.test(\"400 test - offset exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the offset query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/notes?limit=2147483648 - 400 (limit exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3504de1f-e18f-4ee0-8fc9-16b5319969d4",
												"exec": [
													"pm.test(\"400 test - limit exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the limit query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/notes?query=foo* - 400 (bad query CQL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ef72f2b-e7a9-45e9-90e7-1873b56a15b5",
												"exec": [
													"pm.test(\"400 test - invalid CQL in query\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=foo*",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "foo*"
												}
											]
										},
										"description": "Failure case where the \"query\" query parameter is not valid CQL."
									},
									"response": []
								},
								{
									"name": "/notes?query= - 400 (empty query)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8acf22ad-b56d-457e-ae73-81b06ea0cefd",
												"exec": [
													"pm.test(\"400 test - empty query\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"query\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd7955b2-b98e-4d14-be6d-1aeb30a91b18",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a89b52f3-6ef0-496b-abcd-cae634b82e6e",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7939be0-00a5-439a-9c94-fcfb053f67dd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58fd9096-ee83-4bcd-a13c-dc185062d49e",
								"type": "text/javascript",
								"exec": [
									" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
									" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
									" tv4.addSchema(\"schema_link.json\", pm.environment.get(\"schema_link\"));",
									" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
									" tv4.addSchema(\"schema_note.json\", pm.environment.get(\"schema_note\"));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST note",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes - 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1c2116e4-30ab-4f1b-b4eb-7489e6d3d921",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "01dfcd28-fcb2-4076-b0a1-95e7acad0771",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response).to.include.all.keys(\"id\", \"typeId\", \"title\", \"content\", \"domain\", \"creator\", \"metadata\", \"links\");",
													"});",
													"",
													"//Test that title matches what was passed in POST request",
													"pm.test('title matches value passed in', function() {",
													"    pm.expect(response.title).to.eq('BU Campus Access Issues');",
													"});",
													"",
													"//Test that domain matches what was passed in POST request",
													"pm.test('domain matches', function() {",
													"    pm.expect(response.domain).to.eq('eholdings');",
													"});",
													"    ",
													"//Test that content matches what was passed in POST request",
													"pm.test('content matches', function() {",
													"    pm.expect(response.content).to.eq('There have been access issues at the BU campus since the weekend');",
													"});",
													"    ",
													"//Check that linksList is not empty",
													"pm.test('LinksList is not empty', function(){",
													"    pm.expect(response.links.size).to.not.eq(0);",
													"});",
													"    ",
													"//Check that linksList element matches with value",
													"pm.test('checking linksList', function(){",
													"    pm.expect(response.links[0].type).eq(\"package\");",
													"});",
													"",
													"if(response.id){",
													"pm.environment.set(\"noteId-creating-in-post\", response.id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Low Priority\",\r\n  \"title\" : \"BU Campus Access Issues\",\r\n  \"content\": \"There have been access issues at the BU campus since the weekend\",\r\n  \"typeId\": \"{{noteTypeId}}\",\r\n  \"domain\": \"eholdings\",\r\n  \"links\": [\r\n    {\r\n      \"id\" : \"583-2356521\",\r\n      \"type\": \"package\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note"
									},
									"response": []
								},
								{
									"name": "/notes - 201 (ignore read only fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ba2afd07-a0a7-47ca-a428-84659d6a7ae6",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"createDate\", \"2001-01-01T19:18:27.437+0000\");",
													"pm.variables.set(\"createUser\", uuid.v4());",
													"pm.variables.set(\"updateDate\", \"2001-02-02T18:17:21.427+0000\");",
													"pm.variables.set(\"updateUser\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a7e5c019-e251-433a-be4c-9a24339cdf41",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response).to.include.all.keys(\"id\", \"typeId\", \"title\", \"content\", \"domain\", \"creator\", ",
													"    \"metadata\", \"links\");",
													"});",
													"",
													"//Test that title matches what was passed in POST request",
													"pm.test('title matches value passed in', function() {",
													"    pm.expect(response.title).to.eq('BU Campus Access Issues');",
													"});",
													"    ",
													"//Test that content matches what was passed in POST request",
													"pm.test('content matches', function() {",
													"    pm.expect(response.content).to.eq('There have been access issues at the BU campus since the weekend');",
													"});",
													"",
													"//Test that domain matches what was passed in POST request",
													"pm.test('domain matches', function() {",
													"    pm.expect(response.domain).to.eq('eholdings');",
													"});",
													"    ",
													"//Check that linksList is not empty",
													"pm.test('LinksList is not empty', function(){",
													"    pm.expect(response.links.size) !== 0;",
													"});",
													"    ",
													"//Check that linksList element matches with value",
													"pm.test('checking linksList', function(){",
													"    pm.expect(response.links[0].type).eq(\"resource\");",
													"});",
													"",
													"pm.test(\"validate Location header\", () => {",
													"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(\"/notes/\" + pm.response.json().id);",
													"});",
													"",
													"if(response.id){",
													"pm.environment.set(\"noteId-creating-in-post-second\", response.id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"BU Campus Access Issues\",\n    \"content\": \"There have been access issues at the BU campus since the weekend\",\n    \"typeId\": \"{{noteTypeId}}\",\n    \"domain\": \"eholdings\",\n    \"metadata\": {\n    \t\"createdDate\": \"{{createDate}}\",\n        \"createdByUserId\": \"{{createUser}}\",\n        \"updatedDate\": \"{{updateDate}}\",\n        \"updatedByUserId\": \"{{updateUser}}\"\n    \t\n    },\n    \"links\": [\n        {\n            \"id\": \"583-2356521-758038\",\n            \"type\": \"resource\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes - 400 (bad JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "59fd2464-ddf9-4fa6-b98c-ee9449230870",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "53695d82-6484-4bbc-b6e6-c90da04fcfa8",
												"exec": [
													"pm.test(\"400 - bad JSON\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"title\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\",\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with invalid JSON."
									},
									"response": []
								},
								{
									"name": "/notes - 400 (no body)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5ae4477a-6e1e-4d3e-83d3-1588098adcac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8b11af7c-18b0-43d2-9435-17d6bef3b757",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with no body."
									},
									"response": []
								},
								{
									"name": "/notes - 400 (wrong content-type)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8c8c0aab-9c9d-4529-a09a-4f331614c711",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d2986c1c-a6af-4b41-8b29-9bcc5b5f5f77",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with the wrong content type header."
									},
									"response": []
								},
								{
									"name": "/notes?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c4ac334-d396-4a8f-a14d-5834503fdcfe",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "be443b3f-ebc9-4413-b9af-ae6560fd6f19",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"title\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\",\n\t\"domain\": \"eholdings\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a65eb742-c77f-4b5c-9f54-13488264eea9",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "906ac1be-3f22-40ed-a18e-925e461e131f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"title\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\",\n\t\"domain\": \"eholdings\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3da631f-9f51-44fd-a3b7-c9904c6469af",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.domain.all\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c50ba6bd-e0ac-483f-97b8-9e30ed54b80c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes - 422 - invalid UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffca4a0f-eaa2-4b56-b227-0ef4ce8eef8d",
												"exec": [
													"pm.test(\"422 test\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test('Error contains typeId parameters', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"typeId\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "37e99bd4-d35a-4b48-bba6-ac7d2a0f808d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Low Priority\",\r\n  \"title\" : \"BU Campus Access Issues\",\r\n  \"content\": \"There have been access issues at the BU campus since the weekend\",\r\n  \"typeId\": \"invalid_uuid\",\r\n  \"domain\": \"eholdings\",\r\n  \"links\": [\r\n    {\r\n      \"id\" : \"583-2356521\",\r\n      \"type\": \"package\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "/notes - 422 (missing text field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ccb4e740-c14e-4e71-b099-59010d183279",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f763296-ea3b-4720-a605-1a978a7cc9b8",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"title\" : \"BU Campus Access Issues\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body missing the required \"text\" field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (missing text field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "128504a1-69b1-409d-8da1-cdda963653a8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "018a0e48-d46a-4b4c-a75e-a26d79164aa3",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body missing the required \"link\" field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "409070f9-d02d-4c94-ba5b-0bf1a15c986a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04eeb8e7-d6cf-4c71-b803-1431ea636d57",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (unknown field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a2e6e168-e116-4be8-ac46-750d56c9fa14",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5877366e-da41-41a5-8af6-84a3af3a7075",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"InvalidTitle\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "48266621-fd81-425d-9bed-68f9225c2816",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7d2a8847-bddf-468e-a960-13c086bdbf44",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"InvalidTitle\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\",\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cc4c199-1752-4bbf-9bda-d375829aef7f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80291077-d6de-4759-9e39-36e62e215ee1",
								"type": "text/javascript",
								"exec": [
									" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
									" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
									" tv4.addSchema(\"schema_link.json\", pm.environment.get(\"schema_link\"));",
									" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
									" "
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "957632f8-02c9-47db-b297-9f2ada608992",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"typeId does not match\");",
													"    pm.expect(response.type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.title).to.equal(pm.environment.get(\"noteTitle\"), \"title does not match\");",
													"    pm.expect(response.content).to.equal(pm.environment.get(\"noteContent\"), \"title does not match\");",
													"    pm.expect(response.domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e7fad1f-fc4a-4fb9-a6c5-f641b4f85ea5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Returns an existing note"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f560c6b2-a23e-4368-beee-8f4195e566bd",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "50769b43-1f36-46a9-8c3b-c524aa9fbcea",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"12345"
											]
										},
										"description": "Returns an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f9f22c6-70c0-421b-83a7-369304d6964b",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7533f29-5399-4fa3-a62d-b5d66c806e52",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07961d2e-aa43-4cc8-a745-760d2992a162",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79f7dc33-ab3e-4211-a3aa-c8004a008bec",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc43dfe8-9dbc-4ed0-a916-e0dc9d960f73",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5784257f-51c1-408a-a05b-839e07364c62",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Returns an existing note with an unknown id"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7dac278c-7a2d-46ea-8390-4b712426483a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ec2b6cb-d674-4e89-a989-e0c4e7145c7f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdb85f68-fb58-49b9-bac1-49de1b18bb31",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check changes\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.typeId).to.equal(pm.environment.get(\"noteTypeId\"));",
													"        pm.expect(response.title).to.equal(\"Updated title\");",
													"        pm.expect(response.content).to.equal(\"Updated content\");",
													"        pm.expect(response.domain).to.equal(\"Updated domain\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ecbcddc-749d-493a-96bd-5b448fd60496",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\" : \"Type\",\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"Updated domain\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId-creating-in-post}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - (empty fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bdd1a6b1-d060-49fa-9dea-88d6ba81f3da",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04a42c61-e04d-4c92-b7a8-6ef918bb91c6",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Fields is changed\", function () {",
													"        pm.expect(res.json().title).to.equal(\"\");",
													"        pm.expect(res.json().content).to.equal(\"\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"\",\r\n\t\"content\": \"\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"updated domain\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"\",\r\n\t\t\t\"type\": \"\"\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId-creating-in-post}}"
											]
										},
										"description": "Update an existing note with JSON body missing the required \"text\" field."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35c64904-0db5-481b-a6a3-7d03702573cc",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c77a725-a173-4990-9013-d703c2f0d7f9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{incorrectNoteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{incorrectNoteId}}"
											]
										},
										"description": "Updates an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeaeb43c-00f4-4a08-b6a9-f434332e5e6d",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5eda6730-2e21-41a1-8d02-0cccac637de7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d138fb47-9ece-4d42-9790-405a4374c686",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9e594c85-341d-45e2-9de5-ad742738b50b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed5ec0d4-4bc1-4db5-b3a9-5ba6f521edf4",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.domain.all\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05cf1065-a59c-4d86-8e94-68947ce46c79",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "086e5ccf-0df4-40f7-ba1c-1fd407feb083",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "64d4bbbd-d7f1-47c7-be8d-fda8c6d3fea4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Updates an existing note with an unknown id"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 invalid UUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "035c0c7d-9d73-4855-b3a2-10e4937b17d8",
												"exec": [
													"pm.test(\"success test - 422\", function() {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test('Error contains typeId parameters', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"typeId\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "faf3fa01-2b17-4614-9431-6ea6d7aa71f9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\" : \"Type\",\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"invalid_uuid\",\r\n\t\"domain\": \"Updated domain\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId-creating-in-post}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (missing some fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "af6b393f-b7e9-4453-8a62-9f543505d303",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "658a30eb-c3e4-4fe5-97ac-c91830106b88",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"checking message\", function(){",
													"    pm.expect(response.errors[0].message).eq(\"may not be null\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Update an existing note with JSON body missing the required \"text\" field."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "20e3c855-fbf6-4cc2-9ce8-84536f1787d9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d170935-35a8-4940-8c60-62f1db55c088",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"checking message\", function(){",
													"    pm.expect(response.errors[0].message).eq(\"may not be null\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Update an existing note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (unknown fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3d6b81b6-d989-4ac9-8709-67003a411c5b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a820e960-49b0-4f67-b65b-647e5514d7c0",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"/items/xxxxxx\",\n\t\"text\": \"xxxxxxxx\",\n\t\"xyzzy\": \"867-5309\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e191134-e680-4b15-8639-0ceb56c69a4a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "339c236f-7c8e-46aa-8491-06eec87699fd",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80c7324b-d792-42dd-91f3-c0f50b0c6163",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.test(\"retrieve deleted note\", function() {",
													"",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.variables.get(\"noteId-creating-in-post\"),",
													"        method: 'GET',",
													"        header: {",
													"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"            'X-Okapi-Token': pm.environment.get(\"xokapitoken\")",
													"        }",
													"    }, function(err, res) {",
													"        pm.test(\"verify deleted\", function() {",
													"            pm.expect(res.code).to.equal(404);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f196726-4e9f-44d8-a230-f6d5844279e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId-creating-in-post}}"
											]
										},
										"description": "Deletes an existing note"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8a264ef-a8e9-4104-82f5-45901d573fc6",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "18f54e11-ec4d-4192-95fe-94dbd4cbb5ca",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"12345"
											]
										},
										"description": "Deletes an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cddb324d-f14a-4798-9184-f14cd181b9fb",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8a3da070-8848-4108-b5b0-c02fbaf80349",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ad6c364-6410-49f4-a532-241d5892b303",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "76d3d60c-06f8-4061-a9c8-5a4aa1500db8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bce7969-f596-4067-9f51-faa98ea711be",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.item.delete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "acf436ad-7dda-479f-9eab-7c9074f5e463",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7348eac-4341-4dc5-8c03-277af52a47d8",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06cea55d-e2f1-4560-b113-dbed08b5a58c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Deletes an existing note with an unknown id"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "73597c73-772b-430c-92d6-41a7941047e0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a9e6fae-7b38-44ea-8e51-456d66912792",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "note-types",
			"item": [
				{
					"name": "GET note-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types?query=id=={id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de584bac-8764-49b9-9201-c234eafcd13d",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.noteTypes.length).to.equal(1);",
													"    pm.expect(response.noteTypes[0].id).to.equal(pm.environment.get(\"noteTypeId\"), \"id does not match\");",
													"    pm.expect(response.noteTypes[0].name).to.equal(pm.environment.get(\"noteTypeName\"), \"name does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69166b20-04f5-4635-90b9-b5f895ca9e9c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=id=={{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{noteTypeId}}"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?query=name={{noteTypesName}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f59e4552-066c-44b8-885c-4466f5728177",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.noteTypes.length).to.equal(1);",
													"    pm.expect(response.noteTypes[0].id).to.equal(pm.environment.get(\"noteTypeId\"), \"id does not match\");",
													"    pm.expect(response.noteTypes[0].name).to.equal(pm.environment.get(\"noteTypeName\"), \"name does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "76d74654-79f7-4bd1-b941-a7a494bdbcc8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=name=={{noteTypeName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": "name=={{noteTypeName}}"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81a0f0ea-998e-4e8b-87f7-51b354079d14",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.noteTypes.length);",
													"    pm.expect(response.noteTypes.length).to.be.at.most(10); // limit default",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Returns a list of notes"
									},
									"response": []
								},
								{
									"name": "/note-types?limit=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04c61669-a1d4-43ee-8d10-6c819d036b86",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.noteTypes.length).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fae0f335-8306-49a6-a808-41ffae596b6b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?limit=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36587ee8-3dc3-40f1-bed5-fa3d2a0b433e",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.noteTypes.length).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dde0930d-9d21-4409-bfe7-4850f9430cfb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?offset=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e06d3d9-ebcd-43c2-9f1b-d47d24d96d08",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.noteTypes.length).to.be.at.most(10);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ee42bd4-e2d3-4dee-a6e7-180fa7292271",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?offset=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8644af3f-c757-4e60-b895-0f415f3493c5",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.noteTypes.length).to.be.at.most(10);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8de945b6-1778-4d63-8e9e-59df018281a3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "915e9098-2581-4c15-936d-e512ae02082a",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"note.types.collection.get\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2771068a-6007-4fee-8e39-8d4f23d96e2f",
												"exec": [
													"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types?offset=-1 - 400 (offset less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccbca7c4-31a9-4449-963a-57b906c32ac7",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=-1 - 400 (limit less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e52b34e-8dbb-41a4-bf24-86c981672630",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/note-types?offset= - 400 (offset is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94057251-443f-4b8c-aaed-9bdabfbdfdf7",
												"exec": [
													"pm.test(\"400 test - empty offset\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": ""
												}
											]
										},
										"description": "Failure case where the offset query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/note-types?limit= - 400 (limit is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4917b3bd-5223-4811-938f-f42815434990",
												"exec": [
													"pm.test(\"400 test - empty limit\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": ""
												}
											]
										},
										"description": "Failure case where the limit query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-2147483649 - 400 (offset less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80ab7ad3-8c70-4c8b-96ac-6c88407dc92f",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=-2147483649 - 400 (limit less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14424532-d483-4308-b085-9bef7df85618",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/note-types?offset=2147483648 - 400 (offset exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf11b337-d43d-4908-bd6e-aa9657fa7729",
												"exec": [
													"pm.test(\"400 test - offset exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the offset query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=2147483648 - 400 (limit exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "072337c7-e106-4019-b82a-04534b2020db",
												"exec": [
													"pm.test(\"400 test - limit exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the limit query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/note-types?query= - 400 (empty query)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708b4c5d-afa8-4cd6-ac8c-c509027a52bb",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST note-types",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types - 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "43c59239-87dc-45e3-a8ce-87d5f9e6843c",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"noteType-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "afa56074-fd45-495d-aa78-a6a99d94dc80",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response).to.include.all.keys(\"id\", \"name\");",
													"});",
													"    ",
													"//Test that name matches",
													"pm.test('Name matches value passed in', function() {",
													"    pm.expect(response.name).to.eq('Note-Type - ' + pm.variables.get('noteType-uuid'));",
													"});",
													"",
													"if(response.id){",
													"pm.environment.set(\"noteTypeId-creating-in-post\", response.id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Note-Type - {{noteType-uuid}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note"
									},
									"response": []
								},
								{
									"name": "/note-types - 201 (ignore read only fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4a8628e7-2a81-44a3-84af-74aff20d26ea",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"createDate\", \"2001-01-01T19:18:27.437+0000\");",
													"pm.variables.set(\"createUser\", uuid.v4());",
													"pm.variables.set(\"updateDate\", \"2001-02-02T18:17:21.427+0000\");",
													"pm.variables.set(\"updateUser\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df183b63-b4aa-45bc-8b3c-01d619f9f4af",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response).to.include.all.keys(\"id\", \"name\");",
													"});",
													"    ",
													"//Test that name matches",
													"pm.test('Name matches value passed in', function() {",
													"    pm.expect(response.name).to.eq('Creating Second NoteType');",
													"});",
													"",
													"if(response.id){",
													"pm.environment.set(\"noteTypeId-creating-in-post-second\", response.id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Creating Second NoteType\",\n    \"metadata\": {\n    \t\"createdDate\": \"{{createDate}}\",\n        \"createdByUserId\": \"{{createUser}}\",\n        \"updatedDate\": \"{{updateDate}}\",\n        \"updatedByUserId\": \"{{updateUser}}\"\n    \t\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types - 400 (already existing note-type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8d2cf9e-e2da-4e4c-a610-cab9a944e687",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Creating Second NoteType\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "/note-types - 400 (bad JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b833136b-ebac-4f94-816a-e62de36da15d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd135f2b-dbf4-43e2-96df-a0b3388139a1",
												"exec": [
													"pm.test(\"400 - bad JSON\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Bad Json\"\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with invalid JSON."
									},
									"response": []
								},
								{
									"name": "/note-types - 400 (no body)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5df629f6-9af4-44d1-aae3-e5fd10935586",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "33464856-abd1-48ce-a97c-edc78b44f1ba",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Json content error HV000116: The object to be validated must not be null.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with no body."
									},
									"response": []
								},
								{
									"name": "/note-types - 400 (wrong content-type)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3086c575-d68d-497b-a670-c9128adb4aaa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "16eeb2cb-e66b-4fe0-8972-bc943015ebae",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Content-type header must be [\\\"application/json\\\"] but it is \\\"application/xml\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with the wrong content type header."
									},
									"response": []
								},
								{
									"name": "/note-types?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "403a1fa3-62ab-4d6a-82b5-34ed3d2e1418",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative lang parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa8f3415-0e84-4c62-9261-74f1ac06f011",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Empty Lang\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/note-types?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ba34e20-95be-4817-aa89-0368cbf0e431",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative lang parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02c94b43-0c52-46fc-a6e2-305f73358fc4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Wrong Lang\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/note-types - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7af3b341-371a-4c3b-b32a-39a5777ff043",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"note.types.item.post\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "86152e5a-87d9-47b9-a537-9442a913728f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Forbidden Access\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "527954c5-5fd4-456a-8da4-b19fd3ab6217",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0acf6ab8-b1b1-4b28-b968-564bf925c56d",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/note-types - 422 (unknown field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "db5ebfb7-cdf7-4fe1-b5ad-df9efb4a5ece",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d5a9362e-a4c9-4b6f-8e93-d33c670543cd",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"InvalidName\" : \"Invalid name\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/note-types - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eda112ed-d1eb-4812-8b60-363e5cf75cb7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2567b933-ac69-489e-944b-b1ce2dbf5231",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Invalid metadata\",\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28233b32-246c-4a88-9392-6c07dfaa8b3f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c4bd2f8e-9717-424c-abe3-c82b9803e92a",
								"type": "text/javascript",
								"exec": [
									" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
									" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
									" tv4.addSchema(\"schema_link.json\", pm.environment.get(\"schema_link\"));",
									" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
									" "
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET note-types by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types/{noteTypeId} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5dc91c0-a34d-4a4f-b927-d65600b4761d",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.id).to.equal(pm.environment.get(\"noteTypeId\"), \"id does not match\");",
													"    pm.expect(response.name).to.equal(pm.environment.get(\"noteTypeName\"), \"name does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78c7de82-9a64-4e20-9c44-d9b41e31d623",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "60dbaab2-f282-4a6b-89d2-63adf76c7c80",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62795447-ecb9-4dac-9bc3-425a312ca945",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12acef7a-74e6-40f4-8221-3f46a1d74ee3",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c01fc396-1e8e-4ffa-912b-2ccf810d5bdd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"12345"
											]
										},
										"description": "Returns an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/note-types/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00139b02-1ea3-4e8e-9c5e-f49d727ff583",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/note-types/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cab10cab-da1a-4e64-8f32-81813278590a",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f5fe460-b5ba-40c2-bae9-27f1b05bb216",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1cf39bcc-a232-4b0d-86d6-860fcdfff9a9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88c7acc3-aad9-4dfd-9799-17235210e009",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "21924980-816a-41d9-ae65-41cd9545756b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{$guid}}"
											]
										},
										"description": "Returns an existing note with an unknown id"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9f03d18-973e-4844-bb07-965e3296f1d8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dc7fd766-2c81-4361-9492-d4cf060b68d1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT note-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types/{id} - 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0067d5da-44ba-415c-87e9-e5b6d24a374e",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Name is changed\", function () {",
													"        pm.expect(res.json().name).to.equal(\"Test - Updated\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97488430-53e3-4729-8c50-a0d472b42e14",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Test - Updated\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId-creating-in-post}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - (empty name)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3e703df9-0e2c-45f4-a213-998c2408512e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b5bbbd11-c0bb-451e-b530-0f344f115418",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Name is changed\", function () {",
													"        pm.expect(res.json().name).to.equal(\"\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId-creating-in-post}}"
											]
										},
										"description": "Update an existing note with JSON body missing the required \"text\" field."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5065d71a-6081-4a0a-9232-c6272104b1e0",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative lang parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n \\'typeId\\' parameter is incorrect. parameter value {12345} is not valid: must match \"  +",
													"    \"\\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2fb6be00-c5e3-4c48-848f-3ba2a9ba8235",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Invalid Format URl\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"12345"
											]
										},
										"description": "Updates an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10decd4c-4e50-42f9-b4e4-2c5bda9e10b5",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"note.types.item.put\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c5b1d8d4-164f-4277-b650-2873cd7796e7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57c50f19-e62c-484d-8818-070e7a921b1f",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f8598c2a-b7e0-4979-ae0b-172b198661d0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Not Found\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeIdNotExisting}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeIdNotExisting}}"
											]
										},
										"description": "Updates an existing note with an unknown id"
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45d4416e-1ba5-4da8-97fb-f11300e20691",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ab404598-8e6e-47a6-9fc8-155fc0cdbf2b",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Error message exist\", function() {",
													"    pm.expect(response.errors[0].message).to.eq(\"may not be null\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Update an existing note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 422 (unknown field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7a19e868-f00f-4f4f-9a0d-7a58b4608351",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cdb9f872-fb2c-458c-853d-5db01e309bc0",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Name\",\n\t\"xyzzy\": \"867-5309\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cc756eca-46eb-493e-a568-7db8e79ede09",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "70bb6f3e-6098-43f7-80bb-4fa61ea2db55",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"/items/xxxxxx\",\n\t\"text\": \"xxxxxxxx\",\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE note-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types/{{noteTypeId-creating-in-post}} - 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "41f840f9-26e3-4d83-a9ff-924f64bea80a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c4e1e663-72a6-4db5-811a-c9f6d7242f78",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Note does not exist\", function () {",
													"         res.code === 404;",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId-creating-in-post}}"
											]
										},
										"description": "Create a new note"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74ec82d8-e55f-418a-9232-bf07b46a9237",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.expect(pm.response.text()).to.include(\"'id' parameter is incorrect\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2bd8ab43-d57d-4c09-8817-9615b6ddfbaa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{incorrectNoteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{incorrectNoteTypeId}}"
											]
										},
										"description": "Deletes an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b04c07c-1e75-445b-a6f9-b463d8e5855e",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.item.delete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "abade3d6-5d08-467c-be76-d553ae47edab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dd83523-d0e5-4b44-8673-6e2c8a46eff0",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4763dae3-6f1f-4146-854f-dd4ff4e463a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Oakpi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Deletes an existing note with an unknown id"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7674eb7-9304-4fb4-9677-af2e43858b46",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3e2cf64-563b-4edb-9b60-17e67de886de",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e3062b04-e84f-4f18-9c67-4c3d79f05f1c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a6cee024-15fb-4d8a-9e9d-bf23de8a0368",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_noteTypeItem.json\", pm.environment.get(\"schema_noteTypeItem\"));",
							" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							" tv4.addSchema(\"schema_noteTypeUsage.json\", pm.environment.get(\"schema_noteTypeUsage\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "note links",
			"item": [
				{
					"name": "GET note-links with domain",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 collection of notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "919be3d5-ef3e-46c7-bdeb-125251d164b1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.at.most(10);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "27da3e9f-acff-4298-b282-6a987233100d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 with assigned param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6519ed2-f7b1-4490-b699-340912d84806",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    allNotesHaveLink = response.notes.every((note) => ",
													"    containsLink(note, pm.environment.get(\"linkId\"), pm.environment.get(\"typeLink\")));",
													"    ",
													"    pm.expect(allNotesHaveLink).eq(true)",
													"});",
													"",
													"function containsLink(note, linkId, linkType){",
													"    return note.links.filter(link => ",
													"        link.id === pm.environment.get(\"linkId\") && ",
													"        link.type === pm.environment.get(\"typeLink\")",
													"        )",
													"        .length > 0;",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0983d0be-1ff0-4bb4-b32c-b09260551992",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?status=ASSIGNED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "status",
													"value": "ASSIGNED"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 status UNASSIGNED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "925b0080-1f04-4951-8e3c-3abc7c81ee36",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    anyNoteHasLink = response.notes.any((note) => ",
													"    containsLink(note, pm.environment.get(\"linkId\"), pm.environment.get(\"typeLink\")));",
													"    ",
													"    pm.expect(anyNoteHasLink).eq(false)",
													"});",
													"",
													"function containsLink(note, linkId, linkType){",
													"    return note.links.filter(link => ",
													"        link.id === pm.environment.get(\"linkId\") && ",
													"        link.type === pm.environment.get(\"typeLink\")",
													"        )",
													"        .length > 0;",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d84a647f-b2c6-4250-8b99-14d16c992b0e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?status=UNASSIGNED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "status",
													"value": "UNASSIGNED"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 order asc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e50989ff-c459-490d-8cb2-5cc66de0d4ee",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes[0].links.length).to.be.at.least(2);",
													"    ",
													"    let note = response.notes[0];",
													"    pm.expect(containsLink(note, pm.environment.get(\"linkId\"), pm.environment.get(\"typeLink\"))).eq(true);",
													"});",
													"",
													"function containsLink(note, linkId, linkType){",
													"    return note.links.filter(link => ",
													"        link.id === pm.environment.get(\"linkId\") && ",
													"        link.type === pm.environment.get(\"typeLink\")",
													"        )",
													"        .length > 0;",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e019e30e-0888-42c3-89b2-4e986a0b7bf0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?status=ALL&order=asc&orderBy=status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "status",
													"value": "ALL"
												},
												{
													"key": "order",
													"value": "asc"
												},
												{
													"key": "orderBy",
													"value": "status"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 order desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fea5d131-cd75-4362-8fc9-a09ddd32b030",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    let note = response.notes[0];",
													"    pm.expect(containsLink(note, pm.environment.get(\"linkId\"), pm.environment.get(\"typeLink\"))).eq(false);",
													"});",
													"",
													"function containsLink(note, linkId, linkType){",
													"    return note.links.filter(link => ",
													"        link.id === pm.environment.get(\"linkId\") && ",
													"        link.type === pm.environment.get(\"typeLink\")",
													"        )",
													"        .length > 0;",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8f0ce4aa-6d41-4366-be91-e86984bc63e2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?order=desc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 orderBy title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e12b36f-01b0-4e2d-ad45-fbca4cbe0608",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    let firstNote = response.notes[0];",
													"    let lastNote = response.notes[response.notes.length - 1];",
													"    ",
													"    pm.expect(firstNote.title < lastNote.title).eq(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ebb1db4b-945a-4619-8324-0e4b05a3337b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=title&order=asc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "title"
												},
												{
													"key": "order",
													"value": "asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 orderBy title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72e042d7-7799-44ac-908b-df28374b9383",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    let firstNote = response.notes[0];",
													"    let lastNote = response.notes[response.notes.length - 1];",
													"    ",
													"    pm.expect(firstNote.title > lastNote.title).eq(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb7eaa71-8eb1-4ec7-9313-28fb873f8531",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=title&order=desc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "title"
												},
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 orderBy noteType desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c57f12e0-3070-49be-8236-299d5abfef67",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    let firstNote = response.notes[0];",
													"    let lastNote = response.notes[response.notes.length - 1];",
													"",
													"    pm.expect(firstNote.typeId).eq(pm.environment.get(\"noteTypeIdSecond\"));",
													"    pm.expect(lastNote.typeId).eq(pm.environment.get(\"noteTypeId\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "561e4388-dd5b-447b-8b1e-7482e07d13ed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=noteType&order=desc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "noteType"
												},
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 orderBy updatedDate asc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d06bb2e-4176-4c64-a80d-06cfde070fce",
												"exec": [
													"const moment = require(\"moment\");",
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    let firstNote = response.notes[0];",
													"    let earlierTimestamp = moment(firstNote.metadata.updatedDate);",
													"    ",
													"    let lastNote = response.notes[response.notes.length - 1];",
													"    let lastTimestamp = moment(lastNote.metadata.updatedDate);",
													"    ",
													"    pm.expect(earlierTimestamp.isBefore(lastTimestamp));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b67ddce-3979-4efb-9ef9-79872cadf06c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=updatedDate&order=asc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "updatedDate"
												},
												{
													"key": "order",
													"value": "asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 orderBy updatedDate desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6574d06d-e115-4018-98d7-897ca75a1abf",
												"exec": [
													"const moment = require(\"moment\");",
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    let firstNote = response.notes[0];",
													"    let earlierTimestamp = moment(firstNote.metadata.updatedDate);",
													"    ",
													"    let lastNote = response.notes[response.notes.length - 1];",
													"    let lastTimestamp = moment(lastNote.metadata.updatedDate);",
													"    ",
													"    pm.expect(earlierTimestamp.isAfter(lastTimestamp));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcb42656-1f9d-45fe-8cfd-74d5ef3623b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=updatedDate&order=desc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "updatedDate"
												},
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 search title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e54ce16-f59d-4d15-a11a-6f4c30d3378a",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    pm.expect(response.notes[0].title.includes(\"Title\")).eq(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a8725d7c-926a-4be8-9b39-b9ee48810b5e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?search=Title ",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "search",
													"value": "Title "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 limit and offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22b6c268-4fde-433d-bc3d-e8553b45c571",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bf37b3e5-d40d-46f6-8506-3b4c0049fb4a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?limit=1&offset=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 nonexisting link id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae3c705e-e245-460d-a471-ffc2161efad5",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.at.most(10);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0cdc2e5f-025d-4ac2-8775-61cd48c55613",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{nonExistingId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{nonExistingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 with noteType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8509e237-a6c4-4d34-819e-955159117619",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.equal(2);",
													"});",
													"",
													"pm.test(\"validate note type id\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes[0].typeId).to.be.equal(pm.environment.get(\"noteTypeId\"));",
													"    pm.expect(response.notes[1].typeId).to.be.equal(pm.environment.get(\"noteTypeId\"));",
													"})",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "998abc09-4ca3-4dcf-8f00-09548dd5c404",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?noteType={{noteTypeName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "noteType",
													"value": "{{noteTypeName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 with two noteTypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2183f611-941a-4c92-956a-91b08cdce769",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.equal(3);",
													"});",
													"",
													"pm.test(\"validate note type id\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes[0].typeId).to.be.oneOf([pm.environment.get(\"noteTypeId\"), pm.environment.get(\"noteTypeIdSecond\")]);",
													"    pm.expect(response.notes[1].typeId).to.be.oneOf([pm.environment.get(\"noteTypeId\"), pm.environment.get(\"noteTypeIdSecond\")]);",
													"    pm.expect(response.notes[2].typeId).to.be.oneOf([pm.environment.get(\"noteTypeId\"), pm.environment.get(\"noteTypeIdSecond\")]);",
													"})",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c5bb34fd-3630-43fa-b163-6f6987bfd9ce",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?noteType={{noteTypeName}}&noteType={{noteTypeNameSecond}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "noteType",
													"value": "{{noteTypeName}}"
												},
												{
													"key": "noteType",
													"value": "{{noteTypeNameSecond}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 with non existing noteType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "247977b8-75b4-4dbd-8c10-7eb130f54ff2",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3d57e61-43b8-44db-b553-62faa6fc3d6d",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"nonExistingNoteTypeId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?noteType={{nonExistingNoteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "noteType",
													"value": "{{nonExistingNoteTypeId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 incorrect params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e89956ab-c18f-4bab-8f05-00bbed5b9926",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Status is incorrect: incorrect. Possible values: ASSIGNED, UNASSIGNED, ALL\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48be7dc4-3f07-4589-9252-88ec9eb16d67",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?status=incorrect",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "status",
													"value": "incorrect"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 empty order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39b0574c-0579-43fd-a8dc-6aae8bd16421",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Order is incorrect: . Possible values: asc, desc\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4510be8d-5956-4822-b047-a08044b56a73",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?order=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "order",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 incorrect limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca7ab29-7565-4c98-a3f4-03f29b1ac9b1",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'limit' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9ff0dd21-e9f5-402e-a9fe-507da710c6ca",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 empty offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c1480f1-2839-4fd3-89ee-2de92cd6c9b0",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"offset does not have a default value in the RAML and has been passed empty\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4cfb0168-9982-414a-bdc8-8e762dfa068f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?offset=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "offset",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 incorrect orderBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0eca30a3-3f84-4dac-a62a-d37b5fbda97d",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"OrderBy is incorrect: updatedate. Possible values: status, title, linksNumber, noteType, updatedDate\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52bae7ed-2baa-4316-9413-14977475d6eb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=noteype",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "noteype"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 incorrect orderBy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb3daa48-33e8-4ad4-a55f-1092d39f47d2",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"OrderBy is incorrect: updatedate. Possible values: status, title, linksNumber, noteType, updatedDate\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44a49e19-7041-4248-8207-fe995afc5bb8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=updatedate&order=desc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "updatedate"
												},
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "teardow for links",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a09819c-839b-413e-bc07-aaeee48d333a",
										"exec": [
											"pm.test(\"success test - 204 and no body\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.be.withBody;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd953a6e-7091-4f95-869c-41a00ab51065",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteIdSecond}}\",\r\n      \"status\" : \"UNASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"note-links",
										"type",
										"{{typeLink}}",
										"id",
										"{{linkId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT note-links with domain",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-links/type/{{typeLink}}/id/{{linkId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "731bb3dc-57f1-4977-85e2-62173579d48a",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"nonExistingId\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\")",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Status not found\", function() {",
													"    pm.expect(res.status).eq(\"Not Found\");",
													"});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b12e28f5-b144-446e-a6ae-4d5a157077d7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{nonExistingId}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 empty JSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "918894fb-6c94-4ffd-910f-0dd84b93a205",
												"exec": [
													"pm.test(\"success test - 204 and empty Json\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "840c1f60-0610-4069-9369-e9ba9a287446",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 assign link to empty list of notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a5f1adc-047e-4d85-99ca-ae8edf20c66e",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4df8dbad-a2fe-49cf-8915-6e12a1783b59",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : []\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 assign link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e76e20a-6947-4f6d-94b9-78fc27f6c05a",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check second link\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"));",
													"        pm.expect(response.links[1].type).to.equal(\"package\");",
													"        pm.expect(response.links[1].id).to.equal(\"583-2356521-758039\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3089549d-6c77-4702-811d-eddbfb6f37cb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteId}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 unassign link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c07e2fa-6d01-470f-8d84-624b876bc509",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check second link\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"));",
													"        pm.expect(response.links.length === 1);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3407a863-ce80-4644-bc18-601fdd7446ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteId}}\",\r\n      \"status\" : \"UNASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 multiply assign link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9393bbd-32a2-475a-bbc8-62c14187c19e",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ae839f3f-20e8-4cd3-aee0-04377f892fed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteId}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    },\r\n     {\r\n      \"id\" : \"{{noteId-creating-in-post-second}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 200 check multiply assign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "385bbb5c-5b68-464a-b4cc-cb6c2e20b536",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"typeId does not match\");",
													"    pm.expect(response.type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.title).to.equal(pm.environment.get(\"noteTitle\"), \"title does not match\");",
													"    pm.expect(response.content).to.equal(pm.environment.get(\"noteContent\"), \"title does not match\");",
													"    pm.expect(response.domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"});",
													"",
													"pm.test(\"Check quantity of links\", function () {",
													"    pm.expect(response.links.length).to.eq(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60ed3f52-11d8-4757-87f5-9c0e388e2a2c",
												"exec": [
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId-creating-in-post-second\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check third link\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.id).to.equal(pm.environment.get(\"noteId-creating-in-post-second\"));",
													"        pm.expect(response.links.length).to.eq(2);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Returns an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 multiply unassign link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d29fc2a2-86e1-48bd-842e-c8d308938d53",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b60b761e-9d32-46b5-8ecf-060210c2f953",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteId}}\",\r\n      \"status\" : \"UNASSIGNED\"\r\n    },\r\n     {\r\n      \"id\" : \"{{noteId-creating-in-post-second}}\",\r\n      \"status\" : \"UNASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 200 check multiply unassign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a526600-063b-4a97-a3fc-0b1ca0b78fd8",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"typeId does not match\");",
													"    pm.expect(response.type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.title).to.equal(pm.environment.get(\"noteTitle\"), \"title does not match\");",
													"    pm.expect(response.content).to.equal(pm.environment.get(\"noteContent\"), \"title does not match\");",
													"    pm.expect(response.domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"});",
													"",
													"pm.test(\"Check quantity of links\", function () {",
													"    pm.expect(response.links.length).to.eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3cc35b60-8425-4d8c-bb56-bf2a99528faa",
												"exec": [
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId-creating-in-post-second\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check third link\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.id).to.equal(pm.environment.get(\"noteId-creating-in-post-second\"));",
													"        pm.expect(response.links.length).to.eq(1);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Returns an existing note"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-links/type/{type}/id/{id}/ - 422 assign link without field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca51097e-7590-47af-ae12-8bfa0e7356a0",
												"exec": [
													"pm.test(\"422 test - bad lang\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"pm.test(\"Validate schema\", function () {",
													"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8d10e555-b096-4158-b5c2-5143fe6d1aa4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{nonExistingId}}\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 400 assign link without body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ad972a5-1408-4dd2-af72-7d6d9ee9654d",
												"exec": [
													"pm.test(\"400 test - invalid request\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Json content error HV000116: The object to be validated must not be null.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7fb37d5-d32d-4981-b497-118262cd65b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 422 assign link with unknown field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d79a69fb-b7a8-4608-b067-fd7fdf97bf51",
												"exec": [
													"pm.test(\"422 test - invalid request\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6f362d1-97b9-47bd-8dbc-4640e5ad6f39",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"unknownField\" : \"{{noteId}}\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e6961f2a-a39a-4336-bb98-303f4a9e3f55",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "050a7b73-2fbe-474c-8770-a849f49e5d9f",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
							" tv4.addSchema(\"schema_note.json\", pm.environment.get(\"schema_note\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "limit config",
			"item": [
				{
					"name": "Check if type config exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "637c103a-4529-41bd-852c-51359805229c",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if(jsonData.configs.length > 0) {",
									"    if(jsonData.configs[0].value !== pm.environment.get(\"config-value-three\")){",
									"        pm.environment.set(\"config-value\", jsonData.configs[0].value);",
									"        pm.environment.set(\"notes-config-id\", jsonData.configs[0].id);",
									"        pm.sendRequest({",
									"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/configurations/entries/\" + jsonData.configs[0].id,",
									"        method: 'PUT',",
									"        header: {",
									"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"            'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"            'Content-Type': 'application/json'",
									"        },",
									"         body: {",
									"           mode: 'raw',",
									"            raw:  JSON.stringify({",
									"                \"module\": \"NOTES\",",
									"                \"configName\": \"api_access\",",
									"                \"code\": \"note.types.number.limit\",",
									"                \"value\": pm.environment.get(\"config-value-three\")",
									"            })",
									"        }",
									"    }, function(err, res) {",
									"        pm.test(\"Status no content\", function() {",
									"        pm.expect(res.status).eq(\"No Content\");",
									"        });",
									"    });",
									"    }",
									"    postman.setNextRequest(\"POST create note-type for tests\");",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e0f4331-dacf-42d0-b144-4d98fdc50117",
								"exec": [
									"pm.environment.set(\"config-value-three\",3)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==NOTES and code==note.types.number.limit)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==NOTES and code==note.types.number.limit)"
								}
							]
						},
						"description": "Check if limit configuration has already been configured for test user.  If so, update existing configuration settings"
					},
					"response": []
				},
				{
					"name": "/configurations/entries - POST note types limit to 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe9d3d69-2401-4360-baf6-a5c7e0b1ae9a",
								"exec": [
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var response = pm.response.json();",
									"",
									"//Value of records is 3",
									"pm.test(\"Value matches 3\", function () {",
									"    pm.expect(response.value).to.eq(\"3\");",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});",
									"",
									"let body = JSON.parse(responseBody);",
									"if(response){",
									"pm.environment.set(\"notes-config-id\", body.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"module\": \"NOTES\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"note.types.number.limit\",\r\n    \"value\": \"3\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create note-type for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1294ae93-df4d-4667-992d-d600220022ba",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteType-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06442375-ce31-4c14-8d07-8f6e99b43af9",
								"exec": [
									"pm.test(\"400 test - max number of records\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"Response having negative limit parameter error message\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.have.body(\"Maximum number of note types allowed is 3\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test - {{noteType-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/configurations/entries - DELETE config with limit 3",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{notes-config-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{notes-config-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create note-type for tests after deleting config",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca5ea7ec-a7dd-4d1d-a1fd-2346cfd36bc2",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteTypeConf-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a264719-5a63-4861-b731-58caac208ae4",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var response = pm.response.json();",
									"",
									" pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test('expected attributes are present', function() {",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response).to.include.all.keys(\"id\", \"name\");",
									"});",
									"",
									"if(response.id){",
									"pm.environment.set(\"noteTypeId-creating-for-test-config\", response.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test - {{noteTypeConf-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if type config exists after changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b57549fd-5c39-4dc8-a1ce-930d1d53e1cd",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if(jsonData.configs.length === 0) {",
									"        pm.sendRequest({",
									"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/configurations/entries\",",
									"        method: 'POST',",
									"        header: {",
									"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"            'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"            'Content-Type': \"application/json\"",
									"        },",
									"        body: {",
									"           mode: 'raw',",
									"            raw:  JSON.stringify({",
									"                \"module\": \"NOTES\",",
									"                \"configName\": \"api_access\",",
									"                \"code\": \"note.types.number.limit\",",
									"                \"value\": pm.environment.get(\"config-value\")",
									"            })",
									"        }",
									"    }, function(err, res) {",
									"        pm.test(\"Status created\", function() {",
									"        pm.expect(res.status).eq(\"Created\");",
									"        });",
									"    });",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e0d55d4b-98bd-4768-9935-b0ee673abb9e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==NOTES and code==note.types.number.limit)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==NOTES and code==note.types.number.limit)"
								}
							]
						},
						"description": "Check if limit config has already been configured for test user.  If not, post new configuration settings with old values"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e480b06b-6635-40f9-838f-574af38a1434",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0cc9517c-1412-4d06-81e5-2eced821b536",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_noteTypeItem.json\", pm.environment.get(\"schema_noteTypeItem\"));",
							"  tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "teardown notes",
			"item": [
				{
					"name": "DELETE testing note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "01a585f9-7582-49bf-bfac-1d192d9fc7e3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9ed23d-2e44-47c6-915a-26083b9f4468",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteId\");",
									"pm.environment.unset(\"noteContent\");",
									"pm.environment.unset(\"noteTitle\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE second testing note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "93155399-8806-4c4b-a9b5-e108dfebca4f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84406559-734b-4de4-8374-6697ba9760ef",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteIdSecond\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteIdSecond}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes",
								"{{noteIdSecond}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/note/{{noteId-creating-in-post-second}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28a1e356-f4f0-483c-8e37-5b3f1bd77eba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9bf31fa4-a049-42b9-b598-63e028b7bf58",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post-second\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"}, function(err, res) {",
									"    pm.test(\"Note does not exist\", function () {",
									"         res.code === 404;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post-second}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes",
								"{{noteId-creating-in-post-second}}"
							]
						},
						"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "teardown note-types",
			"item": [
				{
					"name": "/note-types/{{noteType-creating-in-post-second}} - 201",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bbd9f51-1590-4829-9842-9848e4c413fb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be485b6a-5770-4a57-82ed-7e4323ffdea8",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post-second\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"}, function(err, res) {",
									"    pm.test(\"Note does not exist\", function () {",
									"         res.code === 404;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-in-post-second}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeId-creating-in-post-second}}"
							]
						},
						"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
					},
					"response": []
				},
				{
					"name": "DELETE testing note-type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "185a97a8-dad4-41ec-ad61-a4ed5d910289",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7fc4b674-e95d-40ec-b41a-027f6307ed31",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteTypeId\");",
									"pm.environment.unset(\"noteTypeName\");",
									"pm.environment.unset(\"noteTypeIdNotExisting\");",
									"pm.environment.unset(\"incorrectNoteTypeId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE second testing note-type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1edfd2cf-191a-4489-a3d2-15355aa14da9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a2a6601-1300-4f68-9389-1d72170a800e",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteTypeIdSecond\");",
									"pm.environment.unset(\"noteTypeNameSecond\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeIdSecond}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeIdSecond}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE note-type after limit test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03ca101e-dc7b-498d-8506-331454a85538",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "743c2e87-a4ef-49c7-b03d-7abe8baee233",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteTypeId-creating-for-test-config\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-for-test-config}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeId-creating-for-test-config}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f8a9b831-9e86-4b27-adcb-b900626e5b0d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2c6c04b6-e5a3-4e65-b5b8-6eaec703c855",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}