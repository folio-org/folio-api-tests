{
	"info": {
		"_postman_id": "333484d8-41bd-44b3-b8c8-db2b4e96612b",
		"name": "mod-gobi",
		"description": "Tests for mod-gobi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "458e788d-f4f1-4a2e-bf7f-dce99511f09a",
										"exec": [
											"pm.test(\"Preparing request to create test tenant. Tenant creation might take up to 1 minute...\", () => {",
											"    pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b46996e-04ac-475d-8d3a-fe8947e8db87",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - created (201) or already exists (400 with Duplicate tenant id error)\", () => {",
											"    pm.expect(pm.response.code).be.oneOf([201, 400]);",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response.text()).to.include(\"Duplicate tenant id\");",
											"        purgeMudulesData();",
											"    } else {",
											"        // All is okay, running further requests",
											"        postman.setNextRequest();",
											"    }",
											"});",
											"",
											"function purgeMudulesData() {",
											"    let utils = eval(globals.loadUtils);",
											"    let tenantBaseUrl = utils.buildOkapiURL(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\"));",
											"    pm.sendRequest(tenantBaseUrl + \"/modules\", (err, res) => {",
											"        let modulesToDisable = null;",
											"        pm.test(\"Preparing request to disable modules if any installed before...\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res.code).to.equal(200);",
											"",
											"            modulesToDisable = res.json();",
											"            modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"            console.log(modulesToDisable);",
											"        });",
											"",
											"        if (modulesToDisable !== null) {",
											"            // In case the response indicates that there are some modules are already installed, their data have to be purged first",
											"            if (modulesToDisable.length > 0) {",
											"                pm.sendRequest({",
											"                    url: tenantBaseUrl + \"/install?purge=true\",",
											"                    method: \"POST\",",
											"                    header: {",
											"                        \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\"),",
											"                        \"Content-type\": \"application/json\"",
											"                    },",
											"                    body: JSON.stringify(modulesToDisable)",
											"                }, (error, response) => {",
											"                    pm.test(\"Purging the data for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                        pm.expect(error).to.equal(null);",
											"                        pm.expect(response).to.be.ok;",
											"                        // All the data have been purged. Now wait for a minute and run next request",
											"                        setTimeout(() => postman.setNextRequest(), 61000);",
											"                    });",
											"                });",
											"            } else {",
											"                pm.test(\"No modules to purge for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                    // Run next request",
											"                    postman.setNextRequest();",
											"                });",
											"            }",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-gobi\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiURL('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add gobi.all permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"limitedPrivPermId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create user without any permissions",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.noPerms.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.users.noPerms.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.noPerms.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.users.noPerms.user.username + \" user's permissions created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"limitedPrivPermId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.noPerms.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-user2\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.noPerms.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pre-requisite data",
					"item": [
						{
							"name": "Finance data",
							"item": [
								{
									"name": "Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
												"exec": [
													"pm.test(\"Ledger is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"ledgers"
											]
										},
										"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Fund",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
												"exec": [
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"TST-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"funds"
											]
										},
										"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Organizations",
							"item": [
								{
									"name": "/organizations-storage/organizations  - POST GOBI Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf46482a-5904-4297-a271-fa22d682771c",
												"exec": [
													"pm.test(\"Vendor was created. Status is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"GOBI Library Systems\",\n  \"code\": \"GOBI\", \n  \"status\": \"Active\",\n  \"language\": \"en-us\",\n  \"isVendor\": true\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"organizations-storage",
												"organizations"
											]
										},
										"description": "Create a new Organization with name GOBI, which is a vendor"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Inventory",
							"item": [
								{
									"name": "Contributor name type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
												"exec": [
													"pm.test(\"Contributor Name Type created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"6d6f642d-0005-1111-aaaa-6f7264657273\",\n    \"name\": \"GOBI API Tests type\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"contributor-name-types"
											]
										},
										"description": "Gets or creates if not yet exists test contributor name type. This is required if no reference data is available in inventory storage."
									},
									"response": []
								},
								{
									"name": "ISBN Identifier Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"identifier-types"
											]
										},
										"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
									},
									"response": []
								},
								{
									"name": "Material Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"material-types"
											]
										},
										"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Institution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"pm.test(\"Record is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \"Universitet\",\n    \"code\": \"TU\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"location-units",
												"institutions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Campus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"pm.test(\"Record is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \" Campus\",\n    \"code\": \"TC\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"location-units",
												"campuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Library",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"pm.test(\"Record is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"name\": \"Library\",\n    \"code\": \"TL\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"location-units",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Service point",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"pm.test(\"Record is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"name\": \"Service point\",\n    \"code\": \"TSP\",\n    \"discoveryDisplayName\": \"Service point 1\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"service-points"
											]
										}
									},
									"response": []
								},
								{
									"name": "Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"pm.test(\"Location is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"b32c5ce2-6738-42db-a291-2796b1c3c4c6\",\n    \"name\": \"Location 1\",\n    \"code\": \"LOC1\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"locations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instance Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"zzz\",\r\n  \"name\": \"Orders default type\",\r\n  \"source\": \"apiTests\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"instance-types"
											]
										},
										"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Instance Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"temp\",\r\n  \"name\": \"Orders default status code\",\r\n  \"source\": \"apiTests\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"instance-statuses"
											]
										},
										"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Loan Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\",\r\n  \"name\": \"Can circulate\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"loan-types"
											]
										},
										"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "ISBN Qualifier",
					"item": [
						{
							"name": "/gobi/orders (ISBN qualifier)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba67fd6b-2941-4f3d-a167-c4154a58e13d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fdb8eea7-15e1-4b4e-921b-b645972bffe5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonData = xml2Json(responseBody);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
											"});",
											"",
											"pm.test(\"PoLineNumber is returned\", function() {",
											"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
											"});",
											"",
											"pm.test(\"PoLineNumber is valid\", function() {",
											"    let polNumber = jsonData.Response.PoLineNumber;",
											"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
											"});",
											"",
											"pm.test(\"Qualifier is populated to a separate field\", function(){",
											"    utils.getOrder(jsonData.Response.PoLineNumber, (err,res) => {",
											"        let poLine = res.json().poLines[0];",
											"        pm.expect(poLine.details.productIds[0].qualifier).to.equal(\"(HardCover)\");",
											"        pm.expect(poLine.details.productIds[0].productId).to.equal(\"9780547572482\");",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<PurchaseOrder>\n  <CustomerDetail>\n    <BaseAccount>8910</BaseAccount>\n    <SubAccount>891010</SubAccount>\n  </CustomerDetail>\n  <Order>\n    <ListedPrintMonograph>\n      <collection>\n        <record>\n          <leader>00000nam a2200000u  4500</leader>\n          <controlfield tag=\"001\">99974828471</controlfield>\n          <controlfield tag=\"003\">NhCcYBP</controlfield>\n          <controlfield tag=\"005\">20180905153857.0</controlfield>\n          <controlfield tag=\"008\">180905t20112011xx ||||||||||||||   eng d</controlfield>\n          <datafield tag=\"020\" ind1=\" \" ind2=\" \">\n            <subfield code=\"a\"> 9780547572482 (print)</subfield>\n            <subfield code=\"c\">14.95</subfield>\n            <subfield code=\"q\">(HardCover)</subfield>\n          </datafield>\n          <datafield tag=\"035\" ind1=\" \" ind2=\" \">\n            <subfield code=\"a\">(OCoLC)717297695</subfield>\n          </datafield>\n          <datafield tag=\"100\" ind1=\"1\" ind2=\" \">\n            <subfield code=\"a\">DICK, PHILIP K</subfield>\n          </datafield>\n          <datafield tag=\"245\" ind1=\"1\" ind2=\"0\">\n            <subfield code=\"a\">MAN IN THE HIGH CASTLE.</subfield>\n          </datafield>\n          <datafield tag=\"260\" ind1=\" \" ind2=\" \">\n            <subfield code=\"a\">BOSTON</subfield>\n            <subfield code=\"b\">MARINER BOOKS</subfield>\n            <subfield code=\"c\">2011</subfield>\n          </datafield>\n        </record>\n      </collection>\n      <OrderDetail>\n        <FundCode>USHIST</FundCode>\n        <Location>KU/CC/DI/A</Location>\n        <Quantity>2</Quantity>\n        <YBPOrderKey>99974828479</YBPOrderKey>\n        <OrderPlaced>2018-09-05T15:38:55</OrderPlaced>\n        <Initials>Mark</Initials>\n        <ListPrice>\n          <Amount>14.95</Amount>\n          <Currency>USD</Currency>\n        </ListPrice>\n        <NetPrice>\n          <Amount>13.16</Amount>\n          <Currency>USD</Currency>\n        </NetPrice>\n        <LocalData>\n          <Description>LocalData1</Description>\n          <Value>Book</Value>\n        </LocalData>\n        <LocalData>\n          <Description>LocalData2</Description>\n          <Value>Notify requester upon receipt</Value>\n        </LocalData>\n        <LocalData>\n          <Description>LocalData3</Description>\n          <Value>Anne Esterhazy</Value>\n        </LocalData>\n        <LocalData>\n          <Description>LocalData4</Description>\n          <Value>signed-edition,vip-order</Value>\n        </LocalData>\n      </OrderDetail>\n    </ListedPrintMonograph>\n  </Order>\n</PurchaseOrder>"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"gobi",
										"orders"
									]
								},
								"description": "Send a request with ISBN qualifier on a separate sub field and also appended to the productId subfield. The Po Line details must have qualifier from sub field populated and also strip out the qualifier present in the product Id field"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "/validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6566d89-e8ea-4fca-a388-d40938eb27f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/validate POST",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6566d89-e8ea-4fca-a388-d40938eb27f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed print monograph)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07624dc-c22d-4952-8d93-b85401f7458c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d36fe8-71fe-4b6b-9f1e-32cef766ef90",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"    pm.globals.set(\"duplicatePOLineNumber\", polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "create duplicate /gobi/orders listed print monograph",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07624dc-c22d-4952-8d93-b85401f7458c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d36fe8-71fe-4b6b-9f1e-32cef766ef90",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"let existingPolNumber = pm.globals.get(\"duplicatePOLineNumber\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"An existing PoLineNumber is returned\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"    pm.expect(polNumber).to.equal(existingPolNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						},
						"description": "validating a case where creating a duplicate Order with same YBPOrderNumber, must not create a new Order, but must return the existing Order"
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed electronic monograph)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba67fd6b-2941-4f3d-a167-c4154a58e13d",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdb8eea7-15e1-4b4e-921b-b645972bffe5",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed print serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "97bf73f4-bcfb-4f68-8b67-c65ffc12120c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_serial\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ce0cff0-60aa-4941-b876-854cc9456c97",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed electronic serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4951c45a-52cc-47b3-b1d0-d5267dd1c1b2",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_serial\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb8d424d-e53e-46a0-bc72-75d5aabcdd65",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let polNumber;",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});",
									"",
									"pm.test(\"cleanup Created Order\", function() {",
									"    // This order has to be deleted (because it is going to be created in Tenant Configuration Tests)",
									"    utils.getAndDeleteOrder(polNumber);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (unlisted print monograph)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4d0c278-0d94-4672-a0ff-404ec22de58e",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_unlisted_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_unlisted_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3a5cc5c1-f90f-4a64-90d7-b6e9b7e6dd98",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_unlisted_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders (unlisted print serial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad293aeb-90c0-4785-ba61-05f0f2b81556",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_unlisted_print_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_unlisted_print_serial\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad69215a-c9b8-49b5-8f40-bdbcff98c8ea",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_unlisted_print_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "/validate - user with no permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4173f87a-ccce-4068-9df5-56e1b067aa28",
								"exec": [
									"pm.test(\"Passing in a token that's associated with a user who doesn't have permission\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.text()).to.equal(\"Access requires permission: gobi.item.post\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c43b37e9-f824-4875-8ca3-9a0d7a79ec64",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-user2}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/validate - with no Okapi token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbb18ac2-ef0d-4155-b224-f05522eab603",
								"exec": [
									"pm.test(\"Calling gobi/validate without a token\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.text()).to.equal(\"Access requires permission: gobi.item.post\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{testTenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders - with no Okapi token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "81ca7881-c4c6-4c35-8d27-009082f8a66a",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "745213f3-d4b6-41bc-8fcc-41e67da9981f",
								"exec": [
									"pm.test(\"Calling gobi/orders without a token\", function () {",
									"    pm.response.to.have.status(403);",
									"    pm.expect(pm.response.text()).to.equal(\"Access requires permission: gobi.item.post\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{testTenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/gobi/orders - user with no permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4173f87a-ccce-4068-9df5-56e1b067aa28",
								"exec": [
									"pm.test(\"Passing in a token that's associated with a user who doesn't have permission\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b92b6f80-4b2a-4c45-934d-a44f741eb324",
								"exec": [
									"",
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_print_monograph.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_print_monograph\", res.text());     ",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-user2}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						},
						"description": "verify user cannot perform POST without permissions.\nThe xokapitoken is reset to the admin token as it is needed for cleanup"
					},
					"response": []
				},
				{
					"name": "/gobi/orders (bad data)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ac0fafac-c88b-45ac-9664-3deaf5a5b3b4",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_monograph_bad_data.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_monograph_bad_data\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6dfc9c54-13d6-4415-9c5a-fd3209c02b5c",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"Error XML is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('Error');",
									"    pm.expect(jsonData.Response.Error).to.have.property('Code', 'INVALID_XML');",
									"    pm.expect(jsonData.Response.Error).to.have.property('Message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_monograph_bad_data}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tenant Configuration Tests",
			"item": [
				{
					"name": "/configurations/entries - Set Override Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a666e96-205a-4f75-ad7b-3a7a17add0b9",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"var jsonData = pm.response.json();",
									"let configBody = globals.configBody;",
									"",
									"let configs = [];",
									"pm.test(\"Storing current configs\", function () {",
									"    pm.response.to.be.ok;",
									"",
									"    configs = pm.response.json().configs;",
									"    console.log(\"Original configs: \" + configs);",
									"    pm.environment.set(\"mod-gobi-override-configs\", JSON.stringify(configs));",
									"});",
									"",
									"configBody.code = \"gobi.order.ListedElectronicSerial\";",
									"",
									"pm.sendRequest({",
									"        url: pm.variables.get(\"tenantOverrideConfigURL\"),",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"     pm.test(\"Check if custom mapping is found\", function(){",
									"        pm.expect(res).to.have.property('code', 200);",
									"         });",
									"    if(res.code == 200){",
									"        if(configs.length>0){",
									"            configs[0].value = res.text();",
									"            utils.updateConfig(configs[0]);",
									"        } else{",
									"            configBody.value = res.text();",
									"            utils.createConfig(configBody);",
									"        }",
									"        }",
									"    }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-testAdmin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==GOBI AND configName==orderMappings AND code=gobi.order.ListedElectronicSerial",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "module==GOBI AND configName==orderMappings AND code=gobi.order.ListedElectronicSerial"
								}
							]
						},
						"description": "Create a new configuration for ListedElectronic serial. If a configuration already exists, store it to be reverted to later."
					},
					"response": []
				},
				{
					"name": "/gobi/orders (listed Electronic serial) with overrides",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f07624dc-c22d-4952-8d93-b85401f7458c",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.variables.get(\"testdataBaseURL\") + \"/po_listed_electronic_serial.xml\",",
									"        method: \"GET\"",
									"    },",
									"    function (err, res) {",
									"        pm.globals.set(\"po_listed_electronic_serial\", res.text());     ",
									"    }",
									");",
									"        "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85d36fe8-71fe-4b6b-9f1e-32cef766ef90",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('application/xml');",
									"});",
									"",
									"pm.test(\"PoLineNumber is returned\", function() {",
									"    pm.expect(jsonData.Response).to.have.property('PoLineNumber');",
									"});",
									"",
									"pm.test(\"PoLineNumber is valid\", function() {",
									"    let polNumber = jsonData.Response.PoLineNumber;",
									"    pm.expect(new RegExp('^[a-zA-Z0-9]{5,16}-[0-9]{1,3}$').test(polNumber)).to.be.true;",
									"     pm.globals.set(\"po_listed_print_monograph_poLineNumber\", polNumber);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_electronic_serial}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/gobi/orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"gobi",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "/order-lines- validate Override Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f98b70e-bbfb-43ab-8747-f332f36ad530",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"po_lines exist\", function () {",
									"    pm.expect(jsonData.poLines).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"purchase_order_id exist\", function () {",
									"    pm.expect(jsonData.poLines[0].purchaseOrderId).to.exist;",
									"      pm.globals.set(\"po_listed_print_monograph_purchaseid\", jsonData.poLines[0].purchaseOrderId);",
									"});",
									"",
									"pm.test(\"Override Values are set in Order\", function (){",
									"    pm.expect(jsonData.poLines[0].cancellationRestrictionNote).to.equal(\"Test Data\");",
									"    pm.expect(jsonData.poLines[0].donor).to.equal(\"Test Data\");",
									"    pm.expect(jsonData.poLines[0].poLineDescription).to.equal(\"Description from Custom Mapping\");",
									"    ",
									"    ",
									"})",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-testAdmin}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=999&query=poLineNumber={{po_listed_print_monograph_poLineNumber}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines"
							],
							"query": [
								{
									"key": "limit",
									"value": "999"
								},
								{
									"key": "query",
									"value": "poLineNumber={{po_listed_print_monograph_poLineNumber}}"
								}
							]
						},
						"description": "Query for the created Order and validate that the values from the Custom Tenant Overrides are used in the Order"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiURL(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "458e788d-f4f1-4a2e-bf7f-dce99511f09a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b46996e-04ac-475d-8d3a-fe8947e8db87",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					"let configBody = {",
					"    \"module\": \"GOBI\",",
					"    \"configName\": \"orderMappings\",",
					"    \"code\": \"\",",
					"    \"description\": \"Order Mappings for types\",",
					"    \"default\": true,",
					"    \"enabled\": true,",
					"    \"value\": \"\"",
					"};",
					"",
					"pm.globals.set(\"configBody\", configBody);",
					"",
					"let testData = {",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Gobi API - Admin\",",
					"                    \"lastName\": \"Gobi Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-gobi-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-gobi-user\",",
					"                \"password\": \"mod-gobi-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"gobi.all\"",
					"                ]",
					"            }",
					"        },",
					"        noPerms: {",
					"            user: {",
					"                \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"username\": \"user-without-permissions\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"No permissions\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"user-without-permissions\",",
					"                \"password\": \"user-without-permissions-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test Gobi tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    ",
					"    utils.getOrder = function(polNumber,handler) {",
					"        return utils.sendGetRequest(\"/orders/order-lines?limit=999&query=poLineNumber=\"+polNumber, handler);",
					"    }",
					"    ",
					"    /**",
					"     * Get the Order by the returned PO Line Number and then delete it",
					"     * Using admin credentials for the operation",
					"     * */",
					"    utils.getAndDeleteOrder = function(polNumber) {",
					"        utils.getOrder(polNumber, function (err, res) {",
					"            pm.test(\"Test Purchase Order is created\", function(){",
					"                pm.expect(res).to.have.property('code', 200);",
					"                pm.expect(res.json().poLines, \"One PO Lineis expected\").to.have.lengthOf(1);",
					"",
					"                let poLine = res.json().poLines[0];",
					"                pm.expect(poLine.purchaseOrderId).to.exist;",
					"",
					"                if (poLine.hasOwnProperty(\"contributors\")) {",
					"                    pm.test(\"Contributor presents\", function() {",
					"                        poLine.contributors.forEach(contributor => {",
					"                            pm.expect(contributor.contributor, \"Contributor name is expected\").to.not.be.empty;",
					"                            pm.expect(contributor.contributorNameTypeId, \"Contributor name type is expected\").to.not.be.empty;",
					"                        });",
					"                    });",
					"                }",
					"            });",
					"            utils.deleteOrder(res.json().poLines[0].purchaseOrderId);",
					"        });",
					"    };",
					"",
					"    utils.deleteOrder = function(id){",
					"        utils.deleteByID(\"/orders/composite-orders/\"+id);",
					"    };",
					"",
					"    /**",
					"     * Delete the Composite Orders by Id.",
					"     * Using admin credentials as the operation is on Orders",
					"     * */",
					"    utils.deleteByID = function(URL) {",
					"        pm.sendRequest(utils.buildPmRequest(URL, \"DELETE\"), function (err, res) {",
					"            pm.test(\"Delete \"+ URL, function(){",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res).to.have.property('code', 204);",
					"                pm.expect(res).to.have.property('status', 'No Content');",
					"            });",
					"        });",
					"    };",
					"",
					"",
					"    utils.createConfig = function(body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function (err, response) {",
					"            pm.test(\"Tenant Override Config created\", function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.buildOkapiURL = function(path){",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        console.log(body);",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, function (err, response) {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id){",
					"        utils.deleteByID(\"/configurations/entries/\"+id);",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends post request by specified path and handle result by handler",
					"     */",
					"    utils.sendPostRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method) {",
					"        return {",
					"            url: utils.buildOkapiURL(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiURL(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"",
					"        pm.globals.unset(\"duplicatePOLineNumber\");",
					"        pm.globals.unset(\"configBody\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"po_listed_electronic_monograph\");",
					"        pm.globals.unset(\"po_listed_print_serial\");",
					"        pm.globals.unset(\"po_listed_electronic_serial\");",
					"        pm.globals.unset(\"po_unlisted_print_monograph\");",
					"        pm.globals.unset(\"po_unlisted_print_serial\");",
					"        pm.globals.unset(\"po_listed_electronic_monograph_bad_data\");",
					"        pm.globals.unset(\"po_listed_print_monograph_poLineNumber\");",
					"        pm.globals.unset(\"po_listed_print_monograph_purchaseid\");",
					"        pm.globals.unset(\"testData\");",
					"",
					"",
					"        pm.environment.unset(\"limitedPrivPermId\");",
					"        pm.environment.unset(\"mod-gobi-override-configs\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"xokapitoken-user2\");",
					"    };",
					"    return utils;",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "134dcc2f-6d03-4875-bd81-517f69ad0e63",
			"key": "testTenant",
			"value": "gobi_api_tests",
			"type": "string"
		},
		{
			"id": "b766e31c-743d-421c-937e-0771b99f3eec",
			"key": "testdataBaseURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-gobi/master/src/test/resources/GOBIIntegrationServiceResourceImpl/",
			"type": "string"
		},
		{
			"id": "488d0b0b-a02c-4220-8725-216bc52adede",
			"key": "tenantOverrideConfigURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-gobi/master/src/test/resources/MappingHelper/Custom_ListedElectronicSerial.json",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
