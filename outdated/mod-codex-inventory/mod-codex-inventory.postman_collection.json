{
	"info": {
		"_postman_id": "72e73b4e-dadc-4bd8-a4c5-e48c4beabd18",
		"name": "mod-codex-inventory",
		"description": "Variables defined for mod-codex-inventory module api testing.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "instaceCollection.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "916e688c-8ab0-45f6-84ae-bbf0eac09385",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"instanceCollection.schema\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{mod_name}}/{{instanceCollection.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{mod_name}}",
								"{{instanceCollection.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instance.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e24852a-7989-49a1-8124-633102f10035",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"instance.schema\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{mod_name}}/{{instance.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{mod_name}}",
								"{{instance.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "resultInfo.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6951083c-5b93-4082-9d9e-5d195968c607",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"resultInfo.schema\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{resultInfo.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{resultInfo.schemafile}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "auth/login to get token"
					},
					"response": []
				}
			]
		},
		{
			"name": "mod-codex-inventory",
			"item": [
				{
					"name": "/codex-instances",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f511daf5-2aae-4cd0-89f6-08754e3304ec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"instance.json\", JSON.parse(pm.variables.get(\"instance.schema\")));",
									"   tv4.addSchema(\"resultInfo.schema\", JSON.parse(pm.environment.get(\"resultInfo.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceCollection.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-instances : 200\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Module-Id is present\", function () {",
									"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							]
						},
						"description": "Test codex-instances listing"
					},
					"response": []
				},
				{
					"name": "/codex-instances?query=(title=ABA*)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "44d79ef6-181b-432c-8992-448f70617d6b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test on json response\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"X-Okapi-Module-Id is present\", function () {",
									"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(title=ABA*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "query",
									"value": "(title=ABA*)"
								}
							]
						},
						"description": "Test codex-instances listing with valid searchable fields"
					},
					"response": []
				},
				{
					"name": "/codex-instances?query=(title=does not exist)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "777a45fa-084f-4874-a6f1-e58bc0e97817",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Verify query search result returns empty list\", function() {",
									"    let obj = pm.response.json();",
									"    let emptyList = 0;",
									"    pm.expect(obj.instances.length).to.equal(emptyList);",
									"});",
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"X-Okapi-Module-Id is present\", function () {",
									"    pm.request.to.have.header(\"X-Okapi-Module-Id\");",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(title=xyz*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "query",
									"value": "(title=xyz*)"
								}
							]
						},
						"description": "Test codex-instances listing with valid searchable fields and when search query returns empty list"
					},
					"response": []
				},
				{
					"name": "/codex-instances?limit=defaultLimit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "290cd81f-3ecb-4460-a41d-119453ca9161",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Valid query parameter test - positive limit\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify default length codex instances\", function() {",
									"    let obj = pm.response.json();",
									"    let defaultLength = 10;",
									"    //Validate default length",
									"    pm.expect(obj.instances.length).to.equal(defaultLength);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?limit=10",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Test codex-instances listing - default positive limit"
					},
					"response": []
				},
				{
					"name": "/codex-instances?lang=en",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "08f23c5c-a3a4-4299-9fc6-0cad4cd5d95e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Positive test for language parameter - English language\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?lang=en",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "lang",
									"value": "en"
								}
							]
						},
						"description": "Test codex-instances listing - valid english language"
					},
					"response": []
				},
				{
					"name": "/codex-instances?offset=2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77a6df9d-0723-49c8-9737-ca83cd088f5b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Valid query parameter test - positive offset\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?offset=2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "offset",
									"value": "2"
								}
							]
						},
						"description": "Test codex-instances listing - positive offset"
					},
					"response": []
				},
				{
					"name": "/codex-instances/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9da262db-effd-4d6d-97dd-d31629f4a7b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "300f8722-5328-45ff-a26d-8ba2b287e4ad",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response schema verification\", function() {",
									"    //Codex inventory instance schema validation ",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"instance.schema\")))).to.be.true;",
									"    //make sure no schema is missing",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate if fields exists\", function() {",
									"   pm.response.to.have.jsonBody(\"title\", pm.environment.get(\"verifyInstanceTitle\"));",
									"   pm.response.to.have.jsonBody(\"type\", pm.environment.get(\"verifyInstanceType\"));",
									"});",
									"",
									"var obj = pm.response.json();",
									"pm.test(\"Validate publisher of response body fields\", function() {",
									"   //Verify publisher match with codex instance received in the response",
									"   pm.expect(obj.publisher).to.equal(pm.environment.get(\"verifyInstancePublisher\"));",
									"});",
									"",
									"pm.test(\"Validate title of response body fields\", function() {",
									"   //Verify title match with codex instance received in the response",
									"   pm.expect(obj.title).to.equal(pm.environment.get(\"verifyInstanceTitle\"));",
									"}); ",
									"",
									"pm.test(\"Validate type of response body fields\", function() {",
									"   //Verify type match with codex instance received in the response",
									"   pm.expect(obj.type).to.equal(pm.environment.get(\"verifyInstanceType\"));",
									"}); ",
									"",
									"pm.test(\"Validate source of response body fields\", function() {",
									"   //Verify source match with codex instance received in the response",
									"   pm.expect(obj.source).to.equal(pm.environment.get(\"verifyInstanceSource\"));",
									"});",
									"",
									"pm.test(\"Validate contributor of response body fields\", function() {",
									"   //Verify contributor's list size match with codex instance received in the response",
									"   pm.expect(obj.contributor.length).to.equal(pm.environment.get(\"verifyInstanceContributor\").length);",
									"}); ",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-instances/\"+ pm.environment.get(\"id\") + \" : 200\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances/{{id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances",
								"{{id}}"
							]
						},
						"description": "Return an existing mod codex inventory instance"
					},
					"response": []
				},
				{
					"name": "/codex-instances/{id} Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9da262db-effd-4d6d-97dd-d31629f4a7b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "300f8722-5328-45ff-a26d-8ba2b287e4ad",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response schema verification\", function() {",
									"    //Codex inventory instance schema validation ",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"instance.schema\")))).to.be.true;",
									"    //make sure no schema is missing",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate if fields exists\", function() {",
									"   pm.response.to.have.jsonBody(\"title\", pm.environment.get(\"verifyInstanceTitle\"));",
									"   pm.response.to.have.jsonBody(\"type\", pm.environment.get(\"verifyInstanceType\"));",
									"});",
									"",
									"var obj = pm.response.json();",
									"pm.test(\"Validate publisher of response body fields\", function() {",
									"   //Verify publisher match with codex instance received in the response",
									"   pm.expect(obj.publisher).to.equal(pm.environment.get(\"verifyInstancePublisher\"));",
									"});",
									"",
									"pm.test(\"Validate title of response body fields\", function() {",
									"   //Verify title match with codex instance received in the response",
									"   pm.expect(obj.title).to.equal(pm.environment.get(\"verifyInstanceTitle\"));",
									"}); ",
									"",
									"pm.test(\"Validate type of response body fields\", function() {",
									"   //Verify type match with codex instance received in the response",
									"   pm.expect(obj.type).to.equal(pm.environment.get(\"verifyInstanceType\"));",
									"}); ",
									"",
									"pm.test(\"Validate source of response body fields\", function() {",
									"   //Verify source match with codex instance received in the response",
									"   pm.expect(obj.source).to.equal(pm.environment.get(\"verifyInstanceSource\"));",
									"});",
									"",
									"pm.test(\"Validate contributor of response body fields\", function() {",
									"   //Verify contributor's list size match with codex instance received in the response",
									"   pm.expect(obj.contributor.length).to.equal(pm.environment.get(\"verifyInstanceContributor\").length);",
									"}); ",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-instances/\"+ pm.environment.get(\"id\") + \" : 200\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances/{{id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances",
								"{{id}}"
							]
						},
						"description": "Return an existing mod codex inventory instance"
					},
					"response": []
				},
				{
					"name": "/codex-instances/foo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9da262db-effd-4d6d-97dd-d31629f4a7b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd2a0edc-dafe-4374-8e28-29ac64d00e4f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid codex instance URL\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances",
								"foo"
							]
						},
						"description": "Return 400 if mod codex inventory instance does not exist."
					},
					"response": []
				},
				{
					"name": "/codex-instances?limit=-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0f5e992-22e6-41fb-b476-c06b168cbf33",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - negative limit\", function() {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						},
						"description": "Test codex-instances listing - negative limit"
					},
					"response": []
				},
				{
					"name": "/codex-instances?limit=2147483648",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a6406117-33f5-4603-9946-8dfd54d6ff1a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - more than max limit\", function() {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						},
						"description": "Test codex-instances listing - more than max limit"
					},
					"response": []
				},
				{
					"name": "/codex-instances?offset=2147483648",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "855b3b2d-a932-4f3c-b64c-2d4a22b6b062",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - more than max offset\", function() {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						},
						"description": "Test codex-instances listing - more than max offset"
					},
					"response": []
				},
				{
					"name": "/codex-instances?offset=-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b66d1f6-22c7-43e7-8116-54e718068007",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - less than min offset\", function() {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						},
						"description": "Test codex-instances listing - less than min offset"
					},
					"response": []
				},
				{
					"name": "/codex-instances?lang=123",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2cf59e7-9d19-4966-a23c-dcf730682999",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - less than min offset\", function() {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?lang=123",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances"
							],
							"query": [
								{
									"key": "lang",
									"value": "123"
								}
							]
						},
						"description": "Test codex-instances listing - invalid language"
					},
					"response": []
				},
				{
					"name": "/codex-instances/{id} - invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b420a07a-a5df-4a48-8961-7c613aefba09",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-codex-inventory');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "135d1012-2dca-4d4a-8cc7-39c3a007da94",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 Not authorized to perform requested action test\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Clean-up",
									"pm.environment.unset(\"verifyInstanceTitle\");",
									"pm.environment.unset(\"verifyInstanceType\");",
									"pm.environment.unset(\"verifyInstancePublisher\");",
									"pm.environment.unset(\"verifyInstanceSource\");",
									"pm.environment.unset(\"verifyInstanceContributor\");",
									"pm.environment.unset(\"id\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-codex-inventory}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{modCodexInventory}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances/{{id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-instances",
								"{{id}}"
							]
						},
						"description": "This should return 401 if not authorized to access mod codex inventory instance but it is returning 500. Created jira - https://issues.folio.org/browse/MODCXINV-20"
					},
					"response": []
				}
			],
			"description": "Tests for the /codex-instances end point.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
						"type": "text/javascript",
						"exec": [
							"//Get okapi token for authn/login",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"Login error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.environment.set(\"xokapitoken-codex-inventory\", res.headers.get(\"X-Okapi-Token\"));",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"                method: 'POST',",
							"                header: {",
							"                    'X-Okapi-Tenant': \"supertenant\",",
							"                    'Content-Type': 'application/json'",
							"                },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw : JSON.stringify({ username: pm.environment.get(\"supertenant_username\"), password: pm.environment.get(\"supertenant_password\")})",
							"                }",
							"        }, function(err, res) {",
							"            //Get list of proxy tenant modules using same token generated above",
							"            pm.sendRequest({",
							"            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/_/proxy/tenants/\" + pm.environment.get(\"xokapitenant\") + \"/modules\",",
							"            method: 'GET',",
							"            header: {",
							"                'X-Okapi-Tenant': \"supertenant\",",
							"                'Content-Type': 'application/json',",
							"                'X-Okapi-Token': res.headers.get(\"X-Okapi-Token\")",
							"            },",
							"        }, function(err, res) {",
							"        if (err !== null) {",
							"            console.log(\"user creation error: \" + err);",
							"        } else {",
							"            //Get and set latest mod codex inventory id",
							"            var jsonData = res.json();",
							"            for(var i=0; i< jsonData.length; i++) {",
							"                if(jsonData[i].id.startsWith(\"mod-codex-inventory\")) {",
							"                    pm.environment.set(\"modCodexInventory\", jsonData[i].id);",
							"                    break;",
							"            }",
							"        }",
							"        if(pm.environment.get(\"modCodexInventory\")!== null) {",
							"            //Using the mod codex inventory id captured above use it to retrieve list of mod codex inventory instances",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/codex-instances\",",
							"                method: 'GET',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': pm.environment.get(\"xokapitoken-codex-inventory\"),",
							"                    'X-Okapi-Module-Id': pm.environment.get(\"modCodexInventory\"),",
							"                    'Content-Type': 'application/json'",
							"                },",
							"            }, function(err, res) {",
							"                 if (err !== null) {",
							"                    console.log(\"codex instance error: \" + err);",
							"                } else {",
							"                    //Grab few fields from randomly generated mod codex inventory instance and save them in environment variables for testing purpose in postman",
							"                    var jsonData = res.json();",
							"                    var randomIndex = Math.floor(Math.random()*jsonData.instances.length);",
							"                    var storeInstance= {};",
							"                    storeInstance.title = jsonData.instances[randomIndex].title;",
							"                    storeInstance.type = jsonData.instances[randomIndex].type;",
							"                    storeInstance.publisher = jsonData.instances[randomIndex].publisher;",
							"                    storeInstance.source = jsonData.instances[randomIndex].source;",
							"                    storeInstance.contributor = jsonData.instances[randomIndex].contributor;",
							"                    pm.environment.set(\"verifyInstanceTitle\", storeInstance.title);",
							"                    pm.environment.set(\"verifyInstanceType\", storeInstance.type);",
							"                    pm.environment.set(\"verifyInstancePublisher\", storeInstance.publisher);",
							"                    pm.environment.set(\"verifyInstanceSource\", storeInstance.source);",
							"                    pm.environment.set(\"verifyInstanceContributor\", storeInstance.contributor);",
							"                    pm.environment.set(\"id\", jsonData.instances[randomIndex].id);",
							"                }",
							"            });",
							"        }",
							"        else{",
							"            console.log(\"Error getting Codex Instances\");",
							"        }",
							"    }",
							"});",
							"});",
							"    } else {",
							"            console.log(\"Login failed: \" + res.reason());",
							"        }",
							"    }",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2235883-a279-492e-94a1-65ef7d482e16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0c7330ca-93e6-4362-aca9-67f141953e8c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b57648c1-84e3-40fe-9757-ac018aea5ca8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "3b5807e0-03d5-48e6-87e9-70fdfbb4fddb",
			"key": "mod_name",
			"value": "codex",
			"type": "string"
		},
		{
			"id": "4887bce7-f34b-44c2-abf8-2e4efb27926c",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "689c58b2-02fa-4e03-bc44-8459cc117f44",
			"key": "instance.schemafile",
			"value": "instance.json",
			"type": "string"
		},
		{
			"id": "012da73f-c856-463c-b5df-3a1312951fd1",
			"key": "resultInfo.schemafile",
			"value": "resultInfo.schema",
			"type": "string"
		},
		{
			"id": "93649004-eb60-4864-bab3-a5a1629cccf4",
			"key": "instanceCollection.schemafile",
			"value": "instanceCollection.json",
			"type": "string"
		},
		{
			"id": "3d8e5520-8ecf-453a-9aa0-98b3dedcf0fe",
			"key": "schema_commit",
			"value": "1d92b1079e865cd5830f49d73c21a9a27f1800e0",
			"type": "string"
		}
	]
}