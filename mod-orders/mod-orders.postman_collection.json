{
	"info": {
		"_postman_id": "d93d8888-ffd9-4a7c-94ca-86b6575003e3",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0fc4565-c5ec-4a3d-9172-c75d27396bc8",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76fd316c-5ca3-429b-bb1a-8cd0acbabb62",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7b5bf36c-bc4a-4bf6-b53f-59b8f090452e",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dde11aaf-801f-4118-a08d-9918e62fa0fd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-orders\", bodyHandler);",
											"utils.getModuleId(\"mod-finance-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"utils.getModuleId(\"mod-circulation\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f5cd409a-bfa2-4787-bf36-3b236ccc50e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9f9fc632-9512-4a0d-8880-6c42dd4ce91f",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b47af58-91e3-43fb-8468-8d2104b118d2",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55fe3a58-8980-47df-b910-64092ba1cc8c",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5de7a5eb-94aa-4e8b-b060-a560840a01d4",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7802ca53-05b2-4e45-ad74-1ed091d22c5f",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3034ed7a-851f-4535-ad81-5ef13079d821",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiUrl('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2b1cf0d-830e-40b7-a163-f195ff8fcd33",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c5839aff-8fc3-4f28-9eaa-1130ddaab068",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d6d9818-8e25-4871-8f3b-039e8c615dc2",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "03deef51-0cee-4fbc-ae0f-4807102abc94",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order approve permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0ac513ba-a9ff-4b15-9bce-3dfb73abec14",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d14782f-b31f-4dd7-9fb0-f428affb5a87",
										"exec": [
											"pm.test(\"Permission is created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"orders.item.approve\",\r\n  \"displayName\": \"Permission to approve order\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order unopen permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69c75f46-2e84-4ab4-98d2-6ef3406f95ca",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86ba5649-51ce-4286-8e78-f2c2253d2acc",
										"exec": [
											"pm.test(\"Permission is created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"orders.item.unopen\",\r\n  \"displayName\": \"Permission to unopen order\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bdf5cbf-316d-4122-83bb-0c5d17097db0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a0639a9-9f35-42df-bf53-e4c133d5e985",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check TENANT configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91522a5c-a3ae-4542-86d6-9b8045dc23d2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testTenantConfigs = globals.testData.tenantConfig;",
											"let bodyTemplate = globals.testData.tenantConfig.bodyTemplate;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current tenant configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-tenant-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testTenantConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    console.log(configName + \": \" + value);",
											"    utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-tenant-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3b5d2c66-0c4c-4d5f-a625-f68c4e7ebb2c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==TENANT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==TENANT"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69f448e9-b727-4fed-aaab-31f4b521dda6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a79d7843-086a-4c3c-802e-ec4e86d08bce",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92814318-43a3-4f55-8f45-da45beb98fdc",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modOrdersId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "071b29c1-6e32-4fbd-8f85-3abd96dd993b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moduleName = 'mod-orders';",
											"",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(response.text()).to.include(moduleName);",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];",
											"        pm.variables.set('modOrdersId', moduleId);",
											"    });",
											"});",
											"",
											"",
											"function buildPmRequest1(path) {",
											"    return {",
											"        url: utils.buildOkapiUrl(path),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
											"        }",
											"    };",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modOrdersId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f335388e-60a9-40e3-a3ab-c6d5a7332922",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3157f706-bbb5-4547-8564-b9e2e01463f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare global data",
					"item": [
						{
							"name": "Institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4abff0a-4400-4746-aec8-6f91d7c99b4d",
										"exec": [
											"pm.test(\"Record is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9016199-89bb-4b42-a584-0ef53bc57c3a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \"Universitet\",\n    \"code\": \"TU\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Campus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e720499-3198-44af-9f0b-071f538faf5c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c693e73-46f6-474b-a050-3df372542243",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \" Campus\",\n    \"code\": \"TC\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"campuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Library",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02da7963-e4e1-4aa8-93c8-71f6be167518",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a33ca29-ee5c-4777-a734-a82084b9c384",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"name\": \"Library\",\n    \"code\": \"TL\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"libraries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Service point",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d8c77cb-7e10-433c-a0f7-f20db3dae0ca",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c73f49c-8505-4892-8edd-48f18fc212b8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"name\": \"Service point\",\n    \"code\": \"TSP\",\n    \"discoveryDisplayName\": \"Service point 1\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"service-points"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89519b6b-68cc-4689-9239-f8092349150f",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7215001-1b9a-433e-a6d7-0d85a8a18852",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"b32c5ce2-6738-42db-a291-2796b1c3c4c6\",\n    \"name\": \"Location 1\",\n    \"code\": \"LOC1\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6ebc4cb-4b1a-4192-94d0-7bc4357c179e",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc60d4d6-d1f8-41f0-8301-2416cbf3ea46",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n    \"name\": \"Location 2\",\n    \"code\": \"LOC2\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e217cb04-8a4d-4138-b7b0-774bf97c1fd6",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId3\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0d14fae-a3c3-4cf5-b266-c727e1a76c73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"f17914b0-048a-42f2-b6c1-fc6f38edf157\",\n    \"name\": \"Location 3\",\n    \"code\": \"LOC3\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare vendors",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f55b8caa-d744-4bcf-9cdf-25b3e5809b45",
										"exec": [
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15197ca1-84d0-4848-b48d-e9175c71bac8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1513adb1-fa2c-4dc0-a0e0-10331334b901",
										"exec": [
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4102326c-14de-4aaf-9fce-f570cc7bcf45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "Fiscal Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe1f00dd-b609-4270-a3ae-a9f4d8ab1353",
										"exec": [
											"pm.test(\"Fiscal Year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "040a118b-f323-4726-afca-42e09ad4c6e7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\n  \"name\": \"TST-Fiscal Year 2020\",\n  \"code\": \"FY2020\",\n  \"description\": \"January 1 - December 30\",\n  \"periodStart\": \"2020-01-01T00:00:00Z\",\n  \"periodEnd\": \"2020-12-30T23:59:59Z\",\n  \"series\": \"FY\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Creates a Fiscal Year record which will be used to create a ledger record"
							},
							"response": []
						},
						{
							"name": "Fiscal Year 2021",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91899b14-1ed1-442c-b193-58d0e0bdbc9e",
										"exec": [
											"pm.test(\"Fiscal Year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6eb80392-b9ea-4cb4-b58b-742da85e2db9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf3\",\n  \"name\": \"TST-Fiscal Year 2021\",\n  \"code\": \"FY2021\",\n  \"description\": \"January 1 - December 30\",\n  \"periodStart\": \"2021-01-01T00:00:00Z\",\n  \"periodEnd\": \"2021-12-30T23:59:59Z\",\n  \"series\": \"FY\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Creates a Fiscal Year record which will be used to create a ledger record"
							},
							"response": []
						},
						{
							"name": "Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee2ed7de-5164-49a2-9f40-e392a86d3232",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a880d80-625a-4b09-b461-b027b4ea0b52",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\",\r\n    \"fiscalYearOneId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n    \"restrictEncumbrance\": false\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d6661ca-262b-47f2-9135-03023aa79890",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fundId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0dd39d1-70c8-4e67-aa61-8443a1d41b31",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"TST-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"{{ledgerId}}\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66e451b3-fa49-4b7b-b214-3bece34ccea6",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fdffcb11-59e4-4238-bceb-a3b2e752a87e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Active\",\r\n  \"fundId\": \"{{fundId}}\",\r\n  \"name\": \"Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n  \"allocated\": 9999999\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a31a07f-1487-45ef-9914-c79e0e79d729",
										"exec": [
											"var id = pm.response.json().fund.id",
											"var code = pm.response.json().fund.code",
											"pm.environment.set(\"fundId-2\", id);",
											"pm.environment.set(\"fundCode-2\", code);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be443beb-8995-4496-af49-3963c382f83b",
										"exec": [
											"pm.environment.set(\"fundCode-2\", \"first\" + Math.floor(Math.random() * 999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"fundStatus\": \"Active\",\n        \"name\": \"{{fundCode-2}}\",\n        \"code\": \"{{fundCode-2}}\",\n        \"externalAccountNo\": \"tttt\",\n        \"ledgerId\": \"{{ledgerId}}\"\n    },\n    \"groupIds\": []\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Planned Budget for Fund1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4634b9f9-03ed-48e1-abcf-69020b511f2a",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4ffd9f1-d9d8-4816-bd55-f4cca35814ba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Planned\",\r\n  \"fundId\": \"{{fundId}}\",\r\n  \"name\": \"Plannet Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf3\",\r\n  \"allocated\": 0\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e3666f0-0ac7-42a8-a953-e7af8a0e7ffd",
										"exec": [
											"var id = pm.response.json().id",
											"pm.environment.set(\"budgetId-2\", id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a9874db-094a-49b7-93ab-6cabaa2f4f1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fiscalYearId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\n    \"budgetStatus\": \"Active\",\n    \"allowableExpenditure\": 100,\n    \"allowableEncumbrance\": \"\",\n    \"allocated\": \"100\",\n    \"fundId\": \"{{fundId-2}}\",\n    \"name\": \"{{fundCode-2}}-FY2020\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory types",
					"item": [
						{
							"name": "Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c22168ff-fe94-4b2d-935c-d0a92f612d71",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"identifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "edd88d8f-d4c4-4df4-b7f2-f447cd80510e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-identifierTypeName}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ISBN Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d372807-4d41-4b84-817a-bd4e827f67dc",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"isbnIdentifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c3a4796e-fbe6-457c-ae04-139c51163f9a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
							},
							"response": []
						},
						{
							"name": "Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af5f9934-3fa8-4d53-b53c-0f3522f4a996",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "45359e6b-41a5-480e-8e6a-d88ef7ec5bd4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceTypeCode}}\",\r\n  \"name\": \"{{inventory-instanceTypeCode}}\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Type - zzz",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f9f3cfb-febe-42d1-9cfa-92fca5cd23ca",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af52d825-fb5d-46c5-a425-d5307244f051",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"30fffe0e-e985-4144-b2e2-1e8179bdb41f\",\r\n  \"code\": \"zzz\",\r\n  \"name\": \"unspecified\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8e0c40d-d57d-4020-83c7-a053c5af4d94",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceStatusId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7054c0fb-89ef-42e8-9962-a6bf55e0f83e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceStatusCode}}\",\r\n  \"name\": \"{{inventory-instanceStatusCode}}\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Loan Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7afb2f0b-4a40-4f88-84d2-39dd81d1b4b0",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"loanTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a0ad1fd-a06e-4d37-bd72-d5608b1cf101",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-loanTypeName}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-types"
									]
								},
								"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e189f1dd-b04f-421b-9b5e-4ccc0cac023c",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"materialTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb794425-6c04-49f0-83ac-fb1febc797b0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Contributor name type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0db0a9be-9c4c-43cf-b650-85e033fac9c5",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"contributorNameTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c00bd137-0a9c-4c69-a4fc-c6db767c56ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0005-1111-aaaa-6f7264657273\",\r\n  \"name\": \"contributorNameType\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"contributor-name-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Patron Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2f018e7b-d26a-4f10-bdfc-0e3cc745d60f",
										"exec": [
											"let user = globals.testData.users.regular.user;",
											"user.patronGroup",
											"pm.variables.set(\"userData\", JSON.stringify(user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cbd35eca-0d0a-4842-883a-6911c6bcc007",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"_patron_group_id\", pm.response.json().id)",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\" : \"Test Patron Group\",\n    \"desc\" : \"Test Patron Group Member\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c21928ec-e4ea-43ba-93b5-e8a80ff884d4",
										"exec": [
											"let user = globals.testData.users.regular.user;",
											"user.type = \"patron\",",
											"user.active = true,",
											"user.barcode = \"236964750970123\",",
											"user.patronGroup = pm.environment.get(\"_patron_group_id\");",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10f605ba-abe6-4052-9ed5-a8f470f9e509",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0731a2a4-1b22-4435-ba97-d8895230d905",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e24b2bdd-ec4f-4641-ab9c-92542221552f",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eccc9d78-c1d5-4749-aedd-cd23fc043e26",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83e7104f-76b7-4f4d-bf1d-b111a1f45482",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73487168-7aef-449b-8f47-a1038d1392c2",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "45a2fb8b-4d59-4397-b1dd-4998db1692ee",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create restricted user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ca7d8e27-e546-4255-bb9e-f4677005bc2c",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.restricted.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "99a19df2-3754-42e6-951b-d38e05c9e392",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "498eab24-7e0b-4706-986f-a5e82a86adc5",
										"exec": [
											"pm.test(globals.testData.users.restricted.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "569150eb-ba29-417e-bfe5-4a13d094c6d8",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.restricted.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d145fd8-3ae5-415b-8807-bdf76e77fdec",
										"exec": [
											"pm.test(globals.testData.users.restricted.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4990986f-ca98-45e4-9fd1-58899bc367ea",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.restricted.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50241437-8712-4150-9533-ba469b9cd744",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-restricted\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55c98fa1-6af2-4ec7-bef4-94eba4b4b6e7",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.restricted.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a689e0a-52b3-4158-ab52-ed641ceaa3e4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3b0c2655-ee92-45c1-87b0-ebf77282f83e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Empty Order",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90fff7af-cad4-45d7-af13-10f0fb6a02b3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85a3bac7-d25c-4888-b0c3-316f96d6d00c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(0);",
											"    });",
											"",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"    ",
											"    pm.test(\"MODORDERS-145: Verify status to be Pending\", function(){",
											"        pm.expect(jsonData.workflowStatus).to.equal(\"Pending\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get created empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "135baa20-006f-49b5-9924-15ea3552f16d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6985ad97-1085-417f-b413-89c8468b70f2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});",
											"",
											"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
											"    let order = pm.response.json();",
											"    pm.expect(order.approved).to.be.false;",
											"    pm.expect(order.reEncumber).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Update order with new poNumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aedcf8db-0a49-4cec-bfe4-a6e0b5ad6359",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get Order and update poNumber only (MODORDERS-150)",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"    let order  = res.json();",
											"    let number = \"UPD\" + order.poNumber;",
											"    order.poNumber = number;",
											"    pm.variables.set(\"updatedNumber\", number);",
											"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f366052c-48be-4c18-9a42-22c1abc99a49",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"        pm.test(\"Verify order updated with new PO number\", () => pm.expect(res.json().poNumber).to.equal(pm.variables.get(\"updatedNumber\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Get empty order by order id and validate totalItems",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8a508126-2b46-4c61-834f-bbe175ab62f1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5b66ee1b-0d3d-4d7c-ac0d-077d32b017d6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8bf4269d-c882-4082-bb5a-25e283386fc9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c7db9598-87ed-4d5b-a5ea-822d1d6f8cdb",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"description": "Verifies that an order can be created and deleted without order lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "06220b71-54e7-4b84-8d17-96ff1363f9c4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3dbc59f5-cb67-44b6-af78-f1e534a82f70",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending Order",
					"item": [
						{
							"name": "Create Pending order",
							"item": [
								{
									"name": "Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6cb306d6-3c3c-4369-83f3-3ff3a77017ac",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "19df4809-c42a-4259-add7-58a8e7b09cb7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"utils.verifyOrderCalculatedInfo(jsonData);",
													"",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"completeOrderId\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.globals.set(\"completeOrderPoNumber\",\"\\\"\"+jsonData.poNumber+\"\\\"\");",
													"    pm.expect(jsonData.notes).to.exist;",
													"    pm.expect(jsonData.vendor).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_listed_print_monograph}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Create order in Pending status without material types",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "08b21160-835e-4c0d-a1fa-8b4a92258baa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_po_line_without_material_type.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.compositePoLines[0].alerts = [];",
													"    order.compositePoLines[0].reportingCodes = [];",
													"    pm.globals.set(\"create_order_po_line_without_material_type\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e21af200-a08f-4864-8356-9ce13b989c30",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    console.log(jsonData)",
													"    pm.globals.set(\"order_po_line_without_material_type\", jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{create_order_po_line_without_material_type}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update second line and delete",
							"item": [
								{
									"name": "Update second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5791cac6-13ee-4b57-84fc-e49987f58dc1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.purchaseOrderId = globals.completeOrderId;",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "043667d3-6c08-42bb-b75f-06efcfc571a9",
												"exec": [
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Verifies that second line can be sussessfully updated"
									},
									"response": []
								},
								{
									"name": "Get second line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dc377426-4fdf-4d4f-8764-bb2e71b9eb38",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "43b16a12-842c-45e9-b2cd-6c98d2a13a07",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "83d21e80-dd73-4eb2-91ef-d042ce817049",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d2ae473e-5da2-4b8f-9b62-a28ef2e0a1ab",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1c7a437a-852f-4308-9b8c-cdb1908b28c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bfacd617-c048-4552-9911-ddcbaf8774ca",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"1 PO Line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200 and verifies that only one line exists"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add empty line, update and delete",
							"item": [
								{
									"name": "Add empty line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8bb36b97-3dd2-4f9f-99d5-35c63675f40b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.globals.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bec24f50-d1cc-4bf4-bebc-fb8db7cde2e9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/order-lines requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "10440b94-3c73-4b39-a21e-6a01d6bf3200",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dc06b24e-36bd-42fb-9933-2cab2550c96e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update empty line with complex content without location and createInventory=Instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4ecf0e41-0e6c-49a2-8f62-241880d87186",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.physical.createInventory = \"Instance\";",
													"    poline.locations = [];",
													"    poline.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"    poline.isPackage = false;",
													"    poline.instanceId = \"5bf370e0-8cca-4d9c-82e4-5170ab2a0a39\";",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "790c0c31-dbf2-4747-aa73-e375469502b9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Status code is 204\", function() {",
													"    utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + pm.variables.get(\"poLineId\"), (err, res) => {",
													"        pm.test(\"Verify title updated with new instanceId\", () => pm.expect(res.json().titles[0].instanceId).to.equal(\"5bf370e0-8cca-4d9c-82e4-5170ab2a0a39\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Validates that empty line can be updated with complex content"
									},
									"response": []
								},
								{
									"name": "Get order and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "404398e6-aa72-49c5-b798-0cc48c720201",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "667444f4-26e6-488f-b6cb-64b2979f993d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "`GET /orders/composite-orders/<id>` request and validate content"
									},
									"response": []
								},
								{
									"name": "Delete last line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0914407b-93ae-4028-8366-f8f6d2350799",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));",
													"",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e4f77293-fe6f-4599-9741-fc491104b03d",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 204"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add line and update content",
							"item": [
								{
									"name": "Add line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "34dbd494-a10f-48db-9bb4-76ca2b201216",
												"exec": [
													"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"// make sure there is no id provided",
													"delete line.id;",
													"line.poLineNumber += \"1\";",
													"line.poLineDescription += \" another PO Line\";",
													"line.eresource.createInventory = \"Instance\";",
													"line.locations.pop();",
													"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "13b97cec-3b51-4b0c-8b43-73f22352d0cc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_listed_print_monograph}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/id/lines/id requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "23d65817-647c-43c9-97fa-3d8bef0df1dd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b416ab0c-097c-49af-8603-3bd3a98743e4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "542a1300-05ed-4b50-8815-2fcdf2d205c9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e6b2d8ee-97d9-424a-9433-dba420fd58b1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update last line with empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2e69ce9e-0642-459f-861f-3ef3be7b1eb0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"pm.variables.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "54850434-5da4-409f-8bda-da54d324f9ec",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get last line and verify empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b4e61be7-02cc-43b0-9f8d-c9a44c91f905",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7d719f2-b46e-4ee3-88a8-d52fd229ceb8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8773ca53-02e0-470c-a773-ba11f3279e7e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "41694991-7886-4024-ad27-570a6f1587f9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": " Add expected receipt date to PO Line",
							"item": [
								{
									"name": "Update last line with expected receipt date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "428f4c56-1311-4ced-b39d-bfc701786910",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"// Using id of the last PO Line",
													"let poLineId = utils.getLastPoLineId();",
													"pm.variables.set(\"poLineId\", poLineId);",
													"utils.sendGetRequest(\"/orders/order-lines/\" + poLineId, (err, res) => {",
													"    // Get physical object",
													"    let compositePoLine = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"    let physical = compositePoLine.physical;",
													"    // make sure there is no id provided",
													"    delete physical.id;",
													"",
													"    // Get current date and add 1 month",
													"    let expectedReceiptDate = moment().utc().add(1, 'month').format();",
													"    pm.variables.set(\"expectedReceiptDate\", expectedReceiptDate);",
													"    physical.expectedReceiptDate = expectedReceiptDate;",
													"",
													"    let poLine  = res.json();",
													"    poLine.physical = physical;",
													"    poLine.locations = [compositePoLine.locations[0]];",
													"    pm.variables.set(\"updated_po_line\", JSON.stringify(poLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "607a055e-c536-412b-8859-cfa4d9e9f56b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"// Get updated PO Line",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.variables.get(\"poLineId\"), function (err, res) {",
													"    pm.test(\"PO Line updated with expected receipt date\", function () {",
													"        let poLine  = res.json();",
													"        // Dates should be in the same format",
													"        let expectedReceiptDate = moment(pm.variables.get(\"expectedReceiptDate\")).utc().format();",
													"        let actualDate = moment(poLine.physical.expectedReceiptDate).utc().format();",
													"",
													"        pm.expect(actualDate).to.equal(expectedReceiptDate);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updated_po_line}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Gets content of last PO Line and updates it adding expected receipt date"
									},
									"response": []
								}
							],
							"description": "[MODORDERS-135](https://issues.folio.org/browse/MODORDERS-135)\n\nAdd an `expectedReceiptDate` field to the physical sub-object.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "67a2213a-3069-413c-b491-a0f6e18c696a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "442dfd9d-8c82-40ae-927a-a581c62b9c24",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order",
							"item": [
								{
									"name": "Update order leaving one line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5737391e-2449-4337-b7cc-373e2f45da92",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"",
													"let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
													"utils.deleteTitlesByLineId(completePolineIds[completePolineIds.length - 2]);",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 537.96);",
													"pm.variables.set(\"discountUpdate\", 19.84);",
													"pm.variables.set(\"discountTypeUpdate\", \"percentage\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 9);",
													"pm.variables.set(\"currencyUpdate\", \"BYN\");",
													"",
													"// Expected PO Line's total based on values above will be 3881.058624 and rounded to value below",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 3881.06);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a06271e7-e679-435b-a8a0-4215dab20a54",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // Retrieve order to verify updates",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        var order = {};",
													"         ",
													"        pm.test(\"Order retrieved after update\", function () {",
													"            pm.expect(err).to.equal(null);",
													"            pm.expect(res.code).to.eql(200);",
													"            pm.expect(res.json()).to.exist;",
													"            order = res.json();",
													"        });",
													"        ",
													"        pm.test(\"Order now has 1 PO Line\", function () {",
													"            utils.validatePoLines(order, 1);",
													"        });",
													"        ",
													"        pm.test(\"Validate poLineNumber after update\", function() {",
													"            utils.validatePoLinesNumber(order);",
													"        });",
													"        ",
													"        let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"",
													"        // The PO has one line so its total price equals to PO Line's total",
													"        utils.verifyOrderCalculatedInfo(order);",
													"",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            let cost = order.compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.currency).to.equal(pm.variables.get(\"currencyUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": \"268758test2\",\n  \"reEncumber\": false,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"id\": \"{{poLineId}}\",\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"{{currencyUpdate}}\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityElectronic\": 0,\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204\nReplaces content leaving only one line."
									},
									"response": []
								},
								{
									"name": "Update order changing POL cost again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c2b31f6-58a1-44ac-8d62-6464dfc2ff92",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 10.0);",
													"pm.variables.set(\"additionalCostUpdate\", 5.0);",
													"pm.variables.set(\"discountUpdate\", 15.01);",
													"pm.variables.set(\"discountTypeUpdate\", \"amount\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 21);",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));",
													"",
													"// Expected PO Line's total based on values above",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 199.99);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "303781c0-4dad-4809-8db8-a80800d49730",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            pm.expect(res.json()).to.exist;",
													"            pm.expect(res.json().compositePoLines).to.have.lengthOf(1);",
													"",
													"            let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"            // The PO has one line so its total price equals to PO Line's total",
													"            utils.verifyOrderCalculatedInfo(res.json(), expectedTotalPrice);",
													"",
													"            let cost = res.json().compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.additionalCost).to.equal(pm.variables.get(\"additionalCostUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": {{completeOrderPoNumber}},\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 100.99,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"additionalCost\": {{additionalCostUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"USD\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update PO number",
							"item": [
								{
									"name": "Update order with new poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff4ff276-9806-4a16-96ed-74683e1fdf45",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Order and update poNumber only",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"    let order  = res.json();",
													"    order.poNumber = \"newponumber\";",
													"    delete order.totalItems;",
													"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
													"});",
													"",
													"pm.globals.set(\"poNumber\", \"newponumber\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4117580b-484c-495d-8ace-cfd4be029ad5",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedOrder}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order and validate poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "10b6acbd-91be-4f47-9e8a-7663360322a1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e121a24a-7def-48ac-b072-39ab0a76fb9c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"Validate poNumber\", function() {",
													"    pm.expect(jsonData.poNumber).to.equal(pm.globals.get(\"poNumber\"));",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df799fc5-5b59-4ac3-8734-9c39c9ed5708",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "31c085f1-a04e-4158-9b83-9d49e01f30bb",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"approved\": false,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"{{poNumber}}\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 99.99,\n    \"totalItems\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflowStatus\": \"Pending\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "03209f6c-016b-48c3-ac31-e788635d7c29",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8f060cf4-0e07-4d71-ac9c-2113a865db19",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"1 po line exists\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate poLineNumber\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order summary leaving only PO number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5acbe6aa-cf2d-42d0-9f0f-5acc14bd511b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04dce50d-4682-4f30-a3a7-aaad3148ef91",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"poNumber\": \"{{poNumber}}\",\n\t\"orderType\": \"One-Time\",\n\t\"vendor\": \"{{activeVendorId}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d0bc2783-bb07-4366-bfa9-df0f44c68c09",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c000591-1927-42ac-968b-879d1c0fb74c",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate that response contains default fields on creating an empty order\", function () {",
													"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
													"    pm.expect(jsonData.compositePoLines).to.have.lengthOf(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aa9c7121-a771-4da9-ada6-0c878b619e53",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd3d4ee4-bad2-4d6e-8ea7-4a1d7bb488d8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create another Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7bd12f6c-2d39-4dac-a140-8f241f57f683",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Pending\";",
											"    // Setting create inventory to None for PO Line with P/E Mix format",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.poNumber = \"1MIX1EL1PHYS1OTH\";",
											"",
											"    // add billTo an shipTo properties",
											"    utils.sendGetRequest(\"/configurations/entries?query=module==TENANT and code==\" + globals.testData.tenantConfig.bodyTemplate.code, (congifErr, configRes) => {",
											"        let addressConfId = configRes.json().configs[0].id;",
											"        order.billTo = addressConfId;",
											"        order.shipTo = addressConfId;",
											"        pm.variables.set(\"tenantAddressConfigId\", addressConfId);",
											"        pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "603a2bc3-5ee5-4258-9ee5-b26270f034c6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"anotherCompleteOrderId\", jsonData.id);",
											"    pm.globals.set(\"another_complete_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Test billTo and shipTo properties existance\", function() {",
											"    pm.expect(jsonData.billTo).to.exist;",
											"    pm.expect(jsonData.shipTo).to.exist;",
											"    ",
											"    pm.expect(jsonData.billTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"    pm.expect(jsonData.shipTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open and adding 2 more lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b5950bc-1e63-48ae-883f-61ecdb8f3513",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"another_complete_order_content\");",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    // Few more cases for MODORDERS-117",
											"    order.compositePoLines[0].orderFormat = \"Physical Resource\";",
											"    setPhysicalInfo(order.compositePoLines[0]);",
											"    order.compositePoLines[1].orderFormat = \"Other\";",
											"    setPhysicalInfo(order.compositePoLines[1]);",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Open\";",
											"    pendingOrder.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Pending\");",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"another_complete_order_content\");",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "31ee3fa1-dd80-4a96-acfa-e0889a43b5ed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        //check status changed",
											"        order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"        order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"       ",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Titles",
					"item": [
						{
							"name": "Create package po line for title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "81a2414e-0e6f-4fc2-901a-f5cacbf29010",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"// make sure there is no id provided",
											"delete line.id;",
											"line.poLineNumber += \"1\";",
											"line.poLineDescription += \" another PO Line\";",
											"line.eresource.createInventory = \"Instance\";",
											"line.locations.pop();",
											"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
											"line.isPackage = true;",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd642f21-6991-4d06-bfca-945db86638c3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    ",
											"    ",
											"    pm.environment.set(\"poLineIdForTitle\", jsonData.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/id/lines/id requests that return 201"
							},
							"response": []
						},
						{
							"name": "Create title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4b2f541c-c68d-412c-b603-82c2d84f933e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e8ad1138-091a-4ef7-a1a8-6072948c552e",
										"exec": [
											"pm.test(\"Title status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"    let title = pm.response.json();",
											"    pm.expect(title.id).to.exist;",
											"    pm.variables.set(\"titleId\", title.id);",
											"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get title by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4f3b7d3-43dc-4dc7-bd36-c39127419c7d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "951d5d67-0f44-4a56-b14d-8520808dfdb5",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let retrievedTitle = pm.response.json();",
											"    pm.expect(retrievedTitle.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35243319-5eb9-4f11-9394-c10df2692d59",
										"exec": [
											"let titleBody = JSON.parse(pm.variables.get(\"titleContent\"));",
											"",
											"titleBody.title = \"New title name\";",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(titleBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5cf52796-c4e9-41f5-98a4-d26a60a203da",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/titles/\" + pm.variables.get(\"titleId\"), (err, res) => {",
											"        pm.test(\"Title is updated\", () => {",
											"            pm.expect(res.code).to.eql(200);",
											"            var title = res.json();",
											"            pm.expect(title.title).to.eql(\"New title name\");",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get title collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "12ced1fd-14d8-454f-aa51-9f21d26e7589",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30b4f706-6840-4817-a92e-f50505b8f7e2",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"",
											"    var titles = pm.response.json();",
											"",
											"    pm.test(\"Verify order templates collection contains order templates\", () => {",
											"        pm.expect(titles.totalRecords).to.be.above(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb9d3257-e00d-40ed-be7d-3599410111fd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a67d4c0-7791-4ad7-aa96-1ef828f6e756",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/titles/\" + pm.variables.get(\"titleId\"), (err, res) => {",
											"        pm.test(\"title is deleted\", () => {",
											"             pm.expect(res.code).to.eql(404);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces",
					"item": [
						{
							"name": "create title for piece",
							"item": [
								{
									"name": "Create title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6212ffeb-34ea-4ce1-a265-c43ec5e841ac",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4d55d454-02d3-49b9-88fb-3e2a9481d31e",
												"exec": [
													"pm.test(\"Title status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    let title = pm.response.json();",
													"    pm.expect(title.id).to.exist;",
													"    pm.variables.set(\"titleId\", title.id);",
													"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{titleContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5774fcb2-b324-4f0f-9d62-46efce6039b1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    let piece = res.json();",
											"    piece.poLineId = pm.environment.get(\"poLineIdForTitle\");",
											"    piece.titleId = pm.variables.get(\"titleId\");",
											"    piece.locationId = pm.environment.get(\"locationId1\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0038b6ad-0cfc-49f9-b50c-34d7c7ce1a88",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.globals.set(\"pieceIdToUpdate\", jsonData.id);",
											"    utils.validatePiece(jsonData);",
											"});",
											"",
											"pm.test(\"Each piece has these optional fields\", function () {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.expect(jsonData.caption).to.exist;",
											"    pm.expect(jsonData.comment).to.exist;",
											"    pm.expect(jsonData.itemId).to.exist;",
											"    pm.expect(jsonData.locationId).to.exist;",
											"    pm.expect(jsonData.supplement).to.exist;",
											"    pm.expect(jsonData.receivedDate).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Edit piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "006fd1aa-8035-4f54-b188-e7a4ab71e6b7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let piece = pm.globals.get(\"pieceRecord\");",
											"",
											"// Update piece format to Electronic",
											"piece.format = \"Electronic\";",
											"// Use this pieceIdToUpdate to delete in next delete request",
											"pm.variables.set(\"updatedPiece\", piece);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b4499a8-9a76-4edf-93b7-b2e8dd46e15b",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.have.status(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedPiece}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10d95b27-0a5c-48fe-b2e5-c197c7438a56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "82284588-e842-44a0-bcbd-320cf06e9f6a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "delete title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c1f82a85-6fb7-4e13-a577-676856cbd9e4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d83b4bf4-128b-428d-b5de-7618a2bcb7ce",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ensure receiptStatus consistency between Pieces PoLine",
					"item": [
						{
							"name": "Verify PoLine Awaiting ReceiptStatus",
							"item": [
								{
									"name": "create title for piece",
									"item": [
										{
											"name": "Create title",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9b262b3a-9358-4429-a5aa-7d0eb36483d6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.variables.set(\"titleContent1\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "37f3dce1-70d6-45f0-be62-f21a478b8b71",
														"exec": [
															"pm.test(\"Title status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"    let title = pm.response.json();",
															"    pm.expect(title.id).to.exist;",
															"    pm.variables.set(\"titleId1\", title.id);",
															"    pm.variables.set(\"titleContent1\", JSON.stringify(title));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{titleContent1}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create 1st Piece - Received",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c0003997-5ec4-4f54-bbcd-18d6b24e1b5b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.globals.set(\"poLineIdToCreatePiece\", utils.getLastPoLineId());",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.titleId = pm.variables.get(\"titleId1\");",
													"    piece.locationId = pm.environment.get(\"locationId1\");",
													"    pm.globals.set(\"pieceRecordAwaiting1\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3aafc7ed-17e0-4b04-8306-dbe03afbb42e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pieceId1ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function () {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										},
										"description": "MODORDERS-173 - ensure receiptStatus consistency between piece and poLine"
									},
									"response": []
								},
								{
									"name": "Create 2nd Piece - Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9ed2b416-b8ab-4799-ae01-fd7a1b38bdd3",
												"exec": [
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.caption = \"Tutorial Volume 99\";",
													"    piece.comment = \"Special Edition II\";",
													"    piece.format = \"Physical\";",
													"    piece.itemId = \"522a501a-56b5-48d9-b28a-3a8f02482d97\";",
													"    piece.receivingStatus = \"Expected\";",
													"    piece.supplement = true;",
													"    piece.receivedDate = \"2018-10-10T00:00:00.000+0000\";",
													"    piece.titleId = pm.variables.get(\"titleId1\");",
													"    piece.locationId = pm.environment.get(\"locationId1\");",
													"    pm.globals.set(\"pieceRecordAwaiting2\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a13e5c04-5ae3-4f04-8c5f-8e1ab69e6ca9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pieceId2ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function () {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting2}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 1st piece - to Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2c89b3c1-6178-46b3-8266-52a6fff42ad1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let pieceId1ToUpdate = pm.variables.get(\"pieceId1ToUpdate\");",
													"utils.sendGetRequest(\"/orders-storage/pieces/\" + pieceId1ToUpdate, function (err, res) {",
													"    piece = res.json();",
													"    let receivingStatus = piece.receivingStatus;",
													"    console.log(\"receivingStatus storage: \" + receivingStatus);",
													"});",
													"",
													"var piece1 = {};",
													"piece1 = JSON.parse(pm.globals.get(\"pieceRecordAwaiting1\"));",
													"",
													"// Update piece1 receivingStatus to Expected",
													"piece1.receivingStatus = \"Expected\"; // Received -> Expected will trigger event",
													"",
													"// Use this pieceIdToUpdate to delete in next delete request",
													"pm.variables.set(\"updatedPieceRecordAwaiting1\", JSON.stringify(piece1));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd094818-e258-4f62-ace5-0d099b0bd5aa",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPieceRecordAwaiting1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all pieces by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "466e9771-3531-41ee-99e3-75b3a5006d22",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79cc5fb8-cc64-44d7-8b36-563f836ba259",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces[0].receivingStatus).to.equal(\"Expected\");",
													"    pm.expect(jsonData.pieces[1].receivingStatus).to.equal(\"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdToCreatePiece}}"
												}
											]
										},
										"description": "GET /orders-storage/pieces requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get PoLine by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb237d8c-9b49-4f84-a59e-115ad567f081",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "08f244f3-a16b-4751-b72a-31c22aa98a80",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    ",
													"    // All pieces receiving status is \"Expected\" so receiptStatus should be \"Awaiting Receipt\"",
													"    pm.expect(jsonData.receiptStatus).to.equal(\"Awaiting Receipt\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineIdToCreatePiece}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete first piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c8b73c8b-90b0-42cd-bc6e-bb0b016856e2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a31d4225-9b6b-44d3-a810-c99bd1e42776",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId1ToUpdate\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								},
								{
									"name": "Delete second piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6011a2cc-9b4d-4b9c-a85d-137b2c62c71c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "636dc4e8-e5f3-44cf-8143-ec2ea5b16965",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId2ToUpdate\");",
													"pm.globals.unset(\"poLineIdToCreatePiece\");",
													"pm.globals.unset(\"pieceRecordAwaiting1\");",
													"pm.globals.unset(\"pieceRecordAwaiting2\");",
													"pm.globals.unset(\"updatedPieceRecordAwaiting1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId2ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId2ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								},
								{
									"name": "delete title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4f9e0821-a364-4750-a990-865edca7af71",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "90953a70-5944-492e-b072-efd24de99f4b",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles",
												"{{titleId1}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c6000f0e-47ad-4e51-b64d-4c0b9da8c2db",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e461bb26-763c-4597-9ca4-9af614022635",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2eff63b1-e017-4490-a17d-23b2e388a17d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ef8e27d-43c6-40b8-bcb5-6f550e805ee3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Open order",
					"item": [
						{
							"name": "Open order flows",
							"item": [
								{
									"name": "Simple open order flow",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2755be2d-0b23-42cc-9c7d-cf9347ca367e",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e8542d5e-b6f8-49cd-9071-ba68372f59e7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder410-1\", beOrder);",
															"    pm.variables.set(\"beOrderId410-1\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber410-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "76e8513b-bb81-41d2-9f34-d47b5e8e5db2",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e708db46-e4ee-4fe3-b427-53d2d98d9014",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine410-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId410-1\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId410-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9cbf414c-647f-4297-b684-8f098624e259",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId410-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber410-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId410-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId410-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-1 Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bcff0ed9-5f9f-4d05-9bc3-83bc047e0d52",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrder410-1\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.variables.set(\"fundEncumbranceId-1-410-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId410-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId410-1}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e4c9ad1-84df-464e-ae44-cf3d05978868",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"1MIX1EL\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1b35c027-1c0e-4fef-a9e5-120058180226",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);",
											"",
											"pm.test(\"Each order has these fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"completeOpenOrderId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"    // the approval details are set on OPEN if \"approval required\" is set to false",
											"    pm.expect(jsonData.approvalDate).to.exist;",
											"    pm.expect(jsonData.approvedById).to.exist;",
											"  ",
											"});",
											"  utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8a8ee917-cfb6-47d7-a028-719cdbc928eb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    pm.variables.set(\"po_one_physical_one_electronic_lines\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "642875c4-6ed4-486b-94c5-f23b868b531e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"physElecOpenOrderId\", order.id); ",
											"});",
											"",
											"pm.test(\"2 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"    order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"    order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Fully Paid\"));",
											"});",
											"    utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_one_physical_one_electronic_lines}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Create Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "478bbb73-8b78-4404-8470-36d14c79815a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        order.workflowStatus = \"Open\";",
											"        order = utils.deletePoNumber(order);",
											"        for(var i = 0; i < order.compositePoLines.length; i++) {",
											"    \t  order.compositePoLines[i].receiptStatus = \"Receipt Not Required\";",
											"    \t  order.compositePoLines[i].paymentStatus = \"Pending\";",
											"        }",
											"        ",
											"        pm.variables.set(\"orderWithReceiptNotRequiredLines\", JSON.stringify(utils.prepareOrder(order)));",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96db1cda-2865-495b-96bc-bb9f0cc152c2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Receipt Not Required\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"orderWithReceiptNotRequiredId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithReceiptNotRequiredLines}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\n[MODORDERS-304](https://issues.folio.org/browse/MODORDERS-304). Even though Receiving is not required, Inventory interaction happens based on CreateInventory setting"
							},
							"response": []
						},
						{
							"name": "Create Open order for receiving history test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c534392d-dd03-4717-8fc1-307c3ec08d61",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = false;",
											"    order = utils.deletePoNumber(order);",
											"    pm.variables.set(\"poListedPrintMonographForReceivingHistory\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fffaba8c-4f88-4c6f-907d-ec553baf023a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"receivingHistoryPoId\", order.id); ",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"});",
											"",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForReceivingHistory}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total, checkinItems is `true`.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `false`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with checkinItems = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8578095e-e9b4-4753-88e6-1e74b18a97b3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1N\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = true;",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "38e9600d-69a1-4d9e-97a2-f1d19b992fe7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poToCheckinItemsId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create order all po lines checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc42bd9d-9819-42e2-9bbb-9c52e99464f6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1NPHYELEC\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = true;",
											"    order.compositePoLines[1].checkinItems = true;",
											"",
											"    // Set new product ids to be sure that new instances will be created",
											"    order.compositePoLines[0].details.productIds.pop();",
											"    ",
											"    order.compositePoLines[0].titleOrPackage = \"Hey! Just API testing checkin\"",
											"    order.compositePoLines[1].titleOrPackage = \"Hey! Just API testing checkin with no items\"",
											"    ",
											"    //set create Inventory so that no item interaction is necessary",
											"    order.compositePoLines[1].eresource.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"poForTestingCheckin\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fab0f9cb-53d1-4a06-bdba-8f992471b457",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => {",
											"     utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    if(line.orderFormat === \"Physical Resource\"){",
											"        pm.globals.set(\"checkin_physical_poLine\", line);",
											"    }else{",
											"        pm.globals.set(\"checkin_electronic_poLine\", line);",
											"    }",
											"    });",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poAllPoLineCheckin\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poForTestingCheckin}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with isPackage = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9b18dca2-acf9-4ad4-8243-5d7368045109",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    let line = order.compositePoLines[0];",
											"    line.isPackage = true;",
											"    // Set checkingItems flag",
											"    order.compositePoLines = [line];",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9d5e0dba-d8e7-4b31-af9c-5426b07892ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory not entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 1);",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Unopen order",
					"item": [
						{
							"name": "Unopen workflows",
							"item": [
								{
									"name": "Unpopen order and add addition POL and 1 Fund",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fd6711b2-759b-4178-bb6b-957e1f14704f",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "13585319-3dc4-4c99-a1d2-4f60aed974bc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder338-1\", beOrder);",
															"    pm.variables.set(\"beOrderId338-1\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber338-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "39ea1573-7b0f-4773-ab27-76b92d9aa578",
														"exec": [
															"console.log(\"Create first line for PO : \" + pm.variables.get(\"beOrderId338-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9798725f-fd4f-4b44-b81f-4e65123faf7c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line 1 is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine338-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId338-1\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d0526ea-f2f6-44cc-a151-a7a860632ce8",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e9222fb-8f9a-425c-9f16-b06218cf328b",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order after unOpen",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06d1d81b-cea1-4c91-bb56-8da8fbb8baba",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after unOpen\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(\"Purchase order : \" + beOrder.id);",
															"    pm.variables.set(\"beOrde338-1\", beOrder);",
															"    pm.environment.set(\"bePOLEncumbrance338-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.expect(beOrder.compositePoLines[0].purchaseOrderId).to.equal(beOrder.id);",
															"    pm.expect(beOrder.workflowStatus).to.equal(\"Pending\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e1774f6-50c0-4422-abf9-a32e2b0f187d",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Check first encumbrance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d6b02e0f-0f32-4e3d-af3a-4cb843f9a5c9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "96f7cc59-ad23-4709-a8fa-543e86b341dc",
														"exec": [
															"console.log(\"Create second line for PO : \" + pm.variables.get(\"beOrderId338-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1ba5dfcd-3fe7-404f-8d51-4b00f5d8b051",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line 2 is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine338-2\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId338-2\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReOpen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d4b2f36-52c7-4f3f-b772-18fe5216f169",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 7.2,\n  \"totalItems\": 4,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order after Open",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a0fbdf82-83d2-47a7-9758-7580031365f8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(\"Purchase order : \" + beOrder.id);",
															"    pm.variables.set(\"beOrde338-1\", beOrder);",
															"    pm.expect(beOrder.workflowStatus).to.equal(\"Open\");",
															"    pm.expect(beOrder.totalEstimatedPrice).to.equal(7.2);",
															"    pm.expect(beOrder.totalItems).to.equal(4);",
															"    pm.environment.set(\"bePOLEncumbrance338-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.expect(beOrder.compositePoLines[0].purchaseOrderId).to.equal(beOrder.id);",
															"    pm.environment.set(\"bePOLEncumbrance338-2\", beOrder.compositePoLines[1].fundDistribution[0].encumbrance);",
															"    pm.expect(beOrder.compositePoLines[1].purchaseOrderId).to.equal(beOrder.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get after reopen encumbrance by id 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b2baa71a-cb76-4952-b03a-6ca1fee13234",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Check first encumbrance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "29a115b3-178c-453f-9912-49b74ad15017",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get after reopen encumbrance by id 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "98a2fe7e-798a-4846-ba29-f627d12b6cb9",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Check second encumbrance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "75eb1ca4-94ce-4f57-97b9-a5a490224898",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance338-2}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ad90c284-2785-4543-b9b4-03acf3cdbaff",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c142f956-38df-44d4-beef-b029eef92066",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Unpopen order with 1POL and 1 Fund",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dd561bfa-6d29-4b5e-b880-d052eede5d13",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3c0c2c79-ea9e-42b9-a785-6ef00298a813",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder338-1\", beOrder);",
															"    pm.variables.set(\"beOrderId338-1\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber338-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fa3695b1-de92-4343-b4b4-802b4f77023e",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "da17bc53-3871-4f7c-a988-65b8b51c5bc5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine338-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId338-1\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "12889445-f118-4777-9cdc-da382e29b058",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6534a76b-3061-4425-8965-3069032620e9",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "44c7944f-88df-4412-88fa-9f3699b871cb",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrde338-1\", beOrder);",
															"    pm.environment.set(\"bePOLEncumbrance338-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bde40074-d4ec-4bf8-814f-7d2cb3f00904",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"     pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cc21fe6f-e412-49d5-bbf9-d9efc5e81f19",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance338-1}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cdfd9488-ea5e-45d0-8191-c99a88e7ecb8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c7c76fb-7244-4013-a9cb-8b6c41080c9d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "From Unpopen to Open with 1POL and 1 Fund and POL quantity changed",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "245a2215-1cc7-4227-9d55-a43096c6f206",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "64f99059-c9f6-43fb-82ab-88ecc5edbf3c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder338-2\", beOrder);",
															"    pm.variables.set(\"beOrderId338-2\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber338-2\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "effb9c64-827c-45b6-8636-e1b8b1784a6c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c03a3132-abec-4817-944f-1b7cd3f42503",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine338-2-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId338-2-1\", beOrderLine.id);",
															"    pm.variables.set(\"poLineNumber338-2-1\", beOrderLine.poLineNumber);",
															"    console.log(\"Id pol : \" + pm.variables.get(\"beOrderLineId338-2-1\"));",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-2}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "28e87c8b-4ce6-4ca6-b227-3423739e5789",
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"let utils = eval(globals.loadUtils);\r",
															"let order = {};\r",
															"\r",
															"pm.test(\"Order is open\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-2-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b9afb49a-0893-4b09-afad-e5a56deefda5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrder338-2\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.variables.set(\"fundEncumbranceId338-2-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-2-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bc7afe32-03d1-43ce-a532-b6b151c4da89",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    transactionArray = pm.response.json();\r",
															"    transactionArray.transactions.forEach(encumbrance => {\r",
															"        pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"        pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"        pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "193e5a9a-371d-4851-91b7-dc7225f9c8f2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3c073ad2-d8ae-424a-afd7-2cb38cb29063",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b1af943e-fad4-4f2e-a2c6-a871ae16e2d7",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "daecc7ab-c813-4ed4-99c1-c4e5059bb5af",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId338-2-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId338-2-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change quantity and cost for product in order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e84bfcd-e63d-405e-bff6-4e81a0937774",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "93601424-b603-4797-adae-7fd3887d4243",
														"exec": [
															"console.log(\"POL id\" + pm.variables.get(\"beOrderLineId338-2-1\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n      \"id\": \"{{beOrderLineId338-2-1}}\",\r\n      \"checkinItems\": false,\r\n      \"acquisitionMethod\": \"Approval Plan\",\r\n      \"alerts\": [],\r\n      \"claims\": [],\r\n      \"collection\": false,\r\n      \"contributors\": [\r\n        {\r\n          \"contributor\": \"Moutinho, Luiz\",\r\n          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\r\n        }\r\n      ],\r\n      \"cost\": {\r\n        \"listUnitPrice\": 2.0,\r\n        \"currency\": \"USD\",\r\n        \"discount\": 10.0,\r\n        \"discountType\": \"percentage\",\r\n        \"quantityPhysical\": 3,\r\n        \"poLineEstimatedPrice\": 5.4\r\n      },\r\n      \"details\": {\r\n        \"productIds\": [\r\n          {\r\n        \t\"productId\": \"3319643991\",\r\n    \t\t\"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n            \"qualifier\": \"\"\r\n          }\r\n        ],\r\n        \"subscriptionInterval\": 0\r\n      },\r\n      \"eresource\": {\r\n        \"activated\": false,\r\n        \"createInventory\": \"Instance, Holding\",\r\n        \"trial\": false,\r\n        \"accessProvider\": \"{{activeVendorId}}\"\r\n      },\r\n      \"fundDistribution\": [\r\n        {\r\n          \"encumbrance\": \"{{fundEncumbranceId338-2}}\",\r\n          \"fundId\": \"{{fundId}}\",\r\n          \"distributionType\": \"percentage\",\r\n          \"value\": 100.0\r\n        }\r\n      ],\r\n      \"isPackage\": false,\r\n      \"locations\": [\r\n        {\r\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\r\n          \"quantity\": 3,\r\n          \"quantityPhysical\": 3\r\n        }\r\n      ],\r\n      \"orderFormat\": \"Physical Resource\",\r\n       \"paymentStatus\" : \"Awaiting Payment\",\r\n      \"physical\": {\r\n        \"createInventory\": \"None\",\r\n    \t\"materialSupplier\": \"{{activeVendorId}}\",\r\n    \t\"materialType\": \"{{materialTypeId}}\",\r\n        \"volumes\": []\r\n      },\r\n      \"poLineNumber\": \"{{poLineNumber338-2}}\",\r\n      \"publisher\": \"Palgrave Macmillan\",\r\n      \"purchaseOrderId\": \"{{beOrderId338-2}}\",\r\n     \"receiptStatus\" : \"Awaiting Receipt\",\r\n      \"reportingCodes\": [],\r\n      \"rush\": false,\r\n      \"source\": \"User\",\r\n      \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\r\n      \"vendorDetail\": {\r\n        \"instructions\": \"\",\r\n        \"vendorAccount\": \"BRXXXXX-01\"\r\n      },\r\n      \"metadata\": {\r\n        \"createdDate\": \"2020-06-03T07:32:15.794+0000\",\r\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\r\n        \"updatedDate\": \"2020-06-03T07:38:34.754+0000\",\r\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\r\n      }\r\n    }"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{beOrderLineId338-2-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines",
														"{{beOrderLineId338-2-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-2-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "41cd10ea-8f01-4634-bd72-1dc3d7e4d4f9",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrder338-2\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.variables.set(\"fundEncumbranceId338-2-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "764cce26-28b2-43a4-b71b-3e3b373228f0",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-2-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3c34380a-bf91-4588-be2a-457b210ec10a",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    transactionArray = pm.response.json();\r",
															"    transactionArray.transactions.forEach(encumbrance => {\r",
															"        pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"        pm.expect(encumbrance.amount).to.equal(5.4);\r",
															"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(5.4);\r",
															"        pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"    });\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f96aa047-6686-4abf-aa79-02f122739cb9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4d305bd7-7586-43d6-94f9-8debc29b8113",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3d2c543e-ead9-4408-95b9-84fcef564bb7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "From Unpopen to Open with 1POL and 1 Fund and fund changed",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6c52a9ae-47bf-47e0-be4c-9dac07c20d45",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e7c3107f-8b03-4b42-b27b-e652365d03e8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    pm.environment.set(\"beOrderId338-3\", beOrder.id);",
															"    pm.environment.set(\"beOrderNumber338-3\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9624d050-856a-47f2-b5b1-37adc737afff",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-2\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2d343b0b-1770-4ecc-a5a0-3a905df887b8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"beOrderLine338-3\", beOrderLine);",
															"    pm.environment.set(\"beOrderLineId338-3\", beOrderLine.id);",
															"    pm.environment.set(\"poLineNumber338-3\", beOrderLine.poLineNumber);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-3}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0dcead24-c22b-4ba3-a3d1-2985c530075e",
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"let utils = eval(globals.loadUtils);\r",
															"let order = {};\r",
															"\r",
															"pm.test(\"Order is open\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ce24df1-b2a6-4f2c-b99c-2b54636532c8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId-1-338-3\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "83033f60-0941-4518-bd95-c0669b012b1e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2bbe1eae-b2aa-4f8d-bda4-84cd55cab69f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aef29244-e528-4897-81ef-b2dd19102000",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d57201c0-216b-493a-b88f-d5260bd54363",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cacc8659-47f7-48ac-88cf-fa64e9798af2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change fund in order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "69910b13-433f-48a4-a2a2-10c53c51fd63",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0bac9910-591d-4e1b-a078-01cd68993579",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n      \"id\": \"{{beOrderLineId338-3}}\",\r\n      \"checkinItems\": false,\r\n      \"acquisitionMethod\": \"Approval Plan\",\r\n      \"alerts\": [],\r\n      \"claims\": [],\r\n      \"collection\": false,\r\n      \"contributors\": [\r\n        {\r\n          \"contributor\": \"Moutinho, Luiz\",\r\n          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\r\n        }\r\n      ],\r\n      \"cost\": {\r\n        \"listUnitPrice\": 2.0,\r\n        \"currency\": \"USD\",\r\n        \"discount\": 10.0,\r\n        \"discountType\": \"percentage\",\r\n        \"quantityPhysical\": 3,\r\n        \"poLineEstimatedPrice\": 5.4\r\n      },\r\n      \"details\": {\r\n        \"productIds\": [\r\n          {\r\n        \t\"productId\": \"3319643991\",\r\n    \t\t\"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n            \"qualifier\": \"\"\r\n          }\r\n        ],\r\n        \"subscriptionInterval\": 0\r\n      },\r\n      \"eresource\": {\r\n        \"activated\": false,\r\n        \"createInventory\": \"Instance, Holding\",\r\n        \"trial\": false,\r\n        \"accessProvider\": \"{{activeVendorId}}\"\r\n      },\r\n      \"fundDistribution\": [\r\n        {\r\n          \"encumbrance\": \"{{fundEncumbranceId-1-338-3}}\",\r\n          \"fundId\": \"{{fundId-2}}\",\r\n          \"distributionType\": \"percentage\",\r\n          \"value\": 100.0\r\n        }\r\n      ],\r\n      \"isPackage\": false,\r\n      \"locations\": [\r\n        {\r\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\r\n          \"quantity\": 3,\r\n          \"quantityPhysical\": 3\r\n        }\r\n      ],\r\n      \"orderFormat\": \"Physical Resource\",\r\n       \"paymentStatus\" : \"Awaiting Payment\",\r\n      \"physical\": {\r\n        \"createInventory\": \"None\",\r\n    \t\"materialSupplier\": \"{{activeVendorId}}\",\r\n    \t\"materialType\": \"{{materialTypeId}}\",\r\n        \"volumes\": []\r\n      },\r\n      \"poLineNumber\": \"{{poLineNumber338-3}}\",\r\n      \"publisher\": \"Palgrave Macmillan\",\r\n      \"purchaseOrderId\": \"{{beOrderId338-3}}\",\r\n     \"receiptStatus\" : \"Awaiting Receipt\",\r\n      \"reportingCodes\": [],\r\n      \"rush\": false,\r\n      \"source\": \"User\",\r\n      \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\r\n      \"vendorDetail\": {\r\n        \"instructions\": \"\",\r\n        \"vendorAccount\": \"BRXXXXX-01\"\r\n      },\r\n      \"metadata\": {\r\n        \"createdDate\": \"2020-06-03T07:32:15.794+0000\",\r\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\r\n        \"updatedDate\": \"2020-06-03T07:38:34.754+0000\",\r\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\r\n      }\r\n    }"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{beOrderLineId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines",
														"{{beOrderLineId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8871b680-89f2-457c-ab1e-9edc98219353",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "269974dc-973f-4b9a-9f50-3955fe4a3832",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId338-2-3\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get released encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f9249c2e-cb94-4f06-b6dd-f48f5e8fa5f1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Released\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3d206c5e-2a9e-496a-99cc-2cac8af10865",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get new encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1da99bbc-7b85-4dc4-88f2-b394b20a78b9",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(5.4);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(5.4);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b9579991-10ed-4de9-8621-2d5439e35793",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId338-2-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId338-2-3}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f08f837d-9fba-48b1-8dae-4f53d86368e6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ab63c2f5-6d2a-4a7b-bb0e-7b3afa8562d0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d148e593-7e81-4fb8-94be-b521aa069e89",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"UN0P3N\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.environment.set(\"orderForUnopenFlow\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "55bff3a3-8725-4730-94fc-2e143d67cb75",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"orderForUnopenFlowId\", jsonData.id);",
											"    pm.environment.set(\"orderForUnopenFlowBody\", jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForUnopenFlow}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Unopen order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ba43923-b642-4718-81eb-cf08f7ebcf8d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let orderForUnopen = pm.environment.get(\"orderForUnopenFlowBody\");",
											"orderForUnopen.workflowStatus = \"Pending\";",
											"",
											"pm.variables.set(\"orderForUnopenBody\", JSON.stringify(orderForUnopen));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06be4a9c-9659-48df-852e-f5a1cfbc5f06",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForUnopenBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUnopenFlowId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUnopenFlowId}}"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund Distribution",
					"item": [
						{
							"name": "Open order 422 - fund distri total greater than poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3358622b-5ad8-4262-9e47-5ee89734f145",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 100;",
											"    order.compositePoLines[0].fundDistribution[1].value = 100;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85e5c618-58b8-45f9-a3ea-e03ed666efdf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var error = {};",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    error = pm.response.json();",
											"    pm.expect(error).to.exist;",
											"    pm.expect(error.errors[0].code).to.equal(\"incorrectFundDistributionTotal\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e48b5b0d-9988-4dc9-9765-5f32ec581154",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = res.json();",
											"",
											"    pm.variables.set(\"delOrderWithPoNumber\", order.poNumber);",
											"    ",
											"    utils.sendGetRequest(\"/orders/composite-orders?query=poNumber=\" + pm.variables.get(\"delOrderWithPoNumber\"), function (err, res) {",
											"         let orderToDelete = res.json();",
											"         pm.variables.set(\"delOrderId\", orderToDelete.purchaseOrders[0].id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cadba6cb-1d64-497f-9734-bb19eb0ca684",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Open order 422 - fund distri total less than poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c4b636e-e0e4-4c5a-a0d8-6475575af7f0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 90;",
											"    order.compositePoLines[0].fundDistribution[1].value = 9;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3dbb75d5-0adb-4a18-9316-16a2553c07b8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var error = {};",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    error = pm.response.json();",
											"    pm.expect(error).to.exist;",
											"    pm.expect(error.errors[0].code).to.equal(\"incorrectFundDistributionTotal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f7362fbd-3931-4869-bfab-a24935a2b26e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = res.json();",
											"    pm.variables.set(\"delOrderWithPoNumber\", order.poNumber);",
											"    ",
											"    utils.sendGetRequest(\"/orders/composite-orders?query=poNumber=\" + pm.variables.get(\"delOrderWithPoNumber\"), function (err, res) {",
											"        let orderToDelete = res.json();",
											"        pm.variables.set(\"delOrderId\", orderToDelete.purchaseOrders[0].id);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d64b48d-755d-4d3e-a64c-d120d4e1238b",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Open order 201 - fund distri total equals poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29a6e5de-ec01-4d94-97f7-43ee28ea4a08",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 90;",
											"    order.compositePoLines[0].fundDistribution[1].value = 10;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5c38ef8d-d874-4c23-9bf6-1acc9e7decf3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.environment.set(\"delOrderId201\", order.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "39003260-07ae-4e9b-a8e5-fbe00a372417",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5157a4e3-afe7-49ce-a010-b973de803ad5",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId201}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId201}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Should recieve Pieces if item.status = \"Order closed\" and order.workflowStatus = \"Closed\"",
							"item": [
								{
									"name": "Create order One-Time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "769ff8c9-00ef-41f9-b019-06a884713afc",
												"exec": [
													"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
													"if (bePoNumberNum === null) {",
													"    pm.environment.set(\"poNumberNum\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "36594fa0-0f59-4d44-9eb0-63b18ddccbc6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrder = pm.response.json();",
													"    pm.environment.set(\"order\", beOrder);",
													"    pm.environment.set(\"orderId\", beOrder.id);",
													"    pm.environment.set(\"orderNumber\", beOrder.poNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add order lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d30b2bd-8293-49bd-aba2-132831537a8b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrderLine = {};",
													"",
													"pm.test(\"Order line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrderLine = pm.response.json();",
													"    pm.environment.set(\"orderLine\", beOrderLine);",
													"    pm.environment.set(\"orderLineId\", beOrderLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{orderId}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Open order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd1225b7-4907-4115-bee3-59cc02904d28",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{orderId}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order is OPen",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0a5390c-978e-49c6-9ad5-72688b772011",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{orderId}}\",\n  \"approved\": false,\n  \"approvedById\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n  \"approvalDate\": \"2020-04-14T11:31:47.034+0000\",\n  \"dateOrdered\": \"2020-04-14T11:31:47.034+0000\",\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Closed\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:31:48.038+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  },\n  \"closeReason\": {\n    \"reason\": \"Ceased\",\n    \"note\": \"\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order is Close",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Recieve piece(Check-in)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b6426a5-77a0-4729-acd3-d4c4bf04adf9",
												"exec": [
													"pm.test(\"Pieces is retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    let piecesArray = pm.response.json();",
													"    pm.environment.set(\"pieceId1\", piecesArray.pieces[0].id);",
													"    console.log(piecesArray.pieces[0].id)",
													"    pm.environment.set(\"pieceId2\", piecesArray.pieces[1].id);",
													"    console.log(piecesArray.pieces[1].id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"value": "no-cache",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{orderLineId}} sortby locationId",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{orderLineId}} sortby locationId"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Recieve piece(Check-in)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a04fc17-e075-44ea-86c1-92262aa8db29",
												"exec": [
													"pm.test(\"Piece is recieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    receivingResultsArray = pm.response.json();",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[0].pieceId).to.be.equal( pm.environment.get(\"pieceId1\"));",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[0].processingStatus.type).to.be.equal(\"success\");",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[1].pieceId).to.be.equal( pm.environment.get(\"pieceId2\"));",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[1].processingStatus.type).to.be.equal(\"success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"toBeCheckedIn\": [\n    {\n      \"poLineId\": \"{{orderLineId}}\",\n      \"checkedIn\": 2,\n      \"checkInPieces\": [\n        {\n          \"id\": \"{{pieceId1}}\",\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n          \"itemStatus\": \"Order closed\"\n        },\n        {\n          \"id\": \"{{pieceId2}}\",\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n          \"itemStatus\": \"Order closed\"\n        }\n      ]\n    }\n  ],\n  \"totalRecords\": 2\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"check-in"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Receive all pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8a0052b6-9b44-4f75-906c-77da66f18191",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b1ba686-4e1c-41a7-89b1-38f9794f2b2d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f10f2201-58ef-4ff4-a0fd-404c660f5888",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c9b73248-eebc-4653-a433-1289b361a0e4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert all received piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive 10 pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e66f579-4b2c-465b-b38e-706e6a11d20e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\", 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f99883-4504-4a9c-80e1-e228ec25f631",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 10);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 10, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives 10 piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "04956a8a-db7c-4d54-b8e0-f1f6119de83f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16c67283-080b-4bec-96c2-afd108508baa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 10 received piece records back to `Expected` and Inventory items back to `On order` for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "63925b35-ff21-4204-9782-09253af786bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b9db1128-7994-4267-9513-a16d64e0836c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ed8783d-a317-4469-a357-1673feec714b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c3f7c37-bb3e-472a-9aa6-d073edd66f9b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 10 pieces, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Revert 2 received pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2ce29847-bbf5-41d6-80e4-4d304e61084e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\", 2);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "826a171b-ec48-4b67-950b-5cffa2424015",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 2, \"Expected\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 2 received piece records back to `Expected` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9d55545-a4a0-4d1d-b8e6-9fba0e2bd489",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fc7fae36-7935-4f0a-ae9a-1a35aabc22ab",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 3 pieces, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Revert 1 received piece for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "59122b9e-7db2-48f6-acc6-fb8309da58da",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc7f0ffd-d048-4053-91c9-fcbbd41f98c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, receivingHistoryTotalRecords - 1);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d0ad37bf-037c-4cf9-be08-8a2e97f0a295",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.completeOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ad819d9f-9ee0-4b98-b528-807c4cb31ee2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with P/E Mix and Electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will be still `Open` after this operation because all PO Lines have `Partially Paid` payment status (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "85b9f333-b4a1-4311-b8c6-a616b2b13738",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.physElecOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fc9905f-3bda-4fd1-9ffc-085ee9b0754e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with physical and electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will become `Closed` after this operation because all PO Lines have `Fully Paid` payment status and `Fully Received` receipt status once all piece records are received (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with 4 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "252c17aa-ea66-485a-b73c-bcd1412f2aa2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.anotherCompleteOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76df0375-1f0f-4608-a307-ef37856dc3ee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by requests from `Pending To Open order` folder (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).\nThe order will be closed after this operation (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Close orders updating payment status of each PO Line",
					"item": [
						{
							"name": "Get order with 4 lines and update each one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "419a0471-6f43-4f85-bc4d-110d0fa550d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d6afe7ae-d45d-42b8-a3c7-6ce58a3f2862",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.anotherCompleteOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"       // for (let j = 0; j < locations.length; j++) {",
											"       //     locations[j].quantity = 9999;",
											"       // }      ",
											"    }",
											"        ",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(4);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get order with receipt not required and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a035f9c7-62a3-4aba-bfdd-849f0b0d542a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "72058ec6-fb2f-4c4a-a4ac-6ad7b7893565",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"        //for (let j = 0; j < locations.length; j++) {",
											"        //    locations[j].quantity = 9999;",
											"        //}      ",
											"    }",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get Mixed order and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7ad27eb7-fa6f-415a-abf1-931b3aa04175",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "82b825b1-1f17-46c5-9ebf-3f8f4a594a86",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"        //for (let j = 0; j < locations.length; j++) {",
											"        //    locations[j].quantity = 9999;",
											"        //}    ",
											"    }",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "Update PO Lines' payment statuses of `Open` orders so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218)).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "58c9e147-524a-41d1-95ac-706545295a7f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f683aa83-bed1-4434-9bf8-bdc5bf2e78f9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check closed orders and re-open",
					"item": [
						{
							"name": "Order with 4 PO Lines should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5713c1a-0d69-4b88-ae86-5bb2fbbf337c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "42b15817-ca10-45ea-be26-26f64f106971",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Cancelled\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "46afff88-b3d2-4e86-ba6d-a2964971342c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c10592c6-aac0-486b-bf76-0876792c2f69",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Partially Paid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6643168-4099-4c83-b5ff-c8cf7270bbef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e2e54e5d-23d3-4315-9aa1-03343d3b07f0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order: revert 1 received piece for Electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a741228-77a5-432d-b396-f26f6c581452",
										"exec": [
											"eval(globals.loadUtils).prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca7020a8-9f1d-40bb-9bfd-ea297cf8202b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has successfully reverted piece\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Order with 4 PO Lines should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ea4bef43-9ebc-4156-9c78-00282d6594df",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "669e1837-9253-400b-9690-eef59f07f681",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d73ba507-d22d-4195-8ff0-262d9dfbd496",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "beeb6bb5-0933-4424-83eb-62bbe701a831",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "610924dc-2cc6-41fa-b3ae-f979d678fff7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "efa31ea7-e788-49ba-9402-8e74afec6b76",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "The folder contains sets of requests:  \n1. Get orders and verify that their workflow status is `Closed`. If this is true, modify one of PO Line's payment status so the order becomes `Open` eventually.\n2. Roll back one of received piece so the order becomes `Open` eventually.\n3. Verify that orders were successfully re-opened by operations described above.\n\nSee [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218) for more details.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e36429f-6653-4f7f-861c-23369fa96ccf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "047f06e0-96ce-4929-be80-4d6d99306abc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate New POnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a229e50-5f3a-4317-98c7-2ff09bb3da4c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2b316bef-15e8-4e46-a487-50f91193246a",
										"exec": [
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"NewPO111NewPO\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 204 if a valid and unique PO Number is given"
							},
							"response": []
						},
						{
							"name": "Get poNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89d2aa8d-7772-4136-9755-d537999d8ce4",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify response status\r",
											"pm.test(\"First response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Validate PoNumber schema\r",
											"var schema = JSON.parse(pm.environment.get(utils.schemaPrefix + \"po_number.json\"));\r",
											"pm.test('PoNumber schema is valid', function() {\r",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//3.  Verify po number generation process\r",
											"utils.sendGetRequest(\"/orders/po-number\", function (err, res) {\r",
											"    pm.test(\"Second response status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Second request po number : \" + res.json().poNumber);\r",
											"\r",
											"        pm.test(\"po numbers are not same\", function () {\r",
											"            pm.expect(jsonData.poNumber).to.not.eql(res.json().poNumber);\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f10875f-4132-419f-90d1-ff5f79f21720",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number"
									]
								},
								"description": "GET /orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Orders",
					"item": [
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69117cb9-1222-48cd-adbc-b52764c5358d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3f1db16-f5b2-4d07-adc2-dadda65a2780",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 3 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.purchaseOrders).to.have.lengthOf.at.least(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders by query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c6b42305-7875-4ab8-a885-de4c1c90966a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "47583bb1-5ffc-4ece-8162-7ce4170de60a",
										"exec": [
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper workflow status\", function () {",
											"    for(var i = 0; i < jsonData.purchaseOrders.length; i++) {",
											"    \tpm.expect(jsonData.purchaseOrders[i].workflowStatus).to.equal(\"Open\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e9e07f7-a01b-47e3-9a75-aae5064da344",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7903aff7-65fa-4ad9-bc8a-635ffed46606",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var purchaseOrdersData = {};",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    purchaseOrdersData = pm.response.json();",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"    ",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Validate that response contains orders sorted by dateOrdered ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    let purchaseOrders = pm.response.json().purchaseOrders;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"Validate that PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											"",
											"",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "011306bd-2fb7-46a8-94bd-545bd4136328",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fe78be4e-f42c-480a-88a8-c8556654dd42",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Response contains orders sorted by dateOrdered descending\", function () {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.most(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders with date range and nested field sorting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee59ab5c-ad28-449b-8d5c-e443e8f5ad54",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "367bf3d1-6e2d-4766-9796-8a2428b3ca05",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment');",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order with metadata.createdDate\", function () {",
											"    let numOfOrdersWithMetadata = 0;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(purchaseOrders[i]).to.have.property(\"metadata\");",
											"        if (purchaseOrders[i].hasOwnProperty('metadata') && purchaseOrders[i].metadata.hasOwnProperty('createdDate')) {",
											"            numOfOrdersWithMetadata++;",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.not.be.below(2);",
											"    pm.expect(numOfOrdersWithMetadata).to.not.be.below(2);",
											"    ",
											"    pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].metadata.createdDate);",
											"    }});",
											"    pm.test(\"Response contains orders in the fixed date range\", function () {",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"    }});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}} sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}} sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Order Lines",
					"item": [
						{
							"name": "Get list of lines by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "067392f9-cba0-4721-8642-04d79553479c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ebabb415-783b-4ac9-ad37-fc0d97a632af",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 4 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.poLines).to.have.lengthOf.above(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of lines with \"Awaiting Payment\" status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8acf7b6a-ce0e-460a-ac77-f1d24c029ca2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2d48e4e6-be7b-45ca-b2c3-fcb3a4bc55e8",
										"exec": [
											"pm.test(\"Validate that response contains orders with proper payment status\", function () {",
											"    pm.response.to.have.status(200);",
											"    let poLines = pm.response.json().poLines;",
											"    pm.expect(poLines).to.have.lengthOf.at.least(5);",
											"    poLines.forEach(pol => pm.expect(pol.paymentStatus).to.equal(\"Awaiting Payment\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=10&query=paymentStatus==Awaiting Payment",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "query",
											"value": "paymentStatus==Awaiting Payment"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eba1816d-81ac-4df2-97d1-5dbf24855448",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "915fc937-31a5-4313-bdc1-e2c631802dfa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.test(\"Check if polines sorted by order metadata.createdDate field\", function() {",
											"            if (poLines[i].hasOwnProperty('metadata')) {",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"                date = new Date(poLines[i].metadata.createdDate);",
											"            }",
											"        });",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of order lines with date range and nested search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b334cdf4-c858-440a-a6b9-88d5282dcf1a",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "93f8ddcc-4840-4ac6-a0ff-11680c219b24",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment')",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.expect(poLines[i]).to.have.property(\"metadata\");",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"        //check polines date range",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"        date = new Date(poLines[i].metadata.createdDate);",
											"",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=physical.createInventory==Instance, Holding, Item AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc9b61c5-452d-4ea9-9928-877c830624be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e08b7ea0-ae46-44bf-a232-0ddd797b5f2d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder line response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 PO line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.expect(poLines[i]).to.have.property(\"metadata\");",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(date);",
											"        date = new Date(poLines[i].metadata.createdDate);",
											"",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"PoLines with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35673c29-e69f-49d9-a435-7105781eb384",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "61ed08db-7a53-424e-9584-a690c315ad4c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces Creation",
					"item": [
						{
							"name": "P/E Mix Order (Physical and Electronic resources)",
							"item": [
								{
									"name": "Pieces PE Mix - Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4261443d-a293-441d-9797-f1e3d263b41c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order.compositePoLines[0].orderFormat = \"P/E Mix\";",
													"    ",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.variables.set(\"poListedPrintMonographPiece\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4e819161-326d-4588-900a-f5e2a030af36",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"orderIdPEMix\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{poListedPrintMonographPiece}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e75751e4-3441-4577-a1c2-3c9459a023b4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8384a31d-2643-4e2f-940b-20a4116ea1fd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 2);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"P/E Mix\")[0].id); ",
													"    pm.globals.set(\"poLine2IdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"Electronic Resource\")[0].id);",
													"    pm.globals.set(\"requestBodyToBeUpdated\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(7);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receiving History initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c7bf6262-9e2e-4c25-b023-ed9db4923e8d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0667b0e1-c249-4148-8e4b-cf7de521e750",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3dc1ddf7-ac72-4931-b5be-697229f64c3b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66739b9e-a435-4e5a-8444-bf94fdbca90f",
												"exec": [
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyToBeUpdated}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9a4f7381-9909-4ec0-a0f1-862d5db4ee47",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9aef00ee-6642-4802-a53e-c501b071216c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(7);",
													"    jsonData.pieces.forEach(piece => utils.validatePiece(piece));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId==({{poLineIdPEMix}} or {{poLine2IdPEMix}})",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId==({{poLineIdPEMix}} or {{poLine2IdPEMix}})"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7566cbd3-78db-476f-b7de-540a7775eeae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4d7ec3ec-500b-48c2-a2e9-7e6c2df8b468",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// poLine1 -> 3 physical + 1 electronic = 4 pieces",
													"// poLine2 -> 3 electronic = 3 pieces",
													"// 3 + 4 -> 7 Pieces",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(7);",
													"    let receivingHistory = jsonData.receivingHistory;",
													"",
													"    let pol1PhysQty = receivingHistory.filter(entry => entry.pieceFormat === \"Physical\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol1ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol2ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLine2IdPEMix).length;",
													"    pm.expect(pol1PhysQty).to.eql(3);",
													"    pm.expect(pol1ElQty).to.eql(1);",
													"    pm.expect(pol2ElQty).to.eql(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for P/E Mix resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8b178d02-925d-4fd3-838f-774c4c95ef32",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"P/E Mix\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2dc7bcf2-a611-4a32-9077-a9313b0d2b3b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for Electronic resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b331a7-0af2-4056-b1cb-19df7d188e0e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"Electronic Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "444390eb-03a7-46d1-b72a-9e0b71088237",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 4 pieces, create inventory is `true`."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f96724c4-55c7-4472-b739-bc7577f7611a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b4878389-a646-48bf-a2f0-2559bc57c84f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Order with only Physical resource",
							"item": [
								{
									"name": "Pieces Phy - Create Draft order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6320ddef-3ea6-46d6-9826-434e873be78e",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"randomUUId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e9194fc-fac2-4a25-9da6-7cfbc6fbae76",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{randomUUId}}\",\n    \"approved\": true,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"PIECE100674545\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 152.63,\n    \"totalItems\": 6,\n    \"workflowStatus\": \"Pending\",\n    \"vendor\": \"{{activeVendorId}}\",\n    \"compositePoLines\": [\n        {\n            \"id\": \"4186d931-3965-4794-bfbf-a398944127c2\",\n            \"acquisitionMethod\": \"Purchase At Vendor System\",\n            \"alerts\": [\n                {\n                    \"id\": \"a8129c90-208d-4a0d-aba1-71faa188fe84\",\n                    \"alert\": \"Receipt overdue\"\n                }\n            ],\n            \"cancellationRestriction\": false,\n            \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n            \"claims\": [\n                {\n                    \"claimed\": false,\n                    \"sent\": \"2018-10-09T00:00:00.000+0000\",\n                    \"grace\": 30\n                }\n            ],\n            \"collection\": false,\n            \"contributors\": [\n                {\n                    \"contributor\": \"Ed Mashburn\",\n                    \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n                }\n            ],\n            \"cost\": {\n                \"listUnitPrice\": 24.99,\n                \"currency\": \"USD\",\n                \"additionalCost\": 10,\n                \"discount\": 5,\n                \"discountType\": \"percentage\",\n                \"quantityPhysical\": 3,\n                \"quantityElectronic\": 0,\n                \"poLineEstimatedPrice\": 81.22\n            },\n            \"description\": \"ABCDEFGH\",\n            \"details\": {\n                \"receivingNote\": \"ABCDEFGHIJKL\",\n                \"productIds\": [\n                    {\n                        \"productId\": \"9780764354113\",\n                        \"productIdType\": \"{{identifierTypeId}}\"\n                    }\n                ],\n                \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n                \"subscriptionInterval\": 824,\n                \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n            },\n            \"donor\": \"ABCDEFGHIJKLM\",\n            \"fundDistribution\": [\n                {\n                    \"code\": \"HIST\",\n        \t\t\t\"fundId\": \"{{fundId}}\",\n        \t\t\t\"distributionType\": \"percentage\",\n        \t\t\t\"value\": 80\n                },\n                {\n                    \"code\": \"GENRL\",\n        \t\t\t\"fundId\": \"{{fundId}}\",\n                    \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\",\n        \t\t\t\"distributionType\": \"percentage\",\n        \t\t\t\"value\": 20\n                }\n            ],\n            \"locations\": [\n                {\n                    \"locationId\": \"{{locationId1}}\",\n                    \"quantity\": 1,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 1\n                },\n                {\n                    \"locationId\": \"{{locationId2}}\",\n                    \"quantity\": 2,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 2\n                }\n            ],\n            \"orderFormat\": \"Physical Resource\",\n            \"paymentStatus\": \"Awaiting Payment\",\n            \"physical\": {\n                \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n                \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n                \"volumes\": [\n                    \"vol.1\"\n                ],\n                \"materialType\": \"{{materialTypeId}}\"\n            },\n            \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n            \"publicationDate\": \"2017\",\n            \"publisher\": \"Schiffer Publishing\",\n            \"purchaseOrderId\": \"8b854f27-06cf-41ed-a7cb-d00d5d8fe5e4\",\n            \"receiptStatus\": \"Pending\",\n            \"reportingCodes\": [\n                {\n                    \"id\": \"9f49a9b0-5868-45ac-a2ec-c5a405311f4a\",\n                    \"code\": \"CODE1\",\n                    \"description\": \"ABCDEF\"\n                },\n                {\n                    \"id\": \"4bf527d2-0a01-41ec-bb56-eb660f970248\",\n                    \"code\": \"CODE2\",\n                    \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                },\n                {\n                    \"id\": \"8fd796e5-6b8d-4f60-9302-4071e9e844da\",\n                    \"code\": \"CODE3\",\n                    \"description\": \"ABCDE\"\n                }\n            ],\n            \"requester\": \"Leo Bulero\",\n            \"rush\": true,\n            \"selector\": \"ABCD\",\n            \"source\": \"API\",\n            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n            \"vendorDetail\": {\n                \"instructions\": \"ABCDEFG\",\n                \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n                \"refNumber\": \"123456-78\",\n                \"refNumberType\": \"Supplier's unique order line reference number\",\n                \"vendorAccount\": \"8910-10\"\n            },\n            \"metadata\": {\n                \"createdDate\": \"2010-10-08T03:53:00.000+0000\",\n                \"createdByUserId\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8998bd2f-399b-4d74-9c0d-b2bd5037f52a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aaa36ea4-0897-49a3-bba6-4a9a24c4da2d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 1);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPhysical\", order.compositePoLines[0].id); ",
													"    pm.globals.set(\"requestBodyPhysical\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(3);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receiving history initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "251f6bd0-1285-4016-bb47-9f43291e45a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04bf24c0-faf1-4a7f-a444-3c9a4bcd84c7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "61ad573b-c317-4db8-9a9c-24587e5dbaa3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1b7b2242-5951-4d1c-aac8-68f821c72587",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyPhysical}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ab7be720-9e3d-4f0c-a0f9-66fff657d6b4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f5d092cd-df72-4d40-973c-b439839947fe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(3);",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Expected\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7fd5482c-ed80-45a4-ad69-2ac6f134e004",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77825423-743f-4949-b694-d066ca90e5c5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// 3 pieces created for 3 physical resources",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => {",
													"        utils.validateReceivingHistory(history);",
													"        pm.expect(history.pieceFormat).to.equal(\"Physical\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receive all pieces for Physical resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "54b1d4d5-85c2-400f-af98-36e331f52739",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.randomUUId, \"Physical Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6d82768a-cc4d-47e0-8aee-24422b110baf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
									},
									"response": []
								},
								{
									"name": "Get all pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1c8e6d20-26a8-45a7-a375-786379e5535b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bcf78c5-44e1-4fe1-b014-a69479826563",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(3);",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Received\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5b5419ac-0e12-4959-8457-4d3506f4133f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6db0f26f-b6f8-43f6-abb7-7bcda9e6286c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create piece with itemId",
							"item": [
								{
									"name": "init inventory data",
									"item": [
										{
											"name": "create instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fa66c6e-4bbc-4a8c-a456-426a4418ec1d",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f8185326-6f85-48f6-a84b-a0e7da624b8f",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"_instance_id\", uuid.v4());",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"discoverySuppress\": false,\n    \"staffSuppress\": false,\n    \"previouslyHeld\": false,\n    \"source\": \"FOLIO\",\n    \"title\": \"test\",\n    \"instanceTypeId\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\n    \"precedingTitles\": [],\n    \"succeedingTitles\": [],\n    \"id\": \"{{_instance_id}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances"
													]
												}
											},
											"response": []
										},
										{
											"name": "create holding",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a3d54d4-2041-4c4c-ac86-5004417b5836",
														"exec": [
															"pm.environment.set(\"_holding_id\", pm.response.json().id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"permanentLocationId\" : \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n\t\"instanceId\" : \"{{_instance_id}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{instanceId}}%20and%20permanentLocationId==53cf956f-c1df-410b-8bea-27f712cca7c0",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create item",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db27383d-dbb0-4a90-bd0e-1fc92fa843b9",
														"exec": [
															"pm.environment.set(\"_item_id\", pm.response.json().id);",
															"",
															"pm.test(\"purchaseOrderLineIdentifier is null\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.purchaseOrderLineIdentifier).to.eql(null);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\" : \"{{_holding_id}}\",\n    \"barcode\": \"{{$guid}}\",\n    \"materialType\": {\n        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\"\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"items"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "create order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "879356c9-5894-4c1b-a5b7-a09add11934a",
												"exec": [
													"var id = pm.response.json().id",
													"pm.environment.set(\"_order_id\", id);",
													"pm.environment.set(\"_poNumber\", pm.response.json().poNumber);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d8a31e68-8658-4e11-9e92-ae8b230357cc",
												"exec": [
													"var poNumberNum = pm.environment.get(\"poNumberNum\");",
													"if (poNumberNum === null) {",
													"    pm.environment.set(\"poNumberNum\", 1);",
													"    console.log('1');",
													"}else",
													"{",
													"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
													"    console.log('2');",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"poNumber\": \"99999{{poNumberNum}}\",\n    \"orderType\": \"One-Time\",\n    \"vendor\": \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "create order-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89780c6e-8d99-423b-958f-0e77f5a1fb6f",
												"exec": [
													"pm.environment.set(\"_poline_id\", pm.response.json().id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"edition\" : \"First edition.\",\n  \"checkinItems\" : true,\n  \"instanceId\" : \"271827e7-8e62-4669-bb3a-fac5ed92c4e9\",\n  \"acquisitionMethod\" : \"Approval Plan\",\n  \"alerts\" : [ ],\n  \"claims\" : [ ],\n  \"contributors\" : [ {\n    \"contributor\" : \"Burnett, William (Consulting professor of design),\",\n    \"contributorNameTypeId\" : \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n  }, {\n    \"contributor\" : \"Evans, David J. (David John), 1953-\",\n    \"contributorNameTypeId\" : \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n  } ],\n  \"cost\" : {\n    \"listUnitPrice\" : 1.0,\n    \"currency\" : \"USD\",\n    \"discountType\" : \"percentage\",\n    \"quantityPhysical\" : 1,\n    \"poLineEstimatedPrice\" : 1.0\n  },\n  \"details\" : {\n    \"productIds\" : [ {\n      \"productId\" : \"9780525655244\",\n      \"productIdType\" : \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n      \"qualifier\" : \"(hardcover)\"\n    } ],\n    \"subscriptionInterval\" : 365\n  },\n  \"eresource\" : {\n    \"activated\" : false,\n    \"createInventory\" : \"Instance, Holding\",\n    \"trial\" : false,\n    \"accessProvider\" : \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\"\n  },\n  \"fundDistribution\" : [ {\n    \"fundId\" : \"65032151-39a5-4cef-8810-5350eb316300\",\n    \"distributionType\" : \"percentage\",\n    \"value\" : 100.0\n  } ],\n  \"isPackage\" : false,\n  \"locations\" : [ {\n    \"locationId\" : \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"quantity\" : 1,\n    \"quantityPhysical\" : 1\n  } ],\n  \"orderFormat\" : \"Physical Resource\",\n  \"paymentStatus\" : \"Pending\",\n  \"physical\" : {\n    \"createInventory\" : \"Instance, Holding, Item\",\n    \"materialType\" : \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\n    \"materialSupplier\" : \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\",\n    \"volumes\" : [ ]\n  },\n  \"poLineNumber\" : \"{{_poNumber}}-1\",\n  \"publicationDate\" : \"2020\",\n  \"publisher\" : \"Alfred A. Knopf\",\n  \"purchaseOrderId\" : \"{{_order_id}}\",\n  \"receiptStatus\" : \"Pending\",\n  \"reportingCodes\" : [ ],\n  \"source\" : \"User\",\n  \"titleOrPackage\" : \"Designing your work life : how to thrive and change and find happiness at work / Bill Burnett and Dave Evans.\",\n  \"vendorDetail\" : {\n    \"instructions\" : \"\",\n    \"vendorAccount\" : \"1234\"\n  },\n  \"metadata\" : {\n    \"createdDate\" : \"2020-04-17T12:07:19.778+0000\",\n    \"createdByUserId\" : \"b6c6415e-acec-561a-b7b6-a5f474393cbf\",\n    \"updatedDate\" : \"2020-04-17T12:07:19.778+0000\",\n    \"updatedByUserId\" : \"b6c6415e-acec-561a-b7b6-a5f474393cbf\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "get title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cccfd74d-8331-4844-b6a2-935a90d9c35a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bce92df-f314-4bfa-a8f5-01ffdcb37f89",
												"exec": [
													"pm.test(\"Title status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"    let title = pm.response.json().titles[0];",
													"    pm.expect(title.id).to.exist;",
													"    pm.variables.set(\"titleId\", title.id);",
													"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{_poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{_poline_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "create piece",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5659d1cb-fd68-4b73-94ef-d94c942a0616",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Physical\",\n    \"caption\": \"test\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{titleId}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										}
									},
									"response": []
								},
								{
									"name": "get item with purchaseOrderLineIdentifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60d03c45-aa2c-4278-8391-3720c7e7bd7a",
												"exec": [
													"",
													"pm.test(\"purchaseOrderLineIdentifier isn't null\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.purchaseOrderLineIdentifier).to.eql(pm.environment.get(\"_poline_id\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\": \"4e7762bf-eb3a-4fd4-bb9a-cf102bc122d1\",\n    \"barcode\": \"1234{{poNumber}}\",\n    \"materialType\": {\n        \"id\": \"615b8413-82d5-4203-aa6e-e37984cb5ac3\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"2b94c631-fca9-4892-a730-03ee529ffe27\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_item_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"inventory",
												"items",
												"{{_item_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "37a6a68b-60f6-4608-8ea9-76b02e135b37",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "14bb14fb-138e-41a1-82a6-397137e0bafd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create holdings/instance/item in time manual piece creation for POL is package",
							"item": [
								{
									"name": "Create holdings/instance/item in time manual piece creation where POL is package",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d3b7a089-5dd9-406d-b7f1-6a082c421dee",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "04503f42-7d7d-4a54-98b4-9ee493907cbc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"order356-1\", beOrder);",
															"    pm.variables.set(\"orderId356-1\", beOrder.id);",
															"    pm.variables.set(\"orderNumber356-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add package order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "72112980-a8db-473b-9651-7ad062a31463",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"orderLine356-1\", beOrderLine);",
															"    pm.variables.set(\"orderLineId356-1\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-1}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance, Holding, Item\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35d4fcf1-1b7a-40a4-bcac-13c840019c50",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.variables.set(\"title356-1\", title);",
															"    pm.variables.set(\"titleId356-1\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-1}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f5317b2-c4fe-40ab-ad2c-3b89d42dbcd3",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Order line is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.variables.set(\"pieceId356-1\", piece.id);\r",
															"    pm.variables.set(\"pieceTitleId356-1\", piece.titleId);\r",
															"    pm.variables.set(\"pieceLocationId356-1\", piece.locationId);\r",
															"    pm.variables.set(\"piecePoLineId356-1\", piece.poLineId);\r",
															"    pm.variables.set(\"pieceItemId356-1\", piece.itemId);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-1}}\",\n\t\"titleId\":\"{{titleId356-1}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b4bcd75-c64b-4476-aa27-5b6dde143d34",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let line = {};\r",
															"\r",
															"pm.test(\"Get order\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    line = pm.response.json();\r",
															"    pm.expect(line.compositePoLines[0].instanceId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fae41d4d-c693-4240-97bf-ee5b8896fff3",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.variables.set(\"titleId356-1\", title.id);\r",
															"    pm.variables.set(\"titleInstanceId356-1\", title.instanceId);\r",
															"    pm.variables.set(\"titleTitle356-1\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.variables.get(\"orderLineId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a7988f0-2d90-4262-85d0-5febd7cd71d8",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get instance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.variables.set(\"instanceId356-1\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.variables.get(\"titleTitle356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Item has link to title, POL, location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0443f505-49b7-47b4-9c2f-5700fdafcc58",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let item = {};\r",
															"\r",
															"pm.test(\"Get item\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    item = pm.response.json();\r",
															"    pm.variables.set(\"itemId356-1\", item.id);\r",
															"    pm.variables.set(\"itemHoldingId356-1\", item.holdingsRecordId);\r",
															"    pm.expect(item.title).to.be.equal(pm.variables.get(\"titleTitle356-1\"));\r",
															"    pm.expect(item.purchaseOrderLineIdentifier).to.be.equal(pm.variables.get(\"orderLineId356-1\"));\r",
															"    pm.expect(item.effectiveLocation.id).to.be.equal(pm.variables.get(\"pieceLocationId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{pieceItemId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"items",
														"{{pieceItemId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4acfe8ca-83dd-48e5-91f8-acb1bcfb1347",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holding = {};\r",
															"\r",
															"pm.test(\"Get holding\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holding = pm.response.json();\r",
															"    pm.variables.set(\"holdingId356-1\", holding.id);\r",
															"    pm.expect(holding.instanceId).to.be.equal(pm.variables.get(\"instanceId356-1\"));\r",
															"    pm.expect(holding.permanentLocationId).to.be.equal(pm.variables.get(\"pieceLocationId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{itemHoldingId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings",
														"{{itemHoldingId356-1}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create holdings/instancein time manual piece creation where POL is package Copy",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5822bde8-9c6e-4b8a-84fc-f01e324d3b07",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b35c5363-50d1-4433-8db5-d5b4ff4bd4f6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"order356-2\", beOrder);",
															"    pm.environment.set(\"orderId356-2\", beOrder.id);",
															"    pm.environment.set(\"orderNumber356-2\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Package order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e38bdaaa-ed8c-4019-80d8-c2f46159cabb",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"orderLine356-2\", beOrderLine);",
															"    pm.environment.set(\"orderLineId356-2\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-2}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "94a3b7c0-5706-4269-9bc3-783c772a9185",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Title is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.environment.set(\"title356-2\", title);",
															"    pm.environment.set(\"titleId356-2\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-2}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "78f634dd-47f0-4c24-b198-740eccdeeb91",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Piece is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.environment.set(\"pieceId356-2\", piece.id);\r",
															"    pm.environment.set(\"pieceTitleId356-2\", piece.titleId);\r",
															"    pm.environment.set(\"pieceLocationId356-2\", piece.locationId);\r",
															"    pm.environment.set(\"piecePoLineId356-2\", piece.poLineId);\r",
															"    pm.expect(piece.itemId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-2}}\",\n\t\"titleId\":\"{{titleId356-2}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e25e6852-f72c-4417-ba75-3cfef8ec19ff",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let line = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    line = pm.response.json();\r",
															"    pm.expect(line.compositePoLines[0].instanceId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a2c1e52-db8e-40c0-b6cf-6d00293b2555",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.environment.set(\"titleId356-2\", title.id);\r",
															"    pm.environment.set(\"titleInstanceId356-2\", title.instanceId);\r",
															"    pm.environment.set(\"titleTitle356-2\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.environment.get(\"orderLineId356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d51486e0-4903-4118-8586-957ec463f564",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.environment.set(\"instanceId356-2\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.environment.get(\"titleTitle356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b96b719-8be6-4e41-8b09-7f29d0cc2d3f",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holdings = {};\r",
															"\r",
															"pm.test(\"Get holding\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holdings = pm.response.json();\r",
															"    pm.environment.set(\"holdingId356-2\", holdings.holdingsRecords[0].id);\r",
															"    pm.expect(holdings.holdingsRecords[0].instanceId).to.be.equal(pm.environment.get(\"instanceId356-2\"));\r",
															"    pm.expect(holdings.holdingsRecords[0].permanentLocationId).to.be.equal(pm.environment.get(\"pieceLocationId356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{titleInstanceId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{titleInstanceId356-2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create instance time manual piece creation where POL is package Copy Copy",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9852d671-6d84-489e-aed2-0a73ad58d768",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "45c33467-6d63-412e-9bcd-ffd25d1b9c07",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"order356-3\", beOrder);",
															"    pm.environment.set(\"orderId356-3\", beOrder.id);",
															"    pm.environment.set(\"orderNumber356-3\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "34bef904-4b1c-4a35-b80c-7abfc965eba3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"orderLine356-3\", beOrderLine);",
															"    pm.environment.set(\"orderLineId356-3\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-3}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "85310441-76b2-4c77-b161-9d9f4ffe3d03",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Piece is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.environment.set(\"title356-3\", title);",
															"    pm.environment.set(\"titleId356-3\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-3}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9a15b37-f9c1-45bc-8195-b8a965de692f",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Piece is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.environment.set(\"pieceId356-3\", piece.id);\r",
															"    pm.environment.set(\"pieceTitleId356-3\", piece.titleId);\r",
															"    pm.environment.set(\"pieceLocationId356-3\", piece.locationId);\r",
															"    pm.environment.set(\"piecePoLineId356-3\", piece.poLineId);\r",
															"    pm.expect(piece.itemId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-3}}\",\n\t\"titleId\":\"{{titleId356-3}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3f7eb70d-83fc-4702-b0ce-c6c290c4f087",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.environment.set(\"titleId356-3\", title.id);\r",
															"    pm.environment.set(\"titleInstanceId356-3\", title.instanceId);\r",
															"    pm.environment.set(\"titleTitle356-3\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.environment.get(\"orderLineId356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e6931efb-2c4e-4a1b-ae96-8412a40cb3a1",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.environment.set(\"instanceId356-3\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.environment.get(\"titleTitle356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8ff13ff6-8ef7-47d4-8cde-609b5b2e7cd6",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holdings = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holdings = pm.response.json();\r",
															"    pm.environment.set(\"holdingId356-3\", holdings.holdingsRecords[0].id);\r",
															"    pm.expect(holdings.holdingsRecords[0].instanceId).to.be.equal(pm.environment.get(\"instanceId356-3\"));\r",
															"    pm.expect(holdings.holdingsRecords[0].permanentLocationId).to.be.equal(pm.environment.get(\"pieceLocationId356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{titleInstanceId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{titleInstanceId356-3}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "06342bfb-1d01-4835-a820-f90ae9cf42cc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e85d4007-39b0-4ebd-8ede-10581f279982",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving History",
					"item": [
						{
							"name": "Get receiving history for Open Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e547093a-2f12-4788-80aa-ce61068d2720",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7715ba04-202a-446a-864c-570c227f4456",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"History has pieces to receive\", function() {",
											"    pm.expect(jsonData.totalRecords).to.equal(7);",
											"});",
											"",
											"pm.test(\"History contains all expected fields\", function(){",
											"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{receivingHistoryPoId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{receivingHistoryPoId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history for Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7d4b6fd-d634-4f69-86cf-30fafb1f71ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aa7282f2-457b-4662-87db-27a72bd18d0a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"History has no pieces to receive\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{orderWithReceiptNotRequiredId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Inventory",
					"item": [
						{
							"name": "Test createInventory defaults",
							"item": [
								{
									"name": "Create order with createInventory system value from config (createInventory config removed)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e2887521-b479-4e59-8064-a9ff8e76fd76",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV5\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull1\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bf5025e-a253-4f1f-85ce-281e190f4dd1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId1\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Create order with createInventory default config value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2e177da8-669d-4f36-9426-519faa1d5a85",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"",
													"    let bodyTemplate = testConfigs.bodyTemplate;",
													"    let configName = \"createInventory\";",
													"",
													"    bodyTemplate.configName = configName;",
													"    bodyTemplate.value = \"{\\\"eresource\\\": \\\"None\\\",\\\"physical\\\": \\\"None\\\", \\\"other\\\": \\\"None\\\"}\";",
													"    utils.createConfig(bodyTemplate);",
													"",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV6\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull2\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50ac454e-daf3-4d9e-9998-93d9e375880a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId2\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull2}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Get configs and delete them all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfb411ac-1b9c-4f8d-82d5-6a8df17df27d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Removing all current configs\", function() {",
													"    pm.response.to.be.ok;",
													"",
													"    let currentConfigs = pm.response.json().configs;",
													"    console.log(\"Current configs: \", currentConfigs);",
													"    for (var i = 0; i < currentConfigs.length; i++) {",
													"        let configId = currentConfigs[i].id;",
													"        utils.deleteConfig(configId);",
													"    }",
													"",
													"    pm.environment.unset(\"current-orders-configs\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c2708ffa-202c-4ec6-9654-38743ea855b5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS"
												}
											]
										},
										"description": "Delete configs to excercise next step. The case when order created with empty configuration"
									},
									"response": []
								},
								{
									"name": "Instance Status - temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71e5c549-18de-4d63-9d22-4b5aefc9722b",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cc44226f-f2c7-4a9d-b6a7-0ce1ab4bbec2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"daf2681c-25af-4202-a3fa-e58fdf806183\",\r\n  \"code\": \"temp\",\r\n  \"name\": \"Temporary\",\r\n  \"source\": \"folio\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"instance-statuses"
											]
										},
										"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Loan Type - Can circulate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ac8c75c-d74e-4da0-9850-c1ffef34d4f6",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "93a1d5a3-6ebc-496b-abd0-a2bc147a0356",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\":\"2b94c631-fca9-4892-a730-03ee529ffe27\",\r\n  \"name\":\"Can circulate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"loan-types"
											]
										},
										"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Create order with createInventory system value (configs are empty)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "74e144ad-0466-4769-8d5a-e278e5634c2c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV7\";",
													"",
													"    // remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull3\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "32d0ca56-0943-42c6-b536-0f13c9a738b2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId3\", order.id);",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function() {",
													"    utils.validatePoLines(order, 1, true);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull3}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Test for the case described in [MODORDERS-209](https://issues.folio.org/browse/MODORDERS-209)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0f190362-8869-4107-b42f-22406efc1f80",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bdc0d192-ad32-41b4-8994-c769c3d474c3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create order with createInventory NONE and empty locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e5eb8080-6f8d-4d8f-9429-de682e128ba9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV1\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"None\";",
											"    ",
											"    order.compositePoLines[0].locations = [];",
											"",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryNone\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "536d5ea3-7e01-42d4-836e-0d65d5ad0c55",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryNoneId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Line and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryNone}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "21471ffa-738e-44de-a4f1-d12105af93ba",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV2\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstance\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ddb593fc-0d16-433f-bf22-53944bb6d8df",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstance}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "df9dc032-183b-4431-a3a9-2f6dd79ec5b3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV3\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHolding\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "78d97be0-74ec-40d3-a7bb-8cc220ef5777",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHolding}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "74aeb092-f0fe-4ac7-b44b-8e95a4c15b4f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV4\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHoldingItem\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22869b20-ad23-455a-b032-ffc7fe151194",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingItemId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHoldingItem}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Open order with P/E Mix, physical Instance, Holding, Items, electronic - None with locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "014ea2f5-eb66-4631-81c7-5b7da6bd0587",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines.pop();",
											"    order.compositePoLines[0].cost.quantityPhysical = 2;",
											"    order.compositePoLines[0].cost.quantityElectronic = 2;",
											"    let location = {",
											"        \"locationId\": pm.environment.get(\"locationId1\"),",
											"        \"quantityElectronic\": 2,",
											"        \"quantityPhysical\": 2",
											"    };",
											"    ",
											"     order.compositePoLines[0].locations = [location];",
											"  ",
											"    pm.variables.set(\"po_mixed\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f6d2e33-bb00-4b03-bc1e-98ac99c92d72",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 1);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_mixed}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Get current configs and restore test values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d7042a4-253a-4cfc-9808-6cc967c52c21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"let configNamesToProcess = testConfigs.configNames;",
											"",
											"let configs = [];",
											"pm.test(\"Get configs response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    configs = pm.response.json().configs;",
											"});",
											"",
											"console.log(\"Config codes to restore test values: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);",
											"pm.environment.set(\"temp-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb5a469b-2185-4b43-b7cf-9b38e14842bd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "get title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0ba86356-ac81-4ddc-9fcd-31817bd541da",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"pm.environment.set(\"poLIneIdForTitle\", compPoLine.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f428ab6-553d-4c10-a50a-c596f217081c",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let titles = pm.response.json();",
											"    pm.variables.set(\"titleId\", titles.titles[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{poLIneIdForTitle}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLIneIdForTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check-in pieces without items in Inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "23a689c7-e477-498e-bb8c-9d6646e20076",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"",
											"utils.createPieceAndCheckInBody(compPoLine);",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ab7f8e4-6931-4a12-af7e-35a9931e8b16",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece without items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa04fe50-7ca9-4839-8955-7dc9f4b0c721",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a18857d5-e2db-4336-a100-af8bc5fe0a02",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece in the prior request to Expected status"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ea100b6-5985-4096-aee8-a95f76d20b51",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e26dda5f-6e60-4238-84cb-c89ec6ff9cff",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Expected\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "check-in pieces with items in inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1e6a2053-b285-4c46-81f8-ef3b5e2a8050",
										"exec": [
											"//get holdings record Id -> need instance id and location id",
											"//get loan type id",
											"//create item -> need material type, loan type and holdings Id",
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"",
											"utils.prepareCheckinBodyWithItems(compPoLine);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ea87f39-bdf2-40ab-bf8a-d539e1e171c3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function() {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function() {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 1, \"In Process\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece with items in inventory and performs check-in. Tests to see if the piece status is changed and also the Po line status. The order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece with items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a91ff346-6c71-4bea-936f-f80968386771",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_physical_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"     utils.validateInventoryItemsReceived(line, 1, \"On order\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf016653-e209-4030-8a91-9b54379088dc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Physical and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece with items. The item status as well as the piece status must be modified"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9cd2d0a-adf0-4693-b674-7f8abbc961b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "259ee308-e069-44f0-97e1-33c4ab75b5a0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check Order  automatically changes workflowStatus",
					"item": [
						{
							"name": "Create Pending order, that should be automatically closed on transition to open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5047427f-18ef-4e53-8256-a4bf27c45fbd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(pendingOrder));",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											" ",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = pendingOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"automatically_closed_order_content\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "83fc64cc-0461-499b-8a7d-de24eed24295",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_closed_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{automatically_closed_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open, adding 2 more lines make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1d3e7ef2-185a-4f1a-9542-e0eb93f34918",
										"exec": [
											"let pendingOrder = pm.globals.get(\"automatically_closed_order_content\");",
											"",
											"// Set Open status",
											"pendingOrder.workflowStatus = \"Open\";",
											"",
											"",
											"pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"pm.globals.unset(\"automatically_closed_order_content\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d197d26b-4a53-4e5b-a6e0-27fd4e38cf6e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyClosedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        ",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyClosedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyClosedOrder}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Create Open order, that should be automatically closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "df8b2b27-7872-4caf-b129-cf4de77843e1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let openOrder = res.json();",
											"    openOrder.workflowStatus = \"Open\";",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(openOrder));",
											"    delete openOrder.poNumber;",
											"",
											" ",
											"    // add 2 new PO lines",
											"    openOrder.compositePoLines = openOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = openOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.variables.set(\"request_body\", JSON.stringify(utils.prepareOrder(openOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15189930-f99b-4f55-8a98-f4c1a1272721",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Order id exist\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOpenOrder\", jsonData.id);",
											"    pm.expect(jsonData.closeReason.reason).is.equal(\"Complete\");",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Pending order, that should be automatically open in an attempt to close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e3903f34-50fd-4bce-b7f3-b059799d96a4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											"    // Setting create inventory to false for PO Line with P/E Mix format",
											"    pendingOrder.compositePoLines[0].paymentStatus = \"Pending\";",
											"",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "966d71e2-0e39-4945-bc50-cc2cec15df8d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyOpenedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_opened_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e5d5971-73cb-4a93-872e-2710a2aaf6d2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"automatically_opened_order_content\");",
											"",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Closed\";",
											"    pendingOrder.closeReason = {",
											"        \"reason\": \"Complete\"",
											"    };",
											" ",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"automatically_opened_order_content\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6e4d6416-bd8c-44db-9833-ea8696d6f2a3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyOpenedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyOpenedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyOpenedOrder}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be08569a-69a9-4d9b-8ab4-942b75f6cbc9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "235bc8ff-690c-4a6b-93fd-88afe146a7f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check order without PO line",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed7afc97-a3b6-4b4d-868b-087d558fb7a2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"THIS IS TEST FOR ORDER WITHOUT POLINES\"];",
											"",
											"pm.variables.set(\"orderWithoutPoLinesBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16428ecb-29d2-493e-b0c1-94d54a29d8ff",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(1);",
											"    });",
											"    ",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderWithoutPoLinesId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithoutPoLinesBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa4b3483-842c-4322-9241-772a8f4cf2f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check orders without po-lines\", function () {",
											"    var jsonData = pm.response.json();",
											"    var purchaseOrders = jsonData.purchaseOrders;",
											"    ",
											"    pm.expect(purchaseOrders).to.have.lengthOf.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b953de10-8751-4619-80d6-2e617bbd96d5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=notes=THIS IS TEST FOR ORDER WITHOUT POLINES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "notes=THIS IS TEST FOR ORDER WITHOUT POLINES"
										}
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a19124d5-e5a0-48dc-95c6-d6f497f452b5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a0d6c8d4-e46c-4519-b88c-e4e12da9c710",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderWithoutPoLinesId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderWithoutPoLinesId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ISBN validation",
					"item": [
						{
							"name": "Create Order with duplicate ISBN numbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "99b9b205-bea6-4232-be89-db8168a6ed43",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    order = utils.deletePoNumber(order);",
											"    order.compositePoLines.pop();",
											"    let preparedOrder = utils.prepareOrder(order);",
											"    preparedOrder.compositePoLines[0].details.productIds = [];",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"1-4028-9462-7\", null));",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"1-4028-9462-7\", \"(q1)\"));",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"9781402894626\", \"(q2)\"));",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"9781402894626\", null));",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(preparedOrder));",
											"})",
											"",
											"function buildProductId(isbn, qualifier) {",
											"    return {",
											"        \"productId\": isbn,",
											"        \"productIdType\": pm.environment.get(\"isbnIdentifierTypeId\"),",
											"        \"qualifier\": qualifier",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "13619cdf-0c0c-4ccd-a711-f6c6b7ab54df",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"isbnOrderId\", jsonData.id); ",
											"    pm.globals.set(\"isbn_Order_content\", jsonData);",
											"});",
											"",
											"pm.test(\"validate ISBN 13 is returned\", function () {",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds).to.have.lengthOf(2);",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[0].productId).to.equal(\"9781402894626\");",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[0].qualifier).to.equal(\"(q1)\");",
											"    ",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[1].productId).to.equal(\"9781402894626\");",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[1].qualifier).to.equal(\"(q2)\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						},
						{
							"name": "Update Order with ISBN10 - with hyphens",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d3fdc29-e866-4037-a029-c7164829acfd",
										"exec": [
											"     let pendingOrder = pm.globals.get(\"isbn_Order_content\");",
											"    ",
											"    //set ISBN10",
											"    pendingOrder.compositePoLines[0].details.productIds = [];",
											"    pendingOrder.compositePoLines[0].details.productIds.push(buildProductId(\"81-7525-766-0\", \"(q1)\"));",
											"    pendingOrder.compositePoLines[0].details.productIds.push(buildProductId(\"81-7525-766-0\", \"(q1)\"));",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(pendingOrder));",
											"    ",
											"    function buildProductId(isbn, qualifier) {",
											"    return {",
											"        \"productId\": isbn,",
											"        \"productIdType\": pm.environment.get(\"isbnIdentifierTypeId\"),",
											"        \"qualifier\": qualifier",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f94aedb7-8ddc-4eb4-b875-62befebdceb3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.isbnOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.test(\"ISBN value is modified to ISBN 13\", function () {",
											"            pm.expect(order.compositePoLines[0].details.productIds).to.have.lengthOf(1);",
											"            pm.expect(order.compositePoLines[0].details.productIds[0].productId).to.equal(\"9788175257665\");",
											"            pm.expect(order.compositePoLines[0].details.productIds[0].qualifier).to.equal(\"(q1)\");",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{isbnOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{isbnOrderId}}"
									]
								},
								"description": "Update a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Templates",
					"item": [
						{
							"name": "Create order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e18c4e48-b3bd-4cb6-bb39-09294c2badce",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"pm.variables.set(\"orderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4afe4bc9-6fe4-4e30-83cc-31b008e479ac",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    var orderTemplate = pm.response.json();",
											"",
											"    pm.test(\"Verify order template\", () => {",
											"        pm.expect(orderTemplate.id).to.exist;",
											"        pm.expect(orderTemplate.templateCode).to.eql(expectedOrderTemplate.templateCode);",
											"        pm.expect(orderTemplate.templateDescription).to.eql(expectedOrderTemplate.templateDescription);",
											"        pm.expect(orderTemplate.templateName).to.eql(expectedOrderTemplate.templateName);",
											"        pm.expect(orderTemplate.acquisitionMethod).to.eql(expectedOrderTemplate.acquisitionMethod);",
											"        pm.expect(orderTemplate.approved).to.be.true;",
											"        pm.environment.set(\"orderTemplateId\", orderTemplate.id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order template by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0fea26bd-db05-447b-b5af-088a6d1ce78c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cd8b5b22-e371-4453-b4dc-980d246a2ba5",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var orderTemplate = pm.response.json();",
											"",
											"    pm.test(\"Verify order template\", () => {",
											"        pm.expect(orderTemplate.id).to.exist;",
											"        pm.expect(orderTemplate.templateCode).to.eql(expectedOrderTemplate.templateCode);",
											"        pm.expect(orderTemplate.templateDescription).to.eql(expectedOrderTemplate.templateDescription);",
											"        pm.expect(orderTemplate.templateName).to.eql(expectedOrderTemplate.templateName);",
											"        pm.expect(orderTemplate.acquisitionMethod).to.eql(expectedOrderTemplate.acquisitionMethod);",
											"        pm.expect(orderTemplate.approved).to.be.true;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e79aad7d-b366-43b8-837f-459c558b1115",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"body.templateCode = \"Amazon-LLL\";",
											"pm.variables.set(\"updatedTemplateCode\", body.templateCode);",
											"pm.variables.set(\"updatedOrderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "80f7dbe1-8ca0-4f87-9f89-e707c8b42a10",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/order-templates/\" + pm.environment.get(\"orderTemplateId\"), (err, res) => {",
											"        pm.test(\"Order template is updated\", () => {",
											"            pm.expect(res.code).to.eql(200);",
											"            var orderTemplate = res.json();",
											"            pm.expect(orderTemplate.templateCode).to.eql(pm.variables.get(\"updatedTemplateCode\"));",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated order templates collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a11c0ebc-4483-4e6d-bfe0-03f457e58813",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06525fc4-2dd6-4fc0-a8f5-203264461030",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var orderTemplatesCollection = pm.response.json();",
											"",
											"    pm.test(\"Verify order templates collection contains order templates\", () => {",
											"        orderTemplatesCollection.totalRecords > 0;",
											"        pm.expect(orderTemplatesCollection.orderTemplates.length).to.eql(orderTemplatesCollection.totalRecords);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "62be1dc8-5283-4ff1-bfa4-51524e0a0af4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "257b0ccf-b16c-44c4-a39c-b6e6433fe199",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/order-templates/\" + pm.environment.get(\"orderTemplateId\"), (err, res) => {",
											"        pm.test(\"Order template is deleted\", () => {",
											"             pm.expect(res.code).to.eql(404);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check items status changes upon Closing/Reopening order",
					"item": [
						{
							"name": "Create Open order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec1bb876-6411-4d4b-a16d-8bf5534e00b4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = res.json();",
											"",
											"    order.workflowStatus = \"Open\";",
											"    delete order.poNumber;",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = \"Fully Paid\";",
											"        lines[i].receiptStatus = \"Awaiting Receipt\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(utils.prepareOrder(order)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"Instance, Holding, Item\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d92f17b7-5037-4985-97b7-7c33a684028b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"checkItemStatusOrderId\", jsonData.id);",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(jsonData));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "65274f73-52c0-4323-a1a5-8da3301a495c",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines.forEach(line => {",
											"    line.paymentStatus = \"Fully Paid\";",
											"    line.receiptStatus = \"Fully Received\";",
											"    delete line.instanceId;",
											"})",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75bd9d81-dc36-4974-8cbc-ec569275d969",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = {};",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"Order closed\"));",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Update order make lines uncompleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "af5b4725-be22-48b1-b683-6861cd230222",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines.forEach(line => {",
											"    line.paymentStatus = \"Partially Paid\";",
											"    delete line.instanceId;",
											"})",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a1da2262-34ee-4002-b9fb-1ac6a2b971cf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = {};",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"On order\"));",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Update order without poLine with status Closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b0e913e1-ab0f-4b23-8889-e0435727c1fb",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines = [];",
											"order.workflowStatus = \"Closed\";",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12f224d4-83d1-4156-b40e-22feac8294f8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.test(\"Verify order updated with expected workflow status\", function () {",
											"        pm.expect(order.workflowStatus).is.equal(\"Closed\");",
											"    });",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"Order closed\"));",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Reopen order without poLine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4272d91b-3ca4-4d65-92d2-c531b998ae90",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines = [];",
											"order.workflowStatus = \"Open\";",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "efea4ab1-bdb5-41de-96a4-f3154c767f29",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order = res.json();",
											"    ",
											"    pm.test(\"Verify order updated with expected workflow status\", function () {",
											"         pm.expect(order.workflowStatus).is.equal(\"Open\");",
											"    });",
											"   ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"On order\"));",
											"    ",
											"    pm.globals.unset(\"check_item_status_order_content\");",
											"    pm.globals.unset(\"checkItemStatusOrderId\");",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Reason for closure",
							"item": [
								{
									"name": "Create reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb9d018c-03d1-4206-992e-c28fc1c07a50",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.source = \"System\";",
													"pm.variables.set(\"reasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0da1ab88-c9f6-4b70-8627-68b68814ac05",
												"exec": [
													"let expectedReasonForClosure = globals.testData.reasonForClosure;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var reasonForClosure = pm.response.json();",
													"    ",
													"    pm.test(\"Verify reason for closure\", () => {",
													"        pm.expect(reasonForClosure.id).to.exist;",
													"        pm.expect(reasonForClosure.reason).to.eql(expectedReasonForClosure.reason);",
													"        pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"        pm.environment.set(\"reasonForClosureId\", reasonForClosure.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{reasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "77e6102d-dbf9-4572-b325-4ac7fb2a577c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a8ed633c-2309-401b-b6b4-f5cf4923d848",
												"exec": [
													"let expectedReasonForClosure = globals.testData.reasonForClosure;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var reasonForClosure = pm.response.json();",
													"",
													"    pm.test(\"Verify reason for closure\", () => {",
													"        pm.expect(reasonForClosure.id).to.exist;",
													"        pm.expect(reasonForClosure.reason).to.eql(expectedReasonForClosure.reason);",
													"        pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ba1e8af-89e3-4c8a-8489-595643b8cf88",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.reason = \"Updated reason\";",
													"body.source = \"System\";",
													"pm.variables.set(\"updatedReason\", body.reason);",
													"pm.variables.set(\"updatedReasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c5ee834e-2246-4fa4-ad34-09f821f1f00a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/reasons-for-closure/\" + pm.environment.get(\"reasonForClosureId\"), (err, res) => {",
													"        pm.test(\"Reason for closure is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var reasonForClosure = res.json();",
													"            pm.expect(reasonForClosure.reason).to.eql(pm.variables.get(\"updatedReason\"));",
													"            pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedReasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5695bff8-cf5e-4799-a615-054bdbe0ba07",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "86ad56da-1971-4b59-b632-201bd07e4c65",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var reasonForClosureCollection = pm.response.json();",
													"    pm.test(\"Verify reason for closure collection contains reasons for closure\", () => {",
													"        reasonForClosureCollection.totalRecords > 0;",
													"        pm.expect(reasonForClosureCollection.reasonsForClosure.length).to.eql(reasonForClosureCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "af39d51b-dfd7-4fb0-a6cb-ad6a1f933fb5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8d13bf82-ef1c-4bdd-837b-bbd10cf7ff3c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/reasons-for-closure/\" + pm.environment.get(\"reasonForClosureId\"), (err, res) => {",
													"        pm.test(\"Reason for closure is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prefix",
							"item": [
								{
									"name": "Create prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f566db48-6c02-4d25-a888-8898f613d5c6",
												"exec": [
													"let body = globals.testData.prefix;",
													"pm.variables.set(\"prefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "30418d9e-87f0-4383-9371-f8997aed7c59",
												"exec": [
													"let expectedPrefix = globals.testData.prefix;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var prefix = pm.response.json();",
													"    ",
													"    pm.test(\"Verify prefix\", () => {",
													"        pm.expect(prefix.id).to.exist;",
													"        pm.expect(prefix.name).to.eql(expectedPrefix.name);",
													"        pm.expect(prefix.description).to.eql(expectedPrefix.description);",
													"        pm.environment.set(\"prefixId\", prefix.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{prefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "891d571a-f49f-46b1-b52e-4aba8e152a6b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2d0686e1-df89-4a35-98ae-8eee548c449b",
												"exec": [
													"let expectedPrefix = globals.testData.prefix;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var prefix = pm.response.json();",
													"",
													"    pm.test(\"Verify prefix\", () => {",
													"        pm.expect(prefix.id).to.exist;",
													"        pm.expect(prefix.name).to.eql(expectedPrefix.name);",
													"        pm.expect(prefix.description).to.eql(expectedPrefix.description);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2978374a-8a53-4b59-a362-fb6de2c3f7ae",
												"exec": [
													"let body = globals.testData.prefix;",
													"body.name = \"Updated name\";",
													"pm.variables.set(\"updatedName\", body.name);",
													"pm.variables.set(\"updatedPrefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "80a82d51-33e0-4f47-ba53-93b52eb578f3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var prefix = res.json();",
													"            pm.expect(prefix.name).to.eql(pm.variables.get(\"updatedName\"));",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPrefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d5c22364-ee0d-47a2-9a07-4bf12f52a8ed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4ef839fb-8cac-473e-b342-832f16727979",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var prefixCollection = pm.response.json();",
													"    pm.test(\"Verify prefix collection contains prefixes\", () => {",
													"        prefixCollection.totalRecords > 0;",
													"        pm.expect(prefixCollection.prefixes.length).to.eql(prefixCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create order with prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dab78cdc-3c46-4562-8a3a-ca345e7d7f04",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.poNumberPrefix = \"Updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c59b2fc1-d469-47d9-afc3-72c9d1b628a8",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.globals.set(\"prefixOrderId\", jsonData.id); ",
													"    pm.globals.set(\"prefixOrder\", jsonData);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete cannot delete used prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c027811c-1b64-4c19-82a2-c1b210fa7c42",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a87dfc1c-2f4a-4548-be8a-57113cc5a84f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"prefixIsUsed\");",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is not deleted\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update order's prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8f952bf9-e493-4109-bdfc-6350c23561c5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = pm.globals.get(\"prefixOrder\");",
													"order.poNumberPrefix = \"New updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "780b27cd-5ba4-4ae3-aed8-fa6b56de8f47",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{prefixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{prefixOrderId}}"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "afd5e6d7-5b24-43a0-82b0-9fb7f8399d45",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4d4cdc0-e4c5-40f0-9bdf-e050e4f3b08b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6576be1-a2af-43fb-b4e6-f2da22fce197",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "422e5563-c0dd-425e-b729-daa3eb3bec76",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.globals.unset(\"prefixOrderId\");",
													"    pm.globals.unset(\"prefixOrder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{prefixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{prefixOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Suffix",
							"item": [
								{
									"name": "Create suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45adf023-1a0c-4993-89f0-c2e5cd3ecc19",
												"exec": [
													"let body = globals.testData.suffix;",
													"pm.variables.set(\"suffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6b016c65-576f-4b30-9f96-b3b4f765605c",
												"exec": [
													"let expectedSuffix = globals.testData.suffix;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var suffix = pm.response.json();",
													"    ",
													"    pm.test(\"Verify suffix\", () => {",
													"        pm.expect(suffix.id).to.exist;",
													"        pm.expect(suffix.name).to.eql(expectedSuffix.name);",
													"        pm.expect(suffix.description).to.eql(expectedSuffix.description);",
													"        pm.environment.set(\"suffixId\", suffix.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{suffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b009c27-c9fb-4195-888f-4f4e32a6c611",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "16392cc7-b022-4b2b-ab1d-07ee6381baf4",
												"exec": [
													"let expectedSuffix = globals.testData.suffix;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var suffix = pm.response.json();",
													"",
													"    pm.test(\"Verify suffix\", () => {",
													"        pm.expect(suffix.id).to.exist;",
													"        pm.expect(suffix.name).to.eql(expectedSuffix.name);",
													"        pm.expect(suffix.description).to.eql(expectedSuffix.description);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8e28f07d-2eae-4a5c-a22e-c950cb3afe7e",
												"exec": [
													"let body = globals.testData.suffix;",
													"body.name = \"Updated name\";",
													"pm.variables.set(\"updatedName\", body.name);",
													"pm.variables.set(\"updatedSuffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04e22f87-efd0-4c75-beb7-490d22f0727a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var suffix = res.json();",
													"            pm.expect(suffix.name).to.eql(pm.variables.get(\"updatedName\"));",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedSuffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c758ce1-be69-4c96-9c92-30bf1667f40c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a0466cd6-8434-47ad-a09c-f8a941ddca23",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var suffixCollection = pm.response.json();",
													"    pm.test(\"Verify suffix collection contains suffixes\", () => {",
													"        suffixCollection.totalRecords > 0;",
													"        pm.expect(suffixCollection.suffixes.length).to.eql(suffixCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create order with suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d740767f-4f68-4aae-aee7-b8f3a160e6af",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.poNumberSuffix = \"Updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1b7d1efe-4d2e-41cb-81de-800aff78667e",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.globals.set(\"suffixOrderId\", jsonData.id); ",
													"     pm.globals.set(\"suffixOrder\", jsonData);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete cannot delete used suffx",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "520093a0-f450-452b-a7d2-148e36b21927",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0f0e65df-8be8-41fb-8aed-0a2380cd9bdf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"suffixIsUsed\");",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is not deleted\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update order's suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "006d085e-0841-49bb-98ff-8a55e064853e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = pm.globals.get(\"suffixOrder\");",
													"order.poNumberSuffix = \"New updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f86de7e6-110b-404a-896b-8135619abf19",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{suffixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{suffixOrderId}}"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f90dcec6-288e-416d-9e4f-5a00ceedb05e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "07af962a-03f4-48f5-84d9-bc1829c4c422",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "537cade6-41bd-4f74-b7f4-7e4696a36fc7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "48e3a2b2-b915-4687-b8e9-127b6a2154c5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.globals.unset(\"suffixOrderId\");",
													"    pm.globals.unset(\"suffixOrder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{suffixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{suffixOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check holding creation upon receiving/chek-in",
					"item": [
						{
							"name": "Create Open order with P/E Mix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f422cbc0-026f-4252-a45b-e8fa5a0637ca",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    delete order.poNumber;",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines.pop();",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ff8b539-486e-443f-8d20-71ca9f4ab1be",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"mixLineForCheckIn\", JSON.stringify(jsonData.compositePoLines[0]));",
											"    pm.environment.set(\"mixLineForCheckInId\", JSON.stringify(jsonData.compositePoLines[0].id));",
											"    pm.environment.set(\"instanceId\", jsonData.compositePoLines[0].instanceId);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create new location",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f7f2404-b330-4bd6-9920-2a318f72d669",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"checkinLocationId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7cd5d4a-0b49-453e-bb97-a0b88661fe4f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"tes Loaction\",\n    \"code\": \"LOC_TEST\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get receiving history Order Line With Electronic format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "67890238-5e03-4f09-9079-ecd3a3aa2a92",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b5143f50-ee1a-4f2a-8561-2dbe7cfe0515",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let receivingHistory = pm.response.json().receivingHistory;",
											"    pm.expect(receivingHistory.length).to.be.above(0);",
											"    pm.environment.set(\"electronicResourceId\", receivingHistory[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{mixLineForCheckInId}} and pieceFormat==Electronic",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{mixLineForCheckInId}} and pieceFormat==Electronic"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in electronic piece, createInventory-\"instance\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "36ee2df1-3198-4e46-983b-777a08d099b4",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = JSON.parse(pm.environment.get(\"mixLineForCheckIn\"));",
											"",
											"",
											"utils.prepareCheckinBody(compPoLine, pm.environment.get(\"electronicResourceId\"));",
											"let checkinBody = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"checkinBody.toBeCheckedIn[0].checkInPieces[0].locationId = pm.environment.get(\"checkinLocationId\");",
											"pm.variables.set(\"checkinBody\", JSON.stringify(checkinBody));",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "20b632b7-7f0d-42d4-8721-bd44d0254eda",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"mixLineForCheckInId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "Check that no holding for new location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "34745c02-577b-4c28-a1fb-0d84a7d521c0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a100a82-aee4-4387-8c45-0f0f44c32ff4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let holdings = pm.response.json().holdingsRecords;",
											"    pm.expect(holdings).to.have.lengthOf(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history Order Line With Physical format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3c549085-1bdb-469c-852e-8782895b5610",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "500b0301-8116-4bf9-8331-8627af7bde0d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let receivingHistory = pm.response.json().receivingHistory;",
											"    pm.expect(receivingHistory.length).to.be.above(0);",
											"    pm.environment.set(\"physicalResourceId\", receivingHistory[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{mixLineForCheckInId}} and pieceFormat==Physical",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{mixLineForCheckInId}} and pieceFormat==Physical"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in physical piece, createInventory-\"instance, Holding\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5cfcdfb5-7305-405d-890f-9ea6e4c8f944",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = JSON.parse(pm.environment.get(\"mixLineForCheckIn\"));",
											"",
											"",
											"utils.prepareCheckinBody(compPoLine, pm.environment.get(\"physicalResourceId\"));",
											"let checkinBody = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"checkinBody.toBeCheckedIn[0].checkInPieces[0].locationId = pm.environment.get(\"checkinLocationId\");",
											"pm.variables.set(\"checkinBody\", JSON.stringify(checkinBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22b92cb1-805b-4ee6-833e-e0ca9bdbb69e",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"mixLineForCheckInId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "Check that holding created for new location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "114bce06-9551-4e29-99af-0f5ffc67db47",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6ac9c0e-5955-457a-95f4-b07400c6c344",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let holdings = pm.response.json().holdingsRecords;",
											"    pm.expect(holdings).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify prefix and suffix within composite order",
					"item": [
						{
							"name": "create order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "031eb080-97fc-4a87-90e2-d62eb7b93cc9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix');",
											"});",
											"",
											"pm.environment.set(\"order_id\", jsonData.id);",
											"pm.environment.set(\"order_rs\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fab2caac-54a4-4b66-b21a-1cd8a9a1aa16",
										"exec": [
											"var poNumberNum = pm.environment.get(\"poNumberNum\");",
											"if (poNumberNum === null) {",
											"    pm.environment.set(\"poNumberNum\", 1);",
											"}else",
											"{",
											"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poNumber\": \"990001{{poNumberNum}}\",\n    \"poNumberPrefix\": \"pref\",\n    \"poNumberSuffix\": \"suf\",\n    \"orderType\": \"One-Time\",\n    \"vendor\": \"{{activeVendorId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "get order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04d681bc-de69-4ec0-bcc8-a3007ae66ed8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c3890400-c4d1-455a-aff2-5bddd4143fa7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6764f46c-414a-438e-98b9-3fa5cd277427",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8eb9a493-26d0-4f9a-b99d-01732adefe10",
										"exec": [
											"var orderRs = pm.environment.get(\"order_rs\");",
											"orderRs.poNumberPrefix = \"pref1\";",
											"orderRs.poNumberSuffix = \"suf1\";",
											"pm.environment.set(\"order_open_rq\", JSON.stringify(orderRs));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_open_rq}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "order with prefix and suffix with updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6721973c-1060-4e29-9321-79fe5c88ef55",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix', 'pref1');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix', 'suf1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc37d28d-5998-4339-a35d-8a7465120103",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receive piece with specified itemId when item wa deleted",
					"item": [
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "672e66c1-f608-49d3-a3b6-5ed6be7108dc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    delete order.poNumber;",
											"    order.compositePoLines.pop();",
											"    //set createInventory value",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].locations.pop();",
											"    order.compositePoLines[0].locations[0].quantityPhysical = 1;",
											"    order.compositePoLines[0].cost.quantityPhysical = 1;",
											"    ",
											"    pm.variables.set(\"orderForReceiving\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "028470a5-0a0b-4702-99d0-52408b28d3ed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderForReceivingId\", order.id);",
											"    pm.globals.set(\"orderForReceiving\", order);",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForReceiving}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Close order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "09a838e0-6e59-465d-ba9b-5d1b81995bb7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order =  pm.globals.get(\"orderForReceiving\");",
											"order.workflowStatus = \"Closed\";",
											"",
											"pm.variables.set(\"orderForReceiving\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ccb6a9f-c5be-4cff-aa77-d6874886dc2c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForReceiving}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForReceivingId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForReceivingId}}"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Delete item from inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d37cd73a-e696-4b86-bf2a-4c0926113322",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"",
											"utils.sendGetRequest(\"/item-storage/items?limit=1&query=purchaseOrderLineIdentifier==\"+compPoLine.id, (err,res) => {",
											"    pm.variables.set(\"itemId\",  res.json().items[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "104fcfb6-3131-4780-9c12-659bd2971045",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"item-storage",
										"items",
										"{{itemId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52b999c0-056e-43c5-9260-34d835d34a03",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(1);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(1);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 1, 0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e166ae4-75c8-42a8-93b5-7006cf56d113",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id, (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine, res.json().pieces[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "Get pieces by poLineId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2ba6a63-bd8e-4819-b1e7-3f7c49a91d57",
										"exec": [
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"pm.variables.set(\"poLineId\", compPoLine.id);",
											"",
											"pm.globals.unset(\"orderForReceiving\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1e146e66-db14-4e85-a847-ec76c5ff1079",
										"exec": [
											"let piece = {};",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"",
											"    piece = pm.response.json().pieces[0];",
											"    pm.globals.set(\"pieceId\", piece.id);",
											"",
											"});",
											"",
											"pm.test(\"The reference to unexisting item was removed\", function() {",
											"    pm.expect(piece.itemId).to.be.an('undefined');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"pieces"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLineId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f0b4e581-ffd0-41e4-8545-114f0c0a5418",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f5414def-28fb-491b-b016-6b8d934baa07",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.globals.unset(\"pieceId\");",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces and Location Consistency",
					"item": [
						{
							"name": "Create Instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2324dd4-63e7-4cb1-b12a-b8dbc022df7f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a085a4a0-99d1-40ec-8073-9b38c5ebec6b",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"_instanceId\", uuid.v4());",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"discoverySuppress\": false,\n    \"staffSuppress\": false,\n    \"previouslyHeld\": false,\n    \"source\": \"FOLIO\",\n    \"title\": \"test\",\n    \"instanceTypeId\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\n    \"precedingTitles\": [],\n    \"succeedingTitles\": [],\n    \"id\": \"{{_instanceId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Holding",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a398760d-ff27-4c39-ab34-2fcbf917ecef",
										"exec": [
											"pm.environment.set(\"_holdingId\", pm.response.json().id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"permanentLocationId\" : \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n\t\"instanceId\" : \"{{_instanceId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}}%20and%20permanentLocationId==53cf956f-c1df-410b-8bea-27f712cca7c0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b342b88-b232-418b-9d68-fc85d9596c37",
										"exec": [
											"pm.environment.set(\"_itemId\", pm.response.json().id);",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\" : \"{{_holdingId}}\",\n    \"barcode\": \"{{$guid}}\",\n    \"materialType\": {\n        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d89ded7e-2832-4d0a-b7eb-c405c74c1c79",
										"exec": [
											"pm.environment.set(\"_requestId\", pm.response.json().id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"requestType\":\"Hold\",\n   \"fulfilmentPreference\":\"Hold Shelf\",\n   \"item\":{\n      \"barcode\":\"A14837334314\"\n   },\n   \"itemId\":\"{{_itemId}}\",\n   \"requester\":{\n      \"barcode\":\"236964750970123\"\n   },\n   \"status\": \"Open - Awaiting pickup\",\n   \"requesterId\":\"00000001-1111-5555-9999-999999999999\",\n   \"pickupServicePointId\":\"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n   \"requestDate\":\"2020-06-08T06:31:02Z\",\n   \"id\": \"489081f2-76de-4f22-8c0e-cdb7b91c5ffe\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"request-storage",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ffc9dcd-dd9f-401a-a6c3-02b2906f1b58",
										"exec": [
											"var id = pm.response.json().id",
											"pm.environment.set(\"_order_id\", id);",
											"pm.environment.set(\"_poNumber\", pm.response.json().poNumber);",
											"pm.environment.set(\"_poline_id\", pm.response.json().compositePoLines[0].id);",
											"pm.environment.set(\"_location_id\", pm.response.json().compositePoLines[0].locations[0].locationId);",
											"pm.environment.set(\"_purchaseOrder\", pm.response.json());",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38fcfe21-1a71-48b3-87d1-367863229082",
										"exec": [
											"var poNumberNum = pm.environment.get(\"poNumberNum\");",
											"if (poNumberNum === null) {",
											"    pm.environment.set(\"poNumberNum\", 1);",
											"    console.log('1');",
											"}else",
											"{",
											"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
											"    console.log('2');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"billTo\": \"5b608726-3ab6-4ea3-bdb2-b5106f45f5b3\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"poNumber\": \"99999{{poNumberNum}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"shipTo\": \"5b608726-3ab6-4ea3-bdb2-b5106f45f5b3\",\n  \"totalEstimatedPrice\": 101.16,\n  \"totalItems\": 4,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"checkinItems\": false,\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000+0000\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"6d6f642d-0005-1111-aaaa-6f7264657273\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": 24.99,\n        \"listUnitPriceElectronic\": 20.99,\n        \"currency\": \"USD\",\n        \"additionalCost\": 10.0,\n        \"discount\": 5.0,\n        \"discountType\": \"percentage\",\n        \"quantityPhysical\": 1,\n        \"quantityElectronic\": 1,\n        \"poLineEstimatedPrice\": 101.16\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"10000000155\",\n            \"productIdType\": \"6d6f642d-0010-1111-aaaa-6f7264657273\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"eresource\": {\n        \"activated\": false,\n        \"createInventory\": \"Instance, Holding, Item\",\n        \"trial\": false,\n        \"accessProvider\": \"{{activeVendorId}}\",\n        \"materialType\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n      },\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"{{fundId}}\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"{{fundId}}\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0\n        }\n      ],\n      \"isPackage\": false,\n      \"locations\": [\n        {\n          \"locationId\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n          \"quantity\": 2,\n          \"quantityElectronic\": 1,\n          \"quantityPhysical\": 1\n        }\n      ],\n      \"orderFormat\": \"P/E Mix\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"createInventory\": \"Instance, Holding, Item\",\n        \"materialType\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n        \"volumes\": [\n          \"vol.1\"\n        ]\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"99999{{poNumberNum}}-1\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"purchaseOrderId\": \"4e743b7d-1852-4f04-8502-ab24e8adb918\",\n      \"receiptStatus\": \"Pending\",\n      \"reportingCodes\": [],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"tags\": {\n        \"tagList\": [\n          \"important\"\n        ]\n      },\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      },\n      \"metadata\": {\n        \"createdDate\": \"2020-06-07T17:37:12.481+0000\",\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\n        \"updatedDate\": \"2020-06-07T17:37:12.481+0000\",\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\n      }\n    }\n  ],\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-06-07T17:37:04.546+0000\",\n    \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\n    \"updatedDate\": \"2020-06-07T17:37:04.546+0000\",\n    \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba218901-7c20-47bd-baa7-24669b064ebc",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let title = pm.response.json().titles[0];",
											"    pm.expect(title.id).to.exist;",
											"    pm.environment.set(\"_title_id\", title.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b585783-7e6b-442c-9094-750aa1b2c0ab",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{_poline_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{_poline_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6c98520-11e6-45a1-943d-782a3ab81e84",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"_first_piece_id\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "274442b8-7704-4a8c-98f4-7bee403550b1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Physical\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_itemId}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f68fb203-4fe2-4bd0-b61a-ba7195449d89",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Electronic\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7029df66-6dbc-40ce-9390-59a78090478c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Electronic\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order - Pieces Need To Be Deleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a7828ef8-f539-4545-b53a-8f07ebb012c7",
										"exec": [
											"let updatedOrder = pm.environment.get(\"_purchaseOrder\");",
											"updatedOrder.workflowStatus = \"Open\";",
											"console.log(updatedOrder);",
											"pm.variables.set(\"updatedOrder\", JSON.stringify(updatedOrder));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0221f998-5d03-4d1c-8247-ff8d9cbb3bfc",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.text()).to.include(\"piecesNeedToBeDeleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{_order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Piece #1 - There are Requests on Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c354b23c-f26b-4396-a457-07220074b07a",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.text()).to.include(\"thereAreRequestsOnItem\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{_first_piece_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{_first_piece_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item - Item is not deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcd1df33-cc77-4f2c-a668-6ec288e03340",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items",
										"{{_itemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc609653-f6bc-4e78-bd87-0a603ef2d656",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "text/plain"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests/{{_requestId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"request-storage",
										"requests",
										"{{_requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Piece - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c2a5804-71bf-4d35-a0e0-0d3534150efa",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{_first_piece_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{_first_piece_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item - Item is deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59e756c3-94b2-4e6f-a498-fb59337bd73c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items",
										"{{_itemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d38db821-8579-42fd-9db0-e7b5501e7da5",
										"exec": [
											"let updatedOrder = pm.environment.get(\"_purchaseOrder\");",
											"updatedOrder.workflowStatus = \"Open\";",
											"console.log(updatedOrder);",
											"pm.variables.set(\"updatedOrder\", JSON.stringify(updatedOrder));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e41f7173-f5a9-42d3-a32f-7cb8f64e297e",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{_order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9c5598f-3035-4ef2-8f71-910eed8a99bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84b48d9e-aa58-49fc-9b00-afccf3ef9792",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7743b340-1679-40d2-a38c-27af53fba4df",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ac3e38be-ff2a-4bf1-ba47-6f93fdfd3246",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create finances with restrictions",
					"item": [
						{
							"name": "Restricted Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0241639b-b3c5-42e0-9513-3ea860fc0966",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedLedgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b71f0a8e-bcd5-4f9a-9bd2-5a190f054a29",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"ce353f9c-f089-4701-90d1-951d008348f2\",\r\n\t\"code\": \"RESTRICTED-LDGR\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Restricted ledger\",\r\n    \"fiscalYearOneId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n    \"restrictEncumbrance\": true,\r\n    \"restrictExpenditures\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Restricted Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b303444-96d5-4f4e-974e-4ecb76a54083",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedFundId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da2cf2c2-cfa5-49f2-8023-1d72e2e881c9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"RESTRICTED-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"{{restrictedLedgerId}}\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Restricted Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfa9403e-60dc-46fe-92ce-c2e7029c0923",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedBudgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c74724f-c94e-43cd-8dac-9718ed01ccde",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Active\",\r\n  \"fundId\": \"{{restrictedFundId}}\",\r\n  \"name\": \"Restricted Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n  \"allowableEncumbrance\": 100.0,\r\n  \"allowableExpenditure\": 100.0,\r\n  \"allocated\": 25,\r\n  \"awaitingPayment\": 2.0,\r\n  \"available\": 3.0,\r\n  \"encumbered\": 4.0,\r\n  \"expenditures\": 5.0,\r\n  \"unavailable\": 14.0\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Order for tests",
					"item": [
						{
							"name": "Create Open order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "17d65d82-b106-4343-9455-8bf46aa020e2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca6e9f15-8d10-42ad-9f51-93563724c45f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsOpenOrderId\", order.id);",
											"    pm.globals.set(\"negativeTestsOpenPOLineId\", order.compositePoLines[0].id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Open order with one electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bc22c3c8-d9b6-47e6-9099-d3abd962074d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildElectronicPoLineContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
											"",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderWithElectronicPOLBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ccf487a-6d2e-487a-bab5-fd55822cbdbc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.environment.set(\"negativeTestsOpenElectronicOrderId\", order.id);",
											"    pm.environment.set(\"negativeTestsOpenElectronicOrderBody\", order);",
											"    pm.environment.set(\"negativeTestsOpenElectronicPOLineId\", order.compositePoLines[0].id);",
											"    pm.environment.set(\"negativeTestsOpenElectronicPOLineBody\", JSON.stringify(order.compositePoLines[0]));",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithElectronicPOLBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Closed order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a09f7dde-4167-468c-978e-fc7d5a2e4b99",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Closed\";",
											"order.notes = [\"Closed Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.paymentStatus = \"Fully Paid\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aeb1360d-ccbf-4fee-b205-67ecd77e38a8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Closed order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsClosedOrderId\", order.id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Pending order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d8c231-4f90-45e9-be8e-f7bef9909571",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"Pending Order for Negative API Tests\"];",
											"order.compositePoLines = [utils.buildPoLineWithMinContent(null)];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75297380-339f-42fc-bb66-28c637114007",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Pending order created\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let order = pm.response.json();",
											"    pm.globals.set(\"negativeTestsPendingOrderId\", order.id);",
											"    pm.globals.set(\"negativeTestsPendingOrderContent\", JSON.stringify(order));",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Pending\");",
											"",
											"    pm.test(\"Validate that PO Line contains desired data\", function () {",
											"        utils.validatePoLines(order, 1);",
											"        pm.globals.set(\"poLineForNegativeTests\", JSON.stringify(order.compositePoLines[0]));",
											"        pm.globals.set(\"poLineForNegativeTestsId\", order.compositePoLines[0].id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "PUT order isPackage validation",
							"item": [
								{
									"name": "PUT order - package poline with instanceId - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "53fc4baa-6800-4e96-9bdf-b6f386710810",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var uuid = require(\"uuid\");",
													"",
													"let orderFor422 = JSON.parse(pm.globals.get(\"negativeTestsPendingOrderContent\"));",
													"orderFor422.compositePoLines[0].isPackage = true;",
													"orderFor422.compositePoLines[0].instanceId = uuid.v4();",
													"",
													"pm.variables.set(\"orderBody422\", JSON.stringify(orderFor422));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ff651fe-bb4b-41c2-a891-422fdd519f9b",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"",
													"    pm.expect(pm.response.text()).to.include(\"InstanceIdNotAllowedForPackagePoLine\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody422}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bee7cec-e750-47cd-acf9-ec79d595d471",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8da77b50-157c-4ca0-9e97-4d2f7e6fd242",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST order - vendor validation",
							"item": [
								{
									"name": "Post order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5eba18d6-564b-4ed6-891a-346201c215c7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a852\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2c08605b-ecde-4032-90e6-d244bc02db7d",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d245daf6-c2bf-47ac-998e-1f545634f949",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bdbdd251-3bc2-44e3-9331-6c82df94a8cf",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "93a1978f-bd3d-4dc7-b327-5a0f45c46465",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6d8c7391-a7eb-4bef-8cce-3b5d643d5aec",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c90d60db-0495-4a42-bfce-a726bd7002db",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1cc596f8-f718-48b8-bd61-0417a89ca320",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "296d85a7-2186-4354-a1f2-91b989d59436",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5ce8d7e1-e73b-47d1-8e13-296c74f0f574",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28b796f3-dc5c-4567-ad5e-fe519512971e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "33f61031-fe72-48a0-9ce0-130b9a431478",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Put order - vendor validation",
							"item": [
								{
									"name": "Put order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "10c493e5-b5ee-45a6-9c31-47b0ffd16024",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ee74f17-a873-4a7d-b941-6099bc91fea0",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "429d4ece-e608-40a4-8b29-89884bf4719d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "35df6580-ee60-4d26-a8a0-7faa84f6c1b5",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e0ab85d2-6f83-4717-881b-096420ee1424",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6494e72b-87bd-48e5-bce4-6f4f0b2f75bf",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e36b1b9-f84b-4900-9e86-45c25a8167a4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a9ef854a-7e62-4632-8d43-a39fe5a712e0",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "049b3019-288a-4973-80c7-7d98abe700bf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dbda3739-9395-4af1-b09c-9f7d8b07e523",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5d3459b2-7d30-4a43-b6a1-13367d9bc25b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b9cb7464-b4b8-42b7-a625-604741215f23",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify missing inventory enties errors",
							"item": [
								{
									"name": "Update pending order to open with missing contributorNameType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1c174d7-ce84-4c5e-968e-476adc363030",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"uuid = require('uuid')",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"contributorType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"let contributor = {};",
													"let randomUUID = uuid.v4();",
													"contributor.contributor = \"Test\";",
													"contributor.contributorNameTypeId = randomUUID;",
													"line.contributors = [contributor];",
													"pm.variables.set(\"randomContributorNameTypeId\", randomUUID);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f85dd5f-bce1-46e9-99d1-a3d441f01003",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingContributorNameType\");",
													"    pm.expect(error.parameters[0].value).to.equal(pm.variables.get(\"randomContributorNameTypeId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceTypeCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e926c9c2-34ed-476a-a66d-7cee604e7b56",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceTypeCode\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "117b52cc-75da-4dac-9586-62350ec1d21c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceTypeCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceTypeCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "693fd950-cec1-4cb7-8263-5e8d6acc7a1c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for missingInstanceType error test\"];",
													"",
													"let line = utils.buildPoLineWithMinContent(null);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7d6ed429-59f3-43a4-b329-776060dd7661",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8d23edeb-c574-4cdf-a1d5-a5c581aaa18d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "296bf610-511d-42d7-9e8b-a43e7e19efd8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceTypeCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceStatusCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83370721-97fb-431e-b930-10f981882d29",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceStatusCode\";",
													"let value = \"missing-status\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "912d19e5-5991-4d83-bf72-1596fc625fb1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceStatusCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceStatusCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b280f3c-a1bd-410b-8cb4-33fa1bb84014",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for missingInstanceStatus error test\"];",
													"",
													"let line = utils.buildPoLineWithMinContent(null);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "089bba42-36d8-4841-9255-995ef33f2e05",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "853c0b56-8427-49f8-89e3-b83738868f01",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceStatus\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "06157cb9-2761-4f39-91cd-fa7689992f4e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceStatusCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing loanTypeName config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06daad17-5a92-40c6-aa3f-aae32ecfb768",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-loanTypeName\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c91acba-9a18-4da5-ad64-836350e58ce1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-loanTypeName",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-loanTypeName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6c80f1a-e341-40dd-9625-71c0cc511c81",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const uuidv4 = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType1\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].titleOrPackage = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productIdType = uuid.v4();",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a3f7bc8c-3bc8-4918-bede-a1772faccb51",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "985f333e-5443-44ee-9a3c-7ff2e4690e5c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const uuidv4 = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = utils.prepareOrder(res.json());",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType2\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].titleOrPackage = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productIdType = uuid.v4();",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cbd7df58-79a4-45e9-a6b8-0fdf0e95c19e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-loanTypeName\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrance creation failure",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify protected fields modification",
							"item": [
								{
									"name": "Put Open order - Modify Purchase Order Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9983d197-4ba7-4536-ab47-08f8092e630d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.orderType = \"One-Time\";",
													"    json.approved = true;",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.manualPo = true;",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2caa596d-bf30-43dc-b63e-61528321ec8c",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										},
										"description": "Verify that protected fields cannot be modified once order is \"Open\""
									},
									"response": []
								},
								{
									"name": "Put Open order - Modify Composite PO Line Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6bb9c338-9dd8-4cac-9cc5-9d68be9ab2b3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let json;",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.globals.get(\"negativeTestsOpenOrderId\"), (err, res) => {",
													"    json = res.json();",
													"    json.compositePoLines[0].acquisitionMethod = \"Exchange\";",
													"    json.compositePoLines[0].rush = true;",
													"    json.compositePoLines[0].titleOrPackage = \"Changing Title\";",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a82a3b5-84ba-4a02-af23-9f5cc13fd220",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										},
										"description": "Verify that protected fields in Purchase Order Line cannot be modified once order is \"Open\""
									},
									"response": []
								},
								{
									"name": "Put Open order - Modify PO Line Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "400104f9-74a0-41ad-a281-e6f883798659",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let json;",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.globals.get(\"negativeTestsOpenPOLineId\"), (err, res) => {",
													"    json = res.json();",
													"    json.donor = \"Donor\";",
													"    json.checkinItems = true;",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "18237b3d-05cc-45e3-8a73-a44be427d62f",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{negativeTestsOpenPOLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{negativeTestsOpenPOLineId}}"
											]
										},
										"description": "Verify that protected fields in Purchase Order Line cannot be modified once order is \"Open\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4bc47bf-c02e-43f1-909f-b991802579ff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "584bfc43-142f-4abe-8b8d-663f30399393",
										"exec": [
											"pm.test(\"Response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 400"
							},
							"response": []
						},
						{
							"name": "Create empty order with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "437a19dc-11d9-495e-9567-84761aad855b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5dd39d73-43b8-4c16-8654-5177a82a639d",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Vendor and orderType is missing\", function () {",
											"     ",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"vendor\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"orderType\").parameters[0].value).to.equal(\"null\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Create Ongoing order with empty ongoing field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d643868a-dfe7-4b17-bc79-50092ba8de51",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order = utils.buildOrderWithMinContent();",
											"order.orderType = \"Ongoing\";",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "658468f1-e3ee-4a42-ac4e-19a65b6a278f",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Ongoing is missing\", function () {",
											"        pm.expect(jsonData.errors[0].code === \"missingOngoing\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Create One-Time order with ongoing field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ecb379ad-361b-46b6-aad9-ad9aff73ca0f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order = utils.buildOrderWithMinContent();",
											"order.ongoing = {};",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f670a7f7-29a1-4ec0-b4c1-8f017c843247",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Ongoing is missing\", function () {",
											"        pm.expect(jsonData.errors[0].code === \"ongoingNotAllowed\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Get order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0654a30d-5509-43a7-ac4e-5610b51f2634",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b264bd78-e448-4d31-ab32-c898514e0989",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Update order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b730b2d8-893b-4e8b-bd19-a77e7d6289c2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e08d6b73-be78-41c8-9bff-78732c21ee9c",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Delete order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e4255c82-ad95-4a6c-a567-f8f8c8c4387c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef281a5f-8c0f-4a97-a2a0-d22ec3e0464f",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Get order - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b960e4e4-b1bd-4cf6-94c8-562ceb257530",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54b2464c-11f2-465c-b601-aa6afd980076",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "fs12345678"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 400"
							},
							"response": []
						},
						{
							"name": "Get order - bad token format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e50172e6-fef8-4217-9f99-28bee88d6aca",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fb98d399-16a2-46be-b070-9f8559ac0ccd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "bad-token"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get order - invalid token - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "65133bb6-42aa-4f69-a2e8-63e2680b87a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5065e8e5-30a6-4792-9956-c22f4bd25d11",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id request that return 401"
							},
							"response": []
						},
						{
							"name": "Get order - random order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f1d710fe-fd46-4606-8a70-adf4b06d771d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0e1340f4-64d7-422d-931a-ad8f453e01a6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get order - empty order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b0dab5ae-7e8a-45af-b367-cf0f628b6535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "562ccb23-1969-4595-8ce3-b97cfda1b42f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										""
									]
								},
								"description": "GET /orders/composite-orders/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update order - empty poNumber - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cec5983e-d96c-4b5a-a2fe-0b9aabd737df",
										"exec": [
											"pm.variables.set(\"poLineId\", eval(globals.loadUtils).getLastPoLineId());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "82418575-319c-4288-b413-abe383570119",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsPendingOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0df81c5d-84af-4e29-a9b4-d0d5348071e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsOpenOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af9a44ad-488b-4fd9-a311-d496f9118781",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Closed order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8276a2af-111f-43f0-9c9f-0547ffe506d3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsClosedOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06a62996-7931-4a6a-ab1e-7288b867fb74",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsClosedOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsClosedOrderId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lines",
					"item": [
						{
							"name": "isPackageValidation",
							"item": [
								{
									"name": "PUT line - package with insanceId - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "59d386a7-c44a-4dc0-8475-14d061130200",
												"exec": [
													"var uuid = require(\"uuid\");",
													"",
													"let line = JSON.parse(pm.globals.get(\"poLineForNegativeTests\"));",
													"",
													"line.isPackage = true;",
													"line.instanceId = uuid.v4();",
													"pm.variables.set(\"po_line_isPackage422\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "56e03389-71c8-44c6-a41d-9147e066ce8a",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"",
													"    pm.expect(pm.response.text()).to.include(\"InstanceIdNotAllowedForPackagePoLine\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_isPackage422}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineForNegativeTestsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineForNegativeTestsId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 422"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify PO Line required properties",
							"item": [
								{
									"name": "Create line - without required fields- 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1de4140-e317-4139-84c5-5533affcebc2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
													"delete line.source;",
													"delete line.cost;",
													"delete line.titleOrPackage;",
													"delete line.orderFormat;",
													"delete line.acquisitionMethod;",
													"pm.variables.set(\"line_body\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bfd57fc6-0ba6-4b81-a12c-9d115368e140",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    ",
													"});",
													"pm.test(\"5 validation errors\", function () {",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Quantity validation",
							"item": [
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "be67cc20-e884-42d4-9828-74a1070cf2bf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Physical Resource\";",
													"        line.cost.quantityElectronic = 5;",
													"        line.cost.quantityPhysical = 0;",
													"        line.cost.listUnitPrice = 10;",
													"        line.cost.listUnitPriceElectronic = 0;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"        var emptyLocation = {};",
													"        emptyLocation.locationId = line.locations[0].locationId;",
													"        emptyLocation.quantityElectronic = 0;",
													"        emptyLocation.quantityPhysical = 0;",
													"        ",
													"        line.locations.push(emptyLocation);",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eb1689d7-ff2c-4080-b297-322989d30bea",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"5 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b277be8c-d033-4c8f-9620-a7b6984fbda0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Electronic Resource\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        line.cost.listUnitPrice = 0;",
													"        line.cost.listUnitPriceElectronic = 10;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6685857e-0c49-4a41-8c0e-f583b67e0549",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"4 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify P/E Mix Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b8516c03-87b2-4991-b7f6-13c274853853",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.id = JSON.parse(globals.poLineForNegativeTests).id;",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"P/E Mix\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"        pm.variables.set(\"lineId\", line.id);",
													"",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "691983c8-aedc-4a3a-aa7e-1d340e4ac83e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"3 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{lineId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cost Prices",
							"item": [
								{
									"name": "Verify P/E Mix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "48213987-d201-43cc-9706-2c21e939bc82",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph_pe_mix.json\", (err, res) => {",
													"    let line = res.json().compositePoLines[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = -1;",
													"    // Zero price is allowed MODORDERS-197",
													"    line.cost.listUnitPriceElectronic = 0;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = 101;",
													"    line.cost.discountType = \"percentage\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e1cc0425-b245-472e-a6d3-8841e805d423",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "07fe1d9b-511e-48dc-80a9-561c94135991",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Physical Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 0;",
													"    line.cost.listUnitPriceElectronic = 10;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6920d340-8ce1-40dd-adc1-179fcb416b7a",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5150a9e0-8b4c-46f8-828c-03878976fb07",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Electronic Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 10;",
													"    line.cost.listUnitPriceElectronic = -0.00000000001;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21078eca-7460-467a-a8ab-0a478661bcf7",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order lines - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ef46ab3c-07d1-4af1-8107-c2108ec65f2c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f35c7f94-5249-4adc-b969-737a01f34055",
										"exec": [
											"pm.test(\"PO line response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5a78279e-474a-43df-98d1-d87bfe8efeff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8e99014-8967-47b4-b046-001a1f345f0e",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a7102c6-a1b0-4bcc-ae75-db25162a32e8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fbc8ae9c-6f47-4300-b3f8-66bde4373b6d",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get line - empty polineId - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5838418f-fea9-422e-b8a6-331df6c55eeb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24ede6ef-5236-4fe6-aafb-7bc400b64ac0",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										""
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - inactive accessProvider - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "95ffaa9e-5437-4a09-b710-cca391f2f91a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + pm.environment.get(\"negativeTestsOpenElectronicPOLineId\"), (err, res) => {",
											"    let electr_line = res.json();",
											"",
											"    electr_line.eresource.accessProvider = pm.environment.get(\"inactiveVendorId\");",
											"",
											"    pm.variables.set(\"electr_line_body\", JSON.stringify(electr_line));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96b01580-aeec-482f-8fbb-4e61e37b4ffd",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{electr_line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{negativeTestsOpenElectronicPOLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{negativeTestsOpenElectronicPOLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9562526-cb32-464d-aa37-bf4071ac9794",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "210059f8-063c-4888-88ed-a61802bb9225",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f49c01c-43ee-40fe-80f4-5326b486f4a9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75688079-2251-4077-9e17-c20507ef87bc",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3734411d-093e-4cfd-a8dd-6d987bceed94",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9023de93-7171-40ca-851b-7d81cb3e13d7",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c8eae9aa-9345-4c18-b3ed-748ea65cd4e6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d70fc1b4-4fef-4378-aa14-a193efc53730",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Update line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2525faae-a783-477a-87c4-19d6cb4f48b4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d82686b-0b95-46c7-96ab-fd37ff16ec4e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Delete line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e17dd581-1966-4d30-aa75-0a07f3446c24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85312da0-e56f-46b9-9c4b-1bc15b785ba5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line - invalid order Id in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d912ad42-ffeb-44ba-9a46-cb11ca226e30",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"line.purchaseOrderId = \"\";",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e7e106b2-11bb-4c3d-b915-20d4a41f3446",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/order-lines/id requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line to Open order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6447309b-fc4c-4d77-a0ea-f7827b33a51d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsOpenOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a47f0e61-41f6-4d09-ba2a-f14f1500d9dd",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add line to Closed order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0b254e16-bf89-4a43-b7d0-02a97777a982",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsClosedOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9bf9a7e6-369c-402e-a9e7-25e9277a32ef",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate - existing PO Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f625f047-e93d-4dd7-94d0-cd8f858c89dd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsPendingOrderId, function (err, res) {",
											"    pm.variables.set(\"existing_number\", res.json().poNumber);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "81ff9a2f-d4cd-4ad0-8c6e-d81a60d0f52f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : {{existing_number}}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 400 if an existing PO Number is supplied"
							},
							"response": []
						},
						{
							"name": "Validate - invalid PONumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c9cd6cbd-f14e-4f39-9899-db4760e2c21f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9357b381-6350-490f-a2a8-2a771db8dc27",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"12-12-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 422 when an invalid PO Number is specified"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Attempt to receive already received pieces for physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8a66ed67-dac4-4a29-b0c5-007549c6eaaa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/receiving-history?limit=10&query=receivingStatus==Received and purchaseOrderId=\" + globals.physElecOpenOrderId, (err, res) => {",
											"    let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory);",
											"    pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d6405d7-9fd6-48ae-bf72-9d4daa415680",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"All items should be failed because already received before\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(10);",
											"    let processedWithError = 0;",
											"    for(let i = 0; i < jsonRs.receivingResults.length; i++) {",
											"        let result = jsonRs.receivingResults[i];",
											"        pm.expect(result.processedSuccessfully).to.equal(0);",
											"        processedWithError += result.processedWithError;",
											"        for(let j = 0; j < result.receivingItemResults.length; j++) {",
											"            pm.expect(result.receivingItemResults[j].processingStatus).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.type).to.equal(\"failure\");",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"        }",
											"    }",
											"    pm.expect(processedWithError).to.equal(jsonRs.totalRecords);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records created by previous request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "check-in already received piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38ebcaaa-9b45-4240-8ae5-a6d063d3ff0a",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 piece failed to process\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 0, 1);",
											"    let receivingItemResults = jsonRs.receivingResults[0].receivingItemResults;",
											"     pm.expect(receivingItemResults[0].processingStatus).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.type).to.equal(\"failure\");",
											"     pm.expect(receivingItemResults[0].processingStatus.error).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cabd9351-4a48-4d86-83f2-453ece800c28",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Title",
					"item": [
						{
							"name": "Create po line for title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c93e1966-254a-493d-b97e-039e873f00f4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "05ccc7c2-4e0a-48b0-89a2-1d04840236a9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    ",
											"    pm.environment.set(\"poLineIdForTitle\", jsonData.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/id/lines/id requests that return 201"
							},
							"response": []
						},
						{
							"name": "Create title with titleExist error",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fcc1d6e8-625c-4f1d-a81a-1e031e31ff7f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7c17bdcb-c2a2-44ac-83f0-2e69566c466a",
										"exec": [
											"pm.test(\"Title status code is 422\", function() {",
											"    pm.response.to.have.status(422);",
											"});",
											"pm.test(\"Response contains titleExist error code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"titleExist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Piece",
					"item": [
						{
							"name": "Update piece by id - bad id 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a24d1910-c97b-4221-b55b-bcdc062fbde7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "88fa2c6a-e700-40aa-a873-691c58293a38",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Edit piece by id - bad format 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d949b0b4-d5a3-45ba-9b02-8089b1a476b8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab0c36eb-cc7b-4400-93bf-052929b0010c",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"bad-id-format\",\n    \"caption\": \"Tutorial Volume 5\",\n    \"comment\": \"Special Edition\",\n    \"format\": \"Physical\",\n    \"itemId\": \"522a501a-56b5-48d9-b28a-3a8f02482d97\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"poLineId\": \"7decd831-8295-4a9d-9247-320d165583bf\",\n    \"receivingStatus\": \"Expected\",\n    \"supplement\": true,\n    \"receivedDate\": \"2018-10-10T00:00:00.000+0000\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id-format"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id - bad format 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6d0bdbe-cf93-46b3-a603-a004813aa3d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8fb63c5d-824f-426e-ab56-5672af96cf26",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Create empty piece with missing required fields 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7bf774ae-62e5-4797-9c88-46041902e322",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eb720756-b475-4ef2-9e75-599bbc69eb9f",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"        requiredObj(errors, \"poLineId\");",
											"        requiredObj(errors, \"format\");",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											"",
											"function requiredArray(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"size must be between 1 and 2147483647\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"[]\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						},
						{
							"name": "get title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da0c9aa8-5c31-4942-ae5f-0364183bca23",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.environment.set(\"poLIneIdForTitle\", utils.getLastPoLineId());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8492d97a-7814-4d12-a738-7984b8a1210d",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let titles = pm.response.json();",
											"    pm.variables.set(\"titleId\", titles.titles[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{poLIneIdForTitle}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLIneIdForTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create piece with missing receiptDate 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "89710605-92f0-4e1c-bc23-c1454b7fcd4e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function(err, res) {",
											"    let piece = res.json();",
											"    delete piece.receiptDate;",
											"    piece.poLineId = pm.variables.get(\"poLineId\");",
											"    piece.titleId = pm.variables.get(\"titleId\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2fe2ed21-0f9a-4972-b48d-1ea7788d49b5",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ISBN validation",
					"item": [
						{
							"name": "Create Order with invalid ISBN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0f15176f-8376-4285-938d-5a6adab5b5e6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    order = utils.deletePoNumber(order);",
											"    order.compositePoLines.pop();",
											"    let preparedOrder = utils.prepareOrder(order);",
											"    ",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds[0].productId = \"1-4028-9462-7456\";",
											"    preparedOrder.compositePoLines[0].details.productIds[0].productIdType = pm.environment.get(\"isbnIdentifierTypeId\");",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(preparedOrder));",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "817a8184-f0dd-4ff9-a634-4a302cc0e500",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"invalidISBN\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Approval",
					"item": [
						{
							"name": "Create order with \"approval required\" set to true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2a4cb79-9044-445b-af23-af4bf7f881a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/configurations/entries?query=module==ORDERS and configName==approvals\", (err, res) => {",
											"  let configName = \"approvals\";",
											"  let value = \"{\\\"isApprovalRequired\\\":true}\";",
											"",
											"  utils.updateOrCreateOrdersConfig(res.json().configs, configName, value);",
											"});",
											"",
											"    ",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_without_po_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    order.poNumber = \"TSTAPPROVAL\";",
											"    order.approved = false;",
											"    order.workflowStatus = \"Open\";",
											"    ",
											"    order.id = \"00000001-1111-5555-8888-888888888888\";",
											"",
											"    pm.globals.set(\"orderWithApprovalReqTrueId\", order.id); ",
											"    pm.variables.set(\"orderWithApprovalReqTrue\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8d9d15f8-20e1-4bc5-8070-48f9cac412a9",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"Approval is required to open order\");",
											"    pm.expect(pm.response.text()).to.include(\"orderApprovalRequired\");",
											"    ",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithApprovalReqTrue}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved for it to be transitioned to be open status"
							},
							"response": []
						},
						{
							"name": "Create order with user not having approval permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2241786a-d4f6-4c25-bff6-b31fb4d5c066",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_without_po_lines.json\", (err, res) => {",
											"    let order = res.json();",
											"    order.poNumber = \"TST123APPROVAL1\";",
											"    order.approved = true;",
											"    ",
											"    pm.variables.set(\"orderWithNoApprovalPerms\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5a143389-a077-4779-9ca8-346eeaca64d9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User does not have permissions to approve order - operation is restricted\");",
											"    pm.expect(pm.response.text()).to.include(\"userHasNoApprovalPermission\");",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-restricted}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithNoApprovalPerms}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Unopen",
					"item": [
						{
							"name": "Unopen order with user not having permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "75f4ec8b-4397-4c63-b8db-a15316f61021",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let orderForUnopen = pm.environment.get(\"negativeTestsOpenElectronicOrderBody\");",
											"",
											"orderForUnopen.workflowStatus = \"Pending\";",
											"",
											"pm.variables.set(\"orderUnopenBody\", JSON.stringify(orderForUnopen));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef18b31f-e666-4c4a-9175-3423b2f95aa0",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User does not have permissions to move order from open to pending - operation is restricted\");",
											"    pm.expect(pm.response.text()).to.include(\"userHasNoOrderUnopenPermission\");",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-restricted}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderUnopenBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenElectronicOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenElectronicOrderId}}"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b8ccb21-17ed-4824-93bb-92ade3fbf427",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "780698cf-8d5b-4472-8ab0-1955e92e6c87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Templates",
					"item": [
						{
							"name": "Get updated order templates collection - invalid query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "823a66d6-bdc1-44e8-ba2c-85d25f10b8cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eb12a311-cbef-49f8-8dbb-c73f3361db8f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates?query=invalid-query",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid-query"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order template - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "21bb9485-cfbf-4713-9212-8f50cc77a5bd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "77c03230-0275-4cce-9ca5-ab08ebe0a8c6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"configuration",
										"suffixes",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order template - id mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b61f20db-bba8-45ef-885d-0d384544e8ec",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
											"pm.variables.set(\"updatedOrderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b194dbaa-81ee-413d-a596-039ee827b8ed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order template - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0b71ea93-cb4d-4f94-b593-cc429441abe1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3af39e1c-d462-4f75-a300-93763a43d7b5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Encumbrance creation failure",
					"item": [
						{
							"name": "Create Open order with lines pointing to unexisting fund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d2812b0c-2ec4-422c-8a58-1710c71c4350",
										"exec": [
											"let utils = eval(globals.loadUtils);\t\r",
											"var uuid = require('uuid');\t\r",
											"\r",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {\t\r",
											"    let order  = utils.prepareOrder(res.json());\r",
											"    order.workflowStatus = \"Open\";\r",
											"    // Setting specific PO Number to delete this order in cleanup\"\r",
											"    order.poNumber = \"APIFAILENCUMB1\";\r",
											"    order.compositePoLines.forEach(poLine => {\r",
											"        poLine.receiptStatus = \"Receipt Not Required\";\r",
											"        // Setting random fund id\"\r",
											"        poLine.fundDistribution.forEach(distrib => distrib.fundId = uuid.v4());\r",
											"    });\r",
											"    pm.variables.set(\"order_with_unexisting_fund\", JSON.stringify(order));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4cfeadb-bae1-44f7-b8e8-c91e710d3660",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\t\r",
											"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    let errors = pm.response.json().errors;\r",
											"    pm.expect(errors).to.have.lengthOf(1);\r",
											"    pm.expect(errors[0].code).to.equal(\"fundsNotFound\");\r",
											"});\r",
											"\t\r",
											"utils.sendGetRequest(\"/orders/order-lines?query=poNumber==APIFAILENCUMB1\", function (err, res) {\r",
											"    pm.expect(err).to.equal(null);\r",
											"\t\r",
											"    res.json().poLines.forEach(poLine => {\r",
											"        utils.validateEncumbranceRecords(poLine, \"Pending\");\r",
											"        pm.globals.set(\"negativeTestsFailedEncumbrances\", poLine.purchaseOrderId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_unexisting_fund}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Open order. Ledger is restricted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "581c2886-d0f4-4ccd-8659-9457bc89a412",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let openOrder = utils.prepareOrder(res.json());",
											"    openOrder.workflowStatus = \"Open\";",
											"    delete openOrder.poNumber;",
											"",
											"    // Setting restricted fund id\"",
											"    openOrder.compositePoLines[0].fundDistribution[0].fundId = pm.environment.get(\"restrictedFundId\");",
											"",
											"    pm.variables.set(\"order_with_insufficient_funds\", JSON.stringify(openOrder));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1bfe6019-26af-4ef7-802a-a4b4122f1154",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\t\r",
											"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    let errors = pm.response.json().errors;\r",
											"    pm.expect(errors).to.have.lengthOf(1);\r",
											"    pm.expect(errors[0].code).to.equal(\"fundCannotBePaid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_insufficient_funds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Reason for closure",
							"item": [
								{
									"name": "Get reason for closure collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "65a68473-9922-43ad-bb82-9966d6db9904",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d0f93191-532d-4887-9444-102a492aefb1",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6abfd843-0e27-46a8-9c2e-db39a019c635",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "579c963b-471d-433a-badc-39d85d038a27",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update reason for closure - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f01b310f-317e-4b9e-8b77-d1e7ba66018b",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedReasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eccb8e1f-ec60-4878-82f4-4ce9288244a3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedReasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete reason for closure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7e79e05c-134b-41b6-b665-eac406185e2e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5d1ede30-a5a7-4a9b-a539-3b910bbd6691",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prefix",
							"item": [
								{
									"name": "Get prefix collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3801ba23-10c9-45e2-b5f9-9de0f49e5d80",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e648a88b-c860-4c0d-849b-24e3c3477d83",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "edf9bb1e-4821-4124-880a-1f70a17d4fa5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "222b70dc-1f90-45ce-8082-68750e3800b1",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-templates",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update prefix - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "718ee22d-272b-457a-b8d3-96e2419a3a24",
												"exec": [
													"let body = globals.testData.prefix;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedPrefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "91da6f69-4d74-466e-8d91-a34e9aac429a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPrefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete prefix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b3f72d80-4f49-4deb-8b86-94d58300640c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ba8ef323-0ebd-4c74-b282-b7978245f39c",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Suffix",
							"item": [
								{
									"name": "Get suffix collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fae9a09e-a155-4f0e-8c42-87c557c74128",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ca7350c6-0f6b-484a-9f8a-73f062a7a036",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "429b7c51-6e40-4cc3-9167-9f754bd1e0b4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "165bee26-ad7f-486b-9597-051886ac5263",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update suffix - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f122ceba-ccf7-4f4d-9ef6-f3e0c8063d95",
												"exec": [
													"let body = globals.testData.suffix;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedSuffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "591b198b-c80b-4389-adbf-049d10b1e9f9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedSuffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete suffix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4b318b9d-acc7-4d15-a173-8715ee4a061e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e3b609b0-23af-41a1-93c8-a84d1ec17162",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create order in Pending status without material types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "71a5837c-9807-48bd-ace0-44496c38826e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_po_line_without_material_type.json\", function (err, res) {",
											" let order  = res.json()//utils.buildOrderWithMinContent();",
											" order.compositePoLines[0].alerts = [];",
											" order.compositePoLines[0].reportingCodes = [];",
											"",
											" pm.environment.set(\"prepared_string_order_po_line_without_material_type\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "537f187f-ff27-4e8a-9229-aaf8eaddd478",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.environment.set(\"orderIdWithoutMaterialType\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{prepared_string_order_po_line_without_material_type}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Get composite order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d4ee21f-3a55-4f18-9d69-4e9094e07505",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.environment.set(\"prepared_order_po_line_without_material_type_for_transfer\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e1d605a-25eb-4c9d-ac70-982830455a8f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdWithoutMaterialType}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdWithoutMaterialType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failed transition from Pending to Open without material type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "628c4efa-80bc-4141-bc47-8670318f99da",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"  let originOrder  = pm.environment.get(\"prepared_order_po_line_without_material_type_for_transfer\");",
											"  console.log(originOrder)",
											"  let orderForPut = utils.buildOrderWithMinContent();",
											"  console.log(orderForPut)",
											"",
											"",
											"  orderForPut.id = originOrder.id;",
											"  orderForPut.poNumber = originOrder.poNumber;",
											"   orderForPut.reEncumber = originOrder.reEncumber;",
											"   orderForPut.totalEstimatedPrice = originOrder.totalEstimatedPrice",
											"   orderForPut.totalItems = originOrder.totalItems",
											"   orderForPut.vendor = originOrder.vendor",
											"  orderForPut.workflowStatus = \"Open\"",
											"   orderForPut.acqUnitIds = []",
											"   orderForPut.metadata = originOrder.metadata",
											"",
											"  pm.environment.set(\"orderForPut_without_material_type\", JSON.stringify(orderForPut));    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "02b1a7f1-38b4-4bd1-92a1-d56ab69a156b",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForPut_without_material_type}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdWithoutMaterialType}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdWithoutMaterialType}}"
									]
								},
								"description": "Transition from Pending to Open without material type should be blocked\n[MODORDERS-176](https://issues.folio.org/browse/MODORDERS-176)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7f45f04-7d67-4ab3-956f-ea67013aad28",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea4f0c44-7439-4ce5-9582-6daced3b98a6",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e2cb1d42-c215-4da0-9cbc-817857be9d28",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "24b55bcd-09e8-4ea1-b4ef-cf80e399de6c",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8a8d240c-cf30-4138-812b-3b237f82c9e5",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [",
					"            \"poLines-limit\",",
					"            \"inventory-instanceTypeCode\",",
					"            \"inventory-instanceStatusCode\",",
					"            \"inventory-loanTypeName\",",
					"            \"approvals\"",
					"        ],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    tenantConfig: {",
					"        configNames: [\"tenant.addresses\"],",
					"        bodyTemplate: {",
					"            \"module\": \"TENANT\",",
					"            \"code\": \"ADRESSES_123\",",
					"            \"configName\": \"Test TENANT Config\",",
					"            \"description\": \"Tenant config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Admin\",",
					"                    \"lastName\": \"Orders API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": []",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"User\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\",",
					"                    \"orders.item.approve\",",
					"                    \"orders.item.unopen\",",
					"                    \"orders-storage.pieces.collection.get\",",
					"                    // To be removed when MODINV-120 is resolved",
					"                    \"inventory-storage.items.collection.get\",",
					"                    \"inventory-storage.items.item.get\",",
					"                    \"inventory-storage.instances.item.get\",",
					"                    \"inventory.items.item.get\"",
					"                ]",
					"            }",
					"        },",
					"        restricted: {",
					"            user: {",
					"                \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-restricted-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"User\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-restricted-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\",",
					"                    \"orders-storage.pieces.collection.get\",",
					"                    // To be removed when MODINV-120 is resolved",
					"                    \"inventory-storage.items.collection.get\",",
					"                    \"inventory-storage.items.item.get\",",
					"                    // To be removed when",
					"                    \"inventory-storage.instances.item.get\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test orders tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    },",
					"    receiving: {",
					"        bodyTemplate: {",
					"            \"toBeReceived\": [{",
					"                \"poLineId\": \"\",",
					"                \"received\": 1,",
					"                \"receivedItems\": [{",
					"                    \"barcode\": \"11111111111\",",
					"                    \"callNumber\": \"BF2050 .M335 1999\",",
					"                    \"comment\": \"Very important note\",",
					"                    \"caption\": \"Vol. 1\",",
					"                    \"itemStatus\": \"In process\",",
					"                    \"locationId\": pm.variables.get(\"locationId2\"),",
					"                    \"pieceId\": \"\"",
					"                }]",
					"            }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    piece: {",
					"        bodyTemplate: {",
					"            \"caption\": \"Volume\",",
					"            \"comment\": \"creating Piece from API test\",",
					"            \"format\": \"\",",
					"            \"locationId\": \"\",",
					"            \"poLineId\": \"\",",
					"            \"receivingStatus\": \"Expected\",",
					"            \"supplement\": true",
					"        }",
					"    },",
					"    checkin: {",
					"        bodyTemplate: {",
					"            \"toBeCheckedIn\": [",
					"                {",
					"                    \"poLineId\": \"\",",
					"                    \"checkedIn\": \"\",",
					"                    \"checkInPieces\": [",
					"                        {",
					"                            \"id\": \"\",",
					"                            \"barcode\": Math.floor(Math.random() * 1000),",
					"                            \"callNumber\": \"BF2050 .M335 1999\",",
					"                            \"comment\": \"checkedin from API test\",",
					"                            \"caption\": \"Vol. 1\",",
					"                            \"createItem\": true,",
					"                            \"supplement\": false,",
					"                            \"locationId\": \"\",",
					"                            \"accessionNumber\": \"1956.1\",",
					"                            \"itemDescription\": \"This is the piece item checkin\",",
					"                            \"electronicBookplate\": \"This item is from API tests\"",
					"                        }]",
					"                }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    item: {",
					"        bodyTemplate: {",
					"            \"holdingsRecordId\": \"\",",
					"            \"permanentLoanTypeId\": pm.variables.get(\"loanTypeId\"),",
					"            \"materialTypeId\": pm.variables.get(\"materialTypeId\"),",
					"            \"status\": {",
					"                \"name\": \"On order\"",
					"            },",
					"            \"purchaseOrderLineIdentifier\": \"\"",
					"        }",
					"    },",
					"    orderTemplate: {",
					"        id: \"f5b6ad51-58a3-44cd-88e3-b612ea8ff15b\",",
					"        templateCode: \"Amazon-L\",",
					"        templateDescription: \"Use to create orders in FOLIO after they are placed on Amazon\",",
					"        templateName: \"Amazon orders\",",
					"        acquisitionMethod: \"Purchase At Vendor System\",",
					"        approved: true",
					"    },",
					"    reasonForClosure: {",
					"        reason: \"Test closure reason\",",
					"        source: \"User\"",
					"    },",
					"    prefix: {",
					"        name: \"Test prefix\",",
					"        description: \"Test prefix description\"",
					"    },",
					"    suffix: {",
					"        name: \"Test suffix\",",
					"        description: \"Test suffix description\"",
					"    },",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"orders_schema_\";",
					"",
					"    utils.validateReceivingHistory = function (history) {",
					"        pm.expect(history.id, \"Piece id expected\").to.exist;",
					"        pm.expect(history.dateOrdered, \"Order date expected\").to.exist;",
					"        pm.expect(history.checkin, \"Checkin expected\").to.exist;",
					"        pm.expect(history.poLineId, \"PO Line id expected\").to.exist;",
					"        pm.expect(history.poLineNumber, \"PO Line number expected\").to.exist;",
					"        pm.expect(history.pieceFormat, \"Piece format expected\").to.exist;",
					"        pm.expect(history.poLineReceiptStatus, \"Receipt status expected\").to.exist;",
					"        pm.expect(history.purchaseOrderId, \"Purchase order id expected\").to.exist;",
					"",
					"    };",
					"",
					"    utils.validatePiece = function (piece) {",
					"        pm.expect(piece.id, \"Piece id expected\").to.exist;",
					"        pm.expect(piece.format, \"Piece format expected\").to.exist;",
					"        pm.expect(piece.poLineId, \"Piece Po LineId expected\").to.exist;",
					"        pm.expect(piece.receivingStatus, \"Piece receiving status expected\").to.exist;",
					"    };",
					"",
					"    utils.validateEncumbrance = function (encumbrance, fundDistributions) {",
					"        pm.expect(encumbrance.id, \"Encumbrance id expected\").to.exist;",
					"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered, \"Amount encumbered expected\").to.exist;",
					"        pm.expect(encumbrance.fromFundId, \"Encumbrance fund id expected\").to.exist;",
					"        pm.expect(encumbrance.encumbrance.status, \"Encumbrance receiving status expected\").to.exist;",
					"        pm.expect(encumbrance.amount, \"Encumbrance amount is expected\").to.exist;",
					"",
					"        let filteredArray = fundDistributions.filter(fundDistribution => fundDistribution.encumbrance === encumbrance.id);",
					"        pm.expect(filteredArray).to.have.lengthOf(1);",
					"        let fundDistribution = filteredArray[0];",
					"        pm.expect(encumbrance.fromFundId).to.eql(fundDistribution.fundId);",
					"    };",
					"",
					"    /**",
					"     * Sends request with specified Method and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function (path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines for Fund Distribution.",
					"     */",
					"    utils.prepareOrderFundDistri = function (order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLineFundDistri(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data for Fund Distribution.",
					"     */",
					"    utils.preparePoLineFundDistri = function (poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function (order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLine(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function (poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"cost\")) {",
					"            delete poLine.cost.poLineEstimatedPrice;",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function (productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"",
					"    /**",
					"     * Build Order with minimal required fields.",
					"     */",
					"    utils.buildOrderWithMinContent = function () {",
					"        return {",
					"            \"vendor\": pm.variables.get(\"activeVendorId\"),",
					"            \"orderType\": \"One-Time\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build PO line with minimal required fields.",
					"     */",
					"    utils.buildPoLineWithMinContent = function (orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Physical Resource\",",
					"            \"physical\": {",
					"                \"createInventory\": \"None\"",
					"            },",
					"            \"cost\": {",
					"                \"currency\": \"USD\",",
					"                \"listUnitPrice\": 1,",
					"                \"quantityPhysical\": 1",
					"            },",
					"            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					" * Build PO line with minimal required fields.",
					" */",
					"    utils.buildElectronicPoLineContent = function (orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Electronic Resource\",",
					"            \"eresource\": {",
					"                \"createInventory\": \"None\"",
					"            },",
					"            \"cost\": {",
					"                \"currency\": \"USD\",",
					"                \"listUnitPriceElectronic\": 1,",
					"                \"quantityElectronic\": 1",
					"            },",
					"            \"locations\": [",
					"                {",
					"                    \"locationId\": pm.environment.get(\"locationId1\"),",
					"                    \"quantity\": 1,",
					"                    \"quantityElectronic\": 1,",
					"                    \"quantityPhysical\": 0",
					"                }",
					"            ],",
					"            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Title with minimal required fields.",
					"     */",
					"    utils.buildTitleWithMinContent = function (lineId) {",
					"        return {",
					"            \"title\": \"Test Title\",",
					"            \"poLineId\": lineId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Order in status \"Open\" without PO Number.",
					"     */",
					"    utils.prepareOpenOrderWithoutPoNumber = function (order) {",
					"        let json = utils.prepareOrder(order);",
					"        json.workflowStatus = \"Open\";",
					"        utils.deletePoNumber(json);",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function (order, expectedCount) {",
					"        let checkInventory = order.workflowStatus !== \"Pending\";",
					"        pm.expect(order.compositePoLines).to.have.lengthOf(expectedCount);",
					"        order.compositePoLines.forEach(poLine => {",
					"            pm.test(\"Validating PO Line with number=\" + poLine.poLineNumber, function () {",
					"                utils.rememberPoLineId(poLine);",
					"                pm.expect(poLine.purchaseOrderId, \"Line has to have order id\").to.equal(order.id);",
					"                utils.validatePoLineAgainstSchema(poLine);",
					"                poLine.locations.forEach(location => utils.validateLocationQuantity(location));",
					"",
					"                if (checkInventory) {",
					"                    utils.validatePoLinesInventoryLinks(poLine);",
					"                } else {",
					"                    utils.verifyNoInventoryItemsExist(poLine);",
					"                }",
					"                // Validate that expected piece quantity created of expected format",
					"                utils.validatePieceRecords(poLine, checkInventory);",
					"                utils.validateEncumbranceRecords(poLine, order.workflowStatus);",
					"",
					"                if (poLine.cost) {",
					"                    pm.expect(poLine.cost.poLineEstimatedPrice).to.be.above(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates presence of links to Inventory entities (e.g. Instance) and that these links are correct",
					"     */",
					"    utils.validatePoLinesInventoryLinks = function (poLine) {",
					"        // Instance should created only",
					"        if (!utils.inventoryUpdateNotRequired(poLine)) {",
					"            utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + poLine.id, (err, res) => {",
					"                let title = res.json().titles[0];",
					"                utils.sendGetRequest(\"/instance-storage/instances/\" + title.instanceId, (err1, res1) => {",
					"                    pm.test(\"Instance Record exist for PO Line with number=\" + poLine.poLineNumber, () => {",
					"                        let instance = res1.json();",
					"                        pm.expect(instance).to.exist;",
					"",
					"                        //Check if holdings record is created",
					"                        utils.validateHoldingsRecord(poLine);",
					"                        // Now check items",
					"                        utils.validateInventoryItems(poLine);",
					"",
					"                        // Now validate expected instance's content",
					"                        utils.validateInstanceContent(instance, poLine);",
					"                    });",
					"                    pm.expect(title.instanceId, \"Instance id is expected\").to.exist;",
					"                });",
					"            });",
					"",
					"",
					"        } else {",
					"            utils.verifyNoInventoryItemsExist(poLine);",
					"        }",
					"    };",
					"",
					"    utils.validateInstanceContent = function (instance, poLine) {",
					"        pm.expect(instance.title, \"Instance's title is not the same as PO Line's\").to.equal(poLine.titleOrPackage);",
					"",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceStatusCode\") !== null) {",
					"            pm.expect(instance.statusId, \"Instance's status id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceStatusId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's status id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceStatusId\"));",
					"        }",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceTypeCode\") !== null) {",
					"            pm.expect(instance.instanceTypeId, \"Instance's type id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceTypeId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceTypeId\"));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.validateInventoryItems = function (line) {",
					"        let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"        utils.getItemsByPoLineId(line.id, expectedCount, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records exist for PO Line with number=\" + line.poLineNumber, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                let isCheckin = typeof line.checkinItems === \"undefined\" ? false : line.checkinItems;",
					"                //items are not created for checkin while opening the order, but can be created later",
					"                if (utils.isItemsUpdateRequired(line) && !isCheckin) {",
					"                    pm.expect(body.totalRecords, \"Quantity of items created for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                    body.items.forEach(item => utils.validateItemContent(item));",
					"                } else {",
					"                    pm.expect(body.totalRecords, \"Quantity of items should be zero\").to.equal(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.validateItemContent = function (item) {",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-loanTypeName\") !== null) {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id is not the same as created for API tests\").to.equal(pm.variables.get(\"loanTypeId\"));",
					"        } else {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"loanTypeId\"));",
					"        }",
					"",
					"        pm.expect(item.status.name, \"Item's status name is incorrect\").to.equal(\"On order\");",
					"        pm.expect(item.materialTypeId, \"Item's material type id is not the same as created for API tests\").to.equal(pm.variables.get(\"materialTypeId\"));",
					"    }",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.getItemsByPoLineId = function (id, limit, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=\" + limit + \"&query=purchaseOrderLineIdentifier==\" + id, handler);",
					"    };",
					"    /**",
					"     * Search items by holdingId",
					"     */",
					"    utils.getItemsByHoldingId = function (holdingId, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=999&query=holdingsRecordId==\" + holdingId, handler);",
					"    };",
					"",
					"    /**",
					"     * Validates that Holdings Record was created  in the inventory",
					"     */",
					"    utils.validateHoldingsRecord = function (poLine) {",
					"        let instanceId = poLine.instanceId;",
					"        pm.expect(instanceId).to.exist;",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=0&query=instanceId==\" + instanceId, (err, res) => {",
					"            let body = res.json();",
					"            if (utils.isHoldingsUpdateRequired(poLine)) {",
					"                pm.test(\"Holding Records exist for Created Instance=\" + instanceId, function () {",
					"                    pm.expect(body.totalRecords).to.be.above(0);",
					"                });",
					"            } else {",
					"                pm.test(\"Holding Records not exist for instance=\" + instanceId, function () {",
					"                    pm.expect(body.totalRecords).to.be.equal(0);",
					"                });",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that there is no any item associated with the PO Line",
					"     */",
					"    utils.verifyNoInventoryItemsExist = function (line, handler) {",
					"        utils.getItemsByPoLineId(line.id, 0, (err, res) => {",
					"            pm.test(\"No item records found for PO Line with number=\" + line.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords).to.eql(0);",
					"            });",
					"            if (typeof handler === \"function\") {",
					"                handler();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that items has specified status",
					"     */",
					"    utils.verifyItemsStatus = function (line, itemStatus) {",
					"        utils.getItemsByPoLineId(line.id, 1000, (err, res) => {",
					"            let items = {};",
					"            pm.test(\"All item records for PO Line with number=\" + line.poLineNumber + \" retrieved\", function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                items = res.json().items;",
					"            });",
					"            pm.test(items.length + \" item records for PO Line with number=\" + line.poLineNumber + \" have status=\" + itemStatus, function () {",
					"                res.json().items.forEach(item => pm.expect(item.status.name).to.eql(itemStatus))",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate pieces for PoLine",
					"     */",
					"    utils.validatePieceRecords = function (poLine, arePiecesCreated) {",
					"        let expectedQuantity = arePiecesCreated ? utils.calculateExpectedPiecesQuantity(poLine) : 0;",
					"        utils.sendGetRequest(\"/orders-storage/pieces?limit=\" + expectedQuantity + \"&query=poLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" piece record(s) found for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created pieces does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    let pieces = res.json().pieces;",
					"                    pieces.forEach(piece => utils.validatePiece(piece));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Physical\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Physical\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Electronic\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Electronic\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Other\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Other\"));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate encumbrances for PO Line",
					"     */",
					"    utils.validateEncumbranceRecords = function (poLine, orderStatus) {",
					"        let expectedQuantity = orderStatus === \"Pending\" ? 0 : poLine.fundDistribution.length;",
					"        utils.sendGetRequest(\"/finance/transactions?limit=\" + expectedQuantity + \"&query=encumbrance.sourcePoLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" encumbrance record(s) found for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created encumbrances does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    res.json().transactions.forEach(encumbrance => utils.validateEncumbrance(encumbrance, poLine.fundDistribution));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's receipt status updated to expected,",
					"     * and incase of checkin the receipt date has to be validated",
					"     * if receipt status is partially received, as it is updated for first piece checkec-in",
					"     */",
					"    utils.validateReceiptStatus = function (poLine, receiptStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + receiptStatus + \" receipt status\", function () {",
					"            pm.expect(poLine.receiptStatus, \"Receipt status should be \" + receiptStatus).to.equal(receiptStatus);",
					"            if (\"Fully Received\" === receiptStatus || (poLine.checkinItems === true && \"Partially Received\" === receiptStatus)) {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be set\").to.not.be.empty;",
					"            } else {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be empty\").to.not.exist;",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's payment status updated to expected",
					"     */",
					"    utils.validatePaymentStatus = function (poLine, paymentStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + paymentStatus + \" payment status\", function () {",
					"            pm.expect(poLine.paymentStatus, \"Payment status should be \" + paymentStatus).to.equal(paymentStatus);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that items received in the inventory (MODORDERS-103)",
					"     */",
					"    utils.validateInventoryItemsReceived = function (poLine, expectedQuantity, itemStatus) {",
					"        let expectedCount = typeof expectedQuantity === \"undefined\" ? utils.calculateExpectedItemsQuantity(poLine) : expectedQuantity;",
					"        let status = typeof itemStatus === \"undefined\" ? \"In process\" : itemStatus;",
					"        utils.sendGetRequest(\"/item-storage/items?limit=100&query=status.name==\" + status + \" and purchaseOrderLineIdentifier==\" + poLine.id, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records marked as received for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                pm.expect(body.totalRecords, \"Quantity of items received for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                body.items.forEach(function (item) {",
					"                    pm.expect(item.barcode, \"Barcode should not be empty\").to.not.be.empty;",
					"                    pm.expect(item.itemLevelCallNumber, \"Item level call number should not be empty\").to.not.be.empty;",
					"                });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that expected number of pieces received using receiving history endpoint (MODORDERS-103)",
					"     */",
					"    utils.validateReceivingHistoryNumberOfPiecesByStatus = function (poLine, expectedQuantity, receivingStatus) {",
					"        receivingStatus = typeof receivingStatus === \"undefined\" ? \"Expected\" : receivingStatus;",
					"        utils.sendGetRequest(\"/orders/receiving-history?limit=0&query=receivingStatus==\" + receivingStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"            pm.test(expectedQuantity + \" \" + receivingStatus + \" pieces for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.json().totalRecords).to.equal(expectedQuantity);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.verifyItemsReceivedIntoAppropriateHolding = function (line, receivingResult) {",
					"        for (i = 0; i < receivingResult.receivingItemResults.length; i++) {",
					"            utils.sendGetRequest(\"/orders-storage/pieces/\" + receivingResult.receivingItemResults[i].pieceId, (err, piece) => {",
					"                //check if piece has changed location",
					"                if (piece.json().locationId === pm.environment.get(\"locationId1\")) {",
					"                    utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + line.instanceId + \" and permanentLocationId==\" + piece.json().locationId, (err, holding) => {",
					"                        pm.test(\"created holding for location \" + piece.json().locationId, function () {",
					"                            pm.expect(holding.json().holdingsRecords.length).to.be.above(0);",
					"                        });",
					"",
					"                        if (utils.isItemsUpdateRequired(line)) {",
					"                            utils.sendGetRequest(\"/item-storage/items?limit=1&query=holdingsRecordId==\" + holding.json().holdingsRecords[0].id + \" and id==\" + piece.json().itemId, (err, items) => {",
					"                                pm.test(\"item \" + items.json().items[0].id + \" received into holding \" + holding.json().holdingsRecords[0].id, function () {",
					"                                    pm.expect(items.json().items.length).to.be.above(0);",
					"                                    // MODORDERS-315 itemStatus cannot be empty",
					"                                    pm.expect(items.json().items[0].status.name).to.not.be.empty;",
					"                                });",
					"                            });",
					"                        }",
					"                    });",
					"                }",
					"            });",
					"        }",
					"    };",
					"",
					"",
					"    utils.validateLocationQuantity = function (location) {",
					"        let physicalQuantity = location.hasOwnProperty(\"quantityPhysical\") ? location.quantityPhysical : 0;",
					"        let electronicQuantity = location.hasOwnProperty(\"quantityElectronic\") ? location.quantityElectronic : 0;",
					"        pm.expect(location.quantity).to.equal(physicalQuantity + electronicQuantity);",
					"    };",
					"",
					"    utils.inventoryUpdateNotRequired = function (compPOL) {",
					"        if (compPOL.isPackage === true) {",
					"            return true;",
					"        }",
					"",
					"        // in case of \"Other\" order format check Physical createInventory value only",
					"        if (compPOL.orderFormat === \"Other\") {",
					"            return compPOL.physical == null || compPOL.physical.createInventory === \"None\";",
					"        }",
					"        let physicalUpdateNotRequired = (compPOL.physical == null || compPOL.physical.createInventory === \"None\");",
					"        let eresourceUpdateNotRequired = (compPOL.eresource == null || compPOL.eresource.createInventory === \"None\");",
					"",
					"        return physicalUpdateNotRequired && eresourceUpdateNotRequired;",
					"    };",
					"",
					"    utils.isHoldingsUpdateRequired = function (compPOL) {",
					"        let updatesRequiredForEresource = false;",
					"        let updateRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            updatesRequiredForEresource = (compPOL.eresource.createInventory === \"Instance, Holding\" || compPOL.eresource.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        if (compPOL.physical != null) {",
					"            updateRequiredForPhysical = (compPOL.physical.createInventory === \"Instance, Holding\" || compPOL.physical.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        return updatesRequiredForEresource || updateRequiredForPhysical;",
					"    };",
					"",
					"    utils.isItemsUpdateRequired = function (compPOL) {",
					"        let itemsRequiredForEresource = false;",
					"        let itemsRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            itemsRequiredForEresource = compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        if (compPOL.physical != null) {",
					"            itemsRequiredForPhysical = compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        return itemsRequiredForEresource || itemsRequiredForPhysical;",
					"    };",
					"",
					"",
					"    /**",
					"     * Prepare receiving request body for all PO Lines of an order",
					"     * The function sets following variable:",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive one PO Line of the desired order format",
					"     * @param quantityToReceive number of pieces to receive. In case if not specified, all pieces will be received",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForOrder = function (orderId, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            pm.test(\"Preparing receiving request for entire order with id=\" + orderId, function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"            });",
					"",
					"            if (typeof quantityToReceive === \"undefined\") {",
					"                quantityToReceive = 1000;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and purchaseOrderId=\" + orderId, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForOrder = function (orderId, quantity) {",
					"        utils.prepareReceivingRequestForOrder(orderId, quantity, \"On order\");",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForPoLineOfFormat = function (orderId, orderFormat, quantity) {",
					"        utils.prepareReceivingRequestForPoLineOfFormat(orderId, orderFormat, quantity, \"On order\");",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body for PO Line of expected order format",
					"     * The function sets 2 variables:",
					"     * - `receivingPoLineId` the PO Line id receiving request is going to be sent",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive/revert pieces of the PO Line of the desired order format",
					"     * @param orderFormat the desired order format of the PO Line",
					"     * @param quantityToReceive number of pieces to receive/revert. In case if not specified, all pieces will be received/reverted",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForPoLineOfFormat = function (orderId, orderFormat, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            let poLine;",
					"            pm.test(\"One PO Line with \" + orderFormat + \" order format expected\", function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"                let lines = res.json().compositePoLines.filter(line => line.orderFormat === orderFormat);",
					"                pm.expect(lines.length).to.equal(1);",
					"                poLine = lines[0];",
					"            });",
					"",
					"            pm.variables.set(\"receivingPoLineId\", poLine.id);",
					"            let piecesQuantity = utils.calculateExpectedPiecesQuantity(poLine);",
					"            if (typeof quantityToReceive === \"undefined\" || quantityToReceive > piecesQuantity) {",
					"                quantityToReceive = piecesQuantity;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body based on receiving history array (MODORDERS-103)",
					"     */",
					"    utils.prepareReceivingRequest = function (receivingHistory, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let isRevertCase = itemStatus === \"On order\";",
					"",
					"        let totalQty = receivingHistory.length;",
					"        let piecesGroupedByPol = new Map();",
					"        for (let i = 0; i < totalQty; i++) {",
					"            let record = receivingHistory[i];",
					"            if (!piecesGroupedByPol.has(record.poLineId)) {",
					"                piecesGroupedByPol.set(record.poLineId, []);",
					"            }",
					"            piecesGroupedByPol.get(record.poLineId).push(record.id);",
					"        }",
					"",
					"        let receivingRq = globals.testData.receiving.bodyTemplate;",
					"        let toBeReceivedTemplate = receivingRq.toBeReceived.pop();",
					"        let receivedItemTemplate = toBeReceivedTemplate.receivedItems.pop();",
					"        receivedItemTemplate.itemStatus = itemStatus;",
					"",
					"        let barcode;",
					"        if (isRevertCase) {",
					"            delete receivedItemTemplate.barcode;",
					"            delete receivedItemTemplate.comment;",
					"            delete receivedItemTemplate.caption;",
					"            delete receivedItemTemplate.locationId;",
					"        } else {",
					"            barcode = parseInt(pm.environment.get(\"receivingItemBarcode\") ? pm.environment.get(\"receivingItemBarcode\") : receivedItemTemplate.barcode);",
					"        }",
					"",
					"        let total = 0;",
					"        for (var [polId, pieceIds] of piecesGroupedByPol) {",
					"            let toBeReceived = utils.copyJsonObj(toBeReceivedTemplate);",
					"            toBeReceived.poLineId = polId;",
					"            toBeReceived.received = pieceIds.length;",
					"            for (let i = 0; i < pieceIds.length; i++) {",
					"                let receivedItem = utils.copyJsonObj(receivedItemTemplate);",
					"                receivedItem.pieceId = pieceIds[i];",
					"                //set new location ids for the half of the pieces",
					"                if (i % 2 == 0) {",
					"                    receivedItem.locationId = pm.environment.get(\"locationId1\");",
					"                }",
					"",
					"                if (!isRevertCase) {",
					"                    // Inventory requires unique barcodes",
					"                    receivedItem.barcode = ++barcode;",
					"                }",
					"                toBeReceived.receivedItems.push(receivedItem);",
					"                total++;",
					"            }",
					"            receivingRq.toBeReceived.push(toBeReceived);",
					"        }",
					"        receivingRq.totalRecords = total;",
					"",
					"        if (!isRevertCase) {",
					"            pm.environment.set(\"receivingItemBarcode\", barcode);",
					"        }",
					"        return receivingRq;",
					"    };",
					"",
					"    /**",
					"     * Verify receiving response body",
					"     */",
					"    utils.verifyReceivingResponse = function (jsonRs, expectedSucceededQuantity, expectedFailedQuantity) {",
					"        pm.expect(jsonRs.totalRecords).to.be.above(0);",
					"        let processedSuccessfully = 0;",
					"        let processedWithError = 0;",
					"        jsonRs.receivingResults.forEach(result => {",
					"            processedSuccessfully += result.processedSuccessfully;",
					"            processedWithError += result.processedWithError;",
					"            let succeeded = 0;",
					"            let failed = 0;",
					"            result.receivingItemResults.forEach(receivingItemResult => {",
					"                pm.expect(receivingItemResult.pieceId).to.exist;",
					"                pm.expect(receivingItemResult.processingStatus).to.exist;",
					"                receivingItemResult.processingStatus.type === \"success\" ? succeeded++ : failed++;",
					"            });",
					"            pm.expect(succeeded).to.equal(result.processedSuccessfully);",
					"            pm.expect(failed).to.equal(result.processedWithError);",
					"        });",
					"        pm.expect(processedWithError).to.equal(expectedFailedQuantity);",
					"        pm.expect(processedSuccessfully).to.equal(expectedSucceededQuantity);",
					"        pm.expect(processedWithError + processedSuccessfully).to.equal(jsonRs.totalRecords);",
					"    };",
					"",
					"    utils.copyJsonObj = function (obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-178",
					"     */",
					"    utils.calculateExpectedItemsQuantity = function (poLine) {",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                let quantity = utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"                quantity += utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"                return quantity;",
					"            case \"Electronic Resource\":",
					"                return utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"            case \"Physical Resource\":",
					"            case \"Other\":",
					"                return utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-100, MODORDERS-194",
					"     */",
					"    utils.calculateExpectedPiecesQuantity = function (poLine, pieceFormat) {",
					"        if (poLine.receiptStatus === \"Receipt Not Required\" || poLine.checkinItems || poLine.isPackage) {",
					"            return 0;",
					"        }",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                if (typeof pieceFormat === \"undefined\") {",
					"                    return poLine.cost.quantityPhysical + poLine.cost.quantityElectronic;",
					"                } else if (pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else if (pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Physical Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Other\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Other\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Electronic Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of physical resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getPhysicalItemsQuantity = function (poLine) {",
					"        let total = 0;",
					"        let locations = poLine.locations;",
					"        if (locations) {",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityPhysical;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of electronic resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getElectronicItemsQuantity = function (poLine) {",
					"        let total = 0;",
					"        if (poLine.eresource && poLine.eresource.createInventory && poLine.locations) {",
					"            let locations = poLine.locations;",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityElectronic;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.verifyOrderCalculatedInfo = function (order, expectedTotalPrice) {",
					"        pm.test(\"Verify PO has calculated data: MODORDERS-181 and MODORDERS-193\", function () {",
					"            pm.expect(order.totalItems).to.exist;",
					"            pm.expect(order.totalItems).to.equal(utils.getTotalResourcesQuantity(order));",
					"            if (typeof expectedTotalPrice === \"undefined\") {",
					"                pm.expect(order.totalEstimatedPrice).to.be.above(0);",
					"            } else {",
					"                pm.expect(order.totalEstimatedPrice).to.equal(expectedTotalPrice);",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.getTotalResourcesQuantity = function (order) {",
					"        let total = 0;",
					"        order.compositePoLines.forEach(poLine => {",
					"            let cost = poLine.cost;",
					"            if (cost) {",
					"                total += (cost.quantityElectronic ? cost.quantityElectronic : 0);",
					"                total += (cost.quantityPhysical ? cost.quantityPhysical : 0)",
					"            }",
					"        });",
					"        return total;",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForEresource = function (compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.eresource != null && compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForPhysical = function (compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.physical != null && compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO line sub-object elements",
					"     */",
					"    utils.validatePoLineSubObjetcsPresence = function (poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote expected\").to.exist;",
					"        pm.expect(poLine.claims, \"claims expected\").to.exist;",
					"        pm.expect(poLine.contributors, \"contributors expected\").to.exist;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.cost.poLineEstimatedPrice, \"cost.poLineEstimatedPrice expected to be above 0\").to.be.above(0);",
					"        pm.expect(poLine.description, \"description expected\").to.exist;",
					"        pm.expect(poLine.donor, \"donor expected\").to.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution expected\").to.exist;",
					"        pm.expect(poLine.locations, \"locations expected\").to.exist;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus expected\").to.exist;",
					"        pm.expect(poLine.physical, \"physical expected\").to.exist;",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription expected\").to.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate expected\").to.exist;",
					"        pm.expect(poLine.publisher, \"publisher expected\").to.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus expected\").to.exist;",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes expected\").to.exist;",
					"        pm.expect(poLine.requester, \"requester expected\").to.exist;",
					"        pm.expect(poLine.rush, \"rush expected\").to.exist;",
					"        pm.expect(poLine.selector, \"selector expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.tags, \"tags expected\").to.exist;",
					"        pm.expect(poLine.titleOrPackage, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail expected\").to.exist;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line is empty except line and order ids",
					"     */",
					"    utils.validatePoLineWithMinimalContent = function (poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.purchaseOrderId, \"PO id expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction not expected\").to.not.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote not expected\").to.not.exist;",
					"        pm.expect(poLine.claims, \"claims should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.contributors, \"contributors should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.description, \"description not expected\").to.not.exist;",
					"        pm.expect(poLine.donor, \"donor not expected\").to.not.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.locations, \"locations should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus is Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription not expected\").to.not.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber is expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate not expected\").to.not.exist;",
					"        pm.expect(poLine.publisher, \"publisher not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptDate, \"receiptDate not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus must be Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.requester, \"requester not expected\").to.not.exist;",
					"        pm.expect(poLine.selector, \"selector not expected\").to.not.exist;",
					"        pm.expect(poLine.tags, \"tags should be empty\").to.not.exist;",
					"        pm.expect(poLine.titleOrPackage, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Updates each PO Line's payment status with provided one.",
					"     * If status is not provided, \"Fully Paid\" is used for even and \"Payment Not Required\" for odd ones.",
					"     */",
					"    utils.updatePoLinesPaymentStatus = function (order, status) {",
					"        // Update only payment status",
					"        let lines = order.compositePoLines;",
					"        for (let i = 0; i < lines.length; i++) {",
					"            let newStatus = status;",
					"            if (!newStatus) {",
					"                newStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
					"            }",
					"            // Send update line request with delay",
					"            setTimeout((function (newStatus) {",
					"                console.log(newStatus);",
					"                utils.updatePoLinePaymentStatus(lines[i], newStatus)",
					"            }).bind(null, newStatus), 500 * i);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Updates PO Line's payment status with provided one and sends PUT request.",
					"     */",
					"    utils.updatePoLinePaymentStatus = function (poLine, status) {",
					"        // Update only payment status",
					"        poLine.paymentStatus = status;",
					"        utils.sendPutRequest(\"/orders/order-lines/\" + poLine.id, poLine, (err, response) => {",
					"            pm.test(\"PO Line updated with number=\" + poLine.poLineNumber, () => pm.expect(response.code).to.eql(204));",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Adds PO line id to `completePolineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberPoLineId = function (poLine) {",
					"        if (poLine && poLine.id) {",
					"            let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
					"            completePolineIds.push(poLine.id);",
					"            pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completePolineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastPoLineId = function (withRemoval) {",
					"        let completePolineIds = globals.completePolineIds ? JSON.parse(globals.completePolineIds) : [];",
					"        if (completePolineIds.length > 0) {",
					"            let lineId = completePolineIds.pop();",
					"            if (withRemoval) {",
					"                pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line content against schemas",
					"     */",
					"    utils.validatePoLineAgainstSchema = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_po_line.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO content against schemas",
					"     */",
					"    utils.validateOrderAgainstSchema = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_purchase_order.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO Lines number",
					"     */",
					"    utils.validatePoLinesNumber = function (order) {",
					"        let poLineSuffix = \"(-[0-9]{1,3})\";",
					"        let regex = new RegExp(order.poNumber + poLineSuffix);",
					"        for (let i = 0; i < order.compositePoLines.length; i++) {",
					"            let poLineNumber = order.compositePoLines[i].poLineNumber;",
					"            let match = regex.exec(poLineNumber);",
					"            pm.expect(match).not.equal(null);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validate order workflowStatus",
					"     */",
					"    utils.validateWorkflowStatus = function (order) {",
					"        pm.test(\"Verify Order updated with expected workflow status\", function () {",
					"            if (order.workflowStatus != \"Pending\") {",
					"                if (utils.isCompletedAllPoLines(order.compositePoLines)) {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Closed\");",
					"                } else {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Open\");",
					"                }",
					"            }",
					"        });",
					"    };",
					"",
					"    utils.isCompletedAllPoLines = function (poLines) {",
					"        for (let i = 0; i < poLines.length; i++) {",
					"            let paymentStatus = poLines[i].paymentStatus;",
					"            let receiptStatus = poLines[i].receiptStatus;",
					"            if (!(paymentStatus === \"Payment Not Required\" || paymentStatus === \"Fully Paid\") || !(receiptStatus === \"Fully Received\" || receiptStatus === \"Receipt Not Required\")) {",
					"                return false;",
					"            }",
					"        }",
					"        return true;",
					"    };",
					"",
					"    utils.postRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * This method creates a piece and also calls the prepares the check-in body.",
					"     * If itemId is not provided the check-in flow just updates the piece record",
					"     */",
					"    utils.createPieceAndCheckInBody = function (compPoLine, itemId) {",
					"        let pieceTemplate = globals.testData.piece.bodyTemplate;",
					"        // set new location for checkin piece",
					"        pieceTemplate.locationId = compPoLine.locations[0].locationId;",
					"        pieceTemplate.poLineId = compPoLine.id;",
					"        if (compPoLine.orderFormat === \"Electronic Resource\") {",
					"            pieceTemplate.format = \"Electronic\";",
					"        } else {",
					"            pieceTemplate.format = \"Physical\";",
					"        }",
					"        if (typeof itemId === \"undefined\") {",
					"            delete pieceTemplate.itemId;",
					"        } else {",
					"            pieceTemplate.itemId = itemId;",
					"        }",
					"        pieceTemplate.titleId = pm.variables.get(\"titleId\");",
					"        pieceTemplate.receiptDate = new Date();",
					"        pm.variables.set(\"checkinPoLineId\", compPoLine.id);",
					"        utils.postRequest(\"/orders/pieces\", pieceTemplate, (err, res) => {",
					"            pm.test(\"creating piece for check-in \", function () {",
					"                pm.expect(res).to.have.property('code', 201);",
					"            });",
					"            utils.prepareCheckinBody(compPoLine, res.json().id);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * This method is used for both checking in a piece and also reverting it,",
					"     * If the checkinstatus is not provided by default it is set to check-in item",
					"     *",
					"     */",
					"    utils.prepareCheckinBody = function (compPoLine, pieceId, checkinStatus) {",
					"        let checkinRq = globals.testData.checkin.bodyTemplate;",
					"        let toBeCheckedInTemplate = checkinRq.toBeCheckedIn.pop();",
					"        let checkinPiecesTemplate = toBeCheckedInTemplate.checkInPieces.pop();",
					"        toBeCheckedInTemplate.poLineId = compPoLine.id;",
					"        toBeCheckedInTemplate.checkedIn = 1;",
					"        checkinPiecesTemplate.id = pieceId;",
					"        checkinPiecesTemplate.locationId = pm.environment.get(\"locationId1\");",
					"        if (typeof checkinStatus === \"undefined\") {",
					"            checkinPiecesTemplate.itemStatus = \"In process\";",
					"        } else {",
					"            checkinPiecesTemplate.itemStatus = checkinStatus;",
					"        }",
					"        toBeCheckedInTemplate.checkInPieces.push(checkinPiecesTemplate);",
					"        checkinRq.toBeCheckedIn.push(toBeCheckedInTemplate);",
					"        console.log(JSON.stringify(checkinRq));",
					"        pm.variables.set(\"checkinBody\", JSON.stringify(checkinRq));",
					"    };",
					"",
					"    /**",
					"     * Get the holding where the item needs to be created , create an item",
					"     * and then use the item id to create a piece",
					"     *",
					"     */",
					"    utils.prepareCheckinBodyWithItems = function (compPoLine) {",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + compPoLine.instanceId + \" and permanentLocationId==\" + compPoLine.locations[0].locationId, (err, res) => {",
					"            utils.createItem(compPoLine.id, res.json().holdingsRecords[0].id, (err, res) => {",
					"                pm.test(\"creating item for check-in\", function () {",
					"                    pm.expect(res).to.have.property('code', 201);",
					"                });",
					"                utils.createPieceAndCheckInBody(compPoLine, res.json().id);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.createItem = function (poLineId, holdingsRecordId, handler) {",
					"        let itemTemplate = globals.testData.item.bodyTemplate;",
					"        itemTemplate.holdingsRecordId = holdingsRecordId;",
					"        itemTemplate.purchaseOrderLineIdentifier = poLineId;",
					"        utils.postRequest(\"/item-storage/items\", itemTemplate, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function (path) {",
					"        return new Promise((resolve) => {",
					"            utils.sendDeleteRequest(path, (err, response) => {",
					"                resolve(response.code);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function (code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function () {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function (configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function (configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function (configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function (configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function (configs, configName, value) {",
					"        let bodyTemplate = globals.testData.configs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function (body) {",
					"        utils.postRequest(\"/configurations/entries\", body, function (err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function (body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function (id) {",
					"        const timerId = setTimeout(() => { }, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Delete titles by poLine id",
					"     *",
					"     */",
					"    utils.deleteTitlesByLineId = function (poLineId) {",
					"        utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + poLineId, (err, res) => {",
					"            let titles = res.json().titles;",
					"            titles.forEach(title => {",
					"                const timerId = setTimeout(() => { }, 60000);",
					"                utils.processDeleteRequest(\"/orders/titles/\" + title.id)",
					"                    .then(result => clearTimeout(timerId))",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on Items deletion:\", err);",
					"                        clearTimeout(timerId);",
					"                    });",
					"            });",
					"",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function (path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"emptyOrderWithoutPoLinesId\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"emptyOrderId\");",
					"        pm.globals.unset(\"isbnOrderId\");",
					"        pm.globals.unset(\"isbn_Order_content\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"completePolineIds\");",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"completeOrderPoNumber\");",
					"        pm.globals.unset(\"physElecOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsPendingOrderId\");",
					"        pm.globals.unset(\"negativeTestsOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsClosedOrderId\");",
					"        pm.globals.unset(\"negativeTestsFailedEncumbrances\");",
					"        pm.globals.unset(\"negativeTestsOpenPOLineId\");",
					"        pm.globals.unset(\"anotherCompleteOrderId\");",
					"        pm.globals.unset(\"completeOpenOrderId\");",
					"        pm.globals.unset(\"checkin_physical_poLine\");",
					"        pm.globals.unset(\"checkin_electronic_poLine\");",
					"        pm.globals.unset(\"poLineForNegativeTests\");",
					"        pm.globals.unset(\"randomUUId\");",
					"        pm.globals.unset(\"receivingHistoryPoId\");",
					"        pm.globals.unset(\"requestBodyPhysical\");",
					"        pm.globals.unset(\"requestBodyToBeUpdated\");",
					"        pm.globals.unset(\"poAllPoLineCheckin\");",
					"        pm.globals.unset(\"poLineIdPhysical\");",
					"        pm.globals.unset(\"poToCheckinItemsId\");",
					"        pm.globals.unset(\"orderIdPEMix\");",
					"        pm.globals.unset(\"orderWithApprovalReqTrueId\");",
					"        pm.globals.unset(\"orderWithReceiptNotRequiredId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId1\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId2\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId3\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNoneId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingItemId\");",
					"        pm.globals.unset(\"order_isbn_validation\");",
					"        pm.globals.unset(\"automaticallyClosedOrder\");",
					"        pm.globals.unset(\"automaticallyClosedOpenOrder\");",
					"        pm.globals.unset(\"automaticallyOpenedOrder\");",
					"        pm.globals.unset(\"newEmptyPoLine\");",
					"        pm.globals.unset(\"poNumber\");",
					"        pm.globals.unset(\"poLineIdPEMix\");",
					"        pm.globals.unset(\"poLine2IdPEMix\");",
					"        pm.globals.unset(\"loanType\");",
					"        pm.globals.unset(\"materialType\");",
					"        pm.globals.unset(\"testTenant\");",
					"        pm.globals.unset(\"testTenantActiveVendorId\");",
					"        pm.globals.unset(\"pieceIdToUpdate\");",
					"        pm.globals.unset(\"pieceRecord\");",
					"",
					"        pm.environment.unset(\"activeVendorId\");",
					"        pm.environment.unset(\"contributorNameTypeId\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"current-tenant-configs\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"budgetId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"isbnIdentifierTypeId\");",
					"        pm.environment.unset(\"inactiveVendorId\");",
					"        pm.environment.unset(\"instanceTypeId\");",
					"        pm.environment.unset(\"instanceStatusId\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"loanTypeId\");",
					"        pm.environment.unset(\"locationId1\");",
					"        pm.environment.unset(\"locationId2\");",
					"        pm.environment.unset(\"locationId3\");",
					"        pm.environment.unset(\"materialTypeId\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"mod-tenant-configs\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"temp-orders-configs\");",
					"        pm.environment.unset(\"reasonForClosureId\");",
					"        pm.environment.unset(\"prefixId\");",
					"        pm.environment.unset(\"suffixId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"xokapitoken-restricted\");",
					"        pm.environment.unset(\"newLocationId\");",
					"        pm.environment.unset(\"orderTemplateId\");",
					"        pm.environment.unset(\"restrictedLedgerId\");",
					"        pm.environment.unset(\"restrictedFundId\");",
					"        pm.environment.unset(\"restrictedBudgetId\");",
					"        pm.environment.unset(\"uniqueProductId\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"mixLineForCheckIn\");",
					"        pm.environment.unset(\"mixLineForCheckInId\");",
					"        pm.environment.unset(\"instanceId\");",
					"        pm.environment.unset(\"checkinLocationId\");",
					"        pm.environment.unset(\"electronicResourceId\");",
					"        pm.environment.unset(\"physicalResourceId\");",
					"        pm.environment.unset(\"delOrderId201\");",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function (data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.deletePoNumber = function (order) {",
					"        delete order.poNumber;",
					"",
					"        return order;",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7a403a4d-c2da-48d5-9c37-a6f2fae93cb6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b4c7bdcf-7b46-4d8c-a2dc-36ada3373f05",
			"key": "testTenant",
			"value": "orders_api_tests"
		},
		{
			"id": "f50a5bd6-ef8e-4984-9f34-cf5c53e82c39",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources"
		},
		{
			"id": "6c1de3a8-99c5-4302-9835-28e2ea3d5862",
			"key": "poLines-limit",
			"value": "10"
		},
		{
			"id": "d7f7f0b2-b6c6-4ac8-a1e3-cd664399abe8",
			"key": "inventory-identifierTypeName",
			"value": "ordersApiTestsIdentifierTypeName"
		},
		{
			"id": "da0c5f66-8efb-4b3a-b24d-c59a29f368a4",
			"key": "inventory-instanceTypeCode",
			"value": "ordersApiTestsInstanceTypeCode"
		},
		{
			"id": "407d26d0-c32e-45e9-815e-1279a4ae0380",
			"key": "inventory-instanceStatusCode",
			"value": "ordersApiTestsInstanceStatusCode"
		},
		{
			"id": "0e56a6d5-710f-4bbe-a342-e1e59704d0c2",
			"key": "inventory-loanTypeName",
			"value": "ordersApiTestsLoanTypeName"
		},
		{
			"id": "e03b759c-158d-4668-bf10-b7279e9e1404",
			"key": "tenant.addresses",
			"value": "{\n  \"address\": \"sample address\",\n  \"name\": \"sample name\"\n}\n"
		},
		{
			"id": "32021ef8-d7a7-46ec-aa34-7a47e041d176",
			"key": "approvals",
			"value": "{\"isApprovalRequired\":false}"
		}
	],
	"protocolProfileBehavior": {}
}