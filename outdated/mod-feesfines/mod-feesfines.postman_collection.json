{
	"info": {
		"_postman_id": "6d9fa919-fbf6-4614-b26c-a77771ec4f3a",
		"name": "mod-feesfines",
		"description": "/owners\n/owners/{id}\n\n/feefines\n/feefines/{feefineid}\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_metadata_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_metadata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_metadata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schema_feefinedata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e54bd78-a520-4a2e-bd2e-913070c90edd",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_feefinedata\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_feefinedata_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_feefinedata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_feefinedata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schema_feefinedata_collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46685956-09ab-4e38-a416-1fb2c72e8574",
								"type": "text/javascript",
								"exec": [
									"pm.test(pm.variables.get(\"schema_feefinedata_collection\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_feefinedata_collection_content\", responseBody);",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_feefinedata_collection}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_feefinedata_collection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schema_ownerdata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e54bd78-a520-4a2e-bd2e-913070c90edd",
								"exec": [
									"pm.test(pm.variables.get(\"schema_ownerdata\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_ownerdata_content\", responseBody);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_ownerdata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_ownerdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schema_ownerdata_collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46685956-09ab-4e38-a416-1fb2c72e8574",
								"exec": [
									"pm.test(pm.variables.get(\"schema_ownerdataCollection\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_ownerdata_collection_content\", responseBody);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_ownerdataCollection}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{schema_ownerdataCollection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "resultInfo.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53ce15d2-e5f7-48ca-9ea4-9f5a55d3f1d7",
								"exec": [
									"pm.test(pm.variables.get(\"schema_resultInfo\") + \" GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.environment.set(\"schema_resultInfo_content\", responseBody);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_resultInfo}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_resultInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "parameters.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad455e26-7dc6-4d08-a023-8910e4368b53",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_parameters_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_parameters}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_parameters}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/owners",
			"item": [
				{
					"name": "/owners",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f2c7f2-3d6e-44a6-8b0e-3dc65dcb0003",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/owners",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"owners"
							]
						}
					},
					"response": []
				},
				{
					"name": "/owners- required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67c49cb5-578e-4007-8b99-c508e07d50d9",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": \"really_does_not_matter\",\r\n  \"owner\": \"Test Owner\",\r\n  \"desc\": \"Test Owner\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/owners",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"owners"
							]
						}
					},
					"response": []
				},
				{
					"name": "/owners  - query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f2c7f2-3d6e-44a6-8b0e-3dc65dcb0003",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"console.log (jsonData.owners.length)",
									"if(jsonData.owners.length>0){",
									"        pm.environment.set(\"fse-owner-id\", jsonData.owners[0].id);",
									"}",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/owners?query=owner=\"Test Owner\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"owners"
							],
							"query": [
								{
									"key": "query",
									"value": "owner=\"Test Owner\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/owners/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f2c7f2-3d6e-44a6-8b0e-3dc65dcb0003",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/owners/{{fse-owner-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"owners",
								"{{fse-owner-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/feefines - happy path",
			"item": [
				{
					"name": "/feefines",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f2c7f2-3d6e-44a6-8b0e-3dc65dcb0003",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"if(jsonData.feefines.length > 0){",
									"    pm.environment.set(\"feesfinesOwnerId\", jsonData.feefines[0].ownerId);",
									"}",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - required fields only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67c49cb5-578e-4007-8b99-c508e07d50d9",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"//JIRA MODFEE-2",
									"//returned id is useless as it repeats the data from the request body but is not used as id",
									"//pm.environment.set(\"newFeeFineId\", jsonData.id);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0087eae8-357a-4865-997e-c4343134aab9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feeFineType\": \"overdue_fse_testing\",\r\n  \"id\": \"7261ecaae3a74dc68b468e12a70b1aec\",\r\n  \"ownerId\" :\"{{fse-owner-id}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - query by feeFineType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdb2ee25-9269-45f6-8857-2e89933550a3",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"newFeeFineId\", jsonData.feefines[0].id);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?query=feeFineType=\"overdue_fse_testing\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "query",
									"value": "feeFineType=\"overdue_fse_testing\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52a15025-d711-4721-bc5d-f718a7fba7cb",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"newFeeFineId\")); ",
									"    pm.expect(pm.response.json().feeFineType).to.equal(\"overdue_fse_testing\");",
									" ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ae8802f-29ed-4175-9a5d-daa77d3e7c16",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"feeFineType\": \"overdue_fse_testing\",\n  \"id\": \"{{newFeeFineId}}\",\n  \"ownerId\": \"{{fse-owner-id}}\",\n  \"defaultAmount\":100\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}} -verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e62f6c3b-a096-4907-b495-c6c2424f1363",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"newFeeFineId\")); ",
									"    pm.expect(pm.response.json().feeFineType).to.equal(\"overdue_fse_testing\");",
									"    pm.expect(pm.response.json().defaultAmount).to.equal(100);",
									" ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bca3201-31ed-4d58-a3a5-ee793ed3a5db",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}} -verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9463a7dd-fcfb-4b7c-91b0-516e99e4e704",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ef4d3bec-7730-435c-8291-ed9d90567efa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ac42f722-91af-42ab-bb3e-8c6f66532319",
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				}
			]
		},
		{
			"name": "/feefines",
			"item": [
				{
					"name": "/feefines",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f2c7f2-3d6e-44a6-8b0e-3dc65dcb0003",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - limit > max value - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66e013f8-ccb9-476b-9048-f2baa0d4dc50",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?limit=400",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "limit",
									"value": "400"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - limit < min value - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f2c7f2-3d6e-44a6-8b0e-3dc65dcb0003",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?limit=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - offset > max value - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19d514f0-4b4c-41b6-a1ff-bf614b2f5f42",
								"type": "text/javascript",
								"exec": [
									"//JIRA MODFEE-3",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?offset=10001",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "offset",
									"value": "10001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - offset  < min value - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e186f8e-3a1a-4c67-b538-d3cd5e474840",
								"exec": [
									"//JIRA  MODFEE-4",
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - limit = -1  - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e2e4e1e-f7f7-42a1-a85e-f27bd6748f60",
								"exec": [
									"//JIRA MODFEE-5",
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - unauthorized - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4230f63-edee-486f-bccc-aae610a7aab0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 403\", function () {",
									"    pm.response.to.have.status(\"Forbidden\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - orderBy id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5e93e15-56ba-4548-aea3-740c57ca302a",
								"type": "text/javascript",
								"exec": [
									"//JIRA MODFEE-7",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?orderBy=id",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "orderBy",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - order asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49e00345-115a-499a-8a85-013213607ac8",
								"type": "text/javascript",
								"exec": [
									"//JIRA MODFEE-7",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?order=asc",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - filter by language",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a76381b0-117e-4180-8ac9-fb0d8cfdeced",
								"exec": [
									"//JIRA MODFEE-6",
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?lang=es",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "lang",
									"value": "es"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - additional property -  422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51603d34-cb98-44f3-9d00-07ff26f6c6fd",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(\"Unprocessable Entity\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feeFineType\": \"overdue_fse_testing\",\r\n  \"id\": \"7261ecaae3a74dc68b468e12a70b1aec\",\r\n  \"invalid\":\"should fail\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - invalid json - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "032c6560-e16f-48db-8d58-510071041148",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feeFineType\": \"overdue_fse_testing\",\r\n  \"id\": \"7261ecaae3a74dc68b468e12a70b1aec\"\r\n  \"invalid\":\"should fail\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - missing feeFineType - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "032c6560-e16f-48db-8d58-510071041148",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "let jsonData = JSON.parse(responseBody);\n\npm.test(\"Status is 422\", function () {\n    pm.response.to.have.status(\"Unprocessable Entity\");\n});\n\npm.test(\"Response must be valid and have a body\", function () {\n    pm.response.to.be.withBody;\n    pm.response.to.be.json; \n});\n\npm.test(\"Validate schema\", function () {\n    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));\n    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);\n    if (schema_parameters.id) {\n        tv4.addSchema(schema_parameters.id, schema_parameters);\n    }\n    \n    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));\n    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);\n    if (schema_error.id) {\n        tv4.addSchema(schema_error.id, schema_error);\n    }\n    \n    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));\n    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));\n\n});\n//verify headers\npm.test(\"'X-Okapi-Trace' header is present\", function () {\n    pm.response.to.have.header(\"X-Okapi-Trace\");\n});\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - invalid amout - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bf95c18-2259-4a06-a210-c11b424e0221",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feeFineType\": \"overdue_fse_testing\",\r\n  \"id\": \"7261ecaae3a74dc68b468e12a70b1aec\",\r\n  \"defaultAmount\":\"should fail\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - valid amout - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1354a14a-d6f1-461c-8d75-3bb24736f780",
								"exec": [
									"//JIRA MODFEE-2",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"feeFineType\":\"fee_as_max_int\",\r\n\t\"id\":\"3ecf175c-9e16-45da-9fe9-b819d6165493\",\r\n\t\"defaultAmount\" :2147483647,\r\n\t\"ownerId\" : \"{{fse-owner-id}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - unathorized - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0b9f253-1af9-4d0a-ba08-c036dc3ff90f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 403\", function () {",
									"    pm.response.to.have.status(\"Forbidden\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feeFineType\": \"overdue_fse_testing\",\r\n  \"id\": \"7261ecaae3a74dc68b468e12a70b1aec\",\r\n  \"invalid\":\"should fail\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - query by feeFineType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdb2ee25-9269-45f6-8857-2e89933550a3",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"newFeeFineId\", jsonData.feefines[0].id);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"raml-util/schemas/resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"feefinedata.json\", JSON.parse(pm.environment.get(\"schema_feefinedata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_collection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines?query=feeFineType=\"fee_as_max_int\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines"
							],
							"query": [
								{
									"key": "query",
									"value": "feeFineType=\"fee_as_max_int\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0788b810-4d99-4845-883c-65bb6c57f39a",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"newFeeFineId\")); ",
									"    pm.expect(pm.response.json().feeFineType).to.equal(\"fee_as_max_int\");",
									" ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/nonexisting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e78d7625-a818-4bfb-a807-f957f465c828",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/nonexisting",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"nonexisting"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e8077ef-a676-4978-be4d-e6af470e01f0",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feeFineType\": \"overdue_fse_testing\",\r\n  \"id\": \"{{newFeeFineId}}\",\r\n  \"ownerId\": \"{{fse-owner-id}}\",\r\n  \"defaultAmount\":100\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}} - invalidId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff89a135-d5a8-464e-9571-b0b4fc042e40",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feeFineType\": \"overdue_fse_testing\",\r\n  \"id\": \"{{newFeeFineId}}\",\r\n  \"ownerId\": \"noneexisting\",\r\n  \"defaultAmount\":100\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/invalidid",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"invalidid"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}} - unauthorized - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f17e2c21-70b1-40b0-b29f-8b0f0b5c1642",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 403\", function () {",
									"    pm.response.to.have.status(\"Forbidden\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feeFineType\": \"overdue_fse_testing\",\r\n  \"id\": \"{{newFeeFineId}}\",\r\n  \"ownerId\": \"b778518e-4da2-415c-ab4b-ff214fed6e05\",\r\n  \"defaultAmount\":100\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}} -verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b9b1185-ab77-4732-9deb-7a937fa94320",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"newFeeFineId\")); ",
									"    pm.expect(pm.response.json().feeFineType).to.equal(\"overdue_fse_testing\");",
									"    pm.expect(pm.response.json().defaultAmount).to.equal(100);",
									"    pm.expect(pm.response.json().ownerId).to.equal(pm.environment.get(\"fse-owner-id\"));",
									" ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_feefinedata_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bca3201-31ed-4d58-a3a5-ee793ed3a5db",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines - none existing - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29bfd806-435d-4bca-996d-bff261a189f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/nonexisting",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"nonexisting"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}} - unathorized -403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7dac4ef-0a8c-467b-8576-0ba94154f3fa",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/feefines/{{newFeeFineId}} -verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9463a7dd-fcfb-4b7c-91b0-516e99e4e704",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/feefines/{{newFeeFineId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"feefines",
								"{{newFeeFineId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ef4d3bec-7730-435c-8291-ed9d90567efa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ac42f722-91af-42ab-bb3e-8c6f66532319",
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				}
			]
		},
		{
			"name": "cleanup",
			"item": [
				{
					"name": "/owners/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19f2c7f2-3d6e-44a6-8b0e-3dc65dcb0003",
								"exec": [
									"",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/owners/{{fse-owner-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"owners",
								"{{fse-owner-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8d15c8d7-5023-4d2d-9cef-c04a9da5af4f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d0f8420a-14e6-4375-a429-157072f6e5e9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "178b1a68-4139-457e-96b7-d246aa56bc82",
			"key": "mod_name",
			"value": "mod-feesfines",
			"type": "string"
		},
		{
			"id": "efc8853a-9347-4615-8f19-ff960f68e688",
			"key": "mod_version",
			"value": "master",
			"type": "string"
		},
		{
			"id": "298527f8-40b7-4874-9df3-3286e89e967c",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "6cb1ed91-da67-4bfe-bc94-29f3d0ad3046",
			"key": "schema_resultInfo",
			"value": "resultInfo.schema",
			"type": "string"
		},
		{
			"id": "9cf1aeed-5e90-4906-8fa6-8d0d510cb81b",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "d8f76b2d-b0c9-4f52-a4ea-0301de01ed36",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "e84b1c02-b246-4126-afaa-df45af45c55a",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "86410407-939d-473f-b942-aa2204bf5abe",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "56e6805f-f559-47f3-9b46-f3c889775e98",
			"key": "schema_feefinedata",
			"value": "feefinedata.json",
			"type": "string"
		},
		{
			"id": "8623b127-5d76-4746-89d7-1a2b33a27430",
			"key": "schema_feefinedata_collection",
			"value": "feefinedataCollection.json",
			"type": "string"
		},
		{
			"id": "016c49e2-a9de-4bfa-a9b3-03e174ba51ec",
			"key": "schema_commit",
			"value": "1d92b1079e865cd5830f49d73c21a9a27f1800e0",
			"type": "string"
		},
		{
			"id": "d394b01e-f75c-44bd-828f-01f9581498af",
			"key": "schema_ownerdata",
			"value": "ownerdata.json",
			"type": "string"
		},
		{
			"id": "d383ff02-26a8-48ce-b09b-1e9481234bf2",
			"key": "schema_ownerdataCollection",
			"value": "ownerdataCollection.json",
			"type": "string"
		}
	]
}