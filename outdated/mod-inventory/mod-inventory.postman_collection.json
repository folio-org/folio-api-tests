{
	"info": {
		"_postman_id": "8395c190-cc1c-4b06-9682-09b482b24be9",
		"name": "mod-inventory",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_metadata_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_metadata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_metadata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "parameters.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad455e26-7dc6-4d08-a023-8910e4368b53",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_parameters_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_parameters}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_parameters}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "items.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "205918dc-9493-4e09-8941-b6389d211662",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_items_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_items}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_items}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "item.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48278ceb-b1cc-469a-9ed3-cdbeaa7d4386",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function() {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"",
									"",
									"//https://issues.folio.org/browse/MODINV-58",
									"//until the schema is not fixed we will not be verifying schema",
									"",
									"pm.test(\"Verifying if the item schema has been corrected\", function(){",
									"   let itemSchema = \"\";",
									"   if(JSON.stringify(responseBody).indexOf(\"links\") > -1) {",
									"     itemSchema = responseBody;",
									"   }",
									"   pm.environment.set(\"schema_item_content\", itemSchema); ",
									"  ",
									"   //we want this to fail once the schema is fixed so we are notified about the change.",
									"   pm.expect(responseBody).not.to.have.string(\"links\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_item}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_item}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instances.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3e57d48-2acf-4010-9186-b8bdb9eb9bff",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_instances_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_instances}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_instances}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instance_context.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36860d87-5ebd-4bca-bf64-0d9e28caaf6a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_instance_context_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_instance_context}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_instance_context}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instance.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f78cecc6-0742-49e2-a5e3-f6c038365fb7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"//https://issues.folio.org/browse/MODINV-59",
									"//until the schema is not fixed we will not be verifying schema",
									"",
									"pm.test(\"Verifying if the instance schema has been corrected\", function(){",
									"",
									"   let response = JSON.parse(responseBody);",
									"   let instanceSchema = \"\";",
									"   ",
									"   if(response.properties.contributors.minItems ===0 || response.properties.identifiers.minItems===0 ) {",
									"     instanceSchema = responseBody;",
									"   }",
									"   pm.environment.set(\"schema_instance_content\", instanceSchema); ",
									"  ",
									"    //we want this to fail once the schema is fixed so we are notified about the change.",
									"    pm.expect(response.properties.contributors.minItems).to.equal(1);",
									"    pm.expect(response.properties.identifiers.minItems).to.equal(1);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_instance}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_instance}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "items",
			"item": [
				{
					"name": "/inventory/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59be8b28-ad0d-41ce-a0f1-18d895edc873",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.environment.set(\"inventorytotalrecords\", response.totalRecords);",
									"",
									"if(response.items.length >0){",
									"    pm.environment.set(\"existingHoldingRecordId\", response.items[0].holdingsRecordId);",
									"}",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"//https://issues.folio.org/browse/MODINV-58",
									"if (pm.environment.get(\"schema_item_content\") !== \"\"){",
									"    ",
									"    pm.test(\"Validate schema\", function () {",
									"       tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"       tv4.addSchema(\"item.json\", JSON.parse(pm.environment.get(\"schema_item_content\")));",
									"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_items_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    });",
									"}",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18d052c6-0783-4051-ba4c-c0c6d8db7621",
								"exec": [
									"pm.test(\"New inventory item was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Temp disabling Location check pending issue https://issues.folio.org/browse/MODINV-111",
									"//pm.test(\"'Location'header is present\", function () {",
									"//    pm.response.to.have.header(\"Location\");",
									"//});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1b828d5f-8dbe-4513-9ced-490bb5fc1d08",
								"exec": [
									"let endpointBook = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/material-types?query=(name=book)\";",
									"",
									"let endpointCanCirculate = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/loan-types?query=(name=can circulate)\";",
									"",
									" let tenant = pm.environment.get(\"xokapitenant\");",
									" let token = pm.environment.get(\"xokapitoken\");",
									"",
									"//get material type",
									"pm.sendRequest({",
									"    url: endpointBook,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().mtypes.length>0){",
									"     pm.environment.set(\"materialtypeid\",  res.json().mtypes[0].id);",
									"    }",
									" }",
									");",
									"",
									"//get loan type",
									"pm.sendRequest({",
									"    url: endpointCanCirculate,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().loantypes.length>0){",
									"        pm.environment.set(\"loantypeid\", res.json().loantypes[0].id);",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"holdingsRecordId\": \"{{existingHoldingRecordId}}\",\r\n  \"barcode\": \"556303221992\",\r\n  \"status\": {\r\n    \"name\": \"Available\"\r\n  },\r\n  \"materialType\": {\r\n    \"id\": \"{{materialtypeid}}\",\r\n    \"name\": \"Book\"\r\n  },\r\n  \"permanentLoanType\": {\r\n    \"id\": \"{{loantypeid}}\",\r\n    \"name\": \"Can Circulate\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items - barcode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1f05141-76aa-4054-b0b6-45bfdb3b877b",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"// //setting some test data",
									"pm.environment.set(\"newinventoryitemid\", response.items[0].id)",
									"",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the expected number of records\", function () {",
									"  pm.expect(response.items.length).to.be.equal(1); ",
									"});",
									"",
									"//https://issues.folio.org/browse/MODINV-58",
									"if (pm.environment.get(\"schema_item_content\") !== \"\"){",
									"    pm.test(\"Validate schema\", function () {",
									"       tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"       tv4.addSchema(\"item.json\", JSON.parse(pm.environment.get(\"schema_item_content\")));",
									"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_items_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    });",
									"}",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items?query=(barcode=556303221992)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							],
							"query": [
								{
									"key": "query",
									"value": "(barcode=556303221992)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items/{{newinventoryitemid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af5d5aa3-dace-4a34-be41-7460e0148538",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"//https://issues.folio.org/browse/MODINV-58",
									"if (pm.environment.get(\"schema_item_content\") !== \"\"){",
									"    pm.test(\"Validate schema\", function () {",
									"       tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_item_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    });",
									"}",
									"",
									"pm.test(\"Response contains correct record\", function () {",
									"  pm.expect(response.id).to.be.equal(pm.environment.get(\"newinventoryitemid\"));",
									"  pm.expect(response.materialType.id).to.be.equal(pm.environment.get(\"materialtypeid\")); ",
									"  pm.expect(response.permanentLoanType.id).to.be.equal(pm.environment.get(\"loantypeid\"));",
									"  pm.expect(response.barcode).to.be.equal('556303221992');",
									"});",
									"  ",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{newinventoryitemid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items",
								"{{newinventoryitemid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items - query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee6b0cdc-ae41-44c8-9a65-e1a3edde0f09",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contains correct record\", function () {",
									"",
									"  pm.expect(response.items[0].id).to.be.equal(pm.environment.get(\"newinventoryitemid\"));",
									"  pm.expect(response.items[0].materialType.id).to.be.equal(pm.environment.get(\"materialtypeid\")); ",
									"  pm.expect(response.items[0].permanentLoanType.id).to.be.equal(pm.environment.get(\"loantypeid\"));",
									"",
									"});",
									"  ",
									"  ",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items?query=barcode=556303221992",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							],
							"query": [
								{
									"key": "query",
									"value": "barcode=556303221992"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items/{{newinventoryitemid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b53384b-646f-4607-8180-7c92d9d763ac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{newinventoryitemid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items",
								"{{newinventoryitemid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items/{{newinventoryitemid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6180ecfa-8549-4a8c-9ee9-9c2ae121a469",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									" pm.test(\"Response contains correct text\", function () {",
									"  pm.expect(pm.response.text()).to.be.equal(\"Not Found\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{newinventoryitemid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items",
								"{{newinventoryitemid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "instances",
			"item": [
				{
					"name": "/inventory/instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f5f21e9-8986-4b7f-828a-0e5f9ab87684",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.environment.set(\"instancestotalrecords\", response.totalRecords);",
									"",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"//https://issues.folio.org/browse/MODINV-59",
									"if (pm.environment.get(\"schema_instance_content\") !== \"\"){",
									"    pm.test(\"Validate schema\", function () {",
									"          tv4.addSchema(\"instance.json\", JSON.parse(pm.environment.get(\"schema_instance_content\")));",
									"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_instances_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    });",
									"}",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances - limit 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b9e8435-2f6b-408a-8a01-3ba22976d402",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the expected number of records\", function () {",
									"  pm.expect(response.instances.length).to.be.equal(10); ",
									"});",
									"",
									"//https://issues.folio.org/browse/MODINV-59",
									"if (pm.environment.get(\"schema_instance_content\") !== \"\"){",
									"       pm.test(\"Validate schema\", function () {",
									"       tv4.addSchema(\"instance.json\", JSON.parse(pm.environment.get(\"schema_instance_content\")));",
									"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_instances_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    });",
									"}",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances?limit=10",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef2efe47-4c55-491a-b33f-4c2f079fa205",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"New inventory instance was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"'Location'header is present\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0f651184-71f9-4bae-9735-3e0a56af2cc9",
								"type": "text/javascript",
								"exec": [
									"var endpointBooks = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/instance-types\";",
									"",
									" var tenant = pm.environment.get(\"xokapitenant\");",
									" var token = pm.environment.get(\"xokapitoken\");",
									"",
									"//get material type",
									"pm.sendRequest({",
									"    url: endpointBooks,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().instanceTypes.length>0){",
									"     pm.environment.set(\"instancetypeid\",  res.json().instanceTypes[0].id);",
									"    }",
									" }",
									");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Przez różową szybkę\",\r\n  \"source\": \"Local\",\r\n  \"instanceTypeId\": \"{{instancetypeid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances - verify post - query by title",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "674f8fcd-31f0-4c2f-8962-edfe34b349ca",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the expected number of records\", function () {",
									"  pm.expect(response.instances.length).to.be.equal(1); ",
									"  pm.environment.set(\"newinventoryinstanceid\", response.instances[0].id);",
									"});",
									"",
									"//https://issues.folio.org/browse/MODINV-59",
									"if (pm.environment.get(\"schema_instance_content\") !== \"\"){",
									"    pm.test(\"Validate schema\", function () {",
									"        tv4.addSchema(\"instance.json\", JSON.parse(pm.environment.get(\"schema_instance_content\")));",
									"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_instances_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    });",
									"}",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances?query=title=\"Przez różową szybkę\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances"
							],
							"query": [
								{
									"key": "query",
									"value": "title=\"Przez różową szybkę\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instance- offset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99132280-ff5f-47cc-8da6-2de29164c005",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"//https://issues.folio.org/browse/MODINV-59",
									"if (pm.environment.get(\"schema_instance_content\") !== \"\"){",
									"    pm.test(\"Validate schema\", function () {",
									"        tv4.addSchema(\"instance.json\", JSON.parse(pm.environment.get(\"schema_instance_content\")));",
									"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_instances_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    });",
									"}",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa27f09b-d636-43e0-8a61-3a26139c3ce3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances?offset={{instancestotalrecords}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{instancestotalrecords}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances/{{newinventoryinstanceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba01a11e-3a64-479b-9b1c-187c30c3c77d",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contains correct record\", function () {",
									"  pm.expect(response.id).to.be.equal(pm.environment.get(\"newinventoryinstanceid\"));",
									"  pm.expect(response.instanceTypeId).to.be.equal(pm.environment.get(\"instancetypeid\")); ",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{newinventoryinstanceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances",
								"{{newinventoryinstanceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances/{{newinventoryinstanceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6a177fb-3610-4f1e-ad15-5625abcd7e21",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": \"http://localhost:9130/inventory/instances/context\",\n    \"id\": \"{{newinventoryinstanceid}}\",\n    \"title\": \"Przez różową szybkę - 2nd edition\",\n    \"source\": \"Local\",\n    \"instanceTypeId\": \"{{instancetypeid}}\",\n    \"identifiers\": [],\n    \"contributors\": [],\n    \"links\": {\n        \"self\": \"http://localhost:9130/inventory/instances/cf6c0370-5020-48fd-a11a-c89f9144ae9a\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{newinventoryinstanceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances",
								"{{newinventoryinstanceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances/{{newinventoryinstanceid}} - expected error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78b94fca-d8b6-45c8-935a-0610b0bf8d1f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
									" });",
									" ",
									" pm.test(\"Response contains correct text\", function () {",
									"  var response = JSON.parse(responseBody);",
									"  pm.expect(response.errors[0].message).to.be.equal(\"may not be null\");",
									"  pm.expect(response.errors[0].parameters[0].key).to.be.equal(\"instanceTypeId\");",
									"",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": \"http://localhost:9130/inventory/instances/context\",\n    \"id\": \"{{newinventoryinstanceid}}\",\n    \"title\": \"Przez różową szybkę - 2nd edition\",\n    \"source\": \"Local\",\n    \"identifiers\": [],\n    \"contributors\": [],\n    \"links\": {\n        \"self\": \"http://localhost:9130/inventory/instances/cf6c0370-5020-48fd-a11a-c89f9144ae9a\"\n    }\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{newinventoryinstanceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances",
								"{{newinventoryinstanceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances/{{newinventoryinstanceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "260e68f9-c0fa-4966-b058-d88001c84bad",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{newinventoryinstanceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances",
								"{{newinventoryinstanceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances/{{newinventoryinstanceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13a7d37b-39b0-4796-82e4-0e5117e8706d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									" pm.test(\"Response contains correct text\", function () {",
									"  pm.expect(pm.response.text()).to.be.equal(\"Not Found\");",
									"",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{newinventoryinstanceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances",
								"{{newinventoryinstanceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/instances/context",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9235e77b-e938-4c15-b978-5bfea1a88485",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"instancestotalrecords\", response.totalRecords);",
									"",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_instance_context_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/context",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"instances",
								"context"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "28b53c5f-797a-4280-a536-a8be800c7241",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "915e8761-cc44-45d5-8014-da749430f88d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2624f6bd-6a89-4c01-b0b8-6a067a50ef01",
			"key": "mod_name",
			"value": "mod-inventory",
			"type": "string"
		},
		{
			"id": "27ee9d39-b8d0-4d53-bc6e-b254371c879c",
			"key": "mod_version",
			"value": "v8.0.0",
			"type": "string"
		},
		{
			"id": "93aa284b-2385-4989-a87e-5835ce731837",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "a485ca74-d7c9-4890-8577-57a3e22aaebe",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "a019aed6-e765-4a9c-bfbc-8884da1c9c3e",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "df7e2f60-8e5e-4546-b204-88aeb3bf77a1",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "5daf6ade-e5b9-420a-b297-2e5b950d7c19",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "541d6804-507e-4c14-a210-69cde5824586",
			"key": "schema_instances",
			"value": "instances.json",
			"type": "string"
		},
		{
			"id": "3ab982a2-2bf0-4354-b159-10cd4e00d66f",
			"key": "schema_instance",
			"value": "instance.json",
			"type": "string"
		},
		{
			"id": "95e90f6e-f21f-45d5-ada3-455a8a3d68af",
			"key": "schema_instance_context",
			"value": "instance_context.json",
			"type": "string"
		},
		{
			"id": "0905a724-af74-4915-9d8d-b4d1e9ef56ba",
			"key": "schema_items",
			"value": "items.json",
			"type": "string"
		},
		{
			"id": "d67e78a4-5b5c-439d-869e-df3f8f29f59f",
			"key": "schema_item",
			"value": "item.json",
			"type": "string"
		},
		{
			"id": "27787ee2-23e9-4830-a4ba-bc53b1f7e085",
			"key": "schema_commit",
			"value": "bf5b23978b71776c59eca1fd6b33c7fb315b0f2a",
			"type": "string"
		}
	]
}