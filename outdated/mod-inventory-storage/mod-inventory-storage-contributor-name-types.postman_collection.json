{
	"info": {
		"_postman_id": "56099985-2248-45ba-95b8-856fe4eb634f",
		"name": "mod-inventory-storage-contributor-name-types",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "contributor-name-types.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38db3066-1104-42cd-bba2-450dc427723b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"contributor-name-types.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{contributor-name-types.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{contributor-name-types.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contributor-name-type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f1039c8-31e6-44e9-a754-2256ad61e257",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"contributor-name-type.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{contributor-name-type.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{contributor-name-type.schemafile}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "Prerequisite login and generate token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "20483725-aaab-4a7f-9825-43b3f17a4765",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fae45d1b-67bd-4f91-b4a8-adc6932b5adb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "contributor-name-types",
			"item": [
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4258b3f-4bec-4917-a3ab-261025bc17e6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"contributornametype.json\", JSON.parse(pm.variables.get(\"contributor-name-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"contributor-name-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Test listing contributor name types"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a71478af-8c0a-4bed-a2f2-18be9f6b009b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0d564c33-1b83-4ee8-b07f-af86d86ec9f8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test - Forbidden\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Access requires permission: inventory-storage.contributor-types.collection.get\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": ""
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Check for auth token not set"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a71478af-8c0a-4bed-a2f2-18be9f6b009b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f6b4fe9-7ebb-491a-ae5a-9fc547d0d9ae",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test - Unauthorized bad token\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid token\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "bad-token"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Check for auth token set to invalid value"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?limit=-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9c11e9d9-0cff-4e2c-9e6a-28a6ba0df28f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - negative limit\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"'limit' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						},
						"description": "400 test for negative limit"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?offset=-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5e91ceec-3f9e-4d49-9ff8-4f342b8141c7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - negative offset\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"'offset' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						},
						"description": "400 test for negative offset"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?limit=-2147483649",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe5b4094-8053-474b-8d6e-43e28819cd5c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - limit less than Integer.MIN_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?limit=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "-2147483649"
								}
							]
						},
						"description": "400 test for limit less than Integer.MIN_VALUE (-2147483648)"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?offset=-2147483649",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "862a1da9-5f3b-461b-b921-7ed9a6a9bde2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - offset less than Integer.MIN_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include('For input string: \"-2147483649\"');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?offset=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "-2147483649"
								}
							]
						},
						"description": "400 test for offset less than Integer.MIN_VALUE (-2147483648)"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?limit=2147483648",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73b08e0b-2cc7-4744-9c02-a95395a0e5f2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed query parameter test - limit greater than Integer.MAX_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include('For input string: \"2147483648\"');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						},
						"description": "400 test for limit greater than Integer.MAX_VALUE (2147483647)"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?offset=2147483648",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "91256c96-afaf-4ff2-b81e-d3fe8224136d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - offset greater than Integer.MAX_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						},
						"description": "400 test for offset greater than Integer.MAX_VALUE (2147483647)"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?query=",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95a35385-bb7d-4949-b1ff-1d48bd4b72a9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - bad CQL\", function() {",
									"    pm.response.to.have.status(400); ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?query=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						},
						"description": "400 test for invalid cql query - test checks for 500 until it is fixed."
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?lang=",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aeb048a3-a9d0-47b5-b1cd-b90e4953a23b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - empty lang\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?lang=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "lang",
									"value": ""
								}
							]
						},
						"description": "400 test for no lang"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?lang=A1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4d97511-8b4d-4018-b0a9-b9a934725668",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - lang regex\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "400 test for lang regex"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "51605758-6829-41de-8073-1ec2053fd94c",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('contributorNameTypeUUID', uuid.v4());"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9a0ee2f2-d5eb-4e5b-9fea-b110533f5005",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"contributor-name-type.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"contributorNameTypeUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test contributor name type: \" + pm.environment.get(\"contributorNameTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor name type: {{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Create a new contributor name type"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "542a7eac-973d-4d44-a0a2-0de2fcdcd25f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a2bc5de-abf2-4421-a448-dbd588d107c0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Not authorized to perform requested action test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Create a new contributor name type with an invalid token"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "542a7eac-973d-4d44-a0a2-0de2fcdcd25f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98bc624b-18e9-4185-ade3-eb8b0febef3b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Not authorized to perform requested action test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Access requires permission: inventory-storage.contributor-name-types.item.post\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Create a new contributor name type with a missing token\n"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd505955-af5e-49b2-8bc9-2b2aeb69e045",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'),  permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    ",
									"                                    console.log(res.json())",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                           ",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19cfa811-7374-423d-81eb-f64d5053d09b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Forbidden Access denied, not valid privilege in resources test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor type: {{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Create a new contributor type with a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1b3f727-1f7e-427d-b053-6fa876285c31",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0f40767-5e2f-41d0-ad85-642e2d11ca44",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"422 Unprocessable Entity (WebDAV; RFC 4918) test\", function() {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.be.json;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Create a new contributor name type with an empty body"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69886924-2ba1-40d2-99a9-25878557c868",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "accb4c86-5b9e-4d08-9be2-4f6c50cb02c8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad JSON\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Create a new contributor name type with a bad JSON body"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types - with invalid language",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5f62cbe6-e322-4b08-a953-8b2fef18b2ad",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('contributorNameTypeUUIDError', uuid.v4());"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b1ff332a-33c4-4e67-8a2e-9da48fd17607",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"422 test \", function() {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUIDError}}\",\n\t\"name\": \"Test contributor name type: {{contributorNameTypeUUIDError}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Create a new contributor name type with a bad lang query argument"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06ad118b-553f-498a-bffe-8f2b1e9de596",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - ID already exists\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor name type: {{{{contributorNameTypeUUID}}}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Create a new contributor name type with an ID that already exists"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "99f097a4-1cfb-43db-8f49-cf2567c5917b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - ID is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"12345\",\n\t\"name\": \"Test contributor type: 12345\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							]
						},
						"description": "Create a new contributor name type with an invalid ID"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03a55f98-457e-4ed9-8fa5-fbb1536368c8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"contributor-name-type.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"contributorNameTypeUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test contributor name type: \" + pm.environment.get(\"contributorNameTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Return an existing contributor name type"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "169cd0de-7c8d-459a-bce7-e639296849d3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8599e7c9-f496-4622-aa82-4f02ff4ee22c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Not authorized to perform requested action test\", function() {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": ""
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Return an existing contributor name type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e2f3f22-eb5a-40f3-a470-f2d9e0c2d3e0",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84ff93b9-0db6-4cf0-a7cc-1b4447561582",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Access denied, not valid privilege in resources test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Return an existing contributor name type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d1eacfb-14e4-4fcf-9e4a-9448448716c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d73eae7b-75aa-4fe0-bbe6-2ad2212dc3d6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(404); // Should be 400!",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"12345"
							]
						},
						"description": "Return an existing contributor type using an invalid UUID on the URL. Status code should be consistent with PUT and DELETE, returning 400. Currently, this returns 404. See [MODINVSTOR-75](https://issues.folio.org/browse/MODINVSTOR-75)."
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5abb65d2-6757-4867-847c-fb88a14749dd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"contributornametype.json\", JSON.parse(pm.variables.get(\"contributor-name-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"contributor-name-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for added contributor name type\", function() {",
									"   pm.expect(pm.response.json().contributorNameTypes).to.be.an('array');",
									"   var response = JSON.parse(responseBody);",
									"   var found = false;",
									"   for (var i = 0; i < response.contributorNameTypes.length; i++) {",
									"      var obj = response.contributorNameTypes[i];",
									"      if (obj.id == pm.environment.get(\"contributorNameTypeUUID\") && obj.name == \"Test contributor name type: \" + pm.environment.get(\"contributorNameTypeUUID\")) {",
									"         found = true;",
									"         break;",
									"      }",
									"   }",
									"   pm.expect(found).equals(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing contributor types to ensure added item is in the list. Need a higher limit than 10 in case there are more than 10 contributor types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db1038d9-9112-4488-a5c7-2c309bf3a65b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor name type:modified:{{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Update an existing contributor type"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dffbc9bb-4bf6-4f86-b9f8-20f0707d9612",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "59857061-b2ff-41d3-a67d-4c22de86db3f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Not authorized to perform requested action test\", function() {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": ""
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor name type:modified:{{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Update an existing contributor name type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "856383e1-f768-46e0-a415-9434c12c8d57",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "25ab94f6-f5cf-4582-a13d-751864ffa79b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Forbidden Access denied, not valid privilege in resources test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor name type:modified:{{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Update an existing contributor name type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fca7874a-6688-427f-9fcb-05a87a42266a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - IDs don't match\", function() {",
									"    pm.response.to.have.status(204); // Should be 400!",
									"    //pm.response.to.have.body(); // no body with a 204 :(",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Test contributor name type:modified:{{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Update an existing contributor name type with a different UUID. This should  be a 400 error. "
					},
					"response": []
				},
				{
					"name": "/contributor- name-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c539e9fc-b9c2-430c-8e59-613fe2aeb25f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"12345"
							]
						},
						"description": "Update an existing contributor name type with an invalid UUID"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}?lang=A1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96b65564-f7b2-4318-92a8-cf232790b679",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor name type:modified:{{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Update an existing contributor type with a different UUID. This should probably be a 400 error. Right now, it is accepted and the UUID is changed in the JSON in the DB, but not the DB ID, so it is inconsistent. See [MODINVSTOR-73](https://issues.folio.org/browse/MODINVSTOR-73)."
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "78287026-803e-4d8e-b063-1103af8837e3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"contributornametype.json\", JSON.parse(pm.variables.get(\"contributor-name-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"contributor-name-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for added contributor name type\", function() {",
									"   pm.expect(pm.response.json().contributorNameTypes).to.be.an('array');",
									"   var response = JSON.parse(responseBody);",
									"   var found = false;",
									"   for (var i = 0; i < response.contributorNameTypes.length; i++) {",
									"      var obj = response.contributorNameTypes[i];",
									"      if (obj.id == pm.environment.get(\"contributorNameTypeUUID\") && obj.name == \"Test contributor name type:modified:\" + pm.environment.get(\"contributorNameTypeUUID\")) {",
									"         found = true;",
									"         break;",
									"      }",
									"   }",
									"   pm.expect(found).equals(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing contributor types to ensure modified item is in the list. Need a higher limit than 10 in case there are more than 10 contributor types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9de69792-028e-4c29-a837-e32af804f7de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Delete an existing contributor name type"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b23d0869-5b4d-43be-a025-78756440c9e7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54543b16-9111-48f1-83ae-7de2a7ec3530",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": ""
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Delete an existing contributor name type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "16f3b0d3-2715-4ff2-8efd-736c465c810c",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d9f567c-303c-4237-b2f9-7596b9238cac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Delete an existing contributor type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2017b5b6-e6f9-4420-805c-009f4162a681",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 contributor type not found test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Delete a contributor type using an already deleted contributor type ID"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3effed9c-428e-460e-885a-69cd51515229",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"12345"
							]
						},
						"description": "Delete a contributor type using an invalid UUID"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d3d292b-333b-4b50-8142-d0d2535d6b47",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - id is not a uuid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"12345"
							]
						},
						"description": "Delete a contributor type using a non-uuid contributor type ID"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06388416-a482-4293-8df8-bd685b2663b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Delete a contributor type passing an invalid lang query paramater"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorNameTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9df0507-60d1-4a30-9f54-5ae2bacc70bc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 contributor name type not found test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Return a deleted contributor name type"
					},
					"response": []
				},
				{
					"name": "/contributor-name-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f23d7c29-606c-4c62-b297-56cf491ec1a9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"contributornametype.json\", JSON.parse(pm.variables.get(\"contributor-name-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"contributor-name-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for deleted contributor type\", function() {",
									"   pm.expect(pm.response.json().contributorNameTypes).to.be.an('array').to.not.include.deep.members([{id: pm.environment.get(\"contributorNameTypeUUID\"), name: \"Test contributor name type - modified: \" + pm.environment.get(\"contributorNameTypeUUID\")}]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing contributor types to ensure deleted item is not in the list. Need a higher limit than 10 in case there are more than 10 contributor types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/contributor-name-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b6fec09-48da-474d-a930-3aed3dc63478",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 contributor name type not found test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorNameTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorNameTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-name-types",
								"{{contributorNameTypeUUID}}"
							]
						},
						"description": "Update a deleted contributor name type"
					},
					"response": []
				}
			],
			"description": "Tests for the /contributor-name-types end point.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
						"type": "text/javascript",
						"exec": [
							"    pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"Login error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.environment.set(\"xokapitoken-contributor-types\", res.headers.get(\"X-Okapi-Token\"));",
							"        } else {",
							"            console.log(\"Login failed: \" + res.reason());",
							"        }",
							"    }",
							"});",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2235883-a279-492e-94a1-65ef7d482e16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0c7330ca-93e6-4362-aca9-67f141953e8c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b57648c1-84e3-40fe-9757-ac018aea5ca8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "76250036-6a63-4cc3-be5c-b52fde352173",
			"key": "mod_name",
			"value": "mod-inventory-storage",
			"type": "string"
		},
		{
			"id": "2f3ab88d-4ced-4306-890b-840c51527e05",
			"key": "mod_version",
			"value": "v12.8.1",
			"type": "string"
		},
		{
			"id": "c3c18902-880c-484d-8864-83de9dfd9864",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "11be3ca3-9621-49f9-b46c-5545b04b94f7",
			"key": "contributor-name-types.schemafile",
			"value": "contributornametypes.json",
			"type": "string"
		},
		{
			"id": "6981b9da-6707-4979-b435-f683baf0af8d",
			"key": "contributor-name-type.schemafile",
			"value": "contributornametype.json",
			"type": "string"
		}
	]
}