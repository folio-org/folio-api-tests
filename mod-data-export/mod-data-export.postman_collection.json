{
	"info": {
		"_postman_id": "9c7206ca-1640-40b8-846d-028d6cb046a4",
		"name": "mod-data-export",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e36e8241-db2e-4d67-9d67-547c4644b594",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f7f89162-101a-4b1d-ba40-64fc8fb8b42a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "63f3eb5b-c96d-47e1-b453-ab9a5ac8b04c",
										"exec": [
											"pm.test(\"Preparing request to create test tenant. Tenant creation might take up to 1 minute...\", () => {",
											"    pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "80e41019-0a70-4fff-ac90-23bedb914f4b",
										"exec": [
											"// In case the tenant was not created no sense to run further requests\r",
											"postman.setNextRequest(null);\r",
											"\r",
											"pm.test(\"Tenant created - created (201) or already exists (400 with Duplicate tenant id error)\", () => {\r",
											"    pm.expect(pm.response.code).be.oneOf([201, 400]);\r",
											"    if (pm.response.code === 400) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Duplicate tenant id\");\r",
											"        purgeModulesData();\r",
											"    } else {\r",
											"        // All is okay, running further requests\r",
											"        postman.setNextRequest();\r",
											"    }\r",
											"});\r",
											"\r",
											"function purgeModulesData() {\r",
											"    let utils = eval(globals.loadUtils);\r",
											"    let tenantBaseUrl = utils.buildOkapiURL(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\"));\r",
											"    pm.sendRequest(tenantBaseUrl + \"/modules\", (err, res) => {\r",
											"        let modulesToDisable = null;\r",
											"        pm.test(\"Preparing request to disable modules if any installed before...\", () => {\r",
											"            pm.expect(err).to.equal(null);\r",
											"            pm.expect(res.code).to.equal(200);\r",
											"\r",
											"            modulesToDisable = res.json();\r",
											"            modulesToDisable.forEach(entry => entry.action = \"disable\");\r",
											"            console.log(modulesToDisable);\r",
											"        });\r",
											"\r",
											"        if (modulesToDisable !== null) {\r",
											"            // In case the response indicates that there are some modules are already installed, their data have to be purged first\r",
											"            if (modulesToDisable.length > 0) {\r",
											"                pm.sendRequest({\r",
											"                    url: tenantBaseUrl + \"/install\",\r",
											"                    method: \"POST\",\r",
											"                    header: {\r",
											"                        \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\"),\r",
											"                        \"Content-type\": \"application/json\"\r",
											"                    },\r",
											"                    body: JSON.stringify(modulesToDisable)\r",
											"                }, (error, response) => {\r",
											"                    pm.test(\"Purging the data for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {\r",
											"                        pm.expect(error).to.equal(null);\r",
											"                        pm.expect(response).to.be.ok;\r",
											"                        // All the data have been purged. Now wait for a minute and run next request\r",
											"                        setTimeout(() => postman.setNextRequest(), 61000);\r",
											"                        postman.setNextRequest();\r",
											"                    });\r",
											"                });\r",
											"            } else {\r",
											"                pm.test(\"No modules to purge for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {\r",
											"                    // Run next request\r",
											"                    postman.setNextRequest();\r",
											"                });\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "27d95b9d-c5bb-4d55-b12d-689e88f5a8f5",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"utils.getModuleId(\"mod-data-export\", bodyHandler);\r",
											"utils.getModuleId(\"mod-login\", bodyHandler);\r",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);\r",
											"utils.getModuleId(\"mod-inventory-storage\", bodyHandler);\r",
											"\r",
											"var modulesToEnable = [];\r",
											"\r",
											"function bodyHandler(moduleId) {\r",
											"    modulesToEnable.push({\r",
											"        \"id\": moduleId,\r",
											"        \"action\": \"enable\"\r",
											"    });\r",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f0d0bbee-0f2e-4f6b-9bcb-02e8ee5943fd",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"postman.setNextRequest(null);\r",
											"pm.test(\"Enabled required modules\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    postman.setNextRequest();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9a7648ec-bb1c-4aa9-8384-890a5f646761",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "67f5ba99-0156-4a7d-8ae4-e3feddaf2361",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "126c22c2-ff72-4eeb-9f99-1a38cc30f275",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70fd6735-7e69-45c4-b9c4-8c9ee78ea265",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "327ec5de-1550-4e14-9418-1479f1684414",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc09d5e0-c576-4e1b-9d5d-d6d6ab08a4c5",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"let pmRq = {\r",
											"    url: utils.buildOkapiURL('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(pmRq, (err, res) => {\r",
											"    let userPermissions = globals.testData.users.admin.permissions;\r",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);\r",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f7761f6-952f-409e-9bfe-f8310335f1af",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);\r",
											"\r",
											"var modulesToEnable = [];\r",
											"\r",
											"function bodyHandler(moduleId) {\r",
											"    modulesToEnable.push({\r",
											"        \"id\": moduleId,\r",
											"        \"action\": \"enable\"\r",
											"    });\r",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c564da74-9ed1-4f07-95c8-3ec93b9c6d52",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ced607b9-78e5-484c-8429-93c447d9409e",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1493700b-a06d-4101-be89-fa3e42e9f65e",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2535e76a-9778-47ad-bcf6-92e8d8d3fc79",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "613386dc-7f30-4048-b784-be2bb95bdb5f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "caa05a81-8e1b-4938-98f5-5f2cad3d2f32",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f5701155-c94a-41e4-b739-82e02fe18c27",
										"exec": [
											"// In case the user was not created no sense to run further requests\r",
											"postman.setNextRequest(null);\r",
											"\r",
											"pm.test(\"User created - Expected Created (201)\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    // All is okay so running further requests\r",
											"    postman.setNextRequest();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba07256d-d881-4e10-a5e5-ad5b0092fe56",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b97acc43-bd55-43b9-b141-141a42fe638e",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add data-export.all permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60db0642-b0ce-4108-8f82-9c50394043e9",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.environment.set(\"limitedPrivPermId\", pm.response.json().id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f34044a-1cb1-46ce-a203-89c99772c8fa",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "851dd018-e5d1-493e-86f3-b2549c54c55f",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests\r",
											"postman.setNextRequest(null);\r",
											"\r",
											"pm.test(\"Status code is 201\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"    // All is okay so running further requests\r",
											"    postman.setNextRequest();\r",
											"});\r",
											"\r",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "834a9e91-52f4-4f50-abc1-5d2a93889be7",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3138112-003a-4cb4-ad1a-6984da05c6f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dffb7909-e0cc-4287-9026-2b41ff45111c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Post instance to inventory storage",
					"item": [
						{
							"name": "Create instance type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83fe0b12-2d98-4d85-9d66-f8c03e1d9f71",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockData/test_instance_type_to_post.json\", function(err, res) {\r",
											"    let instance_type_to_put = JSON.stringify(res.json());\r",
											"    pm.variables.set(\"instanceTypeToPut\", instance_type_to_put);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab7f6d7e-5af2-4a98-8b68-61b2923a81ec",
										"exec": [
											"pm.test(\"Instance type created - Expected Created (201)\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    // All is okay so running further requests\r",
											"    if (pm.response.code === 201) {\r",
											"    pm.variables.set(\"instanceTypeId\", pm.response.json().id);\r",
											"        postman.setNextRequest();\r",
											"    } else {\r",
											"       // Failed to create instance type;\r",
											"        postman.setNextRequest(null);\r",
											"    }\r});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{instanceTypeToPut}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create instance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e5ff28b7-85f1-4b38-8a6b-1e72cb1346cd",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockData/test_instance_to_post.json\", function(err, res) {\r",
											"    let instance_to_put = JSON.stringify(res.json());\r",
											"    pm.variables.set(\"instanceToPut\", instance_to_put);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4025fd40-eb3c-44d2-8d02-30759617a6b4",
										"exec": [
											"pm.test(\"Instance created - Expected Created (201)\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{instanceToPut}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-storage",
										"instances"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "414f764f-3077-4f44-b743-32808e2d5ac2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6545b909-a7a9-4fa4-b7c8-3549892f97d4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "00865010-ee41-4745-bb97-ab46dca34ac7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "22fe66b5-b758-47b7-a10e-7862bf3444b3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Main tests",
			"item": [
				{
					"name": "Profiles",
					"item": [
						{
							"name": "Post mappingProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b09a5d1-fd21-4764-9460-c44b8bf12d96",
										"exec": [
											"pm.test(\"Mapping profile has been created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"let regularUser = globals.testData.users.regular.user;",
											"let mappingProfile = pm.response.json();",
											"",
											"pm.test(\"With id\", () => {",
											"    pm.expect(mappingProfile.id).not.equal(null);",
											"});",
											"",
											"pm.test(\"With name\", () => {",
											"    pm.expect(mappingProfile.name).not.equal(null);",
											"});",
											"",
											"pm.test(\"With recordTypes and it equal to holdings and item\", () => {",
											"    pm.expect(mappingProfile.recordTypes[0]).equal(\"HOLDINGS\");",
											"    pm.expect(mappingProfile.recordTypes[1]).equal(\"ITEM\");",
											"});",
											"",
											"pm.test(\"With transformations\", () => {",
											"    pm.expect(mappingProfile.transformations).not.equal(null);",
											"});",
											"",
											"pm.test(\"With userInfo exist\", () => {",
											"    pm.expect(mappingProfile.userInfo).not.equal(null);",
											"});",
											"",
											"pm.test(\"With valid firstName\", () => {",
											"    pm.expect(mappingProfile.userInfo.firstName).equal(regularUser.personal.firstName);",
											"});",
											"",
											"pm.test(\"With valid lastName\", () => {",
											"    pm.expect(mappingProfile.userInfo.lastName).equal(regularUser.personal.lastName);",
											"});",
											"",
											"pm.test(\"With valid userName\", () => {",
											"    pm.expect(mappingProfile.userInfo.userName).equal(regularUser.username);",
											"});",
											"",
											"pm.variables.set(\"mappingProfile\", mappingProfile);",
											"pm.environment.set(\"mappingProfileId\", mappingProfile.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82466d0c-6f66-4faf-967f-380ab8af213b",
										"exec": [
											"pm.variables.set(\"mappingProfile\", JSON.stringify(globals.testData.mappingProfile));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{mappingProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mapping-profiles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mapping-profiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update mappingProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebc6c3c7-6380-42ae-98c0-da36a7e5fa8d",
										"exec": [
											"",
											"pm.test(\"Mapping profile has been updated\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60908cca-a5b4-4b0a-8205-8d9e454321f6",
										"exec": [
											"let mappingProfile = pm.variables.get(\"mappingProfile\");",
											"mappingProfile.recordTypes[0] = \"HOLDINGS\";",
											"pm.variables.set(\"updatedMappingProfile\",  JSON.stringify(mappingProfile));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedMappingProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mapping-profiles/{{mappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mapping-profiles",
										"{{mappingProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mapping profile by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "930c2535-75f0-42d2-8087-c7af4163d8cf",
										"exec": [
											"pm.test(\"The mapping profile by id has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let mappingProfile = pm.response.json();\r",
											"\r",
											"pm.test(\"With updated recordTypes and it equals to HOLDINGS\", () => {\r",
											"    pm.expect(mappingProfile.recordTypes[0]).equal(\"HOLDINGS\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4829f6f3-5094-437c-a513-7f400774070a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mapping-profiles/{{mappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mapping-profiles",
										"{{mappingProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mapping profile by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a604e756-0684-4e4f-b4fa-5cba3455c19a",
										"exec": [
											"pm.test(\"The Mapping profiles by query has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let mappingProfileId = pm.variables.get(\"mappingProfileId\");\r",
											"let mappingProfile = pm.response.json().mappingProfiles.find(profile => profile.id === mappingProfileId);\r",
											"let totalRecords = pm.response.json().totalRecords;\r",
											"\r",
											"pm.test(\"With total records equals to  1\", () => {\r",
											"    pm.expect(totalRecords).equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"With correct id\", () => {\r",
											"    pm.expect(mappingProfile.id).equal(mappingProfileId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2897c078-a0c3-4442-84af-5b2dab5cd3fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mapping-profiles?query=id=={{mappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mapping-profiles"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{mappingProfileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get default mapping profile by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bed739b-7de2-4c87-9043-5acdf27d7363",
										"exec": [
											"pm.test(\"The default mapping profile by id has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let mappingProfile = pm.response.json();\r",
											"\r",
											"pm.test(\"With default record type\", () => {\r",
											"    pm.expect(mappingProfile.recordTypes[0]).equal(\"INSTANCE\");\r",
											"});\r",
											"\r",
											"pm.test(\"With default name\", () => {\r",
											"    pm.expect(mappingProfile.name).equal(\"Default instance mapping profile\");\r",
											"});\r",
											"\r",
											"pm.test(\"With default description\", () => {\r",
											"    pm.expect(mappingProfile.description).equal(\"Default mapping profile for the inventory instance record\");\r",
											"});\r",
											"\r",
											"pm.test(\"With default output format\", () => {\r",
											"    pm.expect(mappingProfile.outputFormat).equal(\"MARC\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c039b19-0c56-4341-afc4-a86fd325eb55",
										"exec": [
											"pm.environment.set(\"defaultMappingProfile\", globals.testData.defaultMappingProfileId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mapping-profiles/{{defaultMappingProfile}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mapping-profiles",
										"{{defaultMappingProfile}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post jobProfiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0afb572d-2255-4898-b378-b57eb143a4aa",
										"exec": [
											"",
											"pm.test(\"Job profile has been created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"let regularUser = globals.testData.users.regular.user;",
											"let jobProfile = pm.response.json();",
											"",
											"pm.test(\"Verify id exists\", () => {",
											"    pm.expect(jobProfile.id).not.equal(null);",
											"});",
											"",
											"pm.test(\"Verify name exists\", () => {",
											"    pm.expect(jobProfile.name).not.equal(null);",
											"});",
											"",
											"pm.test(\"With userInfo exist\", () => {",
											"    pm.expect(jobProfile.userInfo).not.equal(null);",
											"});",
											"",
											"pm.test(\"With valid firstName\", () => {",
											"    pm.expect(jobProfile.userInfo.firstName).equal(regularUser.personal.firstName);",
											"});",
											"",
											"pm.test(\"With valid lastName\", () => {",
											"    pm.expect(jobProfile.userInfo.lastName).equal(regularUser.personal.lastName);",
											"});",
											"",
											"pm.test(\"With valid userName\", () => {",
											"    pm.expect(jobProfile.userInfo.userName).equal(regularUser.username);",
											"});",
											"",
											"",
											"pm.variables.set(\"jobProfile\", jobProfile);",
											"pm.environment.set(\"jobProfileId\", jobProfile.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3dcd1777-6373-4f81-a1c2-e2c0a6d6f37e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var mappingProfileId = pm.variables.get(\"mappingProfile\").id;",
											"pm.variables.set(\"jobProfile\", JSON.stringify(utils.buildJobProfile(mappingProfileId)));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{jobProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/job-profiles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"job-profiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update jobProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef0dd2ca-2011-462c-b2ee-09a4ba8d4553",
										"exec": [
											"pm.test(\"Job profile has been updated\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49e17865-89c2-4aab-8203-41c91642f0bc",
										"exec": [
											"let jobProfile = pm.variables.get(\"jobProfile\");",
											"jobProfile.description = \"updated API Test job Profile Description\";",
											"pm.variables.set(\"jobProfile\",  JSON.stringify(jobProfile));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{jobProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/job-profiles/{{jobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"job-profiles",
										"{{jobProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get job profile by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb8a725e-8f58-4ba1-a52f-09f906aa3d81",
										"exec": [
											"pm.test(\"The job profile by id has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let jobProfile = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Description has been updated\", () => {\r",
											"    pm.expect(jobProfile.description).equal(\"updated API Test job Profile Description\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b110acf9-359f-4726-97c6-38c6856d3410",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/job-profiles/{{jobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"job-profiles",
										"{{jobProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get default job profile by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b53f2e58-5778-40d8-b307-b1e535fef25d",
										"exec": [
											"pm.test(\"The default job profile by id has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let jobProfile = pm.response.json();\r",
											"\r",
											"pm.test(\"With default name\", () => {\r",
											"    pm.expect(jobProfile.name).equal(\"Default job profile\");\r",
											"});\r",
											"\r",
											"pm.test(\"With default description\", () => {\r",
											"    pm.expect(jobProfile.description).equal(\"Default job profile\");\r",
											"});\r",
											"\r",
											"pm.test(\"With default mappingProfile\", () => {\r",
											"    pm.expect(jobProfile.mappingProfileId).equal(globals.testData.defaultMappingProfileId);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"defaultJobProfile\", JSON.stringify(jobProfile));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05690961-916c-4942-887f-198f70003ca0",
										"exec": [
											"pm.environment.set(\"defaultJobProfileId\", globals.testData.defaultJobProfileId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/job-profiles/{{defaultJobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"job-profiles",
										"{{defaultJobProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update default jobProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bef0911-d1a2-4074-9bf2-792cc54255cd",
										"exec": [
											"pm.test(\"Verify status when update the default job profile\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message when update the default job profile\", () => {",
											"    let errorMessage = String.fromCharCode.apply(String, new Uint8Array(pm.response.stream));",
											"    pm.expect(errorMessage).equal(\"Editing of default job profile is forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6150a5e-9ed4-461d-8205-c908688a93c9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{defaultJobProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/job-profiles/{{defaultJobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"job-profiles",
										"{{defaultJobProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update default mappingProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a8f7f6c-7ac3-41d8-9459-69e02ec8d863",
										"exec": [
											"pm.test(\"Verify status when update the default mapping profile\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message when update the default mapping profile\", () => {",
											"    let errorMessage = String.fromCharCode.apply(String, new Uint8Array(pm.response.stream));",
											"    pm.expect(errorMessage).equal(\"Editing of default mapping profile is forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9390a6d-9834-4adb-8915-35137039b74a",
										"exec": [
											"let mappingProfile = globals.testData.mappingProfile;",
											"mappingProfile.id = globals.testData.defaultMappingProfileId;",
											"pm.variables.set(\"mappingProfile\",  JSON.stringify(mappingProfile));",
											"pm.environment.set(\"defaultMappingProfileId\", JSON.stringify(globals.testData.defaultMappingProfileId));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{mappingProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mapping-profiles/{{defaultMappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mapping-profiles",
										"{{defaultMappingProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete default jobProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ecc5992-a74d-47f3-a1f1-f48edf8b2115",
										"exec": [
											"pm.test(\"Verify status when delete the default job profile\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message when delete the default job profile\", () => {",
											"    let errorMessage = String.fromCharCode.apply(String, new Uint8Array(pm.response.stream));",
											"    pm.expect(errorMessage).equal(\"Deletion of default job profile is forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "328a1fe5-bcee-4b90-b7c8-cfd238b47949",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/job-profiles/{{defaultJobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"job-profiles",
										"{{defaultJobProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete default mappingProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "589ae6a3-4dfa-4292-9de8-f24e90f91d79",
										"exec": [
											"pm.test(\"Verify status when delete the default mapping profile\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Verify error message when delete the default mapping profile\", () => {",
											"    let errorMessage = String.fromCharCode.apply(String, new Uint8Array(pm.response.stream));",
											"    pm.expect(errorMessage).equal(\"Deletion of default mapping profile is forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e3507f6-0583-4256-8640-628de91319ec",
										"exec": [
											"pm.variables.set(\"defaultMappingProfileId\", globals.testData.defaultMappingProfileId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mapping-profiles/{{defaultMappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mapping-profiles",
										"{{defaultMappingProfileId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Post file definition with invalid filename extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69046dc0-4f86-4cf1-9865-16cf807d2e75",
								"exec": [
									"let fileName = JSON.stringify(globals.testData.fileDefinitions.invalidFileDefinition.fileName);",
									"pm.test(\"File difinition with fileName \\\"\"+fileName+\"\\\" has been created\", () => {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.be.withBody;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "64a04e45-ab8b-4440-822e-2e40dc46b67f",
								"exec": [
									"pm.variables.set(\"fileDefinition\", JSON.stringify(globals.testData.fileDefinitions.invalidFileDefinition));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{fileDefinition}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/file-definitions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"file-definitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post file definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c58887d-9a66-40b5-b21c-ebea91d69aa7",
								"exec": [
									"let fileName = JSON.stringify(globals.testData.fileDefinitions.validFileDefinition.fileName);",
									"pm.test(\"File difinition with fileName \\\"\"+fileName+\"\\\" has been created\", () => {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"let fileDefinition = pm.response.json();",
									"pm.globals.set(\"fileDefinitionId\", fileDefinition.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "46dbd60c-e350-43e4-bb1b-017cc5d2ad76",
								"exec": [
									"pm.variables.set(\"fileDefinition\", JSON.stringify(globals.testData.fileDefinitions.validFileDefinition));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{fileDefinition}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/file-definitions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"file-definitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get file definition by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55864344-af35-414c-9726-fd47b8ac24cc",
								"exec": [
									"let fileName = JSON.stringify(globals.testData.fileDefinitions.validFileDefinition.fileName);",
									"pm.test(\"File definition with fileName \"+fileName+ \" has been retrieved successfully\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3f71b283-0f85-4608-923a-92e6011d5c0c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/file-definitions/{{fileDefinitionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"file-definitions",
								"{{fileDefinitionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post uploading a file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8383ef95-d259-4e07-ab61-af1cd61e4fc3",
								"exec": [
									"let fileName = JSON.stringify(globals.testData.fileDefinitions.validFileDefinition.fileName);",
									"pm.test(\"File has been uplouaded sucessfully\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"let fileDefinition = pm.response.json();",
									"",
									"pm.test(\"Directory for uploaded file has been created & source path not empty\", () => {",
									"    pm.expect(fileDefinition.sourcePath).not.equal(null);",
									"})",
									"",
									"pm.test(\"Status has completed value\", () => {",
									"    pm.expect(fileDefinition.status).equal(\"COMPLETED\");",
									"})",
									"",
									"pm.test(\"With metadata\", () => {",
									"    pm.expect(fileDefinition.metadata).not.equal(null);",
									"})",
									"",
									"pm.variables.set(\"jobExecutionId\", fileDefinition.jobExecutionId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "79058133-24c5-4968-82bf-74da061cb18f",
								"exec": [
									"let utils = eval(globals.loadUtils);\r",
									"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockData/test_file_to_upload.csv\", function(err, res) {\r",
									"    let arr = new Uint8Array(res.stream);\r",
									"    let test_file_to_upload = String.fromCharCode.apply(String, arr);",
									"\r",
									"    pm.variables.set(\"fileToUpload\", test_file_to_upload);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{fileToUpload}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/file-definitions/{{fileDefinitionId}}/upload",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"file-definitions",
								"{{fileDefinitionId}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post uploading a file - Idempotent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "217f74f8-0299-4e1f-9b4d-649e719fabbc",
								"exec": [
									"pm.test(\"File is already uploaded\", () => {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e7499044-5fbe-42bd-a19c-e1bc8af0e190",
								"exec": [
									"let utils = eval(globals.loadUtils);\r",
									"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockData/test_file_to_upload.csv\", function(err, res) {\r",
									"    let test_file_to_upload = res.body;\r",
									"    pm.variables.set(\"fileToUpload\", test_file_to_upload);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{fileToUpload}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/file-definitions/{{fileDefinitionId}}/upload",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"file-definitions",
								"{{fileDefinitionId}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export uploaded file with invalid job profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83a173a2-9642-4e77-9efd-3b0574633e75",
								"exec": [
									"pm.test(\"Export of uploaded file failed with 400 status code\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "81fd56ed-0da5-4ce3-bf76-1cd97a2ff0bf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fileDefinitionId\": \"{{fileDefinitionId}}\",\n  \"jobProfileId\": \"da0ccaa8-6f59-11ea-bc55-0242ac130003\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/export",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export uploaded with invalid fileDefinitionid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5ced1e6-40a1-4579-ac7d-598977a8e6ba",
								"exec": [
									"pm.test(\"Export of uploaded file failed with 400 status code\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1520265d-be7c-49bb-8b60-478f5971d308",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fileDefinitionId\": \"f13c422e-b14b-11ea-b3de-0242ac130004\",\n  \"jobProfileId\": \"{{jobProfileId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/export",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export uploaded file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f798ddfe-afa6-4e33-9024-f07fa36dd43e",
								"exec": [
									"pm.test(\"Export of uploaded file completed successfully\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"    // The export process has begun. Wait 10 seconds for it to complete.\r",
									"    setTimeout(() => postman.setNextRequest(), 10000);\r",
									"});\r"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c31a08c-5828-4609-9ee2-44ef7e2f178c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fileDefinitionId\": \"{{fileDefinitionId}}\",\n  \"jobProfileId\": \"{{jobProfileId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/export",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get job execution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d7cd61c-1732-47c6-9a71-15cd8830f0dc",
								"exec": [
									"pm.test(\"Job execution has been retrieved successfully\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"let jobExecution = pm.response.json().jobExecutions.find(job => job.id === pm.variables.get(\"jobExecutionId\"));",
									"var jobProfile = JSON.parse(pm.variables.get(\"jobProfile\"));",
									"",
									"pm.test(\"The status is completed with errors\", () => {",
									"    pm.expect(jobExecution.status).equal(\"COMPLETED_WITH_ERRORS\");",
									"});",
									"",
									"pm.test(\"File name contains hrId\", () => {",
									"    pm.expect(jobExecution.exportedFiles[0].fileName).include(jobExecution.hrId);",
									"});",
									"",
									"pm.test(\"With runBy object\", () => {",
									"    pm.expect(jobExecution.runBy).not.equal(null);",
									"});",
									"",
									"pm.test(\"With progress\", () => {",
									"    pm.expect(jobExecution.progress).not.equal(null);",
									"});",
									"",
									"pm.test(\"With progress exported equal to 1\", () => {",
									"    pm.expect(jobExecution.progress.exported).equal(1);",
									"});",
									"",
									"pm.test(\"With progress failed equal to 4\", () => {",
									"    pm.expect(jobExecution.progress.failed).equal(4);",
									"});",
									"",
									"pm.test(\"With progress total equals to 5\", () => {",
									"    pm.expect(jobExecution.progress.total).equal(\"5\");",
									"});",
									"",
									"pm.test(\"With correct jobProfileName\", () => {",
									"    pm.expect(jobExecution.jobProfileId).equal(jobProfile.id);",
									"});",
									"",
									"pm.test(\"With correct jobProfileId\", () => {",
									"    pm.expect(jobExecution.jobProfileName).equal(jobProfile.name);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "07896b30-f28b-4624-b3cd-2adc1e1e6197",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/job-executions?query=id={{jobExecutionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"job-executions"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{jobExecutionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transformation fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0be08929-e87c-4873-91bd-4a2f0a255947",
								"exec": [
									"pm.test(\"Transformation fields has been retrieved successfully\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Transformation fields array is not empty\", () => {",
									"    let jsonData = pm.response.json()",
									"    pm.expect(jsonData.transformationFields).to.be.an(\"array\");",
									"    pm.expect(jsonData.transformationFields.length).not.equal(0);",
									"});",
									"",
									"pm.test(\"And totalRecords is present\", () => {",
									"    pm.expect(pm.response.json()).to.have.property('totalRecords');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "03b6f3ff-b8c9-4e8f-b363-198aeb6c15bd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/transformation-fields",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"transformation-fields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post expire job executions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a52d1c8-839c-4c1e-ad0b-0cee5a0af869",
								"exec": [
									"pm.test(\"Expire job execution return 204 status\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/expire-jobs",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"expire-jobs"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9c8d7b5f-2721-4019-a274-bd7fcf302ca2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2e17bb9f-8efa-4cc3-9a09-6be2321c9e5c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Profiles",
					"item": [
						{
							"name": "Delete jobProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "689258fe-32bb-41da-87f5-63ce2ba5c813",
										"exec": [
											"pm.test(\"Job profile assosiated with job execution cannot be deleted\", () => {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "86ce587f-3b92-4349-9272-3234e9cde448",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/job-profiles/{{jobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"job-profiles",
										"{{jobProfileId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "clean tenant and modules data",
					"item": [
						{
							"name": "Purge and disable all module for created tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da578269-c5be-4ea5-92ad-4def1d557490",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(utils.buildOkapiURL(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {\r",
											"    pm.test(\"Preparing request to disable modules\", () => {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(res.code).to.equal(200);\r",
											"        let modulesToDisable = res.json();\r",
											"        modulesToDisable.forEach(entry => entry.action = \"disable\");\r",
											"\r",
											"        console.log(modulesToDisable);\r",
											"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "04d54480-582c-42e2-94d0-4cd89d784651",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Disable all modules for test tenant\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToDisable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									],
									"query": [
										{
											"key": "purge",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1f453180-cecd-4023-afdb-5ec1a6dea464",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "57a76af5-caf8-4386-ad19-471dde071266",
										"exec": [
											"pm.test(\"Tenant deleted - Expected Created (204)\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"// Remove all created variables\r",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4acf06e4-cf1b-4081-8f67-608e65973328",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b33ff336-e83a-49af-ba73-8a946ad9cf43",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4b0aae6b-6e63-4c08-9c5b-c933e3f71a2d",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mdexp-admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Test\",",
					"                    \"lastName\": \"Api\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mdexp-admin-user\",",
					"                \"password\": \"mdexp-admin-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": []",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mdexp-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mdexp-user\",",
					"                \"password\": \"mdexp-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"data-export.export.post\",",
					"                    \"data-export.file-definitions.item.get\",",
					"                    \"data-export.file-definitions.item.post\",",
					"                    \"data-export.file-definitions.upload.post\",",
					"                    \"data-export.job-executions.items.get\",",
					"                    \"data-export.mapping-profiles.item.post\",",
					"                    \"data-export.mapping-profiles.collection.get\",",
					"                    \"data-export.mapping-profiles.item.get\",",
					"                    \"data-export.mapping-profiles.item.put\",",
					"                    \"data-export.mapping-profiles.item.delete\",",
					"                    \"data-export.job-profiles.item.post\",",
					"                    \"data-export.job-profiles.collection.get\",",
					"                    \"data-export.job-profiles.item.get\",",
					"                    \"data-export.job-profiles.item.put\",",
					"                    \"data-export.job-profiles.item.delete\",",
					"                    \"data-export.transformation-fields.collection.get\",",
					"                    \"data-export.expire-jobs.post\"",
					"                ]",
					"            }",
					"        },",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test mod-data-export tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    },",
					"    fileDefinitions: {",
					"        validFileDefinition: {",
					"            \"fileName\": \"test_file.csv\"",
					"        },",
					"        invalidFileDefinition: {",
					"            \"fileName\": \"test_file.txt\"",
					"        }",
					"    },",
					"    mappingProfile: {",
					"        \"id\": \"06402561-c5e8-4915-bc5a-684043fcc10a\",",
					"        \"name\": \"Mapping profile\",",
					"        \"description\": \"Mapping profile description\",",
					"        \"recordTypes\": [",
					"            \"HOLDINGS\", ",
					"            \"ITEM\"",
					"        ],",
					"        \"outputFormat\": \"MARC\",",
					"        \"transformations\": [",
					"            {",
					"                \"fieldId\": \"callNumberPrefix\",",
					"                \"path\": \"$.holdings[*].callNumberPrefix\",",
					"                \"recordType\": \"HOLDINGS\",",
					"                \"transformation\": \"905  $a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"callNumber\",",
					"                \"path\": \"$.holdings[*].callNumber\",",
					"                \"recordType\": \"HOLDINGS\",",
					"                \"transformation\": \"906ff$a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"callNumberSuffix\",",
					"                \"path\": \"$.holdings[*].callNumberSuffix\",",
					"                \"recordType\": \"HOLDINGS\",",
					"                \"transformation\": \"907 1$a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"electronicAccess.linkText\",",
					"                \"path\": \"$.holdings[*].electronicAccess[*].linkText\",",
					"                \"recordType\": \"HOLDINGS\",",
					"                \"transformation\": \"908  $a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"electronicAccess.uri\",",
					"                \"path\": \"$.holdings[*].electronicAccess[*].uri\",",
					"                \"recordType\": \"HOLDINGS\",",
					"                \"transformation\": \"909  $a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"permanentLocationId\",",
					"                \"path\": \"$.holdings[*].permanentLocationId\",",
					"                \"transformation\": \"910  $a\",",
					"                \"enabled\": true,",
					"                \"recordType\": \"HOLDINGS\"",
					"            },",
					"            {",
					"                \"fieldId\": \"temporaryLocationId\",",
					"                \"path\": \"$.holdings[*].temporaryLocationId\",",
					"                \"transformation\": \"911  $a\",",
					"                \"enabled\": true,",
					"                \"recordType\": \"HOLDINGS\"",
					"            },            ",
					"            {",
					"                \"fieldId\": \"effectiveCallNumberComponents.callNumber\",",
					"                \"path\": \"$.items[*].effectiveCallNumberComponents.callNumber\",",
					"                \"recordType\": \"ITEM\",",
					"                \"transformation\": \"912  $a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"electronicAccess.linkText\",",
					"                \"path\": \"$.items[*].electronicAccess[*].linkText\",",
					"                \"recordType\": \"ITEM\",",
					"                \"transformation\": \"913  $a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"electronicAccess.uri\",",
					"                \"path\": \"$.items[*].electronicAccess[*].uri\",",
					"                \"recordType\": \"ITEM\",",
					"                \"transformation\": \"914  $a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"materialTypeId\",",
					"                \"path\": \"$.items[*].materialTypeId\",",
					"                \"recordType\": \"ITEM\",",
					"                \"transformation\": \"915  $a\",",
					"                \"enabled\": true",
					"            },",
					"            {",
					"                \"fieldId\": \"electronicAccess.effectiveLocationId\",",
					"                \"path\": \"$.items[*].effectiveLocationId\",",
					"                \"recordType\": \"ITEM\",",
					"                \"transformation\": \"916  $a\",",
					"                \"enabled\": true",
					"            }",
					"        ]",
					"    },",
					"    defaultMappingProfileId: \"25d81cbe-9686-11ea-bb37-0242ac130002\",",
					"    defaultJobProfileId: \"6f7f3cd7-9f24-42eb-ae91-91af1cd54d0a\"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.buildOkapiURL = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiURL(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"    * Build Job Profile with mappingProfileId.",
					"    */",
					"    utils.buildJobProfile = function (mappingProfileId) {",
					"        return {",
					"            \"name\": \"APITest-JobProfile\",",
					"            \"destination\": \"fileSystem\",",
					"            \"description\": \"Job profile for API tests\",",
					"            \"mappingProfileId\": mappingProfileId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"fileDefinitionId\");",
					"        pm.environment.unset(\"defaultJobProfile\");",
					"        pm.environment.unset(\"jobProfileId\");",
					"        pm.environment.unset(\"mappingProfileId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"    };",
					"    return utils;",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8728de5d-d822-4c58-bf6c-3f458866959c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "922767a7-8415-4946-8b24-9eafa539749f",
			"key": "testTenant",
			"value": "mdexp_test_tenant"
		},
		{
			"id": "9240d244-2453-4abe-8cfa-0146c21421fa",
			"key": "xokapitenant",
			"value": "diku"
		},
		{
			"id": "2c99a75e-fb97-4bdc-948a-348707527f90",
			"key": "protocol",
			"value": "http"
		},
		{
			"id": "acd00fd4-e516-42f6-9fda-867601f5c6c0",
			"key": "url",
			"value": "localhost"
		},
		{
			"id": "594a1227-3203-4d66-96eb-c80e73419198",
			"key": "okapiport",
			"value": "9130"
		},
		{
			"id": "5a8f9154-f18f-438d-a313-902eab4d7bf4",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-data-export/master/src/test/resources"
		}
	],
	"protocolProfileBehavior": {}
}
