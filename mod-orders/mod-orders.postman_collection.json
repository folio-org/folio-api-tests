{
	"info": {
		"_postman_id": "035ce062-6276-4db2-a7a4-e7281f9af869",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Login by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify required modules enabled",
					"item": [
						{
							"name": "mod-orders is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    pm.environment.set(\"modOrdersId\", jsonData[0].id);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-orders"
										}
									]
								},
								"description": "Check if mod-orders is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						},
						{
							"name": "mod-configuration is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-configuration",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-configuration"
										}
									]
								},
								"description": "Check if mod-orders is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check TENANT configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testTenantConfigs = globals.testData.tenantConfig;",
											"let bodyTemplate = globals.testData.tenantConfig.bodyTemplate;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current tenant configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-tenant-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testTenantConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    console.log(configName + \": \" + value);",
											"    utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-tenant-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==TENANT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==TENANT"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f930ca9d-df31-4572-90c8-63f5243ae30e",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => clearTimeout(timerId))\r",
											"        .catch((err, req) => {\r",
											"            clearTimeout(timerId);\r",
											"            console.log(err);\r",
											"            console.log(req);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            pm.test(\"Schema content loaded: \" + path, () => pm.expect(err).to.equal(null));\r",
											"\r",
											"            if (!err) {\r",
											"                let content = replaceResponseRefWithName(response.text());\r",
											"                let name = extractName(path);\r",
											"                setEnvironmentVariable(name, content);\r",
											"                resolve();\r",
											"            } else {\r",
											"                reject(err, getRequest);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modOrdersId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "789cccc8-2479-48c7-ac26-5e35328874bd",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-orders';\r",
											"\r",
											"utils.sendGetRequest('/_/proxy/tenants/' + pm.variables.get(\"xokapitenant\") + '/interfaces/_jsonSchemas', (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function () {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"    \tpm.variables.set('modOrdersId', moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modOrdersId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b589a48-d3fa-4985-85c4-8b7dcda638a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b882afd4-d85f-4006-9746-08bea97bbdf5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare sample data",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post location",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Basement\",\n    \"code\": \"FUS/ROH/DAH\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "Get or create ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET ledger response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.ledgers.length == 1) {",
											"        useAlreadyExistingType(jsonData.ledgers[0]);",
											"    } else {",
											"        createNewRecord();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(identifierType) {",
											"    pm.test(\"Ledger already exists\", function () {",
											"        pm.expect(identifierType.id).to.exist;",
											"        rememberId(identifierType.id);",
											"    });",
											"}",
											"",
											"function createNewRecord() {",
											"    const type = {",
											"        \"name\": \"Ledger for orders API Tests\",",
											"        \"code\": pm.variables.get(\"finance-ledgerCode\"),",
											"        \"description\": \"Ledger for orders API Tests\"",
											"    };",
											"",
											"    eval(globals.loadUtils).postRequest(\"/finance-storage/ledgers\", type, (err, res) => {",
											"        pm.test(\"Ledger created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            rememberId(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function rememberId(id) {",
											"    pm.environment.set(\"ledgerId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers?query=code=={{finance-ledgerCode}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									],
									"query": [
										{
											"key": "query",
											"value": "code=={{finance-ledgerCode}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Get or create fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET funds response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.funds.length == 1) {",
											"        useAlreadyExistingType(jsonData.funds[0]);",
											"    } else {",
											"        createNewRecord();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(identifierType) {",
											"    pm.test(\"Fund already exists\", function () {",
											"        pm.expect(identifierType.id).to.exist;",
											"        rememberId(identifierType.id);",
											"    });",
											"}",
											"",
											"function createNewRecord() {",
											"    const type = {",
											"      \"code\": pm.variables.get(\"finance-fundCode\"),",
											"      \"description\": \"Fund for orders API Tests\",",
											"      \"externalAccountNo\": \"1111111111111111111111111\",",
											"      \"fundStatus\": \"Active\",",
											"      \"ledgerId\": pm.variables.get(\"ledgerId\"),",
											"      \"name\": \"Fund for orders API Tests\"",
											"    };",
											"",
											"    eval(globals.loadUtils).postRequest(\"/finance-storage/funds\", type, (err, res) => {",
											"        pm.test(\"Fund created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            rememberId(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function rememberId(id) {",
											"    pm.environment.set(\"fundId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds?query=code=={{finance-fundCode}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "code=={{finance-fundCode}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory types",
					"item": [
						{
							"name": "Get or create Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET identifier types response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.identifierTypes.length == 1) {",
											"        useAlreadyExistingType(jsonData.identifierTypes[0]);",
											"    } else {",
											"        createNewType();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(identifierType) {",
											"    pm.test(\"Identifier Type already exists\", function () {",
											"        pm.expect(identifierType.id).to.exist;",
											"        rememberId(identifierType.id);",
											"    });",
											"}",
											"",
											"function createNewType() {",
											"    const type = {",
											"        \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",",
											"        \"name\": pm.variables.get(\"inventory-identifierTypeName\")",
											"    };",
											"",
											"    eval(globals.loadUtils).postRequest(\"/identifier-types\", type, (err, res) => {",
											"        pm.test(\"Identifier Type created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            rememberId(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function rememberId(id) {",
											"    pm.environment.set(\"identifierTypeId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types?query=name=={{inventory-identifierTypeName}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name=={{inventory-identifierTypeName}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Get or create Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET Instance types response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.instanceTypes.length == 1) {",
											"        useAlreadyExistingType(jsonData.instanceTypes[0]);",
											"    } else {",
											"        createNewType();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(instanceType) {",
											"    pm.test(\"Instance Type already exists\", function () {",
											"        pm.expect(instanceType.id).to.exist;",
											"        rememberId(instanceType.id);",
											"    });",
											"}",
											"",
											"function createNewType() {",
											"    const type = {",
											"        \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",",
											"        \"code\": pm.variables.get(\"inventory-instanceTypeCode\"),",
											"        \"name\": pm.variables.get(\"inventory-instanceTypeCode\"),",
											"        \"source\": \"apiTests\"",
											"    };",
											"",
											"    eval(globals.loadUtils).postRequest(\"/instance-types\", type, (err, res) => {",
											"        pm.test(\"Instance Type created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            rememberId(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function rememberId(id) {",
											"    pm.environment.set(\"instanceTypeId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types?query=code=={{inventory-instanceTypeCode}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									],
									"query": [
										{
											"key": "query",
											"value": "code=={{inventory-instanceTypeCode}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Get or create Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET Instance statuses response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.instanceStatuses.length == 1) {",
											"        useAlreadyExistingType(jsonData.instanceStatuses[0]);",
											"    } else {",
											"        createNewType();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(status) {",
											"    pm.test(\"Instance Status already exists\", function () {",
											"        pm.expect(status.id).to.exist;",
											"        rememberId(status.id);",
											"    });",
											"}",
											"",
											"function createNewType() {",
											"    const type = {",
											"        \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",",
											"        \"code\": pm.variables.get(\"inventory-instanceStatusCode\"),",
											"        \"name\": pm.variables.get(\"inventory-instanceStatusCode\"),",
											"        \"source\": \"apiTests\"",
											"    };",
											"",
											"    eval(globals.loadUtils).postRequest(\"/instance-statuses\", type, (err, res) => {",
											"        pm.test(\"Instance Status created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            rememberId(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function rememberId(id) {",
											"    pm.environment.set(\"instanceStatusId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses?query=code=={{inventory-instanceStatusCode}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									],
									"query": [
										{
											"key": "query",
											"value": "code=={{inventory-instanceStatusCode}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Get or create Loan Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET Loan Types response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.loantypes.length == 1) {",
											"        useAlreadyExistingType(jsonData.loantypes[0]);",
											"    } else {",
											"        createNewType();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(loanType) {",
											"    pm.test(\"Loan Type already exists\", function () {",
											"        pm.expect(loanType.id).to.exist;",
											"        rememberId(loanType.id);",
											"    });",
											"}",
											"",
											"function createNewType() {",
											"    const type = {",
											"        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\",",
											"        \"name\": pm.variables.get(\"inventory-loanTypeName\")",
											"    };",
											"",
											"    eval(globals.loadUtils).postRequest(\"/loan-types\", type, (err, res) => {",
											"        pm.test(\"Instance Status created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            rememberId(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function rememberId(id) {",
											"    pm.environment.set(\"loanTypeId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?query=name=={{inventory-loanTypeName}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name=={{inventory-loanTypeName}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Get or create Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET Material types response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.mtypes.length == 1) {",
											"        useAlreadyExistingType(jsonData.mtypes[0]);",
											"    } else {",
											"        createNewType();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(materialType) {",
											"    pm.test(\"Material Type already exists\", function () {",
											"        pm.expect(materialType.id).to.exist;",
											"        setIdAsGlobalVariable(materialType.id);",
											"    });",
											"}",
											"",
											"function createNewType() {",
											"    const mtype = {",
											"        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",",
											"        \"name\": pm.variables.get(\"materialTypeName\")",
											"    };",
											"",
											"    eval(globals.loadUtils).postRequest(\"/material-types\", mtype, (err, res) => {",
											"        pm.test(\"Material Type created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            setIdAsGlobalVariable(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function setIdAsGlobalVariable(id) {",
											"    pm.environment.set(\"materialTypeId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											"pm.variables.set(\"materialTypeName\", \"Orders API Tests type\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types?query=name=={{materialTypeName}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name=={{materialTypeName}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Get or create Contributor name type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET Contributor Name types response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.contributorNameTypes.length == 1) {",
											"        useAlreadyExistingType(jsonData.contributorNameTypes[0]);",
											"    } else {",
											"        createNewType();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(materialType) {",
											"    pm.test(\"Contributor Name Type already exists\", function () {",
											"        pm.expect(materialType.id).to.exist;",
											"        setIdAsGlobalVariable(materialType.id);",
											"    });",
											"}",
											"",
											"function createNewType() {",
											"    const nameType = {",
											"        \"id\": \"6d6f642d-0005-1111-aaaa-6f7264657273\",",
											"        \"name\": pm.variables.get(\"contributorNameType\")",
											"    };",
											"",
											"    eval(globals.loadUtils).postRequest(\"/contributor-name-types\", nameType, (err, res) => {",
											"        pm.test(\"Contributor Name Type created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            setIdAsGlobalVariable(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function setIdAsGlobalVariable(id) {",
											"    pm.environment.set(\"contributorNameTypeId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											"pm.variables.set(\"contributorNameType\", \"Orders API Tests type\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types?query=name=={{contributorNameType}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"contributor-name-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name=={{contributorNameType}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Setup new tenant",
					"item": [
						{
							"name": "Create tenant and enable orders and orders storage for it",
							"item": [
								{
									"name": "Create new tenant",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "458e788d-f4f1-4a2e-bf7f-dce99511f09a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/_/proxy/tenants/\" + globals.testData.tenant.id, (err, res) => {",
													"    pm.test(\"Check if tenant for API Tests already exists\", () => {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res.code).to.be.oneOf([200, 404]);",
													"        // If tenant already exists, check if this is for API Tests and delete it",
													"        if (res.code === 200 && res.json().name) {",
													"            utils.sendDeleteRequest(\"/_/proxy/tenants/\" + globals.testData.tenant.id, (err, res) => {",
													"                pm.test(\"Tenant '\" + res.json().name + \"' deleted\", () => {",
													"                    pm.expect(res.code).to.eql(204);",
													"                });",
													"            });",
													"        }",
													"    });",
													"});",
													"",
													"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9b46996e-04ac-475d-8d3a-fe8947e8db87",
												"exec": [
													"// In case the tenant was not created no sense to run further requests",
													"postman.setNextRequest(null);",
													"",
													"pm.test(\"Tenant created - Expected Created (201)\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.globals.set(\"testTenant\", pm.response.json().id)",
													"    // All is okay so running further requests",
													"    postman.setNextRequest();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{tenantData}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"_",
												"proxy",
												"tenants"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable mod-orders for new tenant",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Enabled mod-orders with dependencies\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"});",
													"",
													"pm.globals.set(\"enabledModules\", pm.response.json());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n\t{\n\t\t\"id\" : \"{{modOrdersId}}\",\n\t\t\"action\": \"enable\"\n\t}\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"_",
												"proxy",
												"tenants",
												"{{testTenant}}",
												"install"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Prepare vendor",
							"item": [
								{
									"name": "Post active vendor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Storing active vendor\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});",
													"",
													"pm.globals.set(\"testTenantActiveVendorId\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{testTenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"organizations-storage",
												"organizations"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create user",
					"item": [
						{
							"name": "Create new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/users/\" + globals.testData.user.id, (err, res) => {",
											"    pm.test(\"Check if user for API Tests already exists\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res.code).to.be.oneOf([200, 404]);",
											"        // If user already exists, check if this is for API Tests and delete it",
											"        if (res.code === 200 && res.json().username) {",
											"            utils.sendDeleteRequest(\"/users/\" + globals.testData.user.id, (err, res) => {",
											"                pm.test(\"User '\" + globals.testData.user.username + \"' deleted\", () => {",
											"                    pm.expect(res.code).to.eql(204);",
											"                });",
											"            });",
											"        }",
											"    });",
											"});",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/authn/credentials?query=userId=\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has credentials and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        utils.sendDeleteRequest(\"/authn/credentials/\" + res.json().credentials[0].id, (err, res) => {",
											"            pm.test(globals.testData.user.username + \" user's credentials deleted\", () => {",
											"                pm.expect(res.code).to.eql(204);",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add only mod-orders permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/perms/users?query=userId==\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has permissions and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        utils.sendDeleteRequest(\"/perms/users/\" + res.json().permissionUsers[0].id, (err, res) => {",
											"            pm.test(globals.testData.user.username + \" user's permissions deleted\", () => {",
											"                pm.expect(res.code).to.eql(204);",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"pm.variables.set(\"orgsUserPermissions\", JSON.stringify(globals.testData.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orgsUserPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"modInvoiceUserCreds\", JSON.stringify(globals.testData.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modInvoiceUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Empty Order",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(0);",
											"    });",
											"",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"    ",
											"    pm.test(\"MODORDERS-145: Verify status to be Pending\", function(){",
											"        pm.expect(jsonData.workflowStatus).to.equal(\"Pending\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get created empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});",
											"",
											"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
											"    let order = pm.response.json();",
											"    pm.expect(order.approved).to.be.false;",
											"    pm.expect(order.reEncumber).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Update order with new poNumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get Order and update poNumber only (MODORDERS-150)",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"    let order  = res.json();",
											"    let number = \"UPD\" + order.poNumber;",
											"    order.poNumber = number;",
											"    pm.variables.set(\"updatedNumber\", number);",
											"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"        pm.test(\"Verify order updated with new PO number\", () => pm.expect(res.json().poNumber).to.equal(pm.variables.get(\"updatedNumber\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Get empty order by order id and validate totalItems",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"description": "Verifies that an order can be created and deleted without order lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1ed8c17-6277-4493-a68c-40ef625cec32",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd99c49b-c8fe-4752-96e2-fceab96b7e71",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending Order",
					"item": [
						{
							"name": "Create Pending order",
							"item": [
								{
									"name": "Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"utils.verifyOrderCalculatedInfo(jsonData);",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"completeOrderId\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.globals.set(\"completeOrderPoNumber\",\"\\\"\"+jsonData.poNumber+\"\\\"\");",
													"    pm.expect(jsonData.notes).to.exist;",
													"    pm.expect(jsonData.vendor).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_listed_print_monograph}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update second line and delete",
							"item": [
								{
									"name": "Update second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.purchaseOrderId = globals.completeOrderId;",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Verifies that second line can be sussessfully updated"
									},
									"response": []
								},
								{
									"name": "Get second line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"1 PO Line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200 and verifies that only one line exists"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add empty line, update and delete",
							"item": [
								{
									"name": "Add empty line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.globals.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/order-lines requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update empty line with complex content without location and createInventory=Instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.physical.createInventory = \"Instance\";",
													"    poline.locations = [];",
													"    poline.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Validates that empty line can be updated with complex content"
									},
									"response": []
								},
								{
									"name": "Get order and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "`GET /orders/composite-orders/<id>` request and validate content"
									},
									"response": []
								},
								{
									"name": "Delete last line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 204"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add line and update content",
							"item": [
								{
									"name": "Add line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"// make sure there is no id provided",
													"delete line.id;",
													"line.poLineNumber += \"1\";",
													"line.poLineDescription += \" another PO Line\";",
													"line.eresource.createInventory = \"Instance\";",
													"line.locations.pop();",
													"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_listed_print_monograph}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/id/lines/id requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update last line with empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"pm.variables.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get last line and verify empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8859bd1d-f892-4d95-bb24-32c495252f22",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85d967cc-42f8-49e6-9705-7f46ac900f1d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": " Add expected receipt date to PO Line",
							"item": [
								{
									"name": "Update last line with expected receipt date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"// Using id of the last PO Line",
													"let poLineId = utils.getLastPoLineId();",
													"pm.variables.set(\"poLineId\", poLineId);",
													"utils.sendGetRequest(\"/orders/order-lines/\" + poLineId, (err, res) => {",
													"    // Get physical object",
													"    let compositePoLine = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"    let physical = compositePoLine.physical;",
													"    // make sure there is no id provided",
													"    delete physical.id;",
													"",
													"    // Get current date and add 1 month",
													"    let expectedReceiptDate = moment().utc().add(1, 'month').format();",
													"    pm.variables.set(\"expectedReceiptDate\", expectedReceiptDate);",
													"    physical.expectedReceiptDate = expectedReceiptDate;",
													"",
													"    let poLine  = res.json();",
													"    poLine.physical = physical;",
													"    poLine.locations = [compositePoLine.locations[0]];",
													"    pm.variables.set(\"updated_po_line\", JSON.stringify(poLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"// Get updated PO Line",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.variables.get(\"poLineId\"), function (err, res) {",
													"    pm.test(\"PO Line updated with expected receipt date\", function () {",
													"        let poLine  = res.json();",
													"        // Dates should be in the same format",
													"        let expectedReceiptDate = moment(pm.variables.get(\"expectedReceiptDate\")).utc().format();",
													"        let actualDate = moment(poLine.physical.expectedReceiptDate).utc().format();",
													"",
													"        pm.expect(actualDate).to.equal(expectedReceiptDate);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updated_po_line}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Gets content of last PO Line and updates it adding expected receipt date"
									},
									"response": []
								}
							],
							"description": "[MODORDERS-135](https://issues.folio.org/browse/MODORDERS-135)\n\nAdd an `expectedReceiptDate` field to the physical sub-object.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "12fb8535-67c4-44e3-a656-ae684fccb7a0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5c6ff5d2-f3ba-4a69-be99-c36a49678157",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order",
							"item": [
								{
									"name": "Update order leaving one line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 537.96);",
													"pm.variables.set(\"discountUpdate\", 19.84);",
													"pm.variables.set(\"discountTypeUpdate\", \"percentage\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 9);",
													"pm.variables.set(\"currencyUpdate\", \"BYN\");",
													"",
													"// Expected PO Line's total based on values above will be 3881.058624 and rounded to value below",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 3881.06);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // Retrieve order to verify updates",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        var order = {};",
													"         ",
													"        pm.test(\"Order retrieved after update\", function () {",
													"            pm.expect(err).to.equal(null);",
													"            pm.expect(res.code).to.eql(200);",
													"            pm.expect(res.json()).to.exist;",
													"            order = res.json();",
													"        });",
													"        ",
													"        pm.test(\"Order now has 1 PO Line\", function () {",
													"            utils.validatePoLines(order, 1);",
													"        });",
													"        ",
													"        pm.test(\"Validate poLineNumber after update\", function() {",
													"            utils.validatePoLinesNumber(order);",
													"        });",
													"        ",
													"        let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"",
													"        // The PO has one line so its total price equals to PO Line's total",
													"        utils.verifyOrderCalculatedInfo(order);",
													"",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            let cost = order.compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.currency).to.equal(pm.variables.get(\"currencyUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": \"268758test2\",\n  \"reEncumber\": false,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"id\": \"{{poLineId}}\",\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"{{currencyUpdate}}\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"percentage\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"percentage\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityElectronic\": 0,\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": {\n        \"code\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n        \"description\": \"ABCDEFGHIJKLMNO\"\n      },\n      \"tags\": [\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFG\",\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFGHIJKLMNO\"\n      ],\n      \"title\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204\nReplaces content leaving only one line."
									},
									"response": []
								},
								{
									"name": "Update order changing POL cost again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"pm.variables.set(\"listUnitPriceUpdate\", 10.0);",
													"pm.variables.set(\"additionalCostUpdate\", 5.0);",
													"pm.variables.set(\"discountUpdate\", 15.01);",
													"pm.variables.set(\"discountTypeUpdate\", \"amount\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 21);",
													"",
													"// Expected PO Line's total based on values above",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 199.99);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            pm.expect(res.json()).to.exist;",
													"            pm.expect(res.json().compositePoLines).to.have.lengthOf(1);",
													"",
													"            let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"            // The PO has one line so its total price equals to PO Line's total",
													"            utils.verifyOrderCalculatedInfo(res.json(), expectedTotalPrice);",
													"",
													"            let cost = res.json().compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.additionalCost).to.equal(pm.variables.get(\"additionalCostUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": {{completeOrderPoNumber}},\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 100.99,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"additionalCost\": {{additionalCostUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"USD\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"percentage\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"percentage\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": {\n        \"code\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n        \"description\": \"ABCDEFGHIJKLMNO\"\n      },\n      \"tags\": [\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFG\",\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFGHIJKLMNO\"\n      ],\n      \"title\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update PO number",
							"item": [
								{
									"name": "Update order with new poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Order and update poNumber only",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"    let order  = res.json();",
													"    order.poNumber = \"newponumber\";",
													"    delete order.totalItems;",
													"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
													"});",
													"",
													"pm.globals.set(\"poNumber\", \"newponumber\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedOrder}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order and validate poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"Validate poNumber\", function() {",
													"    pm.expect(jsonData.poNumber).to.equal(pm.globals.get(\"poNumber\"));",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"approved\": false,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"{{poNumber}}\",\n    \"orderType\": \"Ongoing\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 99.99,\n    \"totalItems\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflowStatus\": \"Pending\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"1 po line exists\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate poLineNumber\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order summary leaving only PO number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"poNumber\": \"{{poNumber}}\",\n\t\"orderType\": \"One-Time\",\n\t\"vendor\": \"{{activeVendorId}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate that response contains default fields on creating an empty order\", function () {",
													"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
													"    pm.expect(jsonData.compositePoLines).to.have.lengthOf(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4c80dcd-5979-4caa-9226-16a94cd885a8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5cdf6bc0-c660-4bec-be5c-440eb74bfe55",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create another Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    // Setting create inventory to None for PO Line with P/E Mix format",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.poNumber = \"1MIX1EL1PHYS1OTH\";",
											"",
											"    // add billTo an shipTo properties",
											"    utils.sendGetRequest(\"/configurations/entries?query=module==TENANT and code==\" + globals.testData.tenantConfig.bodyTemplate.code, (congifErr, configRes) => {",
											"        let addressConfId = configRes.json().configs[0].id;",
											"        order.billTo = addressConfId;",
											"        order.shipTo = addressConfId;",
											"        pm.variables.set(\"tenantAddressConfigId\", addressConfId);",
											"        pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"anotherCompleteOrderId\", jsonData.id);",
											"    pm.globals.set(\"another_complete_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Test billTo and shipTo properties existance\", function() {",
											"    pm.expect(jsonData.billTo).to.exist;",
											"    pm.expect(jsonData.shipTo).to.exist;",
											"    ",
											"    pm.expect(jsonData.billTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"    pm.expect(jsonData.shipTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open and adding 2 more lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"another_complete_order_content\");",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    // Few more cases for MODORDERS-117",
											"    order.compositePoLines[0].orderFormat = \"Physical Resource\";",
											"    setPhysicalInfo(order.compositePoLines[0]);",
											"    order.compositePoLines[1].orderFormat = \"Other\";",
											"    setPhysicalInfo(order.compositePoLines[1]);",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Open\";",
											"    pendingOrder.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Pending\");",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"another_complete_order_content\");",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        //check status changed",
											"        order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"        order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"       ",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces",
					"item": [
						{
							"name": "Create Piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function(err, res) {",
											"    let piece = res.json();",
											"    piece.poLineId = pm.variables.get(\"poLineId\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.globals.set(\"pieceIdToUpdate\", jsonData.id);",
											"    utils.validatePiece(jsonData);",
											"});",
											"",
											"pm.test(\"Each piece has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.expect(jsonData.caption).to.exist;",
											"    pm.expect(jsonData.comment).to.exist;",
											"    pm.expect(jsonData.itemId).to.exist;",
											"    pm.expect(jsonData.locationId).to.exist;",
											"    pm.expect(jsonData.supplement).to.exist;",
											"    pm.expect(jsonData.receivedDate).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Edit piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let piece = pm.globals.get(\"pieceRecord\");",
											"",
											"// Update piece format to Electronic",
											"piece.format = \"Electronic\";",
											"// Use this pieceIdToUpdate to delete in next delete request",
											"pm.variables.set(\"updatedPiece\", piece);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.have.status(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedPiece}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Ensure receiptStatus consistency between Pieces PoLine",
					"item": [
						{
							"name": "Verify PoLine Awaiting ReceiptStatus",
							"item": [
								{
									"name": "Create 1st Piece - Received",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.globals.set(\"poLineIdToCreatePiece\", utils.getLastPoLineId());",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function(err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    pm.globals.set(\"pieceRecordAwaiting1\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.globals.set(\"pieceId1ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting1}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										},
										"description": "MODORDERS-173 - ensure receiptStatus consistency between piece and poLine"
									},
									"response": []
								},
								{
									"name": "Create 2nd Piece - Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function(err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.caption = \"Tutorial Volume 99\";",
													"    piece.comment = \"Special Edition II\";",
													"    piece.format = \"Physical\";",
													"    piece.itemId = \"522a501a-56b5-48d9-b28a-3a8f02482d97\";",
													"    piece.locationId = \"53cf956f-c1df-410b-8bea-27f712cca7c0\";",
													"    piece.receivingStatus = \"Expected\";",
													"    piece.supplement = true;",
													"    piece.receivedDate = \"2018-10-10T00:00:00.000+0000\";",
													"    ",
													"    pm.globals.set(\"pieceRecordAwaiting2\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.globals.set(\"pieceId2ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting2}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										},
										"description": "Create another piece"
									},
									"response": []
								},
								{
									"name": "Update 1st piece - to Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f4d22769-3016-4e46-81ea-e42044dac59e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let pieceId1ToUpdate = pm.globals.get(\"pieceId1ToUpdate\");",
													"utils.sendGetRequest(\"/orders-storage/pieces/\" + pieceId1ToUpdate, function(err, res) {",
													"    piece = res.json();",
													"    let receivingStatus = piece.receivingStatus;",
													"    console.log(\"receivingStatus storage: \" + receivingStatus);",
													"});",
													"",
													"var piece1 = {};",
													"piece1 = JSON.parse(pm.globals.get(\"pieceRecordAwaiting1\"));",
													"",
													"// Update piece1 receivingStatus to Expected",
													"piece1.receivingStatus = \"Expected\"; // Received -> Expected will trigger event",
													"",
													"// Use this pieceIdToUpdate to delete in next delete request",
													"pm.variables.set(\"updatedPieceRecordAwaiting1\", JSON.stringify(piece1));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "78dbb04b-c21b-4ca4-aee9-a498911da327",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPieceRecordAwaiting1}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all pieces by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces[0].receivingStatus).to.equal(\"Expected\");",
													"    pm.expect(jsonData.pieces[1].receivingStatus).to.equal(\"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdToCreatePiece}}"
												}
											]
										},
										"description": "GET /orders-storage/pieces requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get PoLine by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    ",
													"    // All pieces receiving status is \"Expected\" so receiptStatus should be \"Awaiting Receipt\"",
													"    pm.expect(jsonData.receiptStatus).to.equal(\"Awaiting Receipt\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineIdToCreatePiece}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete first piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId1ToUpdate\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257) - DELETE /orders/pieces/id"
									},
									"response": []
								},
								{
									"name": "Delete second piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId2ToUpdate\");",
													"pm.globals.unset(\"poLineIdToCreatePiece\");",
													"pm.globals.unset(\"pieceRecordAwaiting1\");",
													"pm.globals.unset(\"pieceRecordAwaiting2\");",
													"pm.globals.unset(\"updatedPieceRecordAwaiting1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId2ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId2ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257) - DELETE /orders/pieces/id"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7bf8e56f-d149-49e8-ae7b-2f4a9d19e6a5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58692dd1-3661-4e41-a56f-0c58334e17b9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fcba4c16-5473-4fdb-8774-ef24ac89fb2a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "38647880-b894-44d4-8d9c-e70a8fa19a90",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Open order",
					"item": [
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"1MIX1EL\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"completeOpenOrderId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"  ",
											"});",
											"  utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    pm.variables.set(\"po_one_physical_one_electronic_lines\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"physElecOpenOrderId\", order.id); ",
											"});",
											"",
											"pm.test(\"2 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"    order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"    order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Fully Paid\"));",
											"});",
											"    utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_one_physical_one_electronic_lines}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Create Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        order.workflowStatus = \"Open\";",
											"        order = utils.deletePoNumber(order);",
											"        for(var i = 0; i < order.compositePoLines.length; i++) {",
											"    \t  order.compositePoLines[i].receiptStatus = \"Receipt Not Required\";",
											"    \t  order.compositePoLines[i].paymentStatus = \"Pending\";",
											"        }",
											"        ",
											"        pm.variables.set(\"orderWithReceiptNotRequiredLines\", JSON.stringify(utils.prepareOrder(order)));",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Receipt Not Required\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"orderWithoutInventoryRecordsId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithReceiptNotRequiredLines}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117))."
							},
							"response": []
						},
						{
							"name": "Create Open order for receiving history test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = false;",
											"    order = utils.deletePoNumber(order);",
											"    pm.variables.set(\"poListedPrintMonographForReceivingHistory\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"receivingHistoryPoId\", order.id); ",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"});",
											"",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForReceivingHistory}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total, checkinItems is `true`.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `false`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with checkinItems = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1N\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = true;",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poToCheckinItemsId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create order all po lines checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1NPHYELEC\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = true;",
											"    order.compositePoLines[1].checkinItems = true;",
											"",
											"    // Set new product ids to be sure that new instances will be created",
											"    order.compositePoLines[0].details.productIds.pop();",
											"    ",
											"    order.compositePoLines[0].title = \"Hey! Just API testing checkin\"",
											"    order.compositePoLines[1].title = \"Hey! Just API testing checkin with no items\"",
											"    ",
											"    //set create Inventory so that no item interaction is necessary",
											"    order.compositePoLines[1].eresource.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"poForTestingCheckin\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => {",
											"     utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    if(line.orderFormat === \"Physical Resource\"){",
											"        pm.globals.set(\"checkin_physical_poLine\", line);",
											"    }else{",
											"        pm.globals.set(\"checkin_electronic_poLine\", line);",
											"    }",
											"    });",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poAllPoLineCheckin\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poForTestingCheckin}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Receive all pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert all received piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive 10 pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\", 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 10);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 10, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives 10 piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 10 received piece records back to `Expected` and Inventory items back to `On order` for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 10 pieces, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Revert 2 received pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\", 2);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 2, \"Expected\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 2 received piece records back to `Expected` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 3 pieces, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Revert 1 received piece for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, receivingHistoryTotalRecords - 1);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.completeOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with P/E Mix and Electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will be still `Open` after this operation because all PO Lines have `Partially Paid` payment status (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.physElecOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with physical and electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will become `Closed` after this operation because all PO Lines have `Fully Paid` payment status and `Fully Received` receipt status once all piece records are received (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with 4 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.anotherCompleteOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by requests from `Pending To Open order` folder (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).\nThe order will be closed after this operation (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Close orders updating payment status of each PO Line",
					"item": [
						{
							"name": "Get order with 4 lines and update each one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.anotherCompleteOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(4);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get order with receipt not required and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithoutInventoryRecordsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithoutInventoryRecordsId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get Mixed order and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "Update PO Lines' payment statuses of `Open` orders so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218)).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29244719-2601-47a5-b644-43352afbd73e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc81ace0-a9b1-48dc-8add-8d8f934ab720",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Check closed orders and re-open",
					"item": [
						{
							"name": "Order with 4 PO Lines should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Cancelled\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Partially Paid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithoutInventoryRecordsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithoutInventoryRecordsId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order: revert 1 received piece for Electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"eval(globals.loadUtils).prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has successfully reverted piece\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Order with 4 PO Lines should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithoutInventoryRecordsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithoutInventoryRecordsId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "The folder contains sets of requests:  \n1. Get orders and verify that their workflow status is `Closed`. If this is true, modify one of PO Line's payment status so the order becomes `Open` eventually.\n2. Roll back one of received piece so the order becomes `Open` eventually.\n3. Verify that orders were successfully re-opened by operations described above.\n\nSee [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218) for more details.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "33ebe467-3c80-4a4f-a8d1-3a3747ea83e0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c7e0b8bc-84f1-46b6-8f1d-a468ef24312b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate New POnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"NewPO111NewPO\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 204 if a valid and unique PO Number is given"
							},
							"response": []
						},
						{
							"name": "Get poNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e9d47e7-02ab-4874-9914-a9d55ae25bd9",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify response status\r",
											"pm.test(\"First response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Validate PoNumber schema\r",
											"var schema = JSON.parse(pm.environment.get(utils.schemaPrefix + \"po_number.json\"));\r",
											"pm.test('PoNumber schema is valid', function() {\r",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//3.  Verify po number generation process\r",
											"let endpoint = utils.buildOkapiUrl(\"/orders/po-number\");\r",
											"\r",
											"const getPoNumberRequest = {\r",
											"  url: endpoint,\r",
											"  method: \"GET\",\r",
											"  header: [\"X-Okapi-Tenant:\" + pm.environment.get(\"xokapitenant\"),\r",
											"  \"Content-Type:application/json\",\r",
											"  \"X-Okapi-Token:\" + pm.environment.get(\"xokapitoken\")],\r",
											"};\r",
											"\r",
											"pm.sendRequest(getPoNumberRequest, function (err, res) {\r",
											"    pm.test(\"Second response status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Second request po number : \" + res.json().poNumber);\r",
											"\r",
											"        pm.test(\"po numbers are not same\", function () {\r",
											"            pm.expect(jsonData.poNumber).to.not.eql(res.json().poNumber);\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98ec7aae-aa2c-45b6-8ecb-3e690ab56bf2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number"
									]
								},
								"description": "GET /orders/id requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Orders",
					"item": [
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 3 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.purchaseOrders).to.have.lengthOf.at.least(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders by query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper workflow status\", function () {",
											"    for(var i = 0; i < jsonData.purchaseOrders.length; i++) {",
											"    \tpm.expect(jsonData.purchaseOrders[i].workflowStatus).to.equal(\"Open\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var purchaseOrdersData = {};",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    purchaseOrdersData = pm.response.json();",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"    ",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Validate that response contains orders sorted by dateOrdered ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    let purchaseOrders = pm.response.json().purchaseOrders;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"Validate that PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											"",
											"",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Response contains orders sorted by dateOrdered descending\", function () {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.most(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders with date range and nested field sorting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment');",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order with metadata.createdDate\", function () {",
											"    let numOfOrdersWithMetadata = 0;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        if (purchaseOrders[i].hasOwnProperty('metadata') && purchaseOrders[i].metadata.hasOwnProperty('createdDate')) {",
											"            numOfOrdersWithMetadata++;",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.not.be.below(2);",
											"    pm.expect(numOfOrdersWithMetadata).to.not.be.below(2);",
											"    ",
											"    pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].metadata.createdDate);",
											"    }});",
											"    pm.test(\"Response contains orders in the fixed date range\", function () {",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"    }});",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Order Lines",
					"item": [
						{
							"name": "Get list of lines by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 4 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.poLines).to.have.lengthOf.above(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of lines with Pending payment status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper payment status\", function () {",
											"    var jsonData = pm.response.json();",
											"    for(var i = 0; i < jsonData.poLines.length; i++) {",
											"    \tpm.expect(jsonData.poLines[i].paymentStatus).to.equal(\"Pending\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=paymentStatus==Pending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "paymentStatus==Pending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.test(\"Check if polines sorted by order metadata.createdDate field\", function() {",
											"            if (poLines[i].hasOwnProperty('metadata')) {",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"                date = new Date(poLines[i].metadata.createdDate);",
											"            }",
											"        });",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of order lines with date range and nested search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment')",
											"",
											"pm.globals.set(\"minDate\", moment().format('YYYY-MM-01'));",
											"pm.globals.set(\"maxDate\", moment().format('YYYY-MM-28'));",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.test(\"Check if polines sorted by order metadata.createdDate field\", function() {",
											"            if (poLines[i].hasOwnProperty('metadata')) {",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"                //check polines date range",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"                date = new Date(poLines[i].metadata.createdDate);",
											"            }",
											"        });",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=physical.createInventory==Instance, Holding, Item AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder line response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 PO line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.test(\"Check if polines sorted by order metadata.createdDate field\", function() {",
											"            if (poLines[i].hasOwnProperty('metadata')) {",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(date);",
											"                date = new Date(poLines[i].metadata.createdDate);",
											"            }",
											"        });",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"PoLines with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "373d8659-329d-42ba-ac4d-f5411d4083d4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96ee5cd4-fc48-4e2d-abd5-7ebf31882f78",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces Creation",
					"item": [
						{
							"name": "P/E Mix Order (Physical and Electronic resources)",
							"item": [
								{
									"name": "Pieces PE Mix - Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order.compositePoLines[0].orderFormat = \"P/E Mix\";",
													"    ",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.variables.set(\"poListedPrintMonographPiece\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"orderIdPEMix\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{poListedPrintMonographPiece}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 2);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"P/E Mix\")[0].id); ",
													"    pm.globals.set(\"poLine2IdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"Electronic Resource\")[0].id);",
													"    pm.globals.set(\"requestBodyToBeUpdated\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(7);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receiving History initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyToBeUpdated}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    jsonData.pieces.forEach(piece => utils.validatePiece(piece));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-admin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// poLine1 -> 3 physical + 1 electronic = 4 pieces",
													"// poLine2 -> 3 electronic = 3 pieces",
													"// 3 + 4 -> 7 Pieces",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(7);",
													"    let receivingHistory = jsonData.receivingHistory;",
													"",
													"    let pol1PhysQty = receivingHistory.filter(entry => entry.pieceFormat === \"Physical\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol1ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol2ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLine2IdPEMix).length;",
													"    pm.expect(pol1PhysQty).to.eql(3);",
													"    pm.expect(pol1ElQty).to.eql(1);",
													"    pm.expect(pol2ElQty).to.eql(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for P/E Mix resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"P/E Mix\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for Electronic resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"Electronic Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 4 pieces, create inventory is `true`."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb384d22-2f32-46d5-a292-ea69ac387ba6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fff364cf-873e-4831-87cb-badfec21e543",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Order with only Physical resource",
							"item": [
								{
									"name": "Pieces Phy - Create Draft order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"randomUUId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{randomUUId}}\",\n    \"approved\": true,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"PIECE100674545\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 152.63,\n    \"totalItems\": 6,\n    \"workflowStatus\": \"Pending\",\n    \"vendor\": \"{{activeVendorId}}\",\n    \"compositePoLines\": [\n        {\n            \"id\": \"4186d931-3965-4794-bfbf-a398944127c2\",\n            \"acquisitionMethod\": \"Purchase At Vendor System\",\n            \"alerts\": [\n                {\n                    \"id\": \"a8129c90-208d-4a0d-aba1-71faa188fe84\",\n                    \"alert\": \"Receipt overdue\"\n                }\n            ],\n            \"cancellationRestriction\": false,\n            \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n            \"claims\": [\n                {\n                    \"claimed\": false,\n                    \"sent\": \"2018-10-09T00:00:00.000+0000\",\n                    \"grace\": 30\n                }\n            ],\n            \"collection\": false,\n            \"contributors\": [\n                {\n                    \"contributor\": \"Ed Mashburn\",\n                    \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n                }\n            ],\n            \"cost\": {\n                \"listUnitPrice\": 24.99,\n                \"currency\": \"USD\",\n                \"additionalCost\": 10,\n                \"discount\": 5,\n                \"discountType\": \"percentage\",\n                \"quantityPhysical\": 3,\n                \"quantityElectronic\": 0,\n                \"poLineEstimatedPrice\": 81.22\n            },\n            \"description\": \"ABCDEFGH\",\n            \"details\": {\n                \"receivingNote\": \"ABCDEFGHIJKL\",\n                \"productIds\": [\n                    {\n                        \"productId\": \"9780764354113\",\n                        \"productIdType\": \"{{identifierTypeId}}\"\n                    }\n                ],\n                \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n                \"subscriptionInterval\": 824,\n                \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n            },\n            \"donor\": \"ABCDEFGHIJKLM\",\n            \"fundDistribution\": [\n                {\n                    \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n                    \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\",\n                    \"percentage\": 80\n                },\n                {\n                    \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n                    \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\",\n                    \"percentage\": 20\n                }\n            ],\n            \"locations\": [\n                {\n                    \"locationId\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n                    \"quantity\": 1,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 1\n                },\n                {\n                    \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n                    \"quantity\": 2,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 2\n                }\n            ],\n            \"orderFormat\": \"Physical Resource\",\n            \"paymentStatus\": \"Awaiting Payment\",\n            \"physical\": {\n                \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n                \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n                \"volumes\": [\n                    \"vol.1\"\n                ],\n                \"materialType\": \"{{materialTypeId}}\"\n            },\n            \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n            \"publicationDate\": \"2017\",\n            \"publisher\": \"Schiffer Publishing\",\n            \"purchaseOrderId\": \"8b854f27-06cf-41ed-a7cb-d00d5d8fe5e4\",\n            \"receiptStatus\": \"Pending\",\n            \"reportingCodes\": [\n                {\n                    \"id\": \"9f49a9b0-5868-45ac-a2ec-c5a405311f4a\",\n                    \"code\": \"CODE1\",\n                    \"description\": \"ABCDEF\"\n                },\n                {\n                    \"id\": \"4bf527d2-0a01-41ec-bb56-eb660f970248\",\n                    \"code\": \"CODE2\",\n                    \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                },\n                {\n                    \"id\": \"8fd796e5-6b8d-4f60-9302-4071e9e844da\",\n                    \"code\": \"CODE3\",\n                    \"description\": \"ABCDE\"\n                }\n            ],\n            \"requester\": \"Leo Bulero\",\n            \"rush\": true,\n            \"selector\": \"ABCD\",\n            \"source\": {\n                \"code\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n                \"description\": \"ABCDEFGHIJKLMNO\"\n            },\n            \"tags\": [\n                \"ABCDEFGHIJKLMNOPQRSTU\",\n                \"ABCDEFG\",\n                \"ABCDEFGHIJKLMNOPQRSTU\",\n                \"ABCDEFGHIJKLMNO\"\n            ],\n            \"title\": \"Kayak Fishing in the Northern Gulf Coast\",\n            \"vendorDetail\": {\n                \"instructions\": \"ABCDEFG\",\n                \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n                \"refNumber\": \"123456-78\",\n                \"refNumberType\": \"Supplier's unique order line reference number\",\n                \"vendorAccount\": \"8910-10\"\n            },\n            \"metadata\": {\n                \"createdDate\": \"2010-10-08T03:53:00.000+0000\",\n                \"createdByUserId\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 1);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPhysical\", order.compositePoLines[0].id); ",
													"    pm.globals.set(\"requestBodyPhysical\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(3);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receiving history initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyPhysical}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Expected\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-admin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// 3 pieces created for 3 physical resources",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => {",
													"        utils.validateReceivingHistory(history);",
													"        pm.expect(history.pieceFormat).to.equal(\"Physical\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receive all pieces for Physical resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.randomUUId, \"Physical Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
									},
									"response": []
								},
								{
									"name": "Get all pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Received\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-admin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec83d977-9cd4-41fa-a39c-7ca7ce042b59",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "93fa63c6-694a-4a08-a650-a2fe20edbf85",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6136d9d-1c38-4ec1-8c28-2402044ac426",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "497421c0-97e4-4326-9302-c197b778a0c6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving History",
					"item": [
						{
							"name": "Get receiving history for Open Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"History has pieces to receive\", function() {",
											"    pm.expect(jsonData.totalRecords).to.equal(7);",
											"});",
											"",
											"pm.test(\"History contains all expected fields\", function(){",
											"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{receivingHistoryPoId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{receivingHistoryPoId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history for Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"History has no pieces to receive\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{orderWithoutInventoryRecordsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{orderWithoutInventoryRecordsId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Inventory",
					"item": [
						{
							"name": "Test createInventory defaults",
							"item": [
								{
									"name": "Create order with createInventory system value from config(createInventory config removed)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let originalConfigs = pm.environment.get(\"mod-orders-configs\") ? JSON.parse(pm.environment.get(\"mod-orders-configs\")) : [];",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let originalConfig = utils.getConfigByName(originalConfigs, \"createInventory\");",
													"    if (originalConfig) {",
													"        console.log(originalConfig);",
													"        utils.deleteConfig(originalConfig.id);",
													"    }",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV5\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull1\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId1\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull1}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Create order with createInventory default config value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"",
													"    let bodyTemplate = testConfigs.bodyTemplate;",
													"    let configName = \"createInventory\";",
													"",
													"    bodyTemplate.configName = configName;",
													"    bodyTemplate.value = \"{\\\"eresource\\\": \\\"None\\\",\\\"physical\\\": \\\"None\\\", \\\"other\\\": \\\"None\\\"}\";",
													"    utils.createConfig(bodyTemplate);",
													"",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV6\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull2\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId2\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull2}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Get configs and delete them all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Removing all current configs\", function() {",
													"    pm.response.to.be.ok;",
													"",
													"    let currentConfigs = pm.response.json().configs;",
													"    console.log(\"Current configs: \", currentConfigs);",
													"    for (var i = 0; i < currentConfigs.length; i++) {",
													"        let configId = currentConfigs[i].id;",
													"        utils.deleteConfig(configId);",
													"    }",
													"",
													"    pm.environment.unset(\"current-orders-configs\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-admin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS"
												}
											]
										},
										"description": "Delete configs to excercise next step. The case when order created with empty configuration"
									},
									"response": []
								},
								{
									"name": "Create order with createInventory system value (configs are empty)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV7\";",
													"",
													"    // remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull3\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId3\", order.id);",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function() {",
													"    utils.validatePoLines(order, 1, true);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull3}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Test for the case described in [MODORDERS-209](https://issues.folio.org/browse/MODORDERS-209)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a05e5386-de4b-4f3b-8c8a-7364b5be79cf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f08648ef-232a-4299-87e5-664e6ca8f70f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create order with createInventory NONE and empty locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV1\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"None\";",
											"    ",
											"    order.compositePoLines[0].locations = [];",
											"",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryNone\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryNoneId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Line and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryNone}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV2\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstance\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstance}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV3\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHolding\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHolding}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV4\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHoldingItem\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingItemId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHoldingItem}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get current configs and restore test values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"let configNamesToProcess = testConfigs.configNames;",
											"",
											"let configs = [];",
											"pm.test(\"Get configs response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    configs = pm.response.json().configs;",
											"});",
											"",
											"console.log(\"Config codes to restore test values: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "check-in pieces without items in Inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "36abaaa2-063f-42d6-9cb0-c4020c263425",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"",
											"utils.createPieceAndCheckInBody(compPoLine);",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f537129-29fc-4653-9e93-b75d7b56131b",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece without items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2ee708a-93a0-44e8-b34e-ab5725cf702f",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ef77f6a-87da-447a-937c-7d1ace325bcf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On Order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece in the prior request to Expected status"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2ee708a-93a0-44e8-b34e-ab5725cf702f",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ef77f6a-87da-447a-937c-7d1ace325bcf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Expected\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "check-in pieces with items in inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10952b47-f0f6-4745-bf89-fc354c3f7a81",
										"exec": [
											"//get holdings record Id -> need instance id and location id",
											"//get loan type id",
											"//create item -> need material type, loan type and holdings Id",
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"",
											"utils.prepareCheckinBodyWithItems(compPoLine);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "78b05458-c363-4075-809d-ee1077eda07f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function() {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function() {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 1, \"In Process\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece with items in inventory and performs check-in. Tests to see if the piece status is changed and also the Po line status. The order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece with items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "deaf3447-5310-4de3-b85e-79a6bddd2035",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_physical_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"     utils.validateInventoryItemsReceived(line, 1, \"On Order\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d45ea8a-6f0e-4c0e-9c5d-4eab489f57af",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Physical and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On Order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece with items. The item status as well as the piece status must be modified"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab27b964-955c-4491-86dd-eb8085658f9e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a9c355ce-ab55-4d87-a0af-027fa014a6c6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Check Order  automatically changes workflowStatus",
					"item": [
						{
							"name": "Create Pending order, that should be automatically closed on transition to open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55871111-bca8-4768-949c-9c1ffe102063",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(pendingOrder));",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											" ",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = pendingOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"automatically_closed_order_content\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d71ce686-44f1-41c2-865d-77e3d7a661f6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_closed_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{automatically_closed_order_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open, adding 2 more lines make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let pendingOrder = pm.globals.get(\"automatically_closed_order_content\");",
											"",
											"// Set Open status",
											"pendingOrder.workflowStatus = \"Open\";",
											"",
											"",
											"pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"pm.globals.unset(\"automatically_closed_order_content\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyClosedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        ",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyClosedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyClosedOrder}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Create Open order, that should be automatically closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let openOrder = res.json();",
											"    openOrder.workflowStatus = \"Open\";",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(openOrder));",
											"    delete openOrder.poNumber;",
											"",
											" ",
											"    // add 2 new PO lines",
											"    openOrder.compositePoLines = openOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = openOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.variables.set(\"request_body\", JSON.stringify(utils.prepareOrder(openOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Order id exist\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOpenOrder\", jsonData.id);",
											"    pm.expect(jsonData.closeReason.reason).is.equal(\"Complete\");",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Pending order, that should be automatically open in an attempt to close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55871111-bca8-4768-949c-9c1ffe102063",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											"    // Setting create inventory to false for PO Line with P/E Mix format",
											"    pendingOrder.compositePoLines[0].paymentStatus = \"Pending\";",
											"",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d71ce686-44f1-41c2-865d-77e3d7a661f6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyOpenedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_opened_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"automatically_opened_order_content\");",
											"",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Closed\";",
											"    pendingOrder.closeReason = {",
											"        \"reason\": \"Complete\"",
											"    };",
											" ",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"automatically_opened_order_content\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyOpenedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyOpenedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyOpenedOrder}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "987cdc39-0de5-464b-ae14-a75d833816d2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8e5db3f1-80d1-4d2a-ae6c-7ad4506605c4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Check order without PO line",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"THIS IS TEST FOR ORDER WITHOUT POLINES\"];",
											"",
											"pm.variables.set(\"orderWithoutPoLinesBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(1);",
											"    });",
											"    ",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderWithoutPoLinesId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithoutPoLinesBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b40992e-c024-4a88-82d3-e8646f49f5ae",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check orders without po-lines\", function () {",
											"    var jsonData = pm.response.json();",
											"    var purchaseOrders = jsonData.purchaseOrders;",
											"    ",
											"    pm.expect(purchaseOrders).to.have.lengthOf.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e05adb9-0839-419e-b220-db821a3ff022",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=notes=THIS IS TEST FOR ORDER WITHOUT POLINES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "notes=THIS IS TEST FOR ORDER WITHOUT POLINES"
										}
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderWithoutPoLinesId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderWithoutPoLinesId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Acquisitions unit assignments",
					"item": [
						{
							"name": "Create assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Each unit-assignments has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"assignmentId\", jsonData.id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"assignmentBody\", JSON.stringify(utils.buildAssignmentContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{assignmentBody}}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update recordId for assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/orders-storage/acquisitions-unit-assignments/\" + environment.assignmentId, (err, res) => {",
											"        pm.test(\"Verify updated assignment with new recordId\", () => pm.expect(res.json().recordId).to.equal(pm.variables.get(\"updatedAssignmentRecordId\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d1116217-372f-46f3-9223-ecd764bcbfad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let assignment = utils.buildAssignmentContent();",
											"let recordId= \"589a6016-3463-49f6-8aa2-dc315d0665fd\";",
											"",
											"assignment.recordId = recordId;",
											"pm.variables.set(\"updatedAssignmentRecordId\", recordId);",
											"pm.variables.set(\"updatedAssignment\", JSON.stringify(assignment));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedAssignment}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Recive created assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let assignment = {};",
											"",
											"pm.test(\"Assignment found\", function () {",
											"    pm.response.to.have.status(200);",
											"    assignment = pm.response.json();",
											"});",
											"",
											"pm.test(\"Assignment content is valid\", function() {",
											"    pm.expect(assignment.id).to.eql(pm.environment.get(\"assignmentId\"));",
											"    utils.validateAssignmentAgainstSchema(assignment);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"recordId\": \"55b97a4a-6601-4488-84e1-8b0d47a3f523\",\r\n  \"acquisitionsUnitId\": \"0ebb1f7d-983f-3026-8a4c-5318e0ebc041\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Recive created assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let assignments = [];",
											"",
											"pm.test(\"Assignment found\", function () {",
											"    pm.response.to.have.status(200);",
											"    assignments = pm.response.json().acquisitionsUnitAssignments;",
											"});",
											"",
											"pm.test(\"Assignments content is valid\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    assignments.forEach(assignment => utils.validateAssignmentAgainstSchema(assignment));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments?query=recordId==589a6016-3463-49f6-8aa2-dc315d0665fd",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments"
									],
									"query": [
										{
											"key": "query",
											"value": "recordId==589a6016-3463-49f6-8aa2-dc315d0665fd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Assignment has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Acquisitions unit assignments",
					"item": [
						{
							"name": "Create assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Each unit-assignments has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"assignmentId\", jsonData.id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"assignmentBody\", JSON.stringify(utils.buildAssignmentContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{assignmentBody}}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update recordId for assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/orders-storage/acquisitions-unit-assignments/\" + environment.assignmentId, (err, res) => {",
											"        pm.test(\"Verify updated assignment with new recordId\", () => pm.expect(res.json().recordId).to.equal(pm.variables.get(\"updatedAssignmentRecordId\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d1116217-372f-46f3-9223-ecd764bcbfad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let assignment = utils.buildAssignmentContent();",
											"let recordId= \"589a6016-3463-49f6-8aa2-dc315d0665fd\";",
											"",
											"assignment.recordId = recordId;",
											"pm.variables.set(\"updatedAssignmentRecordId\", recordId);",
											"pm.variables.set(\"updatedAssignment\", JSON.stringify(assignment));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedAssignment}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Recive created assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let assignment = {};",
											"",
											"pm.test(\"Assignment found\", function () {",
											"    pm.response.to.have.status(200);",
											"    assignment = pm.response.json();",
											"});",
											"",
											"pm.test(\"Assignment content is valid\", function() {",
											"    pm.expect(assignment.id).to.eql(pm.environment.get(\"assignmentId\"));",
											"    utils.validateAssignmentAgainstSchema(assignment);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"recordId\": \"55b97a4a-6601-4488-84e1-8b0d47a3f523\",\r\n  \"acquisitionsUnitId\": \"0ebb1f7d-983f-3026-8a4c-5318e0ebc041\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Recive created assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let assignments = [];",
											"",
											"pm.test(\"Assignment found\", function () {",
											"    pm.response.to.have.status(200);",
											"    assignments = pm.response.json().acquisitionsUnitAssignments;",
											"});",
											"",
											"pm.test(\"Assignments content is valid\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    assignments.forEach(assignment => utils.validateAssignmentAgainstSchema(assignment));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments?query=recordId==589a6016-3463-49f6-8aa2-dc315d0665fd",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments"
									],
									"query": [
										{
											"key": "query",
											"value": "recordId==589a6016-3463-49f6-8aa2-dc315d0665fd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete created assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Assignment has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create Order for tests",
					"item": [
						{
							"name": "Create Open order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsOpenOrderId\", order.id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Closed order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Closed\";",
											"order.notes = [\"Closed Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.paymentStatus = \"Fully Paid\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Closed order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsClosedOrderId\", order.id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Pending order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"Pending Order for Negative API Tests\"];",
											"order.compositePoLines = [utils.buildPoLineWithMinContent(null)];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Pending order created\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let order = pm.response.json();",
											"    pm.globals.set(\"negativeTestsPendingOrderId\", order.id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Pending\");",
											"",
											"    pm.test(\"Validate that PO Line contains desired data\", function () {",
											"        utils.validatePoLines(order, 1);",
											"        pm.globals.set(\"poLineForNegativeTests\", JSON.stringify(order.compositePoLines[0]));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "Post order - vendor validation",
							"item": [
								{
									"name": "Post order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a852\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Put order - vendor validation",
							"item": [
								{
									"name": "Put order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6152f3b1-0b2b-440c-8c8a-70b13548dd49",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5e5efb91-2f1e-4660-81e8-7b765f59f9a9",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a815d622-e96e-438a-9f1f-743528f146ed",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "68a9ba1d-4c80-4489-acd2-312be1dc52f7",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify missing inventory enties errors",
							"item": [
								{
									"name": "Prepare missing instanceTypeCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceTypeCode\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-admin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceTypeCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceTypeCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceTypeCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceStatusCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceStatusCode\";",
													"let value = \"missing-status\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-admin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceStatusCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceStatusCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceStatus\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceStatusCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing loanTypeName config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-loanTypeName\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-admin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-loanTypeName",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-loanTypeName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].title = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productType = \"Vendor Title Number\";",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-loanTypeName\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrance creation failure",
							"item": [
								{
									"name": "Create Open order with lines pointing to unexisting fund",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var uuid = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let order  = utils.prepareOrder(res.json());",
													"    order.workflowStatus = \"Open\";",
													"    // Setting specific PO Number to delete this order in cleanup",
													"    order.poNumber = \"APIFAILENCUMB1\";",
													"    order.compositePoLines.forEach(poLine => {",
													"        poLine.receiptStatus = \"Receipt Not Required\";",
													"        // Setting random fund id",
													"        poLine.fundDistribution.forEach(distrib => distrib.fundId = uuid.v4());",
													"    });",
													"    pm.variables.set(\"order_with_unexisting_fund\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {",
													"    pm.response.to.have.status(500);",
													"    let errors = pm.response.json().errors;",
													"    pm.expect(errors).to.have.lengthOf(1);",
													"    pm.expect(errors[0].code).to.equal(\"encumbranceCreationFailure\");",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines?query=poNumber==APIFAILENCUMB1\", function (err, res) {",
													"    pm.expect(err).to.equal(null);",
													"",
													"    res.json().poLines.forEach(poLine => {",
													"        utils.validateEncumbranceRecords(poLine, \"Pending\");",
													"        pm.globals.set(\"negativeTestsFailedEncumbrances\", poLine.purchaseOrderId);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{order_with_unexisting_fund}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 400"
							},
							"response": []
						},
						{
							"name": "Create empty order with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Vendor and orderType is missing\", function () {",
											"     ",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"vendor\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"orderType\").parameters[0].value).to.equal(\"null\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Get order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Update order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Delete order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Get order - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ea0cb79-8f57-490d-b2a9-c368ac95914a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "fs12345678"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 400"
							},
							"response": []
						},
						{
							"name": "Get order - bad token format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "63145320-5160-4511-b040-bd72005f8468",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "bad-token"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get order - invalid token - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e41e5c9e-c396-4f1e-81ff-10b79f737233",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id request that return 401"
							},
							"response": []
						},
						{
							"name": "Get order - random order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c51240b-34ce-4a8b-9db1-a1150320f0fe",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get order - empty order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										""
									]
								},
								"description": "GET /orders/composite-orders/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update order - empty poNumber - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"pm.variables.set(\"poLineId\", eval(globals.loadUtils).getLastPoLineId());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsPendingOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsOpenOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Closed order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsClosedOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsClosedOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsClosedOrderId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lines",
					"item": [
						{
							"name": "Verify PO Line required properties",
							"item": [
								{
									"name": "Create line - without required fields- 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
													"delete line.source;",
													"delete line.cost;",
													"delete line.title;",
													"delete line.orderFormat;",
													"delete line.acquisitionMethod;",
													"pm.variables.set(\"line_body\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    ",
													"});",
													"pm.test(\"5 validation errors\", function () {",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Quantity validation",
							"item": [
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Physical Resource\";",
													"        line.cost.quantityElectronic = 5;",
													"        line.cost.quantityPhysical = 0;",
													"        line.cost.listUnitPrice = 10;",
													"        line.cost.listUnitPriceElectronic = 0;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"        var emptyLocation = {};",
													"        emptyLocation.locationId = line.locations[0].locationId;",
													"        emptyLocation.quantityElectronic = 0;",
													"        emptyLocation.quantityPhysical = 0;",
													"        ",
													"        line.locations.push(emptyLocation);",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"5 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Electronic Resource\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        line.cost.listUnitPrice = 0;",
													"        line.cost.listUnitPriceElectronic = 10;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"4 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify P/E Mix Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.id = JSON.parse(globals.poLineForNegativeTests).id;",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"P/E Mix\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"        pm.variables.set(\"lineId\", line.id);",
													"",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"3 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{lineId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Cost Prices",
							"item": [
								{
									"name": "Verify P/E Mix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph_pe_mix.json\", (err, res) => {",
													"    let line = res.json().compositePoLines[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = -1;",
													"    // Zero price is allowed MODORDERS-197",
													"    line.cost.listUnitPriceElectronic = 0;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = 101;",
													"    line.cost.discountType = \"percentage\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Physical Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 0;",
													"    line.cost.listUnitPriceElectronic = 10;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Electronic Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 10;",
													"    line.cost.listUnitPriceElectronic = -0.00000000001;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order lines - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"PO line response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get line - empty polineId - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										""
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Update line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Delete line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line - invalid order Id in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"line.purchaseOrderId = \"\";",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/order-lines/id requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line to Open order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsOpenOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add line to Closed order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsClosedOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate - existing PO Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsPendingOrderId, function (err, res) {",
											"    pm.variables.set(\"existing_number\", res.json().poNumber);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : {{existing_number}}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 400 if an existing PO Number is supplied"
							},
							"response": []
						},
						{
							"name": "Validate - invalid PONumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"12-12-13\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 422 when an invalid PO Number is specified"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Attempt to receive already received pieces for physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"    url: utils.buildOkapiUrl(\"/orders/receiving-history?limit=10&query=receivingStatus==Received and purchaseOrderId=\" + globals.physElecOpenOrderId),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
											"        }",
											"},",
											"function (err, res) {",
											"    let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory);",
											"    pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"All items should be failed because already received before\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(10);",
											"    let processedWithError = 0;",
											"    for(let i = 0; i < jsonRs.receivingResults.length; i++) {",
											"        let result = jsonRs.receivingResults[i];",
											"        pm.expect(result.processedSuccessfully).to.equal(0);",
											"        processedWithError += result.processedWithError;",
											"        for(let j = 0; j < result.receivingItemResults.length; j++) {",
											"            pm.expect(result.receivingItemResults[j].processingStatus).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.type).to.equal(\"failure\");",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"        }",
											"    }",
											"    pm.expect(processedWithError).to.equal(jsonRs.totalRecords);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records created by previous request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "check-in already received piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2ee708a-93a0-44e8-b34e-ab5725cf702f",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 piece failed to process\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 0, 1);",
											"    let receivingItemResults = jsonRs.receivingResults[0].receivingItemResults;",
											"     pm.expect(receivingItemResults[0].processingStatus).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.type).to.equal(\"failure\");",
											"     pm.expect(receivingItemResults[0].processingStatus.error).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ef77f6a-87da-447a-937c-7d1ace325bcf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Piece",
					"item": [
						{
							"name": "Update piece by id - bad id 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Edit piece by id - bad format 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"bad-id-format\",\n    \"caption\": \"Tutorial Volume 5\",\n    \"comment\": \"Special Edition\",\n    \"format\": \"Physical\",\n    \"itemId\": \"522a501a-56b5-48d9-b28a-3a8f02482d97\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"poLineId\": \"7decd831-8295-4a9d-9247-320d165583bf\",\n    \"receivingStatus\": \"Expected\",\n    \"supplement\": true,\n    \"receivedDate\": \"2018-10-10T00:00:00.000+0000\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id-format"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id - bad format 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Create empty piece with missing required fields 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"        requiredObj(errors, \"poLineId\");",
											"        requiredObj(errors, \"format\");",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											"",
											"function requiredArray(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"size must be between 1 and 2147483647\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"[]\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create order for new tenant",
					"item": [
						{
							"name": "Create Open order for new tenant, missingInstanceType error",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.physical.createInventory = \"Instance\";",
											"order.compositePoLines = [line];",
											"order.vendor = pm.globals.get(\"testTenantActiveVendorId\");",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 500 and one error\", function () {",
											"    pm.response.to.have.status(500);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Acquisitions unit assignments",
					"item": [
						{
							"name": "Get assignment - bad ID 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d97ca96-4b98-49d2-aa71-5c524905cc80",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get assignment - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de7e87e3-83dd-4c97-9ea4-8b5d310cc605",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "fs12345678"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get assignment - bad token format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7383726d-6b23-483b-9c6b-e6ee2af74213",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "bad-token"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get assignment - invalid token - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdef6c41-4588-48db-89cc-4339b5c10ac0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create assignment with invalid ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18b13f93-34ab-4597-84f0-030e1d5a6f02",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let assignment = JSON.stringify(utils.buildAssignmentContent());",
											"let add = JSON.parse(assignment);",
											"add.id = \"123-345\"",
											"",
											"pm.variables.set(\"assignmentContent\", JSON.stringify(add));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cab16de5-7348-40ce-9b12-f34c1f81c199",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{assignmentContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update assignment - bad ID 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e653a4c-2d7a-4f58-a6f8-0f63c2e6bc7e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedAssignment\", JSON.stringify(utils.buildAssignmentContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24056b69-f204-4c32-985a-573f81411624",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedAssignment}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete assignment - bad ID 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be8660fd-3caf-4230-afa7-f48f5b6c07b2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58b49b0d-631e-4905-a714-14609b278a35",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted assignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a55e3253-5f71-4674-97ff-7142376e2aea",
										"exec": [
											"pm.test(\"Assignment is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{assignmentId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{assignmentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete assignment by random ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34fcdba4-e7c4-4991-8bbe-8b9b9bd4f627",
										"exec": [
											"pm.test(\"Assignment is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/acquisitions-unit-assignments/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"acquisitions-unit-assignments",
										"{{$guid}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete orders for positive tests",
					"item": [
						{
							"name": "Delete orders of createInventory testing",
							"item": [
								{
									"name": "Delete order with createInventory NONE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"eval(globals.loadUtils).deleteOrderRelatedRecords(globals.orderWithCreateInventoryNoneId, true);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"let utils = eval(globals.loadUtils);",
													"utils.verifyAllPieceRecordsDeleted();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithCreateInventoryNoneId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderWithCreateInventoryNoneId}}"
											]
										},
										"description": "DELETE /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Delete order with createInventory INSTANCE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.deleteOrderRelatedRecords(globals.orderWithCreateInventoryInstanceId, true);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"let utils = eval(globals.loadUtils);",
													"utils.verifyAllPieceRecordsDeleted();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithCreateInventoryInstanceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderWithCreateInventoryInstanceId}}"
											]
										},
										"description": "DELETE /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Delete order with createInventory INSTANCE_HOLDING",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.deleteOrderRelatedRecords(globals.orderWithCreateInventoryInstanceHoldingId, true);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"let utils = eval(globals.loadUtils);",
													"utils.verifyAllPieceRecordsDeleted();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithCreateInventoryInstanceHoldingId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderWithCreateInventoryInstanceHoldingId}}"
											]
										},
										"description": "DELETE /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Delete order with createInventory INSTANCE_HOLDING_ITEM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.deleteOrderRelatedRecords(globals.orderWithCreateInventoryInstanceHoldingItemId, true);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithCreateInventoryInstanceHoldingItemId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderWithCreateInventoryInstanceHoldingItemId}}"
											]
										},
										"description": "DELETE /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Delete order with createInventory system default",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.deleteOrderRelatedRecords(globals.orderWithCreateInventoryNullId1, false);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"let utils = eval(globals.loadUtils);",
													"utils.verifyAllPieceRecordsDeleted();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithCreateInventoryNullId1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderWithCreateInventoryNullId1}}"
											]
										},
										"description": "DELETE /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Delete order with createInventory config default",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.deleteOrderRelatedRecords(globals.orderWithCreateInventoryNullId2, false);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"let utils = eval(globals.loadUtils);",
													"utils.verifyAllPieceRecordsDeleted();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithCreateInventoryNullId2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderWithCreateInventoryNullId2}}"
											]
										},
										"description": "DELETE /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Delete order with createInventory and empty config",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.deleteOrderRelatedRecords(globals.orderWithCreateInventoryNullId3, false);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"let utils = eval(globals.loadUtils);",
													"utils.verifyAllPieceRecordsDeleted();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithCreateInventoryNullId3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderWithCreateInventoryNullId3}}"
											]
										},
										"description": "DELETE /orders/composite-orders/id requests that return 204"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete Pending to Open order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// The po_listed_print_monograph.json was used to create this order and one more Open order. Some instances will not be deleted now but with deletion of the next order",
											"utils.deleteOrderRelatedRecords(globals.anotherCompleteOrderId, false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete Open order for receiving history test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.deleteOrderRelatedRecords(globals.receivingHistoryPoId, false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{receivingHistoryPoId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{receivingHistoryPoId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// The instances should be deleted at this point for all orders created based on po_listed_print_monograph.json",
											"utils.deleteOrderRelatedRecords(globals.completeOpenOrderId, true);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete Open order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.deleteOrderRelatedRecords(globals.physElecOpenOrderId, true);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{physElecOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{physElecOpenOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete order with no created instances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"eval(globals.loadUtils).deleteOrderRelatedRecords(globals.orderWithoutInventoryRecordsId, true);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithoutInventoryRecordsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithoutInventoryRecordsId}}"
									]
								},
								"description": "DELETE /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete order with checkinItems = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"eval(globals.loadUtils).deleteOrderRelatedRecords(globals.poToCheckinItemsId, true);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{poToCheckinItemsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{poToCheckinItemsId}}"
									]
								},
								"description": "DELETE /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Pieces PE Mix - Delete Open order P/E Mix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"// Delete created inventory records",
											"let utils = eval(globals.loadUtils);",
											"utils.deleteOrderRelatedRecords(globals.orderIdPEMix, false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();",
											"// Clean-Up",
											"pm.globals.unset(\"poLineIdPEMix\");",
											"pm.globals.unset(\"poLine2IdPEMix\");",
											"pm.globals.unset(\"orderIdPEMix\");",
											"pm.globals.unset(\"requestBodyToBeUpdated\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdPEMix}}"
									]
								},
								"description": "DELETE /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Pieces Phy - Delete Open order Physical",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"// Delete created inventory records",
											"let utils = eval(globals.loadUtils);",
											"utils.deleteOrderRelatedRecords(globals.randomUUId, false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();",
											"// Clean-Up",
											"pm.globals.unset(\"randomUUId\");",
											"pm.globals.unset(\"poLineIdPhysical\");",
											"pm.globals.unset(\"requestBodyPhysical\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{randomUUId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete pending order automatically changes workflowStatus from Open to Close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// The po_listed_print_monograph.json was used to create this order and one more Open order. Some instances will not be deleted now but with deletion of the next order",
											"utils.deleteOrderRelatedRecords(globals.automaticallyClosedOrder, false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyClosedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyClosedOrder}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete open order automatically changes workflowStatus from Open to Close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"utils.deleteOrderRelatedRecords(globals.automaticallyClosedOpenOrder, false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyClosedOpenOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyClosedOpenOrder}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete automatically from Open to Close opene order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyOpenedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyOpenedOrder}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order all polines checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"eval(globals.loadUtils).deleteOrderRelatedRecords(globals.poAllPoLineCheckin, true);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();",
											"",
											"// Clean-Up",
											"pm.globals.unset(\"checkin_electronic_poLine\");",
											"pm.globals.unset(\"checkin_physical_poLine\");",
											"pm.globals.unset(\"poAllPoLineCheckin\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{poAllPoLineCheckin}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{poAllPoLineCheckin}}"
									]
								},
								"description": "DELETE /orders/composite-orders/id requests that return 204"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete orders for negative tests",
					"item": [
						{
							"name": "Delete Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "638ecd6c-ee91-4b54-a37d-487714653b72",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccbbd9a9-875f-4851-a9af-2df76cfc098e",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsPendingOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete Open order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete Closed order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsClosedOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsClosedOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						},
						{
							"name": "Delete Pending order (encumbrance creation failure)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"let utils = eval(globals.loadUtils);",
											"utils.verifyAllPieceRecordsDeleted();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsFailedEncumbrances}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsFailedEncumbrances}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user with mod-orders permissions only",
					"item": [
						{
							"name": "Delete user's credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e68cd5-eca2-4427-ba8b-6f059a5fc130",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/authn/credentials?query=userId=\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has credentials and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        pm.variables.set(\"credentialsId\", res.json().credentials[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ff89363-4db6-40bc-a848-e7532b2a7bc0",
										"exec": [
											"let testFunc = pm.variables.get(\"credentialsId\") ? pm.test : pm.test.skip;",
											"testFunc(\"Credentials deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{credentialsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{credentialsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user's permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "234a882a-edd7-4bac-8bc2-7f89c8a7a713",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/perms/users?query=userId==\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has permissions and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        pm.variables.set(\"permissionsId\", res.json().permissionUsers[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f74eb5c8-1652-480c-9fac-356b3a3ffc56",
										"exec": [
											"let testFunc = pm.variables.get(\"permissionsId\") ? pm.test : pm.test.skip;",
											"testFunc(\"Permissions deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{permissionsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{permissionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "123459a0-b737-4767-a32c-1c5692b8d920",
										"exec": [
											"pm.variables.set(\"userId\", pm.globals.get(\"testData\").user.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac493f0c-3e8c-4c07-94d2-6105617f0384",
										"exec": [
											"pm.test(\"User deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{userId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The authorithation token from `xokapitoken-admin` environment variable is set to `xokapitoken` one to allow remaining requests to work.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "51550a77-35a8-45ab-bf74-f093a8202d42",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"xokapitoken\", pm.environment.get(\"xokapitoken-admin\"));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0decf5ff-c87f-4041-a8cd-ef1a9f2003bd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Revert configs",
					"item": [
						{
							"name": "Get configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let currentConfigs;",
											"pm.test(\"Storing current configs\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    currentConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \", currentConfigs);",
											"});",
											"",
											"let configsToProcess = globals.testData.configs.configNames;",
											"",
											"let originalConfigs = pm.environment.get(\"mod-orders-configs\") ? JSON.parse(pm.environment.get(\"mod-orders-configs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configName = configsToProcess[i];",
											"    let originalConfig = utils.getConfigByName(originalConfigs, configName);",
											"",
											"    if (originalConfig) {",
											"        originalConfig.id = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.updateConfig(originalConfig);",
											"    } else if (currentConfigs.length > 0) {",
											"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.deleteConfig(configId);",
											"    } else {",
											"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get TENANT configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let currentConfigs;",
											"pm.test(\"Storing current tenant configs\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    currentConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \", currentConfigs);",
											"});",
											"",
											"let configsToProcess = globals.testData.tenantConfig.configNames;",
											"",
											"let originalConfigs = pm.environment.get(\"mod-tenant-configs\") ? JSON.parse(pm.environment.get(\"mod-tenant-configs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configName = configsToProcess[i];",
											"    // Get configs existed before API tests by name",
											"    let originalFilteredConfigs = utils.getConfigsByName(originalConfigs, configName);",
											"    let currentFilteredConfigs = utils.getConfigsByName(currentConfigs, configName);",
											"    if (originalFilteredConfigs.length > 0) {",
											"        currentConfigs.forEach(currentConf => {",
											"            let originalConfig = originalFilteredConfigs.find(conf => currentConf.id === conf.id);",
											"            if (originalConfig) {",
											"                utils.updateConfig(originalConfig);",
											"            } else {",
											"                utils.deleteConfig(currentConf.id);",
											"            }",
											"        });",
											"    } else {",
											"        currentFilteredConfigs.forEach(conf => utils.deleteConfig(conf.id));",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==TENANT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==TENANT"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Inventory types",
					"item": [
						{
							"name": "Verify and delete inventory records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "444f69e9-e0af-4666-aa84-bb56caad1141",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let instances = [];",
											"",
											"pm.test(\"Get instances response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    instances = pm.response.json().instances;",
											"});",
											"",
											"for (let i = 0; i < instances.length; i++) {",
											"    utils.deleteInventoryRecordsByInstanceId(instances[i].id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances?query=identifiers == \"*\\\"identifierTypeId\\\": \\\"{{identifierTypeId}}\\\"*\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-storage",
										"instances"
									],
									"query": [
										{
											"key": "query",
											"value": "identifiers == \"*\\\"identifierTypeId\\\": \\\"{{identifierTypeId}}\\\"*\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete identifier type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Identifier type deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types/{{identifierTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types",
										"{{identifierTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete instance type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Instance type deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{instanceTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types",
										"{{instanceTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete instance status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Instance status deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses/{{instanceStatusId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses",
										"{{instanceStatusId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete loan type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Loan type deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{loanTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-types",
										"{{loanTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete material type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Material type deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{materialTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types",
										"{{materialTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete contributor name type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Contributor name type deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types/{{contributorNameTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"contributor-name-types",
										"{{contributorNameTypeId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup test tenant",
					"item": [
						{
							"name": "Purge and disable all module for created tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
										"exec": [
											"let modulesToDisable = pm.globals.get(\"enabledModules\");",
											"console.log(modulesToDisable);",
											"for (let i=0; i < modulesToDisable.length; i++) {",
											"    console.log(modulesToDisable[i]);",
											"    modulesToDisable[i].action = \"disable\";",
											"}",
											"console.log(modulesToDisable);",
											"pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Disable all modules for test tenant\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToDisable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									],
									"query": [
										{
											"key": "purge",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "458e788d-f4f1-4a2e-bf7f-dce99511f09a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b46996e-04ac-475d-8d3a-fe8947e8db87",
										"exec": [
											"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Finance data",
					"item": [
						{
							"name": "Delete fund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Test fund deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds/{{fundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds",
										"{{fundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ledger",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Test ledger deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers/{{ledgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers",
										"{{ledgerId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Location has been successfully deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{newLocationId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{newLocationId}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Delete and verify test vendors deletion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"sendDeleteVendorRequest = function(vendorId) {",
									"    utils.sendDeleteRequest(\"/organizations-storage/organizations/\" + vendorId, function (err, res) {",
									"        if (err) {",
									"            console.log(err);",
									"        }",
									"        pm.test('Piece successfully deleted from storage', function () {",
									"            pm.expect(res).to.have.property('code', 204);",
									"        });",
									"    });",
									"};",
									"",
									"// Deletion test vendors",
									"sendDeleteVendorRequest(pm.variables.get(\"activeVendorId\"));",
									"sendDeleteVendorRequest(pm.variables.get(\"inactiveVendorId\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"All vendors are deleted\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.have.jsonBody(\"totalRecords\", 0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations?query=id=={{activeVendorId}} or id=={{inactiveVendorId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"organizations-storage",
								"organizations"
							],
							"query": [
								{
									"key": "query",
									"value": "id=={{activeVendorId}} or id=={{inactiveVendorId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify no lines left in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"let lineId = utils.getLastPoLineId();",
									"if (lineId) {",
									"    pm.variables.set(\"complete_poLineId\", lineId);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Verify that no lines found\", function () {",
									"    pm.expect(pm.response.json().totalRecords).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/po-lines?query=purchaseOrderId=={{completeOrderId}} or purchaseOrderId=={{anotherCompleteOrderId}} or purchaseOrderId=={{completeOpenOrderId}} or purchaseOrderId=={{physElecOpenOrderId}} or purchaseOrderId=={{orderWithoutInventoryRecordsId}} or purchaseOrderId=={{receivingHistoryPoId}} or purchaseOrderId=={{negativeTestsPendingOrderId}} or purchaseOrderId=={{negativeTestsOpenOrderId}} or purchaseOrderId=={{negativeTestsClosedOrderId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders-storage",
								"po-lines"
							],
							"query": [
								{
									"key": "query",
									"value": "purchaseOrderId=={{completeOrderId}} or purchaseOrderId=={{anotherCompleteOrderId}} or purchaseOrderId=={{completeOpenOrderId}} or purchaseOrderId=={{physElecOpenOrderId}} or purchaseOrderId=={{orderWithoutInventoryRecordsId}} or purchaseOrderId=={{receivingHistoryPoId}} or purchaseOrderId=={{negativeTestsPendingOrderId}} or purchaseOrderId=={{negativeTestsOpenOrderId}} or purchaseOrderId=={{negativeTestsClosedOrderId}}"
								}
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "Verify that orders deleted in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Verify that no orders found\", function () {",
									"    pm.expect(pm.response.json().totalRecords).to.equal(0);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/purchase-orders?query=id=={{completeOrderId}} or id=={{anotherCompleteOrderId}} or id=={{completeOpenOrderId}} or id=={{physElecOpenOrderId}} or id=={{orderWithoutInventoryRecordsId}} or id=={{receivingHistoryPoId}} or id=={{negativeTestsPendingOrderId}} or id=={{negativeTestsOpenOrderId}} or id=={{negativeTestsClosedOrderId}} or id=={{automaticallyClosedOrder}} or id=={{automaticallyClosedOpenOrder}} or id=={{automaticallyOpenedOrder}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders-storage",
								"purchase-orders"
							],
							"query": [
								{
									"key": "query",
									"value": "id=={{completeOrderId}} or id=={{anotherCompleteOrderId}} or id=={{completeOpenOrderId}} or id=={{physElecOpenOrderId}} or id=={{orderWithoutInventoryRecordsId}} or id=={{receivingHistoryPoId}} or id=={{negativeTestsPendingOrderId}} or id=={{negativeTestsOpenOrderId}} or id=={{negativeTestsClosedOrderId}} or id=={{automaticallyClosedOrder}} or id=={{automaticallyClosedOpenOrder}} or id=={{automaticallyOpenedOrder}}"
								}
							]
						},
						"description": "GET /orders-storage/purchaseOrders returns a 404 after delete"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [\"poLines-limit\", \"inventory-instanceTypeCode\", \"inventory-instanceStatusCode\", \"inventory-loanTypeName\"],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    user: {",
					"        \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"        \"username\": \"mod-orders-user\",",
					"        \"active\": true,",
					"        \"personal\": {",
					"            \"firstName\": \"Orders API\",",
					"            \"lastName\": \"Orders Tests\"",
					"        }",
					"    },",
					"    credentials: {",
					"        \"username\": \"mod-orders-user\",",
					"        \"password\": \"mod-orders-user-password\"",
					"    },",
					"    permissions: {",
					"        \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"        \"permissions\": [",
					"            \"orders.all\",",
					"            \"inventory-storage.items.collection.get\",",
					"            \"inventory-storage.items.item.get\",",
					"            \"orders-storage.pieces.collection.get\"",
					"        ]",
					"    },",
					"    receiving: {",
					"        bodyTemplate: {",
					"            \"toBeReceived\": [{",
					"                \"poLineId\": \"\",",
					"                \"received\": 1,",
					"                \"receivedItems\": [{",
					"                    \"barcode\": \"11111111111\",",
					"                    \"comment\": \"Very important note\",",
					"                    \"caption\": \"Vol. 1\",",
					"                    \"itemStatus\": \"Received\",",
					"                    \"locationId\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",",
					"                    \"pieceId\": \"\"",
					"                }]",
					"            }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    piece: {",
					"        bodyTemplate: {",
					"                 \"caption\": \"Volume\",",
					"                 \"comment\": \"creating Piece from API test\",",
					"                 \"format\": \"\",",
					"                 \"locationId\": \"\",",
					"                 \"poLineId\": \"\",",
					"                 \"receivingStatus\": \"Expected\",",
					"                 \"supplement\": true",
					"            }",
					"    },",
					"    checkin: {",
					"        bodyTemplate: {",
					"            \"toBeCheckedIn\": [",
					"              {",
					"                \"poLineId\": \"\",",
					"                \"checkedIn\": \"\",",
					"                \"checkInPieces\": [",
					"                    {",
					"                        \"id\": \"\",",
					"                        \"barcode\": Math.floor(Math.random() * 1000),",
					"                        \"comment\": \"checkedin from API test\",",
					"                        \"caption\": \"Vol. 1\",",
					"                        \"createItem\": true,",
					"                        \"supplement\": false,",
					"                        \"locationId\": \"\",",
					"                        \"accessionNumber\": \"1956.1\",",
					"                        \"itemDescription\": \"This is the piece item checkin\",",
					"                        \"electronicBookplate\": \"This item is from API tests\",",
					"                        \"itemStatus\": \"\"",
					"                    }]",
					"              }],",
					"              \"totalRecords\":1",
					"        }",
					"    },",
					"    item: {",
					"        bodyTemplate: {",
					"                 \"holdingsRecordId\": \"\",",
					"                 \"permanentLoanTypeId\": pm.variables.get(\"loanTypeId\"),",
					"                 \"materialTypeId\": pm.variables.get(\"materialTypeId\"),",
					"                 \"status\": {",
					"                        \"name\": \"On Order\"",
					"                    },",
					"                 \"purchaseOrderLineIdentifier\":\"\"",
					"            }",
					"    },",
					"    tenant: {",
					"        \"id\": \"orders_test_tenant\",",
					"        \"name\": \"Test orders tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    },",
					"    tenantConfig: {",
					"        configNames: [\"tenant.addresses\"],",
					"        bodyTemplate: {",
					"            \"module\": \"TENANT\",",
					"            \"code\": \"ADRESSES_123\",",
					"            \"configName\": \"Test TENANT Config\",",
					"            \"description\": \"Tenant config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    }    ",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"orders_schema_\";",
					"",
					"    utils.validateReceivingHistory = function(history) {",
					"        pm.expect(history.id, \"Piece id expected\").to.exist;",
					"        pm.expect(history.dateOrdered, \"Order date expected\").to.exist;",
					"        pm.expect(history.checkin, \"Checkin expected\").to.exist;",
					"        pm.expect(history.instanceId, \"Instance id expected\").to.exist;",
					"        pm.expect(history.poLineId, \"PO Line id expected\").to.exist;",
					"        pm.expect(history.poLineNumber, \"PO Line number expected\").to.exist;",
					"        pm.expect(history.pieceFormat, \"Piece format expected\").to.exist;",
					"        pm.expect(history.poLineReceiptStatus, \"Receipt status expected\").to.exist;",
					"        pm.expect(history.purchaseOrderId, \"Purchase order id expected\").to.exist;",
					"    };",
					"",
					"    utils.validatePiece = function(piece) {",
					"        pm.expect(piece.id, \"Piece id expected\").to.exist;",
					"        pm.expect(piece.format, \"Piece format expected\").to.exist;",
					"        pm.expect(piece.poLineId, \"Piece Po LineId expected\").to.exist;",
					"        pm.expect(piece.receivingStatus, \"Piece receiving status expected\").to.exist;",
					"    };",
					"",
					"    utils.validateEncumbrance = function(encumbrance, fundDistributions) {",
					"        pm.expect(encumbrance.id, \"Encumbrance id expected\").to.exist;",
					"        pm.expect(encumbrance.amountEncumbered, \"Amount encumbered expected\").to.exist;",
					"        pm.expect(encumbrance.fundId, \"Encumbrance fund id expected\").to.exist;",
					"        pm.expect(encumbrance.status, \"Encumbrance receiving status expected\").to.exist;",
					"",
					"        let filteredArray = fundDistributions.filter(fundDistribution => fundDistribution.encumbrance === encumbrance.id);",
					"        pm.expect(filteredArray).to.have.lengthOf(1);",
					"        let fundDistribution = filteredArray[0];",
					"        pm.expect(encumbrance.fundId).to.eql(fundDistribution.fundId);",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        for (var i = 0; i < order.compositePoLines.length; i++) {",
					"            utils.preparePoLine(order.compositePoLines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function(poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"cost\")) {",
					"            delete poLine.cost.poLineEstimatedPrice;",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function(productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"",
					"    /**",
					"     * Build Unit assignment",
					"     */",
					"    utils.buildAssignmentContent = function() {",
					"        return {",
					"            \"recordId\": \"05bdf3c8-01f0-4ddb-bd6c-6efd465f9e33\",",
					"            \"acquisitionsUnitId\": \"0ebb1f7d-983f-3026-8a4c-5318e0ebc041\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Order with minimal required fields.",
					"     */",
					"    utils.buildOrderWithMinContent = function() {",
					"        return {",
					"            \"vendor\": pm.variables.get(\"activeVendorId\"),",
					"            \"orderType\": \"One-Time\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build PO line with minimal required fields.",
					"     */",
					"    utils.buildPoLineWithMinContent = function(orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": {",
					"                \"code\": \"FOLIO\"",
					"            },",
					"            \"orderFormat\": \"Physical Resource\",",
					"            \"physical\":{",
					"\t             \"createInventory\": \"None\"",
					"\t        },",
					"\t        \"cost\":{",
					"\t            \"currency\":\"USD\",",
					"\t            \"listUnitPrice\": 1,",
					"\t            \"quantityPhysical\":1",
					"\t        },",
					"\t        \"title\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Order in status \"Open\" without PO Number.",
					"     */",
					"    utils.prepareOpenOrderWithoutPoNumber = function(order) {",
					"        let json = utils.prepareOrder(order);",
					"        json.workflowStatus = \"Open\";",
					"        utils.deletePoNumber(json);",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function(order, expectedCount) {",
					"        let checkInventory = order.workflowStatus !== \"Pending\";",
					"        pm.expect(order.compositePoLines).to.have.lengthOf(expectedCount);",
					"        order.compositePoLines.forEach(poLine => {",
					"            pm.test(\"Validating PO Line with number=\" + poLine.poLineNumber, function() {",
					"                utils.rememberPoLineId(poLine);",
					"                pm.expect(poLine.purchaseOrderId, \"Line has to have order id\").to.equal(order.id);",
					"                utils.validatePoLineAgainstSchema(poLine);",
					"                poLine.locations.forEach(location => utils.validateLocationQuantity(location));",
					"",
					"                if (checkInventory && poLine.receiptStatus !== \"Receipt Not Required\") {",
					"                    utils.validatePoLinesInventoryLinks(poLine);",
					"                } else {",
					"                    utils.verifyNoInventoryItemsExist(poLine);",
					"                    pm.expect(poLine.instanceId).to.not.exist;",
					"                }",
					"                // Validate that expected piece quantity created of expected format",
					"                utils.validatePieceRecords(poLine, checkInventory);",
					"                utils.validateEncumbranceRecords(poLine, order.workflowStatus);",
					"",
					"                if (poLine.cost) {",
					"                    pm.expect(poLine.cost.poLineEstimatedPrice).to.be.above(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates presence of links to Inventory entities (e.g. Instance) and that these links are correct",
					"     */",
					"    utils.validatePoLinesInventoryLinks = function(poLine) {",
					"        // Instance should created only",
					"        if (!utils.inventoryUpdateNotRequired(poLine)) {",
					"            pm.expect(poLine.instanceId, \"Instance id is expected\").to.exist;",
					"            utils.sendGetRequest(\"/instance-storage/instances/\" + poLine.instanceId, (err, res) => {",
					"                pm.test(\"Instance Record exist for PO Line with number=\" + poLine.poLineNumber, () => {",
					"                    let instance = res.json();",
					"                    pm.expect(instance).to.exist;",
					"",
					"                    //Check if holdings record is created",
					"                    utils.validateHoldingsRecord(poLine);",
					"                    // Now check items",
					"                    utils.validateInventoryItems(poLine);",
					"",
					"                    // Now validate expected instance's content",
					"                    utils.validateInstanceContent(instance, poLine);",
					"                });",
					"            });",
					"        } else {",
					"            utils.verifyNoInventoryItemsExist(poLine);",
					"            pm.expect(poLine.instanceId).to.not.exist;",
					"        }",
					"    };",
					"",
					"    utils.validateInstanceContent = function(instance, poLine) {",
					"        pm.expect(instance.title, \"Instance's title is not the same as PO Line's\").to.equal(poLine.title);",
					"",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceStatusCode\") !== null) {",
					"            pm.expect(instance.statusId, \"Instance's status id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceStatusId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's status id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceStatusId\"));",
					"        }",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceTypeCode\") !== null) {",
					"            pm.expect(instance.instanceTypeId, \"Instance's type id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceTypeId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceTypeId\"));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.validateInventoryItems = function(line) {",
					"        let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"        utils.getItemsByPoLineId(line.id, expectedCount, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records exist for PO Line with number=\" + line.poLineNumber, function() {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                let isCheckin = typeof line.checkinItems === \"undefined\" ? false : line.checkinItems;",
					"                //items are not created for checkin while opening the order, but can be created later",
					"                if (utils.isItemsUpdateRequired(line) && !isCheckin) {",
					"                    pm.expect(body.totalRecords, \"Quantity of items created for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                    body.items.forEach(item => utils.validateItemContent(item));",
					"                } else {",
					"                    pm.expect(body.totalRecords, \"Quantity of items should be zero\").to.equal(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.validateItemContent = function(item) {",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-loanTypeName\") !== null) {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id is not the same as created for API tests\").to.equal(pm.variables.get(\"loanTypeId\"));",
					"        } else {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"loanTypeId\"));",
					"        }",
					"",
					"        pm.expect(item.status.name, \"Item's status name is incorrect\").to.equal(\"On order\");",
					"        pm.expect(item.materialTypeId, \"Item's material type id is not the same as created for API tests\").to.equal(pm.variables.get(\"materialTypeId\"));",
					"    }",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.getItemsByPoLineId = function(id, limit, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=\" + limit + \"&query=purchaseOrderLineIdentifier==\" + id, handler);",
					"    };",
					"    /**",
					"     * Search items by holdingId",
					"     */",
					"    utils.getItemsByHoldingId = function(holdingId, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=999&query=holdingsRecordId==\" + holdingId, handler);",
					"    };",
					"",
					"    /**",
					"     * Validates that Holdings Record was created  in the inventory",
					"     */",
					"    utils.validateHoldingsRecord = function(poLine) {",
					"        let instanceId = poLine.instanceId;",
					"        pm.expect(instanceId).to.exist;",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=0&query=instanceId==\" + instanceId, (err, res) => {",
					"            let body = res.json();",
					"            if (utils.isHoldingsUpdateRequired(poLine)) {",
					"                pm.test(\"Holding Records exist for Created Instance=\" + instanceId, function() {",
					"                    pm.expect(body.totalRecords).to.be.above(0);",
					"                });",
					"            } else {",
					"                pm.test(\"Holding Records not exist for instance=\" + instanceId, function() {",
					"                    pm.expect(body.totalRecords).to.be.equal(0);",
					"                });",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that there is no any item associated with the PO Line",
					"     */",
					"    utils.verifyNoInventoryItemsExist = function(line, handler) {",
					"        utils.getItemsByPoLineId(line.id, 0, (err, res) => {",
					"            pm.test(\"No item records found for PO Line with number=\" + line.poLineNumber, function() {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords).to.eql(0);",
					"            });",
					"            if (typeof handler === \"function\") {",
					"                handler();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate pieces for PoLine",
					"     */",
					"    utils.validatePieceRecords = function(poLine, arePiecesCreated) {",
					"        let expectedQuantity = arePiecesCreated ? utils.calculateExpectedPiecesQuantity(poLine) : 0;",
					"        utils.sendGetRequest(\"/orders-storage/pieces?limit=\" + expectedQuantity + \"&query=poLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" piece record(s) found for PO Line with number=\" + poLine.poLineNumber, function() {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created pieces does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    let pieces = res.json().pieces;",
					"                    pieces.forEach(piece => utils.validatePiece(piece));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Physical\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Physical\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Electronic\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Electronic\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Other\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Other\"));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate encumbrances for PO Line",
					"     */",
					"    utils.validateEncumbranceRecords = function(poLine, orderStatus) {",
					"        let expectedQuantity = orderStatus === \"Pending\" ? 0 : poLine.fundDistribution.length;",
					"        utils.sendGetRequest(\"/finance-storage/encumbrances?limit=\" + expectedQuantity + \"&query=poLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" encumbrance record(s) found for PO Line with number=\" + poLine.poLineNumber, function() {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created encumbrances does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    res.json().encumbrances.forEach(encumbrance => utils.validateEncumbrance(encumbrance, poLine.fundDistribution));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's receipt status updated to expected,",
					"     * and incase of checkin the receipt date has to be validated",
					"     * if receipt status is partially received, as it is updated for first piece checkec-in",
					"     */",
					"    utils.validateReceiptStatus = function(poLine, receiptStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + receiptStatus + \" receipt status\", function() {",
					"            pm.expect(poLine.receiptStatus, \"Receipt status should be \" + receiptStatus).to.equal(receiptStatus);",
					"            if (\"Fully Received\" === receiptStatus || (poLine.checkinItems === true && \"Partially Received\" === receiptStatus)) {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be set\").to.not.be.empty;",
					"            } else {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be empty\").to.not.exist;",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's payment status updated to expected",
					"     */",
					"    utils.validatePaymentStatus = function(poLine, paymentStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + paymentStatus + \" payment status\", function() {",
					"            pm.expect(poLine.paymentStatus, \"Payment status should be \" + paymentStatus).to.equal(paymentStatus);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that items received in the inventory (MODORDERS-103)",
					"     */",
					"    utils.validateInventoryItemsReceived = function(poLine, expectedQuantity, itemStatus) {",
					"        let expectedCount = typeof expectedQuantity === \"undefined\" ? utils.calculateExpectedItemsQuantity(poLine) : expectedQuantity;",
					"        let status = typeof itemStatus === \"undefined\" ? \"Received\" : itemStatus;",
					"        utils.sendGetRequest(\"/item-storage/items?limit=100&query=status.name==\" + status + \" and purchaseOrderLineIdentifier==\" + poLine.id, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records marked as received for PO Line with number=\" + poLine.poLineNumber, function() {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                pm.expect(body.totalRecords, \"Quantity of items received for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                body.items.forEach(function(item) {",
					"                    pm.expect(item.barcode, \"Barcode should not be empty\").to.not.be.empty;",
					"                });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that expected number of pieces received using receiving history endpoint (MODORDERS-103)",
					"     */",
					"    utils.validateReceivingHistoryNumberOfPiecesByStatus = function(poLine, expectedQuantity, receivingStatus) {",
					"        receivingStatus = typeof receivingStatus === \"undefined\" ? \"Expected\" : receivingStatus;",
					"        utils.sendGetRequest(\"/orders/receiving-history?limit=0&query=receivingStatus==\" + receivingStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"            pm.test(expectedQuantity + \" \" + receivingStatus + \" pieces for PO Line with number=\" + poLine.poLineNumber, function() {",
					"                pm.expect(res.json().totalRecords).to.equal(expectedQuantity);",
					"            });",
					"        });",
					"    };",
					"    ",
					"    utils.verifyItemsReceivedIntoAppropriateHolding = function(line, receivingResult) {",
					"     for (i = 0; i < receivingResult.receivingItemResults.length; i++) {",
					"        utils.sendGetRequest(\"/orders-storage/pieces/\" + receivingResult.receivingItemResults[i].pieceId, (err, piece) => {",
					"            //check if piece has changed location",
					"            if (piece.json().locationId === pm.environment.get(\"newLocationId\")) {",
					"                utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + line.instanceId + \" and permanentLocationId==\" + piece.json().locationId, (err, holding) => {",
					"                    pm.test(\"created holding for location \" +  piece.json().locationId , function() {",
					"                        pm.expect(holding.json().holdingsRecords.length).to.be.above(0);",
					"                    });",
					"                    ",
					"                    if(utils.isItemsUpdateRequired(line)){",
					"                        utils.sendGetRequest(\"/item-storage/items?limit=1&query=holdingsRecordId==\" + holding.json().holdingsRecords[0].id + \" and id==\" + piece.json().itemId, (err, items) => {",
					"                            pm.test(\"item \" + items.json().items[0].id + \" received into holding \" + holding.json().holdingsRecords[0].id , function() {",
					"                                pm.expect(items.json().items.length).to.be.above(0);",
					"                            });",
					"                    });                    ",
					"                    }",
					"                });",
					"            }",
					"        });",
					"      }",
					"    };",
					"",
					"",
					"    utils.validateLocationQuantity = function(location) {",
					"        let physicalQuantity = location.hasOwnProperty(\"quantityPhysical\") ? location.quantityPhysical : 0;",
					"        let electronicQuantity = location.hasOwnProperty(\"quantityElectronic\") ? location.quantityElectronic : 0;",
					"        pm.expect(location.quantity).to.equal(physicalQuantity + electronicQuantity);",
					"    };",
					"",
					"    utils.inventoryUpdateNotRequired = function(compPOL) {",
					"        // in case of \"Other\" order format check Physical createInventory value only",
					"        if (compPOL.orderFormat === \"Other\") {",
					"            return compPOL.physical == null || compPOL.physical.createInventory === \"None\";",
					"        }",
					"        let physicalUpdateNotRequired = (compPOL.physical == null || compPOL.physical.createInventory === \"None\");",
					"        let eresourceUpdateNotRequired = (compPOL.eresource == null || compPOL.eresource.createInventory === \"None\");",
					"",
					"        return physicalUpdateNotRequired && eresourceUpdateNotRequired;",
					"    };",
					"",
					"    utils.isHoldingsUpdateRequired = function(compPOL) {",
					"        let updatesRequiredForEresource = false;",
					"        let updateRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            updatesRequiredForEresource = (compPOL.eresource.createInventory === \"Instance, Holding\" || compPOL.eresource.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        if (compPOL.physical != null) {",
					"            updateRequiredForPhysical = (compPOL.physical.createInventory === \"Instance, Holding\" || compPOL.physical.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        return updatesRequiredForEresource || updateRequiredForPhysical;",
					"    };",
					"",
					"    utils.isItemsUpdateRequired = function(compPOL) {",
					"        let itemsRequiredForEresource = false;",
					"        let itemsRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            itemsRequiredForEresource = compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        if (compPOL.physical != null) {",
					"            itemsRequiredForPhysical = compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        return itemsRequiredForEresource || itemsRequiredForPhysical;",
					"    };",
					"",
					"",
					"    /**",
					"     * Prepare receiving request body for all PO Lines of an order",
					"     * The function sets following variable:",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive one PO Line of the desired order format",
					"     * @param quantityToReceive number of pieces to receive. In case if not specified, all pieces will be received",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForOrder = function(orderId, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"Received\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            pm.test(\"Preparing receiving request for entire order with id=\" + orderId, function() {",
					"                pm.expect(res).to.have.property('code', 200);",
					"            });",
					"",
					"            if (typeof quantityToReceive === \"undefined\") {",
					"                quantityToReceive = 1000;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and purchaseOrderId=\" + orderId, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForOrder = function(orderId, quantity) {",
					"        utils.prepareReceivingRequestForOrder(orderId, quantity, \"On order\");",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForPoLineOfFormat = function(orderId, orderFormat, quantity) {",
					"        utils.prepareReceivingRequestForPoLineOfFormat(orderId, orderFormat, quantity, \"On order\");",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body for PO Line of expected order format",
					"     * The function sets 2 variables:",
					"     * - `receivingPoLineId` the PO Line id receiving request is going to be sent",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive/revert pieces of the PO Line of the desired order format",
					"     * @param orderFormat the desired order format of the PO Line",
					"     * @param quantityToReceive number of pieces to receive/revert. In case if not specified, all pieces will be received/reverted",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForPoLineOfFormat = function(orderId, orderFormat, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"Received\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            let poLine;",
					"            pm.test(\"One PO Line with \" + orderFormat + \" order format expected\", function() {",
					"                pm.expect(res).to.have.property('code', 200);",
					"                let lines = res.json().compositePoLines.filter(line => line.orderFormat === orderFormat);",
					"                pm.expect(lines.length).to.equal(1);",
					"                poLine = lines[0];",
					"            });",
					"",
					"            pm.variables.set(\"receivingPoLineId\", poLine.id);",
					"            let piecesQuantity = utils.calculateExpectedPiecesQuantity(poLine);",
					"            if (typeof quantityToReceive === \"undefined\" || quantityToReceive > piecesQuantity) {",
					"                quantityToReceive = piecesQuantity;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body based on receiving history array (MODORDERS-103)",
					"     */",
					"    utils.prepareReceivingRequest = function(receivingHistory, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"Received\";",
					"        }",
					"        let isRevertCase = itemStatus === \"On order\";",
					"",
					"        let totalQty = receivingHistory.length;",
					"        let piecesGroupedByPol = new Map();",
					"        for (let i = 0; i < totalQty; i++) {",
					"            let record = receivingHistory[i];",
					"            if (!piecesGroupedByPol.has(record.poLineId)) {",
					"                piecesGroupedByPol.set(record.poLineId, []);",
					"            }",
					"            piecesGroupedByPol.get(record.poLineId).push(record.id);",
					"        }",
					"",
					"        let receivingRq = globals.testData.receiving.bodyTemplate;",
					"        let toBeReceivedTemplate = receivingRq.toBeReceived.pop();",
					"        let receivedItemTemplate = toBeReceivedTemplate.receivedItems.pop();",
					"        receivedItemTemplate.itemStatus = itemStatus;",
					"",
					"        let barcode;",
					"        if (isRevertCase) {",
					"            delete receivedItemTemplate.barcode;",
					"            delete receivedItemTemplate.comment;",
					"            delete receivedItemTemplate.caption;",
					"            delete receivedItemTemplate.locationId;",
					"        } else {",
					"            barcode = parseInt(pm.environment.get(\"receivingItemBarcode\") ? pm.environment.get(\"receivingItemBarcode\") : receivedItemTemplate.barcode);",
					"        }",
					"",
					"        let total = 0;",
					"        for (var [polId, pieceIds] of piecesGroupedByPol) {",
					"            let toBeReceived = utils.copyJsonObj(toBeReceivedTemplate);",
					"            toBeReceived.poLineId = polId;",
					"            toBeReceived.received = pieceIds.length;",
					"            for (let i = 0; i < pieceIds.length; i++) {",
					"                let receivedItem = utils.copyJsonObj(receivedItemTemplate);",
					"                receivedItem.pieceId = pieceIds[i];",
					"                //set new location ids for the half of the pieces",
					"                if (i%2 == 0){",
					"                    receivedItem.locationId = pm.environment.get(\"newLocationId\");    ",
					"                }",
					"                ",
					"                if (!isRevertCase) {",
					"                    // Inventory requires unique barcodes",
					"                    receivedItem.barcode = ++barcode;",
					"                }",
					"                toBeReceived.receivedItems.push(receivedItem);",
					"                total++;",
					"            }",
					"            receivingRq.toBeReceived.push(toBeReceived);",
					"        }",
					"        receivingRq.totalRecords = total;",
					"",
					"        if (!isRevertCase) {",
					"            pm.environment.set(\"receivingItemBarcode\", barcode);",
					"        }",
					"        return receivingRq;",
					"    };",
					"",
					"    /**",
					"     * Verify receiving response body",
					"     */",
					"    utils.verifyReceivingResponse = function(jsonRs, expectedSucceededQuantity, expectedFailedQuantity) {",
					"        pm.expect(jsonRs.totalRecords).to.be.above(0);",
					"        let processedSuccessfully = 0;",
					"        let processedWithError = 0;",
					"        jsonRs.receivingResults.forEach(result => {",
					"            processedSuccessfully += result.processedSuccessfully;",
					"            processedWithError += result.processedWithError;",
					"            let succeeded = 0;",
					"            let failed = 0;",
					"            result.receivingItemResults.forEach(receivingItemResult => {",
					"                pm.expect(receivingItemResult.pieceId).to.exist;",
					"                pm.expect(receivingItemResult.processingStatus).to.exist;",
					"                receivingItemResult.processingStatus.type === \"success\" ? succeeded++ : failed++;",
					"            });",
					"            pm.expect(succeeded).to.equal(result.processedSuccessfully);",
					"            pm.expect(failed).to.equal(result.processedWithError);",
					"        });",
					"        pm.expect(processedWithError).to.equal(expectedFailedQuantity);",
					"        pm.expect(processedSuccessfully).to.equal(expectedSucceededQuantity);",
					"        pm.expect(processedWithError + processedSuccessfully).to.equal(jsonRs.totalRecords);",
					"    };",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-178",
					"     */",
					"    utils.calculateExpectedItemsQuantity = function(poLine) {",
					"        // MODORDERS-159: If receipt status is \"Receipt not Required\", no items are created",
					"        if (poLine.receiptStatus === \"Receipt Not Required\") {",
					"            return 0;",
					"        }",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                let quantity = utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"                quantity += utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"                return quantity;",
					"            case \"Electronic Resource\":",
					"                return utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"            case \"Physical Resource\":",
					"            case \"Other\":",
					"                return utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-100, MODORDERS-194",
					"     */",
					"    utils.calculateExpectedPiecesQuantity = function(poLine, pieceFormat) {",
					"        if (poLine.receiptStatus === \"Receipt Not Required\" || poLine.checkinItems) {",
					"            return 0;",
					"        }",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                if (typeof pieceFormat === \"undefined\") {",
					"                    return poLine.cost.quantityPhysical + poLine.cost.quantityElectronic;",
					"                } else if (pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else if (pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Physical Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Other\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Other\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Electronic Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of physical resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getPhysicalItemsQuantity = function(poLine) {",
					"        let total = 0;",
					"        let locations = poLine.locations;",
					"        if (locations) {",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityPhysical;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of electronic resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getElectronicItemsQuantity = function(poLine) {",
					"        let total = 0;",
					"        if (poLine.eresource && poLine.eresource.createInventory && poLine.locations) {",
					"            let locations = poLine.locations;",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityElectronic;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.verifyOrderCalculatedInfo = function(order, expectedTotalPrice) {",
					"        pm.test(\"Verify PO has calculated data: MODORDERS-181 and MODORDERS-193\", function() {",
					"            pm.expect(order.totalItems).to.exist;",
					"            pm.expect(order.totalItems).to.equal(utils.getTotalResourcesQuantity(order));",
					"            if (typeof expectedTotalPrice === \"undefined\") {",
					"                pm.expect(order.totalEstimatedPrice).to.be.above(0);",
					"            } else {",
					"                pm.expect(order.totalEstimatedPrice).to.equal(expectedTotalPrice);",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.getTotalResourcesQuantity = function(order) {",
					"        let total = 0;",
					"        order.compositePoLines.forEach(poLine => {",
					"            let cost = poLine.cost;",
					"            if (cost) {",
					"                total += (cost.quantityElectronic ? cost.quantityElectronic : 0);",
					"                total += (cost.quantityPhysical ? cost.quantityPhysical : 0)",
					"            }",
					"        });",
					"        return total;",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForEresource = function(compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.eresource != null && compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForPhysical = function(compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.physical != null && compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO line sub-object elements",
					"     */",
					"    utils.validatePoLineSubObjetcsPresence = function(poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote expected\").to.exist;",
					"        pm.expect(poLine.claims, \"claims expected\").to.exist;",
					"        pm.expect(poLine.contributors, \"contributors expected\").to.exist;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.cost.poLineEstimatedPrice, \"cost.poLineEstimatedPrice expected to be above 0\").to.be.above(0);",
					"        pm.expect(poLine.description, \"description expected\").to.exist;",
					"        pm.expect(poLine.donor, \"donor expected\").to.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution expected\").to.exist;",
					"        pm.expect(poLine.locations, \"locations expected\").to.exist;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus expected\").to.exist;",
					"        pm.expect(poLine.physical, \"physical expected\").to.exist;",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription expected\").to.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate expected\").to.exist;",
					"        pm.expect(poLine.publisher, \"publisher expected\").to.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus expected\").to.exist;",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes expected\").to.exist;",
					"        pm.expect(poLine.requester, \"requester expected\").to.exist;",
					"        pm.expect(poLine.rush, \"rush expected\").to.exist;",
					"        pm.expect(poLine.selector, \"selector expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.tags, \"tags expected\").to.exist;",
					"        pm.expect(poLine.title, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail expected\").to.exist;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line is empty except line and order ids",
					"     */",
					"    utils.validatePoLineWithMinimalContent = function(poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.purchaseOrderId, \"PO id expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction not expected\").to.not.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote not expected\").to.not.exist;",
					"        pm.expect(poLine.claims, \"claims should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.contributors, \"contributors should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.description, \"description not expected\").to.not.exist;",
					"        pm.expect(poLine.donor, \"donor not expected\").to.not.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.locations, \"locations should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus is Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription not expected\").to.not.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber is expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate not expected\").to.not.exist;",
					"        pm.expect(poLine.publisher, \"publisher not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptDate, \"receiptDate not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus must be Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.requester, \"requester not expected\").to.not.exist;",
					"        pm.expect(poLine.selector, \"selector not expected\").to.not.exist;",
					"        pm.expect(poLine.tags, \"tags should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.title, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Updates each PO Line's payment status with provided one.",
					"     * If status is not provided, \"Fully Paid\" is used for even and \"Payment Not Required\" for odd ones.",
					"     */",
					"    utils.updatePoLinesPaymentStatus = function(order, status) {",
					"        // Update only payment status",
					"        let lines = order.compositePoLines;",
					"        for (let i = 0; i < lines.length; i++) {",
					"            let newStatus = status;",
					"            if (!newStatus) {",
					"                newStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
					"            }",
					"            // Send update line request with delay",
					"            setTimeout(() => utils.updatePoLinePaymentStatus(lines[i], newStatus), 500 * i);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Updates PO Line's payment status with provided one and sends PUT request.",
					"     */",
					"    utils.updatePoLinePaymentStatus = function(poLine, status) {",
					"        // Update only payment status",
					"        poLine.paymentStatus = status;",
					"        utils.sendPutRequest(\"/orders/order-lines/\" + poLine.id, poLine, (err, response) => {",
					"            pm.test(\"PO Line updated with number=\" + poLine.poLineNumber, () => pm.expect(response.code).to.eql(204));",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Adds PO line id to `completePolineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberPoLineId = function(poLine) {",
					"        if (poLine && poLine.id) {",
					"            let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
					"            completePolineIds.push(poLine.id);",
					"            pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completePolineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastPoLineId = function(withRemoval) {",
					"        let completePolineIds = globals.completePolineIds ? JSON.parse(globals.completePolineIds) : [];",
					"        if (completePolineIds.length > 0) {",
					"            let lineId = completePolineIds.pop();",
					"            if (withRemoval) {",
					"                pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line content against schemas",
					"     */",
					"    utils.validatePoLineAgainstSchema = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_po_line.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO content against schemas",
					"     */",
					"    utils.validateOrderAgainstSchema = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_purchase_order.json\")));",
					"    };",
					"    ",
					"    /**",
					"     * Validates the Unit Assignment against schemas",
					"     */",
					"    utils.validateAssignmentAgainstSchema = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"acquisitions_unit_assignment.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO Lines number",
					"     */",
					"    utils.validatePoLinesNumber = function(order) {",
					"        let poLineSuffix = \"(-[0-9]{1,3})\";",
					"        let regex = new RegExp(order.poNumber + poLineSuffix);",
					"        for (let i = 0; i < order.compositePoLines.length; i++) {",
					"            let poLineNumber = order.compositePoLines[i].poLineNumber;",
					"            let match = regex.exec(poLineNumber);",
					"            pm.expect(match).not.equal(null);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validate order workflowStatus",
					"     */",
					"    utils.validateWorkflowStatus = function(order) {",
					"        pm.test(\"Verify Order updated with expected workflow status\", function() {",
					"            if (order.workflowStatus != \"Pending\") {",
					"                if (utils.isCompletedAllPoLines(order.compositePoLines)) {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Closed\");",
					"                } else {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Open\");",
					"                }",
					"            }",
					"        });",
					"    }",
					"",
					"    utils.isCompletedAllPoLines = function(poLines) {",
					"        for (let i = 0; i < poLines.length; i++) {",
					"            let paymentStatus = poLines[i].paymentStatus;",
					"            let receiptStatus = poLines[i].receiptStatus;",
					"            if (!(paymentStatus === \"Payment Not Required\" || paymentStatus === \"Fully Paid\") || !(receiptStatus === \"Fully Received\" || receiptStatus === \"Receipt Not Required\")) {",
					"                return false;",
					"            };",
					"        }",
					"        return true;",
					"    }",
					"",
					"    /**",
					"     * Deletes Instance from Inventory by id linked to PO line",
					"     */",
					"    utils.deleteInventoryInstance = function(instanceId) {",
					"        return utils.processDeleteRequest(\"/instance-storage/instances/\" + instanceId)",
					"            .then(code => {",
					"                return new Promise((resolve) => {",
					"                    resolve(code);",
					"                    utils.validateResultOfDeleteRequest(code, \"Instance should be successfully deleted. Instance id=\" + instanceId)",
					"                });",
					"            });",
					"    };",
					"",
					"    /**",
					"     * Deletes Holdings from Inventory",
					"     */",
					"    utils.deleteHoldingsRecords = function(lineId, holdingsIds) {",
					"        let promises = [];",
					"        holdingsIds.forEach(holdingId => {",
					"            promises.push(",
					"                utils.searchForItemsByHoldingId(holdingId)",
					"                    .then(itemsQty => {",
					"                        if (itemsQty === 0) {",
					"                            return utils.processDeleteRequest(\"/holdings-storage/holdings/\" + holdingId);",
					"                        } else {",
					"                            pm.test(itemsQty + \" item record(s) referenced by holding with id=\" + holdingId + \". The holding deletion is skipped!\", function() {});",
					"                            return -1;",
					"                        }",
					"                    })",
					"            );",
					"        });",
					"",
					"        return new Promise((resolve) => {",
					"            Promise.all(promises)",
					"                .then(results => {",
					"                    resolve(results);",
					"",
					"                    let skippedQty = results.filter(code => code === -1).length;",
					"                    let deletedQty = results.filter(code => code === 204).length;",
					"                    pm.test(holdingsIds.length - skippedQty + \" holding(s) without items should be deleted for PO Line with id=\" + lineId, () => {",
					"                        pm.expect(skippedQty + deletedQty).to.eql(holdingsIds.length);",
					"                    });",
					"                });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Searches for item records in Inventory by holding id.",
					"     * The function returns Promise which holds quantity of found items",
					"     */",
					"    utils.searchForItemsByHoldingId = function(holdingsId) {",
					"        return new Promise((resolve) => {",
					"            utils.sendGetRequest(\"/item-storage/items?limit=0&query=holdingsRecordId==\" + holdingsId, (err, response) => {",
					"                if (response.code !== 200) {",
					"                    resolve(-1);",
					"                }",
					"                pm.expect(response.code, \"Inventory cannot return items\").to.eql(200);",
					"                resolve(response.json().totalRecords);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Searches for item records in Inventory by PO Line id.",
					"     * The function returns Promise which holds found items.",
					"     */",
					"    utils.getItemsByPoLine = function(line) {",
					"        return new Promise((resolve) => {",
					"            let expectedCount;",
					"            //we donot know the checkin count before, so use a default",
					"            if (line.checkinItems === true) {",
					"                expectedCount = 100;",
					"            } else {",
					"                expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"            }",
					"            utils.getItemsByPoLineId(line.id, expectedCount, (err, response) => {",
					"                pm.test(\"Search for item records by PO Line id=\" + line.id, function() {",
					"                    if (response.code !== 200) {",
					"                        resolve([]);",
					"                    }",
					"                    pm.expect(response.code, \"Inventory cannot return items\").to.eql(200);",
					"",
					"                    resolve(response.json().items);",
					"",
					"                    // Test expected items count as the last step to make sure delete requests are sent",
					"                    // in case of checkin we do not know the item count",
					"                    if (!line.checkinItems === true) {",
					"                        let foundItems = response.json().totalRecords;",
					"                        pm.expect(foundItems, \"Expected items count does not match to found\").to.equal(expectedCount);",
					"                    }",
					"                });",
					"            });",
					"        });",
					"    };",
					"    /**",
					"     * check-in methods",
					"     */",
					"     utils.postRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     *This method creates a piece and also calls the prepares the check-in body.",
					"     * If itemId is not provided the check-in flow just updates the piece record",
					"     */",
					"    utils.createPieceAndCheckInBody = function(compPoLine, itemId) {",
					"        let pieceTemplate = globals.testData.piece.bodyTemplate;",
					"        // set new location for checkin piece",
					"        pieceTemplate.locationId = compPoLine.locations[0].locationId;",
					"        pieceTemplate.poLineId = compPoLine.id;",
					"        if (compPoLine.orderFormat === \"Electronic Resource\") {",
					"            pieceTemplate.format = \"Electronic\";",
					"        } else {",
					"            pieceTemplate.format = \"Physical\";",
					"        }",
					"        if (typeof itemId === \"undefined\") {",
					"            delete pieceTemplate.itemId;",
					"        } else {",
					"            pieceTemplate.itemId = itemId;",
					"        }",
					"        pm.variables.set(\"checkinPoLineId\", compPoLine.id);",
					"        utils.postRequest(\"/orders/pieces\", pieceTemplate, (err, res) => {",
					"            pm.test(\"creating piece for check-in \", function() {",
					"                pm.expect(res).to.have.property('code', 201);",
					"            });",
					"            utils.prepareCheckinBody(compPoLine, res.json().id);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * This method is used for both checking in a piece and also reverting it,",
					"     * If the checkinstatus is not provided by default it is set to check-in item",
					"     * ",
					"     */",
					"    utils.prepareCheckinBody = function(compPoLine, pieceId, checkinStatus) {",
					"        let checkinRq = globals.testData.checkin.bodyTemplate;",
					"        let toBeCheckedInTemplate = checkinRq.toBeCheckedIn.pop();",
					"        let checkinPiecesTemplate = toBeCheckedInTemplate.checkInPieces.pop();",
					"        toBeCheckedInTemplate.poLineId = compPoLine.id;",
					"        toBeCheckedInTemplate.checkedIn = 1;",
					"        checkinPiecesTemplate.id = pieceId;",
					"        checkinPiecesTemplate.locationId = pm.environment.get(\"newLocationId\");",
					"         if (typeof checkinStatus === \"undefined\") {",
					"            checkinPiecesTemplate.itemStatus = \"In Process\";",
					"        } else {",
					"            checkinPiecesTemplate.itemStatus = checkinStatus;",
					"        }",
					"        toBeCheckedInTemplate.checkInPieces.push(checkinPiecesTemplate);",
					"        checkinRq.toBeCheckedIn.push(toBeCheckedInTemplate);",
					"        console.log(JSON.stringify(checkinRq));",
					"        pm.variables.set(\"checkinBody\", JSON.stringify(checkinRq));",
					"    };",
					"",
					"    /**",
					"     * Get the holding where the item needs to be created , create an item",
					"     * and then use the item id to create a piece",
					"     * ",
					"     */",
					"    utils.prepareCheckinBodyWithItems = function(compPoLine) {",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + compPoLine.instanceId + \" and permanentLocationId==\" + compPoLine.locations[0].locationId, (err, res) => {",
					"            utils.createItem(compPoLine.id, res.json().holdingsRecords[0].id, (err, res) => {",
					"                pm.test(\"creating item for check-in\", function() {",
					"                    pm.expect(res).to.have.property('code', 201);",
					"                });",
					"                utils.createPieceAndCheckInBody(compPoLine, res.json().id);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.createItem = function(poLineId, holdingsRecordId, handler) {",
					"        let itemTemplate = globals.testData.item.bodyTemplate;",
					"        itemTemplate.holdingsRecordId = holdingsRecordId;",
					"        itemTemplate.purchaseOrderLineIdentifier = poLineId;",
					"        utils.postRequest(\"/item-storage/items\", itemTemplate, handler);",
					"    };",
					"",
					"    /**",
					"     * Deletes Item records from Inventory. The function returns Promise which holds holdings ids once completed",
					"     */",
					"    utils.deleteInventoryItemRecords = function(line) {",
					"        return new Promise((resolve) => {",
					"            // Get",
					"            utils.getItemsByPoLine(line)",
					"                .then(items => {",
					"                    let holdingsIds = [];",
					"                    if (!utils.isItemsUpdateRequired(line)) {",
					"                        pm.test(\"No item(s) expected to exist for PO line with id=\" + line.id, () => {",
					"                            pm.expect(items.length).to.eql(0);",
					"                        });",
					"                    }",
					"",
					"                    //for checkin there can be a case where the items are not created but holdings are created",
					"                    if (items.length === 0) {",
					"                        utils.sendGetRequest(\"/holdings-storage/holdings?limit=100&query=instanceId==\" + line.instanceId, (err, res) => {",
					"                            let body = res.json();",
					"                            body.holdingsRecords.forEach(hld => {",
					"                                holdingsIds.push(hld.id);",
					"                            });",
					"                            resolve(holdingsIds);",
					"                        });",
					"                        return;",
					"                    }",
					"",
					"",
					"                    let promises = [];",
					"                    items.forEach(item => {",
					"                        // Using array because Set is not working for some reason",
					"                        if (!holdingsIds.includes(item.holdingsRecordId)) {",
					"                            holdingsIds.push(item.holdingsRecordId);",
					"                        }",
					"                        promises.push(utils.processDeleteRequest(\"/item-storage/items/\" + item.id));",
					"                    });",
					"",
					"                    //to cover a scenario where items do not exist for a holding but it is created while check-in order",
					"                    promises.push(",
					"                        new Promise((resolve) => {",
					"                            utils.sendGetRequest(\"/holdings-storage/holdings?limit=100&query=instanceId==\" + line.instanceId, (err, res) => {",
					"                                let body = res.json();",
					"                                body.holdingsRecords.forEach(hld => {",
					"                                    if (!holdingsIds.includes(hld.id)) {",
					"                                        holdingsIds.push(hld.id);",
					"                                    }",
					"                                });",
					"                                resolve(res.code);",
					"                            });",
					"                        }));",
					"",
					"                    // Wait for items to be deleted and then return holdings ids as a result of the promise defined in the top",
					"                    Promise.all(promises)",
					"                        // The promisses will be always resolved so not handling reject case",
					"                        .then(itemDelResults => {",
					"                            // Returning the holding ids regardless of the result of the item deletion jut to try to delete holdings in any case",
					"",
					"                            resolve(holdingsIds);",
					"",
					"                            let deletedQty = itemDelResults.filter(code => code === 204).length;",
					"                            pm.test(items.length + \" item(s) should be deleted for PO Line with id=\" + line.id, () => {",
					"                                pm.expect(deletedQty).to.eql(items.length);",
					"                            });",
					"                        });",
					"",
					"                    // Test expected items count as the last step to make sure that delete requests are sent",
					"                    let foundItems = response.json().totalRecords;",
					"                    let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"                    pm.expect(foundItems, \"Expected items count does not match to found\").to.equal(expectedCount);",
					"                });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Deletes Item records from Inventor by holding id",
					"     */",
					"    utils.deleteInventoryItemRecordsByHoldingId = function(holdingId) {",
					"        return new Promise((resolve) => {",
					"            // Get",
					"            utils.getItemsByHoldingId(holdingId, (err, res) => {",
					"                let items = res.json().items;",
					"                let promises = [];",
					"                items.forEach(item => {",
					"                    promises.push(utils.processDeleteRequest(\"/item-storage/items/\" + item.id));",
					"                });",
					"",
					"                Promise.all(promises)",
					"                    // The promisses will be always resolved so not handling reject case",
					"                    .then(itemDelResults => {",
					"                        // Returning the holding ids regardless of the result of the item deletion jut to try to delete holdings in any case",
					"",
					"                        resolve(itemDelResults);",
					"",
					"                        let deletedQty = itemDelResults.filter(code => code === 204).length;",
					"                        pm.test(items.length + \" item(s) should be deleted for PO Line with id=\" + line.id, () => {",
					"                            pm.expect(deletedQty).to.eql(items.length);",
					"                        });",
					"                    });",
					"            })",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Delete pieces related to PoLine in order",
					"     */",
					"    utils.deletePieceRecords = function(line) {",
					"        return new Promise((resolve) => {",
					"            utils.sendGetRequest(\"/orders-storage/pieces?limit=1000&query=poLineId==\" + line.id, (err, res) => {",
					"                let promises = [];",
					"                res.json().pieces.forEach(piece => {",
					"                    promises.push(utils.processDeleteRequest(\"/orders-storage/pieces/\" + piece.id));",
					"                });",
					"                Promise.all(promises)",
					"                    .then(deletionCodes => {",
					"                        resolve(deletionCodes);",
					"                    })",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on Piece Records deletion:\", err);",
					"                        resolve([]);",
					"                    });",
					"            });",
					"        });",
					"    };",
					"    ",
					"    utils.verifyAllPieceRecordsDeleted = function() {",
					"        let lineIds = pm.globals.get(\"deletedLineIds\") || [];",
					"        console.log(\"deletedLineIds = \" + lineIds);",
					"        lineIds.forEach(lineId => {",
					"            let path = \"/orders-storage/pieces?limit=0&query=poLineId==\" + lineId;",
					"            utils.sendGetRequest(path, (err, response) => {",
					"                let pieces = response.json().totalRecords;",
					"                pm.test(\"No pieces found for poline \" + lineId, ()=> pm.expect(pieces).to.eql(0));",
					"            });",
					"        });",
					"        pm.globals.unset(\"deletedLineIds\");",
					"    };",
					"",
					"    /**",
					"     * Cascasde Deletes Inventory Records and Pieces created for PO lines",
					"     * Starting with Delete items-> holdings -> Instances",
					"     *",
					"     * Note: The timeout is required when Promise is used. See https://community.getpostman.com/t/using-native-javascript-promises-in-postman/636",
					"     */",
					"    utils.deleteOrderRelatedRecords = function(orderId, verifyRecordsDeletion) {",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            let order = res.json();",
					"            if (typeof order.id === \"undefined\") {",
					"                pm.test(\"Inventory records might be not fully cleaned up. Order cannot be found by id=\" + orderId, () => pm.expect(order.id).to.exist);",
					"                return;",
					"            }",
					"",
					"            const timerId = setTimeout(() => {}, 60000);",
					"            let deletedLineIds = [];",
					"",
					"            let promises = [];",
					"            order.compositePoLines.forEach(line => {",
					"                deletedLineIds.push(line.id);",
					"                promises.push(utils.deleteEncumbranceRecords(line));",
					"                // The function returns Promise",
					"                promises.push(",
					"                    utils.deleteInventoryItemRecords(line)",
					"                    .then(holdingsIds => {",
					"                        return holdingsIds.length > 0 ? utils.deleteHoldingsRecords(line.id, holdingsIds) : [];",
					"                    })",
					"                    .then(holdingsDelResult => {",
					"                        // delete instance if there is an instance id and there is no holdings linked to any item",
					"                        if (line.instanceId) {",
					"                            // skip if no instance was created",
					"                            if (utils.inventoryUpdateNotRequired(line)) {",
					"                                return -1;",
					"                            }",
					"                            // see utils.deleteHoldingsRecords()",
					"                            let holdingsQty = holdingsDelResult.filter(code => code === -1).length;",
					"                            if (holdingsQty === 0) {",
					"                                return utils.deleteInventoryInstance(line.instanceId);",
					"                            } else {",
					"                                pm.test(holdingsQty + \" holdings record(s) referenced by instance id=\" + line.instanceId + \". The instance deletion is skipped!\", () => {});",
					"                            }",
					"                        }",
					"                        return -1;",
					"                    })",
					"                );",
					"            });",
					"",
					"            Promise.all(promises)",
					"                .then(success => {",
					"                    pm.globals.set(\"deletedLineIds\", deletedLineIds);",
					"",
					"                    return verifyRecordsDeletion ? utils.verifyInventoryRecordsDeleted(order) : success;",
					"                })",
					"                .then(result => clearTimeout(timerId))",
					"                .catch(err => {",
					"                    console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                    clearTimeout(timerId);",
					"                });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Cascasde Deletes Inventory Records by instanceId",
					"     * Starting with Delete items-> holdings -> Instances",
					"     *",
					"     * Note: The timeout is required when Promise is used. See https://community.getpostman.com/t/using-native-javascript-promises-in-postman/636",
					"     */",
					"    utils.deleteInventoryRecordsByInstanceId = function(instanceId) {",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?query=instanceId==\" + instanceId, (err, res) => {",
					"            let holdings = res.json().holdingsRecords;",
					"",
					"            const timerId = setTimeout(() => {}, 60000);",
					"",
					"            let promises = [];",
					"            holdings.forEach(holding => {",
					"                let holdingId = holding.id;",
					"                // The function returns Promise",
					"                promises.push(",
					"                    utils.deleteInventoryItemRecordsByHoldingId(holdingId)",
					"                    .then(itemsDelResult => {",
					"                        return utils.processDeleteRequest(\"/holdings-storage/holdings/\" + holdingId);",
					"                    })",
					"",
					"                );",
					"            });",
					"",
					"            Promise.all(promises)",
					"                .then(success => {",
					"                    return utils.deleteInventoryInstance(instanceId);",
					"                })",
					"                .then(result => clearTimeout(timerId))",
					"                .catch(err => {",
					"                    console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                    clearTimeout(timerId);",
					"                });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if instance, holding(s) and item(s) have been removed for the PO Line",
					"     */",
					"    utils.verifyInventoryRecordsDeleted = function(order) {",
					"        let promises = [];",
					"        order.compositePoLines.forEach(line => {",
					"            promises.push(utils.verifyInventoryInstanceDeleted(line));",
					"            promises.push(utils.verifyInventoryHoldingsDeleted(line));",
					"            promises.push(utils.verifyInventoryItemsDeleted(line));",
					"        });",
					"        return Promise.all(promises);",
					"    };",
					"",
					"    /**",
					"     * Verifies if instance associated with the PO Line has been deleted",
					"     */",
					"    utils.verifyInventoryInstanceDeleted = function(line) {",
					"        return new Promise((resolve) => {",
					"            if (line.instanceId) {",
					"                utils.sendGetRequest(\"/instance-storage/instances/\" + line.instanceId, (err, res) => {",
					"                    resolve();",
					"                    pm.test(\"No Instance Record found for PO Line with id=\" + line.id + \" and instance id=\" + line.instanceId, function() {",
					"                        pm.expect(res.code).to.eql(404);",
					"                    });",
					"                });",
					"            } else {",
					"                resolve();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if holdings associated with the PO Line have been deleted",
					"     */",
					"    utils.verifyInventoryItemsDeleted = function(line) {",
					"        return new Promise((resolve) => utils.verifyNoInventoryItemsExist(line, resolve));",
					"    };",
					"",
					"    /**",
					"     * Verifies if holdings associated with the PO Line have been deleted",
					"     */",
					"    utils.verifyInventoryHoldingsDeleted = function(line) {",
					"        return new Promise((resolve) => {",
					"            if (line.instanceId) {",
					"                utils.sendGetRequest(\"/holdings-storage/holdings?limit=0&query=instanceId==\" + line.instanceId, (err, res) => {",
					"                    resolve();",
					"                    pm.test(\"No Holding Records found for PO Line with id=\" + line.id, function() {",
					"                        pm.expect(res.code).to.eql(200);",
					"                        pm.expect(res.json().totalRecords).to.eql(0);",
					"                    });",
					"                });",
					"            } else {",
					"                resolve();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Delete encumbrances related to PoLine in order",
					"     */",
					"    utils.deleteEncumbranceRecords = function(line) {",
					"        return new Promise((resolve) => {",
					"            utils.sendGetRequest(\"/finance-storage/encumbrances?limit=1000&query=poLineId==\" + line.id, (err, res) => {",
					"                let promises = [];",
					"                res.json().encumbrances.forEach(encumbrance => {",
					"                    promises.push(utils.processDeleteRequest(\"/finance-storage/encumbrances/\" + encumbrance.id));",
					"                });",
					"                Promise.all(promises)",
					"                    .then(deletionCodes => {",
					"                        resolve(deletionCodes);",
					"                    })",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on encumbrance records deletion:\", err);",
					"                        resolve([]);",
					"                    });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => {",
					"            utils.sendDeleteRequest(path, (err, response) => {",
					"                resolve(response.code);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function() {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function(configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function(configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function(configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function(configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.configs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        utils.postRequest(\"/configurations/entries\", body, function(err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"emptyOrderId\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"completePolineIds\");",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"physElecOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsPendingOrderId\");",
					"        pm.globals.unset(\"negativeTestsOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsClosedOrderId\");",
					"        pm.globals.unset(\"negativeTestsFailedEncumbrances\");",
					"        pm.globals.unset(\"anotherCompleteOrderId\");",
					"        pm.globals.unset(\"completeOpenOrderId\");",
					"        pm.globals.unset(\"poLineForNegativeTests\");",
					"        pm.globals.unset(\"completeOrderPoNumber\");",
					"        pm.globals.unset(\"orderWithoutInventoryRecordsId\");",
					"        pm.globals.unset(\"receivingHistoryPoId\");",
					"        pm.globals.unset(\"poToCheckinItemsId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId1\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId2\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId3\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNoneId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingItemId\");",
					"        pm.globals.unset(\"automaticallyClosedOrder\");",
					"        pm.globals.unset(\"automaticallyClosedOpenOrder\");",
					"        pm.globals.unset(\"automaticallyOpenedOrder\");",
					"        pm.globals.unset(\"newEmptyPoLine\");",
					"        pm.globals.unset(\"poNumber\");",
					"        pm.globals.unset(\"loanType\");",
					"        pm.globals.unset(\"materialType\");",
					"        pm.globals.unset(\"testTenant\");",
					"        pm.globals.unset(\"enabledModules\");",
					"        pm.globals.unset(\"testTenantActiveVendorId\");",
					"        pm.globals.unset(\"pieceIdToUpdate\");",
					"        pm.globals.unset(\"pieceRecord\");",
					"",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"activeVendorId\");",
					"        pm.environment.unset(\"contributorNameTypeId\");",
					"        pm.environment.unset(\"inactiveVendorId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"instanceTypeId\");",
					"        pm.environment.unset(\"instanceStatusId\");",
					"        pm.environment.unset(\"loanTypeId\");",
					"        pm.environment.unset(\"materialTypeId\");",
					"        pm.environment.unset(\"uniqueProductId\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"assignmentId\");",
					"        ",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.deletePoNumber = function(order) {",
					"        delete order.poNumber;",
					"",
					"        return order;",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
<<<<<<< HEAD
			"id": "f77313d7-9438-48ef-b7d6-e01f90d7a644",
=======
			"id": "a97d14f9-7322-4bf8-bc7c-fe77cced2e43",
>>>>>>> 5d1952de950bb79b601e71429124a62ffbd0ea53
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
<<<<<<< HEAD
			"id": "1c7d9e40-e058-4579-802a-2b128e502fbc",
=======
			"id": "0f7be2b9-a879-4d99-93cf-66a14d5c8630",
>>>>>>> 5d1952de950bb79b601e71429124a62ffbd0ea53
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		},
		{
<<<<<<< HEAD
			"id": "4e51b9c1-ee59-4650-88b3-05652bfb856d",
=======
			"id": "ba09bd74-e165-4aa4-a0f0-0a03634670c8",
>>>>>>> 5d1952de950bb79b601e71429124a62ffbd0ea53
			"key": "inventory-identifierTypeName",
			"value": "ordersApiTestsIdentifierTypeName",
			"type": "string"
		},
		{
<<<<<<< HEAD
			"id": "289542cd-b333-43d9-9aec-e1df55222a3b",
=======
			"id": "a8e6f5f0-fc33-4116-9872-964b54968533",
>>>>>>> 5d1952de950bb79b601e71429124a62ffbd0ea53
			"key": "inventory-instanceTypeCode",
			"value": "ordersApiTestsInstanceTypeCode",
			"type": "string"
		},
		{
<<<<<<< HEAD
			"id": "a2921a6d-a651-4d6e-81bd-e96fa06a2033",
=======
			"id": "e19c7e41-cb4e-4536-8b08-7617c8a798f6",
>>>>>>> 5d1952de950bb79b601e71429124a62ffbd0ea53
			"key": "inventory-instanceStatusCode",
			"value": "ordersApiTestsInstanceStatusCode",
			"type": "string"
		},
		{
			"id": "7838f9b5-39e7-4f55-a50f-5900e3c0960e",
			"key": "inventory-loanTypeName",
			"value": "ordersApiTestsLoanTypeName",
			"type": "string"
		},
		{
			"id": "06b931bf-6e69-4346-8748-f6acaa6fbf7a",
			"key": "tenant.addresses",
			"value": "{\n  \"address\": \"sample address\",\n  \"name\": \"sample name\"\n}\n",
			"type": "string"
		},
		{
			"id": "a8a8d6e7-d908-4a73-a3f9-9fd6e06bbd11",
			"key": "finance-ledgerCode",
			"value": "ordersApiTestsLedgerCode",
			"type": "string"
		},
		{
			"id": "eba736c5-fbce-4dd0-9e3f-101afe883eac",
			"key": "finance-fundCode",
			"value": "ordersApiTestsFundCode",
			"type": "string"
		}
	]
}