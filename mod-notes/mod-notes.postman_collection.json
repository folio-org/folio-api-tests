{
	"info": {
		"_postman_id": "b479e15c-539a-48a5-ad7f-7a5c5ac9b3ab",
		"name": "mod-notes",
		"description": "Tests for the endpoints:\n/notes\n/note-types\n\nTests include:\n* /notes (CR)\n* /notes/_self (CR)\n* /notes/{id} (RUD)\n* /note-types (CR)\n* /note-types/{id} (RUD)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "schemas",
			"item": [
				{
					"name": "setup environment variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41dde41e-77c3-4f8a-a8e9-5125e58d8897",
								"exec": [
									"const moduleName = 'mod-notes';",
									"pm.test(\"GET json schemas response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET json schemas has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"GET contains mod-notes module\", function () {",
									"    pm.expect(pm.response.text()).to.include(moduleName);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"json.forEach((element) => {",
									"\tvar moduleId = element.id;",
									"\tif(moduleId.includes(moduleName)){",
									"\t\tpm.environment.set('mod-notes-id', moduleId);",
									"\t}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/_jsonSchemas",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces",
								"_jsonSchemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "get schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3e4095b-8563-4352-a40a-9bb0f9e299bc",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {pm.response.to.be.ok;});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {pm.response.to.have.jsonBody();});",
									"",
									"function checkVariableExist(name){return pm.environment.has(\"schema_\"+ name);}",
									"",
									"function setEnvironmentVariable(name, data){pm.environment.set(\"schema_\"+ name, data) }",
									"",
									"function extractName(url){ return url.substring(url.lastIndexOf(\"/\") + 1, url.lastIndexOf(\".\")); }",
									"",
									"function replaceResponseRefWithName(text){ return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"schema_\"); }",
									"",
									"function getURL(path) {return pm.variables.get(\"protocol\") + \"://\" + ",
									"        pm.variables.get(\"url\") + \":\" + ",
									"        pm.variables.get(\"okapiport\") + ",
									"        \"/_/jsonSchemas?path=\" + path;",
									"}",
									"        ",
									"function getRequest(url){",
									"  const echoGetRequest = {",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"      'X-Okapi-Module-Id' : pm.variables.get(\"mod-notes-id\"),",
									"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\")",
									"    }",
									"  }",
									"    return echoGetRequest;",
									"}        ",
									"",
									"function fetchSchema(echoGetRequest, delay){",
									"",
									"return new Promise((resolve, reject) => {",
									"     setTimeout(function(){",
									"       pm.sendRequest(echoGetRequest, (err, response) => {",
									"       if (!err) {",
									"        resolve(response.text());",
									"       }else{",
									"        reject(err, echoGetRequest);",
									"       }",
									"      });",
									"     }, delay);",
									"  });",
									"}",
									"",
									"var interval = setTimeout(() => {}, 30000);",
									"function traverse(data){",
									"     var promises = Object.entries(data).map(([key, value]) => {",
									"         ",
									"        var url = getURL(value);",
									"        var request = getRequest(url);",
									"        ",
									"        return fetchSchema(request, 200 * key)",
									"        .then(function(response) {",
									"            response = replaceResponseRefWithName(response.toString());",
									"            var name = extractName(value);",
									"            if(!checkVariableExist(name)){",
									"                setEnvironmentVariable(name, response);",
									"            }",
									"        })",
									"        .catch((err, req) => {",
									"            console.log(err);",
									"            console.log(req);",
									"        });",
									"    });",
									"    ",
									"    Promise.all(promises)",
									"        .then(() => {",
									"            clearTimeout(interval)",
									"        })",
									"        .catch((err, req) => {",
									"            console.log(err);",
									"            console.log(req);",
									"            clearTimeout(interval);",
									"        });",
									"}",
									"",
									"traverse(JSON.parse(responseBody));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{mod-notes-id}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"jsonSchemas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "setup for note-types",
			"item": [
				{
					"name": "POST create note-type for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteType-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteTypeId\", response.id);",
									"pm.environment.set(\"noteTypeName\", response.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Priority - {{noteType-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create another note-type for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteType-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteTypeIdSecond\", response.id);",
									"pm.environment.set(\"noteTypeNameSecond\", response.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TestTwo Priority - {{noteType-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba03b0ae-9658-49c5-a773-d58b839c8f75",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58bb3ef3-bbcf-484e-8ac1-43502651ac3a",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));"
						]
					}
				}
			]
		},
		{
			"name": "notes",
			"item": [
				{
					"name": "GET notes collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c67cca8f-49e2-4156-94db-08be55eebdce",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"note.json\", pm.variables.get(\"note.json\"));",
													"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"noteCollection.json\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(pm.response.json().totalRecords).to.be.at.least(pm.response.json().notes.length);",
													"    pm.expect(pm.response.json().notes.length).to.be.at.most(10); // limit default",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Returns a list of notes"
									},
									"response": []
								},
								{
									"name": "/notes?query=id=={id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"note.json\", pm.variables.get(\"note.json\"));",
													"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"noteCollection.json\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(pm.response.json().totalRecords).to.equal(1);",
													"    pm.expect(pm.response.json().notes.length).to.equal(1); // limit default",
													"    pm.expect(pm.response.json().notes[0].id).to.equal(pm.variables.get(\"id\"), \"id does not match\");",
													"    pm.expect(pm.response.json().notes[0].link).to.equal(pm.variables.get(\"link\"), \"link does not match\");",
													"    pm.expect(pm.response.json().notes[0].text).to.equal(pm.variables.get(\"text\"), \"text does not match\");",
													"    pm.expect(pm.response.json().notes[0].domain).to.equal(pm.variables.get(\"domain\"), \"domain does not match\");",
													"    pm.expect(pm.response.json().notes[0].creatorUserName).to.equal(pm.environment.get(\"username\"), \"creatorUserName does not match\");",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpNote(pm.response.json().notes[0].id, function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"       });",
													"    });",
													"",
													"   cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\"]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"type": "text/javascript",
												"exec": [
													"// Create a note",
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"domain\", \"items\");",
													"pm.variables.set(\"link\", \"/\" + pm.variables.get(\"domain\") + \"/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\")})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"note creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.variables.set(\"id\", res.json().id);",
													"        } else {",
													"            console.log(\"note creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=id=={{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{id}}"
												}
											]
										},
										"description": "Returns an existing note via a collection"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes - 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"401 test\", function() {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "29562f38-ef06-464a-82f6-81fee0b071c1",
												"type": "text/javascript",
												"exec": [
													"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test due to the auth token not being set."
									},
									"response": []
								},
								{
									"name": "/notes - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daf13e9a-8f7d-43c2-aa2f-f0e98d6aafe2",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.collection.get\");",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
													"",
													"    cleanUpUserTest();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"type": "text/javascript",
												"exec": [
													"eval(pm.variables.get(\"createUserFunction\"));",
													"",
													"createUser();",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-1 - 400 (offset less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/notes?limit=-1 - 400 (limit less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/notes?offset= - 400 (offset is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7da61625-d75f-456f-b082-2101521ac31f",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - empty offset\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": ""
												}
											]
										},
										"description": "Failure case where the offset query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?limit= - 400 (limit is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b3c5e24-9263-4f44-a63f-a7fab5df40e7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - empty limit\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": ""
												}
											]
										},
										"description": "Failure case where the limit query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-2147483649 - 400 (offset less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36347953-3a34-4cde-9b77-1d7d4e4dac6c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/notes?limit=-2147483649 - 400 (limit less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c0cb09-b11b-4368-91cf-044a9c62d36c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/notes?offset=2147483648 - 400 (offset exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6289db22-451e-473b-8452-655f62fbaeb6",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - offset exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the offset query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/notes?limit=2147483648 - 400 (limit exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "753e0caa-4c9c-422b-bf94-3d1e1b7ca9b9",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - limit exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the limit query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/notes?query=foo* - 422 (bad query CQL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5044925b-6a51-4254-b1fa-6213ea20ffff",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 test - invalid CQL in query\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=foo*",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "foo*"
												}
											]
										},
										"description": "Failure case where the \"query\" query parameter is not valid CQL."
									},
									"response": []
								},
								{
									"name": "/notes?query= - 422 (empty query)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a081674e-9cf5-4a1d-82eb-32c2264b45df",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 test - empty query\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"query\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb905b1-c769-4098-8a08-dbf039375edc",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "508c294a-9bd8-4191-b222-19d75ee89c95",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST note",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes - 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c58203-5ec6-4cab-969f-6a3d088bd3f3",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9892fde5-887e-4dec-87b2-3aae99c4742b",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"note.json\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(pm.response.json().id).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i, \"ids isn't a UUID\");",
													"    pm.expect(pm.response.json().link).to.equal(pm.variables.get(\"link\"), \"link does not match\");",
													"    pm.expect(pm.response.json().text).to.equal(pm.variables.get(\"text\"), \"text does not match\");",
													"});",
													"",
													"pm.test(\"validate Location header\", () => {",
													"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(\"/notes/\" + pm.response.json().id);",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpNote(pm.response.json().id, function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"       });",
													"    });",
													"",
													"   cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note"
									},
									"response": []
								},
								{
									"name": "/notes - 201 (ignore read only fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "489cefc9-561e-4e0a-9ea8-a535867f5859",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"id\", uuid.v4());",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"pm.variables.set(\"domain\", \"items\");",
													"pm.variables.set(\"userName\", \"test_user\");",
													"pm.variables.set(\"lastName\", \"McTest\");",
													"pm.variables.set(\"firstName\", \"Testy\");",
													"pm.variables.set(\"middleName\", \"Q.\");",
													"pm.variables.set(\"createDate\", \"2001-01-01T19:18:27.437+0000\");",
													"pm.variables.set(\"createUser\", uuid.v4());",
													"pm.variables.set(\"updateDate\", \"2001-02-02T18:17:21.427+0000\");",
													"pm.variables.set(\"updateUser\", uuid.v4());",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "363e43fd-a2ba-467d-8b4d-4670122c4043",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"note.json\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"id\"), \"id does not match\");",
													"    pm.expect(pm.response.json().link).to.equal(pm.variables.get(\"link\"), \"link does not match\");",
													"    pm.expect(pm.response.json().text).to.equal(pm.variables.get(\"text\"), \"text does not match\");",
													"    pm.expect(pm.response.json().domain).to.equal(pm.variables.get(\"domain\"), \"domain does not match\");",
													"    pm.expect(pm.response.json().creatorUserName).to.not.equal(pm.variables.get(\"userName\"), \"creatorUserName matches\");",
													"    pm.expect(pm.response.json().creatorLastName).to.not.equal(pm.variables.get(\"lastName\"), \"lastUserName matches\");",
													"    pm.expect(pm.response.json().creatorFirstName).to.not.equal(pm.variables.get(\"firstName\"), \"firstUserName matches\");",
													"    pm.expect(pm.response.json().creatorMiddleName).to.not.equal(pm.variables.get(\"middleName\"), \"middleUserName matches\");",
													"    pm.expect(pm.response.json().metadata.createdDate).to.not.equal(pm.variables.get(\"createDate\"), \"createdDate matches\");",
													"    pm.expect(pm.response.json().metadata.createdUser).to.not.equal(pm.variables.get(\"createUser\"), \"createduser matches\");",
													"    pm.expect(pm.response.json().metadata.updatedDate).to.not.equal(pm.variables.get(\"updateDate\"), \"updatedDate matches\");",
													"    pm.expect(pm.response.json().metadata.updatedUser).to.not.equal(pm.variables.get(\"updateUser\"), \"updateduser matches\");",
													"});",
													"",
													"pm.test(\"validate Location header\", () => {",
													"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(\"/notes/\" + pm.response.json().id);",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpNote(pm.response.json().id, function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"       });",
													"    });",
													"    cleanUpVariables([\"id\", \"link\", \"text\", \"domain\", \"userName\", \"lastName\", \"firstName\", \"middleName\", \"createDate\", \"createUser\", \"updateDate\",\"updateUser\"]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": \"{{id}}\",\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\",\n\t\"domain\": \"{{domain}}\",\n\t\"creatorUserName\": \"{{userName}}\",\n\t\"creatorLastName\": \"{{lastName}}\",\n\t\"creatorFirstName\": \"{{firstName}}\",\n\t\"creatorMiddleName\": \"{{middleName}}\",\n\t\"metadata\": {\n        \"createdDate\": \"{{createDate}}\",\n        \"createdByUserId\": \"{{createUser}}\",\n        \"updatedDate\": \"{{updateDate}}\",\n        \"updatedByUserId\": \"{{updateUser}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes - 400 (bad JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c58203-5ec6-4cab-969f-6a3d088bd3f3",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "47249d58-d9fe-4c06-b174-bb8c46778178",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 - bad JSON\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with invalid JSON."
									},
									"response": []
								},
								{
									"name": "/notes - 400 (no body)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98af75d3-f8fd-43e3-87ef-9713cde5fc63",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85d07ea2-1cbd-4c69-bfcd-22bc4792b46c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with no body."
									},
									"response": []
								},
								{
									"name": "/notes - 400 (wrong content-type)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98af75d3-f8fd-43e3-87ef-9713cde5fc63",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85d07ea2-1cbd-4c69-bfcd-22bc4792b46c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with the wrong content type header."
									},
									"response": []
								},
								{
									"name": "/notes?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4eb31aa-fd01-42bd-889f-8d45f89b86a6",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e76c1f39-e634-4afc-a603-c482f7ee0ffe",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46027576-3136-4e2e-aa98-cff058f7668c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a4fa2d9-1ca3-466d-9344-87f789ce83b7",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes - 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"401 test\", function() {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22ffb526-169e-406f-84fe-3184ac47d831",
												"type": "text/javascript",
												"exec": [
													"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test due to the auth token not being set."
									},
									"response": []
								},
								{
									"name": "/notes - 401 (user has no domain permissions)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed961217-b01a-4735-b100-0da867af8c89",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"401 test - no domain permissions\", function() {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"    ",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.variables.get('test_user_id'),",
													"        method: 'DELETE',",
													"        header: {",
													"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"            'X-Okapi-Token': token,",
													"            'Content-Type': 'application/json'",
													"        }",
													"    }, function(err, res) {",
													"        pm.test(\"user deleted\", function() {",
													"            pm.expect(res).to.have.status(204);",
													"            cleanUpVariables([\"test_user_id\", \"test_user_token\"]);",
													"            pm.sendRequest({",
													"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.variables.get('test_user_credId'),",
													"                method: 'DELETE',",
													"                header: {",
													"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                    'X-Okapi-Token': token,",
													"                    'Content-Type': 'application/json'",
													"                }",
													"            }, function(err, res) {",
													"                pm.test(\"credentials deleted\", function() {",
													"                    pm.expect(res).to.have.status(204);",
													"                    cleanUpVariables([\"test_user_credId\"]);",
													"                    pm.sendRequest({",
													"                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.variables.get('test_user_permsId'),",
													"                        method: 'DELETE',",
													"                        header: {",
													"                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                            'X-Okapi-Token': token,",
													"                            'Content-Type': 'application/json'",
													"                        }",
													"                    }, function(err, res) {",
													"                        pm.test(\"permissions deleted\", function() {",
													"                            pm.expect(res).to.have.status(204);",
													"                            cleanUpVariables([\"test_user_permsId\"]);",
													"                        });",
													"                    });",
													"                });",
													"            });",
													"        });",
													"    });",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8371dccf-54e3-4d2a-9eb3-495fd97f65a0",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"pm.variables.set('test_user_id', uuid.v4());",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), active: true})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"user creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.sendRequest({",
													"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
													"                method: 'POST',",
													"                header: {",
													"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                    'X-Okapi-Token': token,",
													"                    'Content-Type': 'application/json'",
													"                },",
													"                body: {",
													"                    mode: 'raw',",
													"                    raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), password: 'test_user'})",
													"                }",
													"            }, function(err, res) {",
													"                if (err !== null) {",
													"                    console.log(\"Credential creation error: \" + err);",
													"                } else {",
													"                    if (res.code === 201) {",
													"                        pm.variables.set('test_user_credId', res.json().id);",
													"                        pm.sendRequest({",
													"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
													"                            method: 'POST',",
													"                            header: {",
													"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                                'X-Okapi-Token': token,",
													"                                'Content-Type': 'application/json'",
													"                            },",
													"                            body: {",
													"                                mode: 'raw',",
													"                                raw : JSON.stringify({ userId: pm.variables.get('test_user_id'), permissions: [\"notes.item.post\"]})",
													"                            }",
													"                        }, function(err, res) {",
													"                            if (err !== null) {",
													"                                console.log(\"permissions creation error: \" + err);",
													"                            } else {",
													"                                if (res.code === 201) {",
													"                                    pm.variables.set('test_user_permsId', res.json().id);",
													"                                    pm.sendRequest({",
													"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
													"                                        method: 'POST',",
													"                                        header: {",
													"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                                            'Content-Type': 'application/json'",
													"                                        },",
													"                                        body: {",
													"                                            mode: 'raw',",
													"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
													"                                        }",
													"                                    }, function(err, res) {",
													"                                        if (err !== null) {",
													"                                            console.log(\"Test user login error: \" + err);",
													"                                        } else {",
													"                                            if (res.code === 201) {",
													"                                                pm.variables.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
													"                                            } else {",
													"                                                console.log(\"Test user login failed: \" + res.reason());",
													"                                            }",
													"                                        }",
													"                                    });",
													"                                } else {",
													"                                    console.log(\"permissions creation failed: \" + res.reason());",
													"                                }",
													"                            }",
													"                        });",
													"                    } else {",
													"                        console.log(\"Auth creation failed: \" + res.reason());",
													"                    }",
													"                }",
													"            });",
													"        } else {",
													"            console.log(\"User creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test for a user missing \"domain\" permissions. In order to POST a note, the user not only needs the \"notes.item.post\" permission, but \"notes.domain.all\" or \"notes.domain.*\". The domain is defined by the \"domain\" field or by extracting the domain from the link, e.g. \"/users/12345\", domain is \"users\"."
									},
									"response": []
								},
								{
									"name": "/notes - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bc0c240-5aad-45d2-84e5-c23c7f9ccd87",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.item.post\");",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpUserTest();",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7dd8211-8177-4859-a0b5-7f6b8114f935",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"eval(pm.variables.get(\"createUserFunction\"));",
													"",
													"createUser();",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (missing text field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79e5a5b5-32d7-464d-ac1d-dc8b705f203b",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body missing the required \"text\" field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (missing link field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f227b010-9c69-4bc5-b568-773b342946cc",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body missing the required \"link\" field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dcdb7118-883d-4c89-a2c7-560672229ad7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4e71988-38dc-47dd-b8f2-bdb44975b9c7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (unknown field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2e75c0f3-53e7-4bbf-900e-3a175d80b399",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\",\n\t\"xyzzy\": \"867-5309\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aaa94bf3-30a7-4bd4-b873-83e8bb420e63",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cacf3aec-fdb5-4d5c-b4ec-8753466a3932",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\",\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbd0e8e4-24e5-41e3-9d86-deb965629337",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"note.json\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(pm.response.json().id).to.equal(pm.variables.get(\"id\"), \"id does not match\");",
													"    pm.expect(pm.response.json().link).to.equal(pm.variables.get(\"link\"), \"link does not match\");",
													"    pm.expect(pm.response.json().text).to.equal(pm.variables.get(\"text\"), \"text does not match\");",
													"    pm.expect(pm.response.json().domain).to.equal(pm.variables.get(\"domain\"), \"domain does not match\");",
													"    pm.expect(pm.response.json().creatorUserName).to.equal(pm.environment.get(\"username\"), \"creatorUserName does not match\");",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpNote(pm.response.json().id, function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"       });",
													"    });",
													"",
													"   cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\"]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"type": "text/javascript",
												"exec": [
													"// Create a note",
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"domain\", \"items\");",
													"pm.variables.set(\"link\", \"/\" + pm.variables.get(\"domain\") + \"/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\")})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"note creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.variables.set(\"id\", res.json().id);",
													"        } else {",
													"            console.log(\"note creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{id}}"
											]
										},
										"description": "Returns an existing note"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c311bd3-3072-4897-9763-6910c868d89e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a7071e2-187d-4496-9cd3-442d978289d8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"12345"
											]
										},
										"description": "Returns an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb905b1-c769-4098-8a08-dbf039375edc",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "508c294a-9bd8-4191-b222-19d75ee89c95",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"401 test\", function() {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "29562f38-ef06-464a-82f6-81fee0b071c1",
												"type": "text/javascript",
												"exec": [
													"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test due to the auth token not being set."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ee448c2-4b9b-493f-99f8-fe1644cf5c80",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.item.get\");",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
													"",
													"    cleanUpUserTest();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"type": "text/javascript",
												"exec": [
													"eval(pm.variables.get(\"createUserFunction\"));",
													"",
													"createUser();",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec2c712e-07cf-4077-903c-915fc8f89511",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a7071e2-187d-4496-9cd3-442d978289d8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Returns an existing note with an unknown id"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.test(\"retrieve updated note\", function() {",
													"    let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.variables.get(\"id\"),",
													"        method: 'GET',",
													"        header: {",
													"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"            'X-Okapi-Token': token",
													"        }",
													"    }, function(err, res) {",
													"        pm.test(\"validate data\", function() {",
													"            pm.expect(res.code).to.equal(200);",
													"            pm.expect(res.json().id).to.equal(pm.variables.get(\"id\"), \"id does not match\");",
													"            pm.expect(res.json().link).to.equal(pm.variables.get(\"updated_link\"), \"link does not match\");",
													"            pm.expect(res.json().text).to.equal(pm.variables.get(\"updated_text\"), \"text does not match\");",
													"            pm.expect(res.json().domain).to.equal(pm.variables.get(\"updated_domain\"), \"domain does not match\");",
													"            pm.expect(res.json().creatorUserName).to.equal(pm.environment.get(\"username\"), \"creatorUserName does not match\");",
													"",
													"            pm.test(\"clean up\", function() {",
													"                eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"                eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"                ",
													"                cleanUpNote(res.json().id, function(err, success) {",
													"                   pm.test(\"remove note\", function() {",
													"                       pm.expect(success).to.be.true;",
													"                   });",
													"                });",
													"            ",
													"               cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\", \"updated_uuid\", \"updated_domain\", \"updated_link\", \"updated_text\"]);",
													"            });",
													"        });",
													"    });",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"type": "text/javascript",
												"exec": [
													"// Create a note",
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"domain\", \"items\");",
													"pm.variables.set(\"link\", \"/\" + pm.variables.get(\"domain\") + \"/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\"), domain: pm.variables.get(\"domain\")})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"note creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.variables.set(\"id\", res.json().id);",
													"        } else {",
													"            console.log(\"note creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});",
													"",
													"pm.variables.set(\"updated_uuid\", uuid.v4());",
													"pm.variables.set(\"updated_domain\", \"users\");",
													"pm.variables.set(\"updated_link\", \"/\" + pm.variables.get(\"updated_domain\") + \"/\" + pm.variables.get(\"updated_uuid\"));",
													"pm.variables.set(\"updated_text\", \"Lorem ipsum dolor sit amet consectetur adipiscing elit sagittis, hac eleifend sem posuere venenatis proin. Facilisi cursus ridiculus eleifend bibendum ex egestas morbi venenatis et mollis amet hac vestibulum, erat hendrerit natoque tincidunt netus lorem nec a sem justo maecenas. Varius mattis mi placerat sollicitudin imperdiet pulvinar congue id lectus, dictum nibh potenti hac eget lorem habitasse quisque bibendum vitae, eleifend convallis magna amet cubilia porttitor scelerisque penatibus. Laoreet pulvinar cubilia taciti primis amet at lorem suscipit, est turpis commodo elementum justo libero lectus viverra tincidunt, auctor cras faucibus facilisis posuere fusce ac. Senectus libero sapien consequat curabitur vitae metus imperdiet lectus class morbi, elementum praesent dis dignissim tristique diam rhoncus tellus pellentesque augue, lacus quis magnis penatibus est purus mus turpis cursus.\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{updated_link}}\",\n\t\"text\": \"{{updated_text}}\",\n\t\"domain\": \"{{updated_domain}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{id}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0535ffb-0247-43b7-880c-e90e74a7b09a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d37b73e-f81e-4079-88e8-dcc2ae81db02",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"12345"
											]
										},
										"description": "Updates an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31babbce-2c1e-4294-8f22-5ebd3aec6082",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0ca33893-8a80-4ac1-adc9-728a40946110",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31ad0b1a-c324-4c5b-8a70-b1d9384495a5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8e9cab5c-0e43-4bfd-815f-396cda5bf9c2",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"401 test\", function() {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "29562f38-ef06-464a-82f6-81fee0b071c1",
												"type": "text/javascript",
												"exec": [
													"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test due to the auth token not being set."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 401 (user has no domain permissions)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55989bb4-5f90-456a-a183-1696133abbcc",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"401 test - no domain permissions\", function() {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpNote(pm.variables.get(\"id\"), function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"           ",
													"           cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\", \"updated_uuid\", \"updated_domain\", \"updated_link\", \"updated_text\"]);",
													"       });",
													"    });",
													"",
													"    let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"    ",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.variables.get('test_user_id'),",
													"        method: 'DELETE',",
													"        header: {",
													"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"            'X-Okapi-Token': token,",
													"            'Content-Type': 'application/json'",
													"        }",
													"    }, function(err, res) {",
													"        pm.test(\"user deleted\", function() {",
													"            pm.expect(res).to.have.status(204);",
													"            cleanUpVariables([\"test_user_id\", \"test_user_token\"]);",
													"            pm.sendRequest({",
													"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.variables.get('test_user_credId'),",
													"                method: 'DELETE',",
													"                header: {",
													"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                    'X-Okapi-Token': token,",
													"                    'Content-Type': 'application/json'",
													"                }",
													"            }, function(err, res) {",
													"                pm.test(\"credentials deleted\", function() {",
													"                    pm.expect(res).to.have.status(204);",
													"                    cleanUpVariables([\"test_user_credId\"]);",
													"                    pm.sendRequest({",
													"                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.variables.get('test_user_permsId'),",
													"                        method: 'DELETE',",
													"                        header: {",
													"                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                            'X-Okapi-Token': token,",
													"                            'Content-Type': 'application/json'",
													"                        }",
													"                    }, function(err, res) {",
													"                        pm.test(\"permissions deleted\", function() {",
													"                            pm.expect(res).to.have.status(204);",
													"                            cleanUpVariables([\"test_user_permsId\"]);",
													"                        });",
													"                    });",
													"                });",
													"            });",
													"        });",
													"    });            ",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ffc85de9-cbc2-47b7-bd79-77012dcbf6e7",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"pm.variables.set('test_user_id', uuid.v4());",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), active: true})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"user creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.sendRequest({",
													"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
													"                method: 'POST',",
													"                header: {",
													"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                    'X-Okapi-Token': token,",
													"                    'Content-Type': 'application/json'",
													"                },",
													"                body: {",
													"                    mode: 'raw',",
													"                    raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), password: 'test_user'})",
													"                }",
													"            }, function(err, res) {",
													"                if (err !== null) {",
													"                    console.log(\"Credential creation error: \" + err);",
													"                } else {",
													"                    if (res.code === 201) {",
													"                        pm.variables.set('test_user_credId', res.json().id);",
													"                        pm.sendRequest({",
													"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
													"                            method: 'POST',",
													"                            header: {",
													"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                                'X-Okapi-Token': token,",
													"                                'Content-Type': 'application/json'",
													"                            },",
													"                            body: {",
													"                                mode: 'raw',",
													"                                raw : JSON.stringify({ userId: pm.variables.get('test_user_id'), permissions: [\"notes.item.put\", \"notes.item.get\"]})",
													"                            }",
													"                        }, function(err, res) {",
													"                            if (err !== null) {",
													"                                console.log(\"permissions creation error: \" + err);",
													"                            } else {",
													"                                if (res.code === 201) {",
													"                                    pm.variables.set('test_user_permsId', res.json().id);",
													"                                    pm.sendRequest({",
													"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
													"                                        method: 'POST',",
													"                                        header: {",
													"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                                            'Content-Type': 'application/json'",
													"                                        },",
													"                                        body: {",
													"                                            mode: 'raw',",
													"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
													"                                        }",
													"                                    }, function(err, res) {",
													"                                        if (err !== null) {",
													"                                            console.log(\"Test user login error: \" + err);",
													"                                        } else {",
													"                                            if (res.code === 201) {",
													"                                                pm.variables.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
													"                                                pm.sendRequest({",
													"                                                    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"                                                    method: 'POST',",
													"                                                    header: {",
													"                                                        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                                                        'X-Okapi-Token': token,",
													"                                                        'Content-Type': 'application/json'",
													"                                                    },",
													"                                                    body: {",
													"                                                        mode: 'raw',",
													"                                                        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\")})",
													"                                                    }",
													"                                                }, function(err, res) {",
													"                                                    if (err !== null) {",
													"                                                        console.log(\"note creation error: \" + err);",
													"                                                    } else {",
													"                                                        if (res.code === 201) {",
													"                                                            pm.variables.set(\"id\", res.json().id);",
													"                                                        } else {",
													"                                                            console.log(\"note creation failed: \" + res.reason());",
													"                                                        }",
													"                                                    }",
													"                                                });",
													"                                            } else {",
													"                                                console.log(\"Test user login failed: \" + res.reason());",
													"                                            }",
													"                                        }",
													"                                    });",
													"                                } else {",
													"                                    console.log(\"permissions creation failed: \" + res.reason());",
													"                                }",
													"                            }",
													"                        });",
													"                    } else {",
													"                        console.log(\"Auth creation failed: \" + res.reason());",
													"                    }",
													"                }",
													"            });",
													"        } else {",
													"            console.log(\"User creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});",
													"",
													"pm.variables.set(\"updated_uuid\", uuid.v4());",
													"pm.variables.set(\"updated_domain\", \"users\");",
													"pm.variables.set(\"updated_link\", \"/\" + pm.variables.get(\"updated_domain\") + \"/\" + pm.variables.get(\"updated_uuid\"));",
													"pm.variables.set(\"updated_text\", \"Lorem ipsum dolor sit amet consectetur adipiscing elit sagittis, hac eleifend sem posuere venenatis proin. Facilisi cursus ridiculus eleifend bibendum ex egestas morbi venenatis et mollis amet hac vestibulum, erat hendrerit natoque tincidunt netus lorem nec a sem justo maecenas. Varius mattis mi placerat sollicitudin imperdiet pulvinar congue id lectus, dictum nibh potenti hac eget lorem habitasse quisque bibendum vitae, eleifend convallis magna amet cubilia porttitor scelerisque penatibus. Laoreet pulvinar cubilia taciti primis amet at lorem suscipit, est turpis commodo elementum justo libero lectus viverra tincidunt, auctor cras faucibus facilisis posuere fusce ac. Senectus libero sapien consequat curabitur vitae metus imperdiet lectus class morbi, elementum praesent dis dignissim tristique diam rhoncus tellus pellentesque augue, lacus quis magnis penatibus est purus mus turpis cursus.\");"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{updated_link}}\",\n\t\"text\": \"{{updated_text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{id}}"
											]
										},
										"description": "Failure test for a user missing \"domain\" permissions. In order to PUT a note, the user not only needs the \"notes.item.put\" permission, but \"notes.domain.all\" or \"notes.domain.*\". The domain is defined by the \"domain\" field or by extracting the domain from the link, e.g. \"/users/12345\", domain is \"users\"."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37417d71-7f2c-4ff0-b4c3-420aac5bf6b7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.item.put\");",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
													"",
													"    cleanUpUserTest();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"type": "text/javascript",
												"exec": [
													"eval(pm.variables.get(\"createUserFunction\"));",
													"",
													"createUser();",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7323028-c782-4e36-9f00-e7209fe3b99d",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d4351f0f-adb3-4994-9f25-9869782c708d",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Updates an existing note with an unknown id"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (missing text field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79e5a5b5-32d7-464d-ac1d-dc8b705f203b",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Update an existing note with JSON body missing the required \"text\" field."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (missing link field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f227b010-9c69-4bc5-b568-773b342946cc",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpVariables([\"uuid\", \"link\", \"text\"]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Create a new note with JSON body missing the required \"link\" field."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "42676a49-83cc-4c27-afc1-efb64fb18d0a",
												"type": "text/javascript",
												"exec": [
													"// Create a note",
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"domain\", \"items\");",
													"pm.variables.set(\"link\", \"/\" + pm.variables.get(\"domain\") + \"/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\"), domain: pm.variables.get(\"domain\")})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"note creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.variables.set(\"id\", res.json().id);",
													"        } else {",
													"            console.log(\"note creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8664ff6c-55c7-4014-b869-fce54a563bc1",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpNote(pm.variables.get(\"id\"), function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"       });",
													"    });",
													"",
													"    cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\"]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{id}}"
											]
										},
										"description": "Update an existing note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (unknown field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "310ebf88-f3ce-4d20-a640-f28bdd343e07",
												"type": "text/javascript",
												"exec": [
													"// Create a note",
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"domain\", \"items\");",
													"pm.variables.set(\"link\", \"/\" + pm.variables.get(\"domain\") + \"/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\"), domain: pm.variables.get(\"domain\")})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"note creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.variables.set(\"id\", res.json().id);",
													"        } else {",
													"            console.log(\"note creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7c8c6944-72ba-421f-8c17-0acefe2b56cc",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpNote(pm.variables.get(\"id\"), function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"       });",
													"    });",
													"",
													"    cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\"]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"/items/xxxxxx\",\n\t\"text\": \"xxxxxxxx\",\n\t\"xyzzy\": \"867-5309\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{id}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8834cd24-eb40-44d1-ba86-4a32b7e63259",
												"type": "text/javascript",
												"exec": [
													"// Create a note",
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"domain\", \"items\");",
													"pm.variables.set(\"link\", \"/\" + pm.variables.get(\"domain\") + \"/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\"), domain: pm.variables.get(\"domain\")})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"note creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.variables.set(\"id\", res.json().id);",
													"        } else {",
													"            console.log(\"note creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bd865f6-0eef-473b-acb4-d0f5c1735ef9",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"validate schema\", function() {",
													"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
													"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
													"",
													"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"",
													"    cleanUpNote(pm.variables.get(\"id\"), function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"       });",
													"    });",
													"",
													"    cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\"]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"/items/xxxxxx\",\n\t\"text\": \"xxxxxxxx\",\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{id}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0c1bc31-8cab-466c-ab7f-35ec10a84ab3",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.test(\"retrieve deleted note\", function() {",
													"    let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.variables.get(\"id\"),",
													"        method: 'GET',",
													"        header: {",
													"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"            'X-Okapi-Token': token",
													"        }",
													"    }, function(err, res) {",
													"        pm.test(\"verify deleted\", function() {",
													"            pm.expect(res.code).to.equal(404);",
													"",
													"            pm.test(\"clean up\", function() {",
													"                eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"                ",
													"               cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\"]);",
													"            });",
													"        });",
													"    });",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "085fee08-242f-4109-97dd-3becb0dc782e",
												"type": "text/javascript",
												"exec": [
													"// Create a note",
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"domain\", \"items\");",
													"pm.variables.set(\"link\", \"/\" + pm.variables.get(\"domain\") + \"/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\"), domain: pm.variables.get(\"domain\")})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"note creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.variables.set(\"id\", res.json().id);",
													"        } else {",
													"            console.log(\"note creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{id}}"
											]
										},
										"description": "Deletes an existing note"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7e0b3eb-3e78-4519-b003-93bf02c70893",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b3962f16-3072-4026-9e9e-07feb06da642",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"12345"
											]
										},
										"description": "Deletes an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b617cb55-aa0b-4b31-92cf-8e31ff60749f",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec7e628a-a933-436b-a6c0-240bf1ebf36d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdee0fe5-3495-45bd-a57e-e0ca0e95fdc7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "556b7f35-5ca7-489e-9f0d-a30e47f55a02",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"401 test\", function() {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "29562f38-ef06-464a-82f6-81fee0b071c1",
												"type": "text/javascript",
												"exec": [
													"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test due to the auth token not being set."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 401 (user has no domain permissions)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88af6543-d0a9-471c-ab54-fd759ec2162a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"401 test - no domain permissions\", function() {",
													"    pm.response.to.have.status(401);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpNoteFunction\"));",
													"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
													"    ",
													"    cleanUpNote(pm.variables.get(\"id\"), function(err, success) {",
													"       pm.test(\"remove note\", function() {",
													"           pm.expect(success).to.be.true;",
													"           ",
													"           cleanUpVariables([\"uuid\", \"domain\", \"link\", \"text\", \"id\"]);",
													"       });",
													"    });",
													"",
													"    let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"    ",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.variables.get('test_user_id'),",
													"        method: 'DELETE',",
													"        header: {",
													"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"            'X-Okapi-Token': token,",
													"            'Content-Type': 'application/json'",
													"        }",
													"    }, function(err, res) {",
													"        pm.test(\"user deleted\", function() {",
													"            pm.expect(res).to.have.status(204);",
													"            cleanUpVariables([\"test_user_id\", \"test_user_token\"]);",
													"            pm.sendRequest({",
													"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.variables.get('test_user_credId'),",
													"                method: 'DELETE',",
													"                header: {",
													"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                    'X-Okapi-Token': token,",
													"                    'Content-Type': 'application/json'",
													"                }",
													"            }, function(err, res) {",
													"                pm.test(\"credentials deleted\", function() {",
													"                    pm.expect(res).to.have.status(204);",
													"                    cleanUpVariables([\"test_user_credId\"]);",
													"                    pm.sendRequest({",
													"                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.variables.get('test_user_permsId'),",
													"                        method: 'DELETE',",
													"                        header: {",
													"                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                            'X-Okapi-Token': token,",
													"                            'Content-Type': 'application/json'",
													"                        }",
													"                    }, function(err, res) {",
													"                        pm.test(\"permissions deleted\", function() {",
													"                            pm.expect(res).to.have.status(204);",
													"                            cleanUpVariables([\"test_user_permsId\"]);",
													"                        });",
													"                    });",
													"                });",
													"            });",
													"        });",
													"    });            ",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4975f96e-1fa4-4667-96f1-a6c9ed88a191",
												"type": "text/javascript",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"uuid\", uuid.v4());",
													"pm.variables.set(\"link\", \"/items/\" + pm.variables.get(\"uuid\"));",
													"pm.variables.set(\"text\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
													"",
													"pm.variables.set('test_user_id', uuid.v4());",
													"",
													"let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
													"    method: 'POST',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': token,",
													"        'Content-Type': 'application/json'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), active: true})",
													"    }",
													"}, function(err, res) {",
													"    if (err !== null) {",
													"        console.log(\"user creation error: \" + err);",
													"    } else {",
													"        if (res.code === 201) {",
													"            pm.sendRequest({",
													"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
													"                method: 'POST',",
													"                header: {",
													"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                    'X-Okapi-Token': token,",
													"                    'Content-Type': 'application/json'",
													"                },",
													"                body: {",
													"                    mode: 'raw',",
													"                    raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), password: 'test_user'})",
													"                }",
													"            }, function(err, res) {",
													"                if (err !== null) {",
													"                    console.log(\"Credential creation error: \" + err);",
													"                } else {",
													"                    if (res.code === 201) {",
													"                        pm.variables.set('test_user_credId', res.json().id);",
													"                        pm.sendRequest({",
													"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
													"                            method: 'POST',",
													"                            header: {",
													"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                                'X-Okapi-Token': token,",
													"                                'Content-Type': 'application/json'",
													"                            },",
													"                            body: {",
													"                                mode: 'raw',",
													"                                raw : JSON.stringify({ userId: pm.variables.get('test_user_id'), permissions: [\"notes.item.delete\"]})",
													"                            }",
													"                        }, function(err, res) {",
													"                            if (err !== null) {",
													"                                console.log(\"permissions creation error: \" + err);",
													"                            } else {",
													"                                if (res.code === 201) {",
													"                                    pm.variables.set('test_user_permsId', res.json().id);",
													"                                    pm.sendRequest({",
													"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
													"                                        method: 'POST',",
													"                                        header: {",
													"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                                            'Content-Type': 'application/json'",
													"                                        },",
													"                                        body: {",
													"                                            mode: 'raw',",
													"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
													"                                        }",
													"                                    }, function(err, res) {",
													"                                        if (err !== null) {",
													"                                            console.log(\"Test user login error: \" + err);",
													"                                        } else {",
													"                                            if (res.code === 201) {",
													"                                                pm.variables.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
													"                                                pm.sendRequest({",
													"                                                    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes\",",
													"                                                    method: 'POST',",
													"                                                    header: {",
													"                                                        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"                                                        'X-Okapi-Token': token,",
													"                                                        'Content-Type': 'application/json'",
													"                                                    },",
													"                                                    body: {",
													"                                                        mode: 'raw',",
													"                                                        raw : JSON.stringify({link: pm.variables.get(\"link\"), text: pm.variables.get(\"text\")})",
													"                                                    }",
													"                                                }, function(err, res) {",
													"                                                    if (err !== null) {",
													"                                                        console.log(\"note creation error: \" + err);",
													"                                                    } else {",
													"                                                        if (res.code === 201) {",
													"                                                            pm.variables.set(\"id\", res.json().id);",
													"                                                        } else {",
													"                                                            console.log(\"note creation failed: \" + res.reason());",
													"                                                        }",
													"                                                    }",
													"                                                });",
													"                                            } else {",
													"                                                console.log(\"Test user login failed: \" + res.reason());",
													"                                            }",
													"                                        }",
													"                                    });",
													"                                } else {",
													"                                    console.log(\"permissions creation failed: \" + res.reason());",
													"                                }",
													"                            }",
													"                        });",
													"                    } else {",
													"                        console.log(\"Auth creation failed: \" + res.reason());",
													"                    }",
													"                }",
													"            });",
													"        } else {",
													"            console.log(\"User creation failed: \" + res.reason());",
													"        }",
													"    }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{id}}"
											]
										},
										"description": "Failure test for a user missing \"domain\" permissions. In order to DELETE a note, the user not only needs the \"notes.item.delete\" permission, but \"notes.domain.all\" or \"notes.domain.*\". The domain is defined by the \"domain\" field or by extracting the domain from the link, e.g. \"/users/12345\", domain is \"users\"."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c6b20c8-c027-4413-abe5-7798c292a260",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.item.delete\");",
													"});",
													"",
													"pm.test(\"clean up\", function() {",
													"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
													"",
													"    cleanUpUserTest();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"type": "text/javascript",
												"exec": [
													"eval(pm.variables.get(\"createUserFunction\"));",
													"",
													"createUser();",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f05d1a1-3956-4909-a59c-47f3bda6c3c5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f46888bc-4f6a-4600-b1e1-5cf2f268e264",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Deletes an existing note with an unknown id"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "note-types",
			"item": [
				{
					"name": "GET note-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types?query=id=={id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.noteTypes.length).to.equal(1); // limit default",
													"    pm.expect(response.noteTypes[0].id).to.equal(pm.environment.get(\"noteTypeId\"), \"id does not match\");",
													"    pm.expect(response.noteTypes[0].name).to.equal(pm.environment.get(\"noteTypeName\"), \"name does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=id=={{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{noteTypeId}}"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?query=name={{noteTypesName}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.noteTypes.length).to.equal(1); // limit default",
													"    pm.expect(response.noteTypes[0].id).to.equal(pm.environment.get(\"noteTypeId\"), \"id does not match\");",
													"    pm.expect(response.noteTypes[0].name).to.equal(pm.environment.get(\"noteTypeName\"), \"name does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=name={{noteTypeName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": "name={{noteTypeName}}"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c67cca8f-49e2-4156-94db-08be55eebdce",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.noteTypes.length);",
													"    pm.expect(response.noteTypes.length).to.be.at.most(10); // limit default",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Returns a list of notes"
									},
									"response": []
								},
								{
									"name": "/note-types?limit=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(2);",
													"    pm.expect(response.noteTypes.length).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?limit=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(2);",
													"    pm.expect(response.noteTypes.length).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?offset=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(2);",
													"    pm.expect(response.noteTypes.length).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?offset=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(2);",
													"    pm.expect(response.noteTypes.length).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daf13e9a-8f7d-43c2-aa2f-f0e98d6aafe2",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"note.types.collection.get\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types?offset=-1 - 400 (offset less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=-1 - 400 (limit less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/note-types?offset= - 400 (offset is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7da61625-d75f-456f-b082-2101521ac31f",
												"exec": [
													"pm.test(\"400 test - empty offset\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": ""
												}
											]
										},
										"description": "Failure case where the offset query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/note-types?limit= - 400 (limit is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b3c5e24-9263-4f44-a63f-a7fab5df40e7",
												"exec": [
													"pm.test(\"400 test - empty limit\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": ""
												}
											]
										},
										"description": "Failure case where the limit query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-2147483649 - 400 (offset less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36347953-3a34-4cde-9b77-1d7d4e4dac6c",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=-2147483649 - 400 (limit less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c0cb09-b11b-4368-91cf-044a9c62d36c",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/note-types?offset=2147483648 - 400 (offset exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6289db22-451e-473b-8452-655f62fbaeb6",
												"exec": [
													"pm.test(\"400 test - offset exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the offset query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=2147483648 - 400 (limit exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "753e0caa-4c9c-422b-bf94-3d1e1b7ca9b9",
												"exec": [
													"pm.test(\"400 test - limit exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the limit query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/note-types?query=foo* - 422 (bad query CQL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5044925b-6a51-4254-b1fa-6213ea20ffff",
												"exec": [
													"pm.test(\"422 test - invalid CQL in query\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=foo*",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": "foo*"
												}
											]
										},
										"description": "Failure case where the \"query\" query parameter is not valid CQL."
									},
									"response": []
								},
								{
									"name": "/note-types?query= - 422 (empty query)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a081674e-9cf5-4a1d-82eb-32c2264b45df",
												"exec": [
													"pm.test(\"422 test - empty query\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"query\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/note-types?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb905b1-c769-4098-8a08-dbf039375edc",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/note-types?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "508c294a-9bd8-4191-b222-19d75ee89c95",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b1a928b-a834-43cd-a415-3297c266894d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cf476f90-4123-4dc7-9ce1-3c9eddec1a2b",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_noteTypeItem.json\", pm.environment.get(\"schema_noteTypeItem\"));"
						]
					}
				}
			]
		},
		{
			"name": "teardown note-types",
			"item": [
				{
					"name": "DELETE testing note-type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE second testing note-type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeIdSecond}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeIdSecond}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "124bec89-0d24-4921-aa03-2c61f1ba8485",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fbb6eafb-6433-4a97-b1f2-e079c6cc56bf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}