{
	"info": {
		"_postman_id": "becbd52c-462f-4ce0-b5b0-aa9628652469",
		"name": "mod-invoice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "/authn/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify required modules enabled",
					"item": [
						{
							"name": "mod-invoices is deployed (uncomment when module is ready)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"// uncomment this as mod-invoice module has been implemented",
											"/*var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-invoices"
										}
									]
								},
								"description": "Check if mod-invoices is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						},
						{
							"name": "mod-configuration is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-configuration",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-configuration"
										}
									]
								},
								"description": "Check if mod-configuration is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-invoices-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"let bodyTemplate = testConfigs.bodyTemplate;",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    let existingConfig = utils.getConfigByName(configs, configName);",
											"    if (existingConfig) {",
											"        existingConfig.value = value;",
											"        utils.updateConfig(existingConfig);",
											"    } else {",
											"        bodyTemplate.configName = configName;",
											"        bodyTemplate.value = value;",
											"        utils.createConfig(bodyTemplate);",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICES"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "invoice.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_invoice\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_invoice_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_invoice}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_invoice}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "invoice_line.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_invoice_line\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_invoice_line_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_invoice_line}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_invoice_line}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "adjustment.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_adjustment\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_adjustment_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_adjustment}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_adjustment}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "metadata.shcema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9792a3-7f93-41cd-8b8f-e00b68d10c0e",
										"exec": [
											"pm.test(pm.variables.get(\"schema_metadata\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_metadata_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{raml_loc}}/schemas/{{schema_metadata}}",
									"host": [
										"{{raml_loc}}"
									],
									"path": [
										"schemas",
										"{{schema_metadata}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "product_id_type.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9792a3-7f93-41cd-8b8f-e00b68d10c0e",
										"exec": [
											"pm.test(pm.variables.get(\"schema_productIdType\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_productIdType_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{common_folder}}/schemas/{{schema_productIdType}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{common_folder}}",
										"schemas",
										"{{schema_productIdType}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b589a48-d3fa-4985-85c4-8b7dcda638a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b882afd4-d85f-4006-9746-08bea97bbdf5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": []
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete invoices for positive tests",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3576b999-c386-481e-8364-6f3c0b5523f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83dafb48-cc84-4d0b-abdb-8c5457beba28",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete invoices for negative tests",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aab5a49c-aca9-49a0-9d82-a849ee144f9f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd78a8af-536b-403b-8dda-d1f2a64c70c7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Revert configs",
					"item": [
						{
							"name": "Get configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let currentConfigs;",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    currentConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \", currentConfigs);",
											"});",
											"",
											"let configsToProcess = globals.testData.configs.configNames;",
											"let originalConfigs = pm.environment.get(\"mod-invoices-configs\") ? JSON.parse(pm.environment.get(\"mod-invoices-configs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configName = configsToProcess[i];",
											"    let originalConfig = utils.getConfigByName(originalConfigs, configName);",
											"    if (originalConfig) {",
											"        utils.updateConfig(originalConfig);",
											"    } else if (currentConfigs.length > 0) {",
											"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.deleteConfig(configId);",
											"    } else {",
											"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
											"    }",
											"}",
											"",
											"// Remove all created variables",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICES"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e07ce59d-212b-4673-9fd7-346a4ca947e2",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [\"invoiceLines-limit\"],",
					"        bodyTemplate: {",
					"            \"module\": \"INVOICES\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"     utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"   ",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => {",
					"            pm.sendRequest({",
					"                url: utils.buildOkapiUrl(path),",
					"                method: \"DELETE\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\")",
					"                }",
					"            }, function(err, response) {",
					"                resolve(response.code);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function() {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigByName = function(configs, configName) {",
					"        let config = configs.filter(value => value.configName === configName);",
					"        return config.length > 0 ? config[0] : null;",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries\"),",
					"            method: \"POST\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function(err, response) {",
					"            pm.test(\"Config created\", function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries/\" + body.id),",
					"            method: \"PUT\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function(err, response) {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest({",
					"                url: utils.buildOkapiUrl(path),",
					"                method: \"GET\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"                }",
					"            },",
					"            handler",
					"        );",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(",
					"            {",
					"                url: utils.buildOkapiUrl(path),",
					"                method: \"DELETE\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"                }",
					"            },",
					"            handler",
					"        );",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"schema_adjustment_content\");",
					"        pm.globals.unset(\"schema_invoice_content\");",
					"        pm.globals.unset(\"schema_invoice_line_content\");",
					"        pm.globals.unset(\"schema_metadata_content\");",
					"        pm.globals.unset(\"schema_productIdType_content\");",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        console.log(\"Starting validating against schemas\");",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        tv4.addSchema(\"mod-invoice-storage/schemas/adjustment.json\", JSON.parse(globals.schema_adjustment_content));",
					"        tv4.addSchema(\"mod-invoice-storage/schemas/invoice.json\", JSON.parse(globals.schema_invoice_content));",
					"        tv4.addSchema(\"mod-invoice-storage/schemas/invoice_line.json\", JSON.parse(globals.schema_invoice_line_content));",
					"        tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(globals.schema_metadata_content));",
					"        tv4.addSchema(\"common/schemas/product_id_type.json\", JSON.parse(globals.schema_productIdType_content));",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "55006f90-5989-4448-9d61-ff39c3e3191b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "dcbffaf1-746c-402b-854a-8b2672bc8bd1",
			"key": "storage_module",
			"value": "mod-invoice-storage",
			"type": "string"
		},
		{
			"id": "69d51dd4-0b61-4e6f-828a-9dc26a4fc46f",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-invoices/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "82ab5bcb-ab34-475c-8d83-ff4098a4c5c9",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org/acq-models/master",
			"type": "string"
		},
		{
			"id": "0a771d31-da8e-42db-b131-b9d17cb1441f",
			"key": "schema_adjustment",
			"value": "adjustment.json",
			"type": "string"
		},
		{
			"id": "ff6de0e7-7f42-4b9d-8e57-ed91f74ddd35",
			"key": "schema_invoice",
			"value": "invoice.json",
			"type": "string"
		},
		{
			"id": "fcef8a99-bccc-4798-9b31-e2c7685f17c2",
			"key": "schema_invoice_line",
			"value": "invoice_line.json",
			"type": "string"
		},
		{
			"id": "17a26542-1b71-435d-9fc0-e889de5967f4",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "40a73c3f-5472-4bc1-b639-e3a612a2dea4",
			"key": "raml_loc",
			"value": "https://raw.githubusercontent.com/folio-org/raml/raml1.0",
			"type": "string"
		},
		{
			"id": "39107cf8-e705-46c2-9eb8-7b4ff2b8bded",
			"key": "common_folder",
			"value": "common",
			"type": "string"
		},
		{
			"id": "54292c81-2eee-4d73-ae0c-c5e4ce713d37",
			"key": "schema_productIdType",
			"value": "product_id_type.json",
			"type": "string"
		}
	]
}