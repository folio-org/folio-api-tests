{
	"info": {
		"_postman_id": "451f5f71-1d2b-4ccf-954e-39727b268181",
		"name": "mod-inventory-storage-location",
		"description": "Test: \n/location-units/institutions\n/location-units/campuses\n/location-units/libraries\n/location\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Getting response schemas",
					"item": [
						{
							"name": "parameters.schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad455e26-7dc6-4d08-a023-8910e4368b53",
										"exec": [
											"pm.test(\"GET schema_parameters OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"GET schema_parameters has JSON body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.environment.set(\"schema_parameters_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/raml/{{raml_version}}/schemas/{{schema_parameters}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"raml",
										"{{raml_version}}",
										"schemas",
										"{{schema_parameters}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "error.schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
										"exec": [
											"pm.test(\"GET schema_error OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"GET schema_error has JSON body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.environment.set(\"schema_error_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/raml/{{raml_version}}/schemas/{{schema_error}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"raml",
										"{{raml_version}}",
										"schemas",
										"{{schema_error}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "errors.schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
										"exec": [
											"pm.test(\"Response OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response has JSON body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.environment.set(\"schema_errors_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/raml/{{raml_version}}/schemas/{{schema_errors}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"raml",
										"{{raml_version}}",
										"schemas",
										"{{schema_errors}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "metadata.schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
										"exec": [
											"pm.test(\"GET schema_metadata OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"GET schema_metadata has JSON body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.environment.set(\"schema_metadata_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/raml/{{raml_version}}/schemas/{{schema_metadata}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"raml",
										"{{raml_version}}",
										"schemas",
										"{{schema_metadata}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "location.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09bf919c-eb84-4960-a69c-a0f0f0b46ce9",
										"type": "text/javascript",
										"exec": [
											"pm.test(pm.variables.get(\"schema_location\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_location_content\", responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_location}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_location}}"
									]
								},
								"description": "This is to get location.jsonn to be used in later tests."
							},
							"response": []
						},
						{
							"name": "locations.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f1cecc7-dc13-4831-8109-2526cbec8e0c",
										"type": "text/javascript",
										"exec": [
											"pm.test(pm.variables.get(\"schema_locations\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_locations_content\", responseBody);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_locations}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_locations}}"
									]
								},
								"description": "This is to get locations.jsonn to be used in later tests."
							},
							"response": []
						},
						{
							"name": "locinst.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f357c160-ffa9-4858-b715-9ecded46f2b7",
										"type": "text/javascript",
										"exec": [
											"pm.test(pm.variables.get(\"schema_locinst\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_locinst_content\", responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_locinst}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_locinst}}"
									]
								},
								"description": "This is to get location.jsonn to be used in later tests."
							},
							"response": []
						},
						{
							"name": "locinsts.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3315b8a0-0fc9-4926-a1ca-f20402cb2c41",
										"type": "text/javascript",
										"exec": [
											"pm.test(pm.variables.get(\"schema_locinsts\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_locinsts_content\", responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_locinsts}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_locinsts}}"
									]
								},
								"description": "This is to get location.jsonn to be used in later tests."
							},
							"response": []
						},
						{
							"name": "loccamp.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "291cfdc5-e06e-4341-aeb1-6cad8681b2d3",
										"type": "text/javascript",
										"exec": [
											"pm.test(pm.variables.get(\"schema_loccamp\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_loccamp_content\", responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_loccamp}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_loccamp}}"
									]
								},
								"description": "This is to get location.jsonn to be used in later tests."
							},
							"response": []
						},
						{
							"name": "loccamps.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c70fbe96-442e-41db-bc73-2c9568e85896",
										"type": "text/javascript",
										"exec": [
											"pm.test(pm.variables.get(\"schema_loccamp\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_loccamps_content\", responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_loccamps}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_loccamps}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "loclib.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e705b107-9958-4aee-8a5a-52ae5d617f67",
										"type": "text/javascript",
										"exec": [
											"pm.test(pm.variables.get(\"schema_loclib\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_loclib_content\", responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_loclib}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_loclib}}"
									]
								},
								"description": "This is to get location.jsonn to be used in later tests."
							},
							"response": []
						},
						{
							"name": "loclibs.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5f826ad-c5c5-4908-b7dd-c55b071a036a",
										"type": "text/javascript",
										"exec": [
											"pm.test(pm.variables.get(\"schema_loclibs\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_loclibs_content\", responseBody);",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_loclibs}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_loclibs}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "servicepoint.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e705b107-9958-4aee-8a5a-52ae5d617f67",
										"exec": [
											"pm.test(pm.variables.get(\"schema_service_point\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_service_point_content\", responseBody);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_service_point}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_service_point}}"
									]
								},
								"description": "This is to get servicepoint.json to be used in later tests."
							},
							"response": []
						},
						{
							"name": "servicepoints.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5f826ad-c5c5-4908-b7dd-c55b071a036a",
										"exec": [
											"pm.test(pm.variables.get(\"schema_service_points\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"schema_service_points_content\", responseBody);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_service_points}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{mod_name}}",
										"{{mod_version}}",
										"ramls",
										"{{schema_service_points}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba3fd24c-3964-4dc7-82a0-8e0b3105911a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "Set okapi-token header to be used by following tests."
					},
					"response": []
				},
				{
					"name": "/service-points 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51e56114-b15a-46d4-9f32-bb5f86e2ef3a",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testservicepointid\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testservicepointname\"));",
									"    pm.response.to.have.jsonBody(\"code\", pm.environment.get(\"testservicepointcode\"));",
									"    pm.response.to.have.jsonBody(\"discoveryDisplayName\", pm.environment.get(\"testdiscoverydisplayname\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/service-points/\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Verify schema\", function () {    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_service_point_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c59d7b9c-931f-4316-9a71-b49cde0c4686",
								"exec": [
									"pm.environment.set(\"testservicepointname\", \"test service point\");",
									"pm.environment.set(\"testservicepointcode\", \"TSP\");",
									"pm.environment.set(\"testdiscoverydisplayname\", \"Test Service Point Discovery Name\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testservicepointname}}\",\n  \"code\": \"{{testservicepointcode}}\",\n  \"discoveryDisplayName\": \"{{testdiscoverydisplayname}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Happy path - /location-units/institutions",
			"item": [
				{
					"name": "/location-units/institutions 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0654ad5f-4864-4fe0-80d4-89cd7ce6d8ba",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"originalinstitutioncount\", jsonData.totalRecords);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"locinst.json\", JSON.parse(pm.environment.get(\"schema_locinst_content\")));",
									"    tv4.addSchema(\"locinst.json\", JSON.parse(pm.environment.get(\"schema_locinst_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinsts_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 201  - required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "212f3872-60b3-4416-b29c-bae1d254a502",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testinstitutionid\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testinstitutionname\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/location-units\" + jsonData.id);",
									"});    ",
									"    ",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinst_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3c45d4f3-e35f-468a-b190-59270e813e61",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"testinstitutionname\", \"test institution name\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testinstitutionname}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 201 - second institution -all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e027cd1-1776-4d63-aa4f-6a328e0e3fb2",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testinstitutionid2\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", \"Second Test Institution\");",
									"    pm.response.to.have.jsonBody(\"code\", \"SecTestInst\");",
									"    ",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/location-units\" + jsonData.id);",
									"});    ",
									"    ",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinst_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "33ef4c0d-54be-4513-8091-18fd4017dae0",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Second Test Institution\",\n  \"code\": \"SecTestInst\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b7524ba-70b2-46aa-a1cd-88ca81704c53",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinst_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testinstitutionname\"));",
									"}); ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/{{testinstitutionid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"{{testinstitutionid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11e0eeda-4264-413f-be22-b6519994a27a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});   ",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c400780-be1a-487d-bb25-20e630e44c84",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"testinstitutioncode\", \"TIC\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{testinstitutionid}}\",\n  \"name\": \"{{testinstitutionname}}\",\n  \"code\": \"{{testinstitutioncode}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/{{testinstitutionid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"{{testinstitutionid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 200 - verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "390404a8-1577-4928-a1c3-02135af8b384",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinst_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testinstitutionname\"));",
									"    pm.response.to.have.jsonBody(\"code\", pm.environment.get(\"testinstitutioncode\"));",
									"}); ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/{{testinstitutionid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"{{testinstitutionid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions?limit={{limit}}&offset=1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "545cc541-c681-49f0-b20c-cde37612c0fe",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"locinst.json\", JSON.parse(pm.environment.get(\"schema_locinst_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinsts_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});   ",
									"",
									"pm.test(\"Returned correct number of records\", function () {",
									"    pm.expect(jsonData.locinsts.length == pm.environment.get(\"originalinstitutioncount\")).to.be.true;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "881fa251-d03e-4eb8-9c95-c7c60dc4623d",
								"type": "text/javascript",
								"exec": [
									"let limit = pm.environment.get(\"originalinstitutioncount\");",
									"",
									"if (limit === 0) {",
									"    limit= 2;",
									"} ",
									"",
									"pm.variables.set(\"limit\", limit);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions?limit={{limit}}&offset=2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 200 -- query by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "116b1226-8a50-4fb8-b3a2-adfaa97c68d5",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"locinsts[0].id\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"locinsts[0].name\", pm.environment.get(\"testinstitutionname\"));",
									"    pm.response.to.have.jsonBody(\"locinsts[0].code\", pm.environment.get(\"testinstitutioncode\"));",
									" }); ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"locinst.json\", JSON.parse(pm.environment.get(\"schema_locinst_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinsts_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions?query=(name={{testinstitutionname}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							],
							"query": [
								{
									"key": "query",
									"value": "(name={{testinstitutionname}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institution/{id} 200 -- query by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af8ac487-aab6-4681-8d12-2161780a3407",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"locinsts[0].id\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"locinsts[0].name\", pm.environment.get(\"testinstitutionname\"));",
									"    pm.response.to.have.jsonBody(\"locinsts[0].code\", pm.environment.get(\"testinstitutioncode\"));",
									" }); ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"locinst.json\", JSON.parse(pm.environment.get(\"schema_locinst_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinsts_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions?query=(code={{testinstitutioncode}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							],
							"query": [
								{
									"key": "query",
									"value": "(code={{testinstitutioncode}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 200 -- query by non-existing code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04355754-f797-4c33-a7ee-b7e03c20122d",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"locinst.json\", JSON.parse(pm.environment.get(\"schema_locinst_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locinsts_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Empty array of institutions is returned\", function () {",
									"    pm.expect(pm.response.json().locinsts.length === 0);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions?query=(code=foo)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							],
							"query": [
								{
									"key": "query",
									"value": "(code=foo)"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8892c-44ce-4177-a157-6249fada76c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d2a70e9-61a4-490b-8e9e-cf078d6e34da",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative tests - /location-units/institutions",
			"item": [
				{
					"name": "/location-units/institutions 422 - duplicate entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "280a0653-4995-4429-90f8-46fc144a7754",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									"",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.expect(pm.response.json().errors[0].message = \"Institution already exists\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is not present\", function () {",
									"    pm.response.to.not.have.header(\"location\");",
									"});    ",
									"    ",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "79cb05c3-fb49-40f1-92dd-2af2d4fd87c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testinstitutionname}}\",\n  \"code\": \"{{testinstitutioncode}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59f3c419-44e2-432d-8a41-b502273dfdbc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1681e8da-8dd5-4e99-884b-02975459a972",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\"\n \n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 422  - missing required name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f921f471-f315-4ff4-a378-317694543cb1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"name\");",
									"    ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"{{locationcode}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 400 No payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6f26613-942c-4c33-9fa5-0fe5978dcc3f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 400 without request payload\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.clientError;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ec7e42ca-d200-4851-940e-deb7952d8da4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 400 Not well formed JSON payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36d1db30-0491-496a-b897-8b0c23862e1c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 400 with not well formed JSON payload\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.clientError;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0284f909-befc-4c76-9bb1-7ae350f06365",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"name\""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 400 - limit  -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35539344-e4fe-4b0a-b1a1-9749f94ccbec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400 when limit -1\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 400 - limit  exeeds max int value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20adaa64-17f8-439e-a183-4df49ab6c44a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400 when limit exeeds max value for integer\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 403 With tenant but no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea000beb-fdc2-40c2-abff-befa30f502d8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 403 No tenant and no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f3ec964-cf00-4b67-abdc-598a00cb9eb3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institution//{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a21c0cab-64e5-4870-a37d-ac2eeeac8f7d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institution/{{testinstitutionid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institution",
								"{{testinstitutionid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institution//{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7767ac7b-9083-4523-8105-7172f52a516f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/l/location-units/institution/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"l",
								"location-units",
								"institution",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institution/foo 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7767ac7b-9083-4523-8105-7172f52a516f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/l/location-units/institution/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"l",
								"location-units",
								"institution",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0adce64-b423-4c59-baad-f1c249d27c27",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ad106953-c49e-4848-8bb4-114af0cd2ce2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{testlocationinstitutionid}}\",\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/{{testinstitutionid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"{{testinstitutionid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5875898f-1801-4821-9ef1-27ce48980ce2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51aa7ff2-5b02-4e88-a346-dc3d99619ba8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\" : \"foo\",\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\"\n \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7eaf026-f875-4be4-8235-428e7e0c0159",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/{{testioninstitutionid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"{{testioninstitutionid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa245b6-d3ed-47ed-ad82-cde359b1a650",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns not OK for non-existing id\", function () {",
									"    // TODO: https://issues.folio.org/browse/MODINVSTOR-81",
									"    // pm.response.to.have.status(404);",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"{{$guid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Happy path - /location-units/campuses",
			"item": [
				{
					"name": "/location-units/campuses 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1409d67-2065-4648-9733-36bbd1ce8552",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"originalcampuscount\", jsonData.totalRecords);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loccamp.json\", JSON.parse(pm.environment.get(\"schema_loccamp_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamps_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses 201 - required fields only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93d2931b-c44d-4045-96ff-bad9c2f2c450",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testcampusid\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testcampusname\"));",
									"     pm.response.to.have.jsonBody(\"institutionId\", pm.environment.get(\"testinstitutionid\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/location-units\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamp_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d3c91a40-e0dc-4541-8700-8fac039e377d",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"testcampusname\", \"test location campus\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testcampusname}}\",\n  \"institutionId\" : \"{{testinstitutionid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses 201 -  second campus - all fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11ab070d-9d4d-41b4-83e5-240b51dcff73",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testcampusid2\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", \"second test campus\");",
									"     pm.response.to.have.jsonBody(\"institutionId\", pm.environment.get(\"testinstitutionid2\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/location-units\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamp_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a650cced-13fc-4310-ac4e-e9131639f4e7",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"second test campus\",\n  \"code\" : \"SecTestCamp\",\n  \"institutionId\" : \"{{testinstitutionid2}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dcf80ec-bc51-4371-8636-abc49dc560c7",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamp_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testcampusname\"));",
									"     pm.response.to.have.jsonBody(\"institutionId\", pm.environment.get(\"testinstitutionid\"));",
									"});  ",
									" ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{testcampusid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{testcampusid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11e0eeda-4264-413f-be22-b6519994a27a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});   ",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f2cfd68b-107a-45cf-84f3-87fe87138c72",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"testcampuscode\", \"TCC\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{testcampusid}}\",\n  \"name\": \"{{testcampusname}}\",\n  \"code\": \"{{testcampuscode}}\",\n  \"institutionId\": \"{{testinstitutionid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{testcampusid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{testcampusid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 200 - verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbb17cef-c572-4948-9747-d3dd1bc224f4",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamp_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"testcampusid\"));",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testcampusname\"));",
									"    pm.response.to.have.jsonBody(\"code\", pm.environment.get(\"testcampuscode\"));",
									"    pm.response.to.have.jsonBody(\"institutionId\", pm.environment.get(\"testinstitutionid\"));",
									"}); ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{testcampusid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{testcampusid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses?limit={{limit}}&offset=2 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddee40da-4d16-4038-ba3b-cc745fbd689b",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loccamp.json\", JSON.parse(pm.environment.get(\"schema_loccamp_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamps_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});   ",
									"",
									"pm.test(\"Returned correct number of records\", function () {",
									"    pm.expect(jsonData.loccamps.length == pm.environment.get(\"originalcampuscount\")).to.be.true;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "394f72e2-cb66-4e44-8fbc-abdd6bd6bca9",
								"type": "text/javascript",
								"exec": [
									"let limit = pm.environment.get(\"originalcampuscount\");",
									"",
									"if (limit === 0) {",
									"    limit= 2;",
									"} ",
									"",
									"pm.variables.set(\"limit\", limit);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses?limit={{limit}}&offset=2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 200 -- query by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a35c5b53-ccb0-4abe-9880-dd2b89a4d3b9",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"loccamps[0].id\", pm.environment.get(\"testcampusid\"));",
									"    pm.response.to.have.jsonBody(\"loccamps[0].name\", pm.environment.get(\"testcampusname\"));",
									"    pm.response.to.have.jsonBody(\"loccamps[0].code\", pm.environment.get(\"testcampuscode\"));",
									"    pm.response.to.have.jsonBody(\"loccamps[0].institutionId\", pm.environment.get(\"testinstitutionid\"));",
									" }); ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loccamp.json\", JSON.parse(pm.environment.get(\"schema_loccamp_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamps_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses?query=(name={{testcampusname}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							],
							"query": [
								{
									"key": "query",
									"value": "(name={{testcampusname}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 200 -- query by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fc23c4e-9c92-4397-891d-0be7776021d4",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"loccamps[0].id\", pm.environment.get(\"testcampusid\"));",
									"    pm.response.to.have.jsonBody(\"loccamps[0].name\", pm.environment.get(\"testcampusname\"));",
									"    pm.response.to.have.jsonBody(\"loccamps[0].code\", pm.environment.get(\"testcampuscode\"));",
									"     pm.response.to.have.jsonBody(\"loccamps[0].institutionId\", pm.environment.get(\"testinstitutionid\"));",
									" }); ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loccamp.json\", JSON.parse(pm.environment.get(\"schema_loccamp_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamps_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses?query=(code={{testcampuscode}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							],
							"query": [
								{
									"key": "query",
									"value": "(code={{testcampuscode}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 200 -- query by non-existing code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9abe0efc-d023-4dc2-88a7-71790827f4fb",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loccamp.json\", JSON.parse(pm.environment.get(\"schema_loccamp_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loccamps_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Empty array of institutions is returned\", function () {",
									"    pm.expect(pm.response.json().loccamps.length === 0);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses?query=(code=foo)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							],
							"query": [
								{
									"key": "query",
									"value": "(code=foo)"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8892c-44ce-4177-a157-6249fada76c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d2a70e9-61a4-490b-8e9e-cf078d6e34da",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative tests - /location-units/campuses",
			"item": [
				{
					"name": "/location-units/campuses 422 - duplicate entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dca6e99b-ceb4-4394-b5a6-fc34d61a5168",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.expect(pm.response.json().errors[0].message = \"Campus already exists\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is not present\", function () {",
									"    pm.response.to.not.have.header(\"location\");",
									"});    ",
									"    ",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "79cb05c3-fb49-40f1-92dd-2af2d4fd87c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testcampusname}}\",\n  \"institutionId\" : \"{{testinstitutionid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59f3c419-44e2-432d-8a41-b502273dfdbc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1681e8da-8dd5-4e99-884b-02975459a972",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testcampusname}}\",\n  \"institutionId\" : \"{{testinstitutionid}}\"\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campus 422  - missing required name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "725a60fe-30e8-4235-99e7-117ea303e45f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"name\");",
									"    ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \n  \"institutionId\" : \"{{testinstitutionid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campus 422  - missing required institutionId field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d58d00c-f2d4-4053-8258-7abdd6768a54",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"institutionId\");",
									"    ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testcampusname}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses 400 No payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6f26613-942c-4c33-9fa5-0fe5978dcc3f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 400 without request payload\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.clientError;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ec7e42ca-d200-4851-940e-deb7952d8da4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses 400 Not well formed JSON payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36d1db30-0491-496a-b897-8b0c23862e1c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 400 with not well formed JSON payload\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.clientError;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0284f909-befc-4c76-9bb1-7ae350f06365",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"name\""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses 400 - limit  -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35539344-e4fe-4b0a-b1a1-9749f94ccbec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400 when limit -1\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses 400 -  max limit 2147483648",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35539344-e4fe-4b0a-b1a1-9749f94ccbec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400 when limit -1\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses 403 With tenant but no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea000beb-fdc2-40c2-abff-befa30f502d8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions 403 No tenant and no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f3ec964-cf00-4b67-abdc-598a00cb9eb3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses//{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a21c0cab-64e5-4870-a37d-ac2eeeac8f7d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{testcampusid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{testcampusid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses//{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7767ac7b-9083-4523-8105-7172f52a516f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/l/location-units/campuses/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"l",
								"location-units",
								"campuses",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/foo 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7767ac7b-9083-4523-8105-7172f52a516f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/l/location-units/campuses/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"l",
								"location-units",
								"campuses",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0adce64-b423-4c59-baad-f1c249d27c27",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ad106953-c49e-4848-8bb4-114af0cd2ce2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{testlocationinstitutionid}}\",\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{testcampusid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{testcampusid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5875898f-1801-4821-9ef1-27ce48980ce2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51aa7ff2-5b02-4e88-a346-dc3d99619ba8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\" : \"foo\",\n  \"name\": \"{{testcampusname}}\",\n  \"code\": \"{{testcampuscode}}\",\n  \"institutionId\" : \"{{testinstitutionId}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7eaf026-f875-4be4-8235-428e7e0c0159",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{testcampusid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{testcampusid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa245b6-d3ed-47ed-ad82-cde359b1a650",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns not OK for non-existing id\", function () {",
									"    // TODO: https://issues.folio.org/browse/MODINVSTOR-81",
									"    // pm.response.to.have.status(404);",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{$guid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Happy path - /location-units/libraries",
			"item": [
				{
					"name": "/location-units/libraries200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bdd1673-f7cd-4366-abd8-bea0b6194076",
								"type": "text/javascript",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"originallibrarycount\", jsonData.totalRecords);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loclib.json\", JSON.parse(pm.environment.get(\"schema_loclib_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclibs_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 201 - required fields only",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5659859-b6b6-4b5d-8e14-3cee240987be",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testlibraryid\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testlibraryname\"));",
									"     pm.response.to.have.jsonBody(\"campusId\", pm.environment.get(\"testcampusid\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/location-units\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclib_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c759b694-8f44-40f2-a7c5-974afb41a998",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"testlibraryname\", \"test location library\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testlibraryname}}\",\n  \"campusId\" : \"{{testcampusid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 201 - all required fields - second library",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "688fa303-721d-4826-a1b1-221159cb779c",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testlibraryid2\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", \"second test library\");",
									"     pm.response.to.have.jsonBody(\"campusId\", pm.environment.get(\"testcampusid2\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/location-units\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclib_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8899df9-fa8b-4f83-81eb-dee85159ace2",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"second test library\",\n  \"code\": \"SecTestLib\",\n  \"campusId\" : \"{{testcampusid2}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7349ee9-76c3-47aa-8cbe-382bd464134d",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclib_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testlibraryname\"));",
									"     pm.response.to.have.jsonBody(\"campusId\", pm.environment.get(\"testcampusid\"));",
									"});  ",
									" ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{testlibraryid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{testlibraryid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11e0eeda-4264-413f-be22-b6519994a27a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});   ",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4766ddc6-0a55-4a23-83f9-bc244d6494d3",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"testlibrarycode\", \"TLibC\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{testlibraryid}}\",\n  \"name\": \"{{testlibraryname}}\",\n  \"code\": \"{{testlibrarycode}}\",\n  \"campusId\": \"{{testcampusid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{testlibraryid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{testlibraryid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 200 - verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8369105e-45f6-4e77-904a-769167c4e051",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclib_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"testlibraryid\"));",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testlibraryname\"));",
									"    pm.response.to.have.jsonBody(\"code\", pm.environment.get(\"testlibrarycode\"));",
									"    pm.response.to.have.jsonBody(\"campusId\", pm.environment.get(\"testcampusid\"));",
									"}); ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{testlibraryid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{testlibraryid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries?limit={{limit}}&offset=1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1eaed7ea-09be-4328-a11f-9cb039e7ed25",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loclib.json\", JSON.parse(pm.environment.get(\"schema_loclib_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclibs_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});   ",
									"",
									"pm.test(\"Returned correct number of records\", function () {",
									"    pm.expect(jsonData.loclibs.length == pm.environment.get(\"originallibrarycount\")).to.be.true;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ede8a3bb-5d82-4e9c-8ee2-a92ffbc0193c",
								"type": "text/javascript",
								"exec": [
									"let limit = pm.environment.get(\"originallibrarycount\");",
									"",
									"if (limit === 0) {",
									"    limit= 2;",
									"} ",
									"",
									"pm.variables.set(\"limit\", limit);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries?limit={{limit}}&offset=2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 200 -- query by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3463fe4-df01-4371-9cbd-e0794a340042",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"loclibs[0].id\", pm.environment.get(\"testlibraryid\"));",
									"    pm.response.to.have.jsonBody(\"loclibs[0].name\", pm.environment.get(\"testlibraryname\"));",
									"    pm.response.to.have.jsonBody(\"loclibs[0].code\", pm.environment.get(\"testlibrarycode\"));",
									"    pm.response.to.have.jsonBody(\"loclibs[0].campusId\", pm.environment.get(\"testcampusid\"));",
									" }); ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loclib.json\", JSON.parse(pm.environment.get(\"schema_loclib_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclibs_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries?query=(name={{testlibraryname}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							],
							"query": [
								{
									"key": "query",
									"value": "(name={{testlibraryname}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 200 -- query by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dd1eacd-7a68-489f-9c3e-c080fb990eac",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"loclibs[0].id\", pm.environment.get(\"testlibraryid\"));",
									"    pm.response.to.have.jsonBody(\"loclibs[0].name\", pm.environment.get(\"testlibraryname\"));",
									"    pm.response.to.have.jsonBody(\"loclibs[0].code\", pm.environment.get(\"testlibrarycode\"));",
									"    pm.response.to.have.jsonBody(\"loclibs[0].campusId\", pm.environment.get(\"testcampusid\"));",
									" }); ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loclib.json\", JSON.parse(pm.environment.get(\"schema_loclib_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclibs_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries?query=(code={{testlibrarycode}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							],
							"query": [
								{
									"key": "query",
									"value": "(code={{testlibrarycode}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 200 -- query by non-existing code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c87366b-78f3-45e9-a562-426f88c3ffaf",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"loclib.json\", JSON.parse(pm.environment.get(\"schema_loclib_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_loclibs_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Empty array of institutions is returned\", function () {",
									"    pm.expect(pm.response.json().loclibs.length === 0);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries?query=(code=foo)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							],
							"query": [
								{
									"key": "query",
									"value": "(code=foo)"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87d8892c-44ce-4177-a157-6249fada76c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d2a70e9-61a4-490b-8e9e-cf078d6e34da",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative tests - /location-units/libraries",
			"item": [
				{
					"name": "/location-units/libraries 422 - duplicate entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41ad253b-ba34-4501-83b4-da1e95358208",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.expect(pm.response.json().errors[0].message === \"Library already exists\");",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is not present\", function () {",
									"    pm.response.to.not.have.header(\"location\");",
									"});    ",
									"    ",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "79cb05c3-fb49-40f1-92dd-2af2d4fd87c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testlibraryname}}\",\n  \"campusId\" : \"{{testcampusid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59f3c419-44e2-432d-8a41-b502273dfdbc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1681e8da-8dd5-4e99-884b-02975459a972",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testlibraryname}}\",\n  \"campusId\" : \"{{testcampusid}}\"\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 422  - missing required name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69c8d397-111b-43bf-958b-be803f6c6061",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"name\");",
									"    ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusId\" : \"{{testcampusid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 422  - missing required campusId field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c773fba5-9467-4784-b6c3-4e44374562dd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"campusId\");",
									"    ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testlibraryname}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 400 No payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6f26613-942c-4c33-9fa5-0fe5978dcc3f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 400 without request payload\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.clientError;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ec7e42ca-d200-4851-940e-deb7952d8da4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 400 Not well formed JSON payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36d1db30-0491-496a-b897-8b0c23862e1c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 400 with not well formed JSON payload\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.clientError;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0284f909-befc-4c76-9bb1-7ae350f06365",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"name\""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 400 - limit  -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35539344-e4fe-4b0a-b1a1-9749f94ccbec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400 when limit -1\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 400 - limit  exeeds max int value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20adaa64-17f8-439e-a183-4df49ab6c44a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400 when limit exeeds max value for integer\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/librarires 403 With tenant but no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea000beb-fdc2-40c2-abff-befa30f502d8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries 403 No tenant and no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f3ec964-cf00-4b67-abdc-598a00cb9eb3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/librarires/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a21c0cab-64e5-4870-a37d-ac2eeeac8f7d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{testlibraryid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{testlibraryid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7767ac7b-9083-4523-8105-7172f52a516f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/l/location-units/libraries/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"l",
								"location-units",
								"libraries",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/foo 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7767ac7b-9083-4523-8105-7172f52a516f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/l/location-units/libraries/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"l",
								"location-units",
								"libraries",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0adce64-b423-4c59-baad-f1c249d27c27",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ad106953-c49e-4848-8bb4-114af0cd2ce2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{testlocationinstitutionid}}\",\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{testlibraryid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{testlibraryid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5875898f-1801-4821-9ef1-27ce48980ce2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 404 for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51aa7ff2-5b02-4e88-a346-dc3d99619ba8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\" : \"foo\",\n  \"name\": \"{{testlibraryname}}\",\n  \"campusId\": \"{{testlocationId}}\"\n \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7eaf026-f875-4be4-8235-428e7e0c0159",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{testlibraryId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{testlibraryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aa245b6-d3ed-47ed-ad82-cde359b1a650",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns not OK for non-existing id\", function () {",
									"    // TODO: https://issues.folio.org/browse/MODINVSTOR-81",
									"    // pm.response.to.have.status(404);",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{$guid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Happy path - locations",
			"item": [
				{
					"name": "/locations 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ac312d2-c505-41c6-9493-f047b4107a88",
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"if(jsonData.locations.length >0){",
									"   pm.environment.set(\"originallocationcount\", jsonData.totalRecords);",
									"}",
									"",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Contains data\", function () {",
									" pm.expect(jsonData.locations.length > 0).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"location.json\", JSON.parse(pm.environment.get(\"schema_location_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locations_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51e56114-b15a-46d4-9f32-bb5f86e2ef3a",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testlocationid\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", jsonData.id);",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testlocationname\"));",
									"    pm.response.to.have.jsonBody(\"code\", pm.environment.get(\"testlocationcode\"));",
									"    pm.response.to.have.jsonBody(\"institutionId\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"campusId\", pm.environment.get(\"testcampusid\"));",
									"    pm.response.to.have.jsonBody(\"libraryId\", pm.environment.get(\"testlibraryid\"));",
									"    pm.response.to.have.jsonBody(\"primaryServicePoint\", pm.environment.get(\"testservicepointid\"));",
									"    pm.response.to.have.jsonBody(\"servicePointIds[0]\", pm.environment.get(\"testservicepointid\"));",
									"});  ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/locations\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Verify schema\", function () {    ",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_location_content\")))).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c59d7b9c-931f-4316-9a71-b49cde0c4686",
								"exec": [
									"pm.environment.set(\"testlocationname\", \"test location name\");",
									"pm.environment.set(\"testlocationcode\", \"TLC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{testlocationname}}\",\n  \"code\": \"{{testlocationcode}}\",\n  \"institutionId\": \"{{testinstitutionid}}\",\n  \"campusId\": \"{{testcampusid}}\",\n  \"libraryId\": \"{{testlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 201 - campusid from another institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df435d6e-c449-4f68-8a5a-2021ba67d831",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testlocationid2\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/locations\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Verify schema\", function () {    ",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_location_content\")))).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20f8be3b-ad0e-4527-bb71-8a07c53129c0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"second test location with invalid campusids\",\n  \"code\": \"SecTestLibrary\",\n  \"institutionId\": \"{{testinstitutionid}}\",\n  \"campusId\": \"{{testcampusid2}}\",\n  \"libraryId\": \"{{testlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 201 - libraryid from another campus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e876a58e-faa3-49a5-a0e2-8d0f8168b735",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testlocationid3\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"    ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/locations\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Verify schema\", function () {    ",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_location_content\")))).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20f8be3b-ad0e-4527-bb71-8a07c53129c0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"third test location with invalid campusids\",\n  \"code\": \"ThirdTestLibrary\",\n  \"institutionId\": \"{{testinstitutionid2}}\",\n  \"campusId\": \"{{testcampusid2}}\",\n  \"libraryId\": \"{{testlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 201 - institutionid from another campus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e309f703-2e28-40f1-a7b2-27ed6a72e9d3",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"console.log(\"id\" + jsonData.id);",
									"",
									"pm.environment.set(\"testlocationid4\", jsonData.id);",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.jsonBody();",
									"    ",
									"});   ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is present\", function () {",
									"    pm.response.to.have.header(\"location\");",
									"    pm.response.to.have.header(\"location\", \"/locations\" + jsonData.id)",
									"});    ",
									"    ",
									"pm.test(\"Verify schema\", function () {    ",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_location_content\")))).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20f8be3b-ad0e-4527-bb71-8a07c53129c0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"forth test location with invalid campusids\",\n  \"code\": \"ForthTestLibrary\",\n  \"institutionId\": \"{{testinstitutionid}}\",\n  \"campusId\": \"{{testcampusid2}}\",\n  \"libraryId\": \"{{testlibraryid2}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe52b9b2-fc8c-496a-b4ba-d60d47f7581d",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_location_content\")))).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"testlocationid\"));",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testlocationname\"));",
									"    pm.response.to.have.jsonBody(\"code\", pm.environment.get(\"testlocationcode\"));",
									"    pm.response.to.have.jsonBody(\"institutionId\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"campusId\", pm.environment.get(\"testcampusid\"));",
									"    pm.response.to.have.jsonBody(\"libraryId\", pm.environment.get(\"testlibraryid\"));",
									"    pm.response.to.have.jsonBody(\"primaryServicePoint\", pm.environment.get(\"testservicepointid\"));",
									"}); ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 200 -- query by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1935b1ad-26ee-4b0c-8b4a-d39d06163d22",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"locations[0].id\", pm.environment.get(\"testlocationid\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].name\", pm.environment.get(\"testlocationname\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].code\", pm.environment.get(\"testlocationcode\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].institutionId\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].campusId\", pm.environment.get(\"testcampusid\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].libraryId\", pm.environment.get(\"testlibraryid\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].primaryServicePoint\", pm.environment.get(\"testservicepointid\"));",
									"}); ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"location.json\", JSON.parse(pm.environment.get(\"schema_location_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locations_content\")))).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations?query=(name={{testlocationname}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "query",
									"value": "(name={{testlocationname}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 200 -- query by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e9d1a17-d422-4c77-8d9a-636beb0dba79",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"locations[0].id\", pm.environment.get(\"testlocationid\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].name\", pm.environment.get(\"testlocationname\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].code\", pm.environment.get(\"testlocationcode\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].institutionId\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].campusId\", pm.environment.get(\"testcampusid\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].libraryId\", pm.environment.get(\"testlibraryid\"));",
									"    pm.response.to.have.jsonBody(\"locations[0].primaryServicePoint\", pm.environment.get(\"testservicepointid\"));",
									"}); ",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"location.json\", JSON.parse(pm.environment.get(\"schema_location_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locations_content\")))).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations?query=(code={{testlocationcode}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "query",
									"value": "(code={{testlocationcode}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations?limit={{limit}}&offset=1 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "250579b6-88d1-4ef5-b10c-55e7b4d78e5e",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"/locations GET OK\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"location.json\", JSON.parse(pm.environment.get(\"schema_location_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locations_content\")))).to.be.true;",
									"});   ",
									"",
									"pm.test(\"Returned correct number of records\", function () {",
									"       pm.expect(jsonData.locations.length == pm.environment.get(\"originallocationcount\")).to.be.true;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "35c5c253-ec2c-4f52-844e-0e6e62af9292",
								"type": "text/javascript",
								"exec": [
									"let limit = pm.environment.get(\"originallocationcount\");",
									"",
									"if (limit === 0) {",
									"    limit= 2;",
									"} ",
									"",
									"pm.variables.set(\"limit\", limit);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations?limit={{limit}}&offset=2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 200 -- query by non-existing code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "695d4b17-2b97-4e34-9359-99edcb749106",
								"type": "text/javascript",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"location.json\", JSON.parse(pm.environment.get(\"schema_location_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_locations_content\")))).to.be.true;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations?query=(code=foo)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "query",
									"value": "(code=foo)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11e0eeda-4264-413f-be22-b6519994a27a",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});   ",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b61e6f94-aa53-48e3-8580-88d3bee438ca",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{testlocationid}}\",\n  \"name\": \"{{testlocationname}}\",\n  \"code\": \"{{testlocationcode}}\",\n  \"isActive\": false,\n  \"institutionId\": \"{{testinstitutionid}}\",\n  \"campusId\": \"{{testcampusid}}\",\n  \"libraryId\": \"{{testlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 200 - verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b726e9e1-15e0-4fd3-9f3f-503d4dd7278a",
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Returns status 200\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.have.jsonBody();",
									" });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_location_content\")))).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {    ",
									"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"testlocationid\"));",
									"    pm.response.to.have.jsonBody(\"name\", pm.environment.get(\"testlocationname\"));",
									"    pm.response.to.have.jsonBody(\"code\", pm.environment.get(\"testlocationcode\"));",
									"    pm.response.to.have.jsonBody(\"isActive\", false);",
									"    pm.response.to.have.jsonBody(\"institutionId\", pm.environment.get(\"testinstitutionid\"));",
									"    pm.response.to.have.jsonBody(\"campusId\", pm.environment.get(\"testcampusid\"));",
									"    pm.response.to.have.jsonBody(\"libraryId\", pm.environment.get(\"testlibraryid\"));",
									"    pm.response.to.have.jsonBody(\"primaryServicePoint\", pm.environment.get(\"testservicepointid\"));",
									"    pm.response.to.have.jsonBody(\"servicePointIds[0]\", pm.environment.get(\"testservicepointid\"));",
									"}); ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bac8c4f9-1a1f-4c62-8dba-6fd368a5243e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative tests - locations",
			"item": [
				{
					"name": "/locations 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd09c669-305a-42a5-8eba-bb5d8617223e",
								"exec": [
									"pm.test(\"/locations POST not OK without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1681e8da-8dd5-4e99-884b-02975459a972",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 422  - missing required name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12e4592d-fb73-4485-a3d5-8ee636ed582f",
								"exec": [
									"pm.test(\"/locations POST not OK without required name field\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"name\");",
									"    ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"{{locationcode}}\",\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 422  - missing required code field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ce774b3-be46-4abc-991f-1374d8db85bc",
								"exec": [
									"pm.test(\"/shelf-locations POST not OK without required name field\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"code\");",
									"    ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData  = pm.response.json();",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 422  - missing required institutionId field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a9bc104-f4be-470d-9108-be03002d1448",
								"exec": [
									"pm.test(\"/locations POST not OK without required name field\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"institutionId\");",
									"    ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 422  - missing required campusId field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "340492d4-9c54-4c87-bf9d-83eb98b89372",
								"exec": [
									"pm.test(\"/shelf-locations POST not OK without required name field\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"campusId\");",
									"    ",
									"});",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 422  - missing required primaryServicePoint field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "340492d4-9c54-4c87-bf9d-83eb98b89372",
								"exec": [
									"pm.test(\"/locations POST not OK without required name field\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"may not be null\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"primaryServicePoint\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 422  - missing non-required (but secretly required) servicePointIds field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "340492d4-9c54-4c87-bf9d-83eb98b89372",
								"exec": [
									"pm.test(\"/locations POST not OK without required name field\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.response.json;",
									"});",
									"",
									"pm.test(\"Correct error message returned\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal(\"A location must have at least one Service Point assigned.\");",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal(\"servicePointIds\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let jsonData = pm.response.json();",
									"    ",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    ",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaa85812-a2b4-4073-a699-40c2c19d0a9d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 400 No payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2d75f84-abdd-4d1f-ae0d-98959ef42edf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations POST returns 400 without request payload\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.clientError;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ec7e42ca-d200-4851-940e-deb7952d8da4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 400 Not well formed JSON payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd0c3f3c-9ca5-4469-b380-0e7c6b436f6a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations POST returns 400 with not well formed JSON payload\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.clientError;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0284f909-befc-4c76-9bb1-7ae350f06365",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"name\""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 500 - invalid institutionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27b22b0c-8be9-4186-badc-240feab69d58",
								"exec": [
									"//https://issues.folio.org/browse/MODINVSTOR-99",
									"",
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});   ",
									"    ",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is not present\", function () {",
									"    pm.response.to.not.have.header(\"location\");",
									"});    ",
									"    ",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a6e35bb3-9122-4b49-9ec2-1eff9eb633ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"institutionId\": \"{{$guid}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 500 - id not uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf8010ef-f2e6-4e78-9195-45d24b520fe7",
								"exec": [
									"//https://issues.folio.org/browse/MODINVSTOR-100",
									"pm.test(\"Status code 500\", function () {",
									"    pm.response.to.have.status(500);",
									" });   ",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'Location' header is not present\", function () {",
									"    pm.response.to.not.have.header(\"location\");",
									"});    ",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a6e35bb3-9122-4b49-9ec2-1eff9eb633ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"institutionId\": \"7777\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 400 - limit  -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35539344-e4fe-4b0a-b1a1-9749f94ccbec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400 when limit -1\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 400 - limit  exeeds max int value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20adaa64-17f8-439e-a183-4df49ab6c44a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Returns status 400 when limit exeeds max value for integer\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"    pm.response.to.have.body;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e24c44-537a-4f1a-85ef-368898375f74",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 403 With tenant but no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c6a5e63-9c58-43d3-9b45-0f76ee016e44",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations GET returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations 403 No tenant and no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "390653f0-11e4-45e4-ac6d-d8169dd26470",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations GET returns 403 without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b57d51c3-ed85-4c4c-91c8-d2f3cdadca36",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations GET not OK without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationinstitutionid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationinstitutionid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49c93149-94b1-4011-8c9d-8c5d037edc9a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations GET not OK for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f01eb-1b35-424d-9279-7a04c482b2fa",
								"exec": [
									"pm.test(\"/locations/{id} PUT not OK without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ad106953-c49e-4848-8bb4-114af0cd2ce2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{testlocationid}}\",\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"isActive\": true,\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{test_new_val}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{test_new_val}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/foo 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98a01d7f-e81c-4ae1-95c6-e445e9f1bcba",
								"exec": [
									"pm.test(\"/locations/{id} PUT not OK for non-existing id\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51aa7ff2-5b02-4e88-a346-dc3d99619ba8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"foo\",\n  \"name\": \"{{locationname}}\",\n  \"code\": \"{{locationcode}}\",\n  \"isActive\": true,\n  \"institutionId\": \"{{locationinstitutionid}}\",\n  \"campusId\": \"{{locationcampusid}}\",\n  \"libraryId\": \"{{locationlibraryid}}\",\n  \"primaryServicePoint\": \"{{testservicepointid}}\",\n  \"servicePointIds\": [\n  \t\"{{testservicepointid}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75deb0cb-a138-43e4-98e9-cd9be1317ff7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations/{id} DELETE not OK without token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82f012e9-9223-4b89-8e58-a9eb734bfac9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations/{id} DELETE not OK for non-existing id\", function () {",
									"    // TODO: https://issues.folio.org/browse/MODINVSTOR-81",
									"    // pm.response.to.have.status(404);",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{$guid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "/locations/{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27d6c230-ca00-4e90-b3f1-c299e1380fbc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations/{id} DELETE OK\", function () {",
									"pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ee155af-5074-4254-91b8-06fb10ae1d18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 204 - second location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27d6c230-ca00-4e90-b3f1-c299e1380fbc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations/{id} DELETE OK\", function () {",
									"pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ee155af-5074-4254-91b8-06fb10ae1d18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationid2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationid2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 204 - third location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27d6c230-ca00-4e90-b3f1-c299e1380fbc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations/{id} DELETE OK\", function () {",
									"pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ee155af-5074-4254-91b8-06fb10ae1d18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationid3}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationid3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 204 - forth location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27d6c230-ca00-4e90-b3f1-c299e1380fbc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/locations/{id} DELETE OK\", function () {",
									"pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ee155af-5074-4254-91b8-06fb10ae1d18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations/{{testlocationid4}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations",
								"{{testlocationid4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/locations/{id} 200 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "485bd4ef-b3f7-459a-a80e-215a4dc5fb70",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty array of locations is returned\", function () {",
									"    pm.expect(pm.response.json().locations.length === 0);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations?query=(id={{testlocationid}} or id={{testlocationid2}} or id={{testlocationid3}} or id={{testlocationid4}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"locations"
							],
							"query": [
								{
									"key": "query",
									"value": "(id={{testlocationid}} or id={{testlocationid2}} or id={{testlocationid3}} or id={{testlocationid4}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points/{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27d6c230-ca00-4e90-b3f1-c299e1380fbc",
								"exec": [
									"pm.test(\"/service-points/{id} DELETE OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ee155af-5074-4254-91b8-06fb10ae1d18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{testservicepointid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{testservicepointid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points/{id} 200 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "485bd4ef-b3f7-459a-a80e-215a4dc5fb70",
								"exec": [
									"pm.test(\"Return status 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty array of service points is returned\", function () {",
									"    pm.expect(pm.response.json().servicepoints.length).to.equal(0);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points?query=(id=={{testservicepointid}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							],
							"query": [
								{
									"key": "query",
									"value": "(id=={{testservicepointid}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2c33421-54f7-4a7e-bd9a-a7d7445228c7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b904051-4aac-4faa-adc3-f87676789a56",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{testlibraryid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{testlibraryid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 204 - second library",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2c33421-54f7-4a7e-bd9a-a7d7445228c7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b904051-4aac-4faa-adc3-f87676789a56",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries/{{testlibraryid2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries",
								"{{testlibraryid2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/libraries/{id} 200 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5375f474-a5ea-43a5-b105-2d09046ea62e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty array of libraries is returned\", function () {",
									"    pm.expect(pm.response.json().loclibs.length === 0);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries?query=(id ={{testlibraryid}} or id ={{testlibraryid2}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"libraries"
							],
							"query": [
								{
									"key": "query",
									"value": "(id ={{testlibraryid}} or id ={{testlibraryid2}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2c33421-54f7-4a7e-bd9a-a7d7445228c7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{testcampusid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{testcampusid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 204 - delete second campus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2c33421-54f7-4a7e-bd9a-a7d7445228c7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses/{{testcampusid2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses",
								"{{testcampusid2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/campuses/{id} 200 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "257c4891-5983-48d2-ad8a-8d9a67be35ca",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty array of campuses is returned\", function () {",
									"    pm.expect(pm.response.json().loccamps.length === 0);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses?query=(id ={{testcampusid}} or id ={{testcampusid2}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"campuses"
							],
							"query": [
								{
									"key": "query",
									"value": "(id ={{testcampusid}} or id ={{testcampusid2}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d987a529-a13c-44a2-aa62-f96357e86c3f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/{{testinstitutionid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"{{testinstitutionid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 204 -delete second institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d987a529-a13c-44a2-aa62-f96357e86c3f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions/{{testinstitutionid2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions",
								"{{testinstitutionid2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions/{id} 200 - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc0e69db-cbc5-46d0-952e-1a1fdfe929ba",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Return status 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty array of institutions is returned\", function () {",
									"    pm.expect(pm.response.json().locinsts.length === 0);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions?query=(id={{testinstitutionid}} or id={{testinstitutionid2}} )",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							],
							"query": [
								{
									"key": "query",
									"value": "(id={{testinstitutionid}} or id={{testinstitutionid2}} )"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/location-units/institutions  204",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dd63e4c-d615-4e1c-ab9d-9ec8aaca0041",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"/location-units/institutions DELETE OK\", function () {",
									"   // https://issues.folio.org/browse/MODINVSTOR-83",
									"    // pm.response.to.have.status(204);",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.environment.unset(\"testlibraryid\");",
									"pm.environment.unset(\"testlibraryname\");",
									"pm.environment.unset(\"testlibrarycode\");",
									"pm.environment.unset(\"originallibrarycount\");",
									"",
									"pm.environment.unset(\"testcampusid\");",
									"pm.environment.unset(\"testcampusname\");",
									"pm.environment.unset(\"testcampuscode\");",
									"pm.environment.unset(\"originalcampuscount\");",
									"",
									"pm.environment.unset(\"testinstitutionid\");",
									"pm.environment.unset(\"testinstitutionname\");",
									"pm.environment.unset(\"testinstitutioncode\");",
									"pm.environment.unset(\"originalinstitutioncount\");",
									"",
									"",
									"//schema variables",
									"pm.environment.unset(\"schema_locations_content\");",
									"pm.environment.unset(\"schema_location_content\");",
									"pm.environment.unset(\"schema_locinsts_content\");",
									"pm.environment.unset(\"schema_locinst_content\");",
									"pm.environment.unset(\"schema_loccamps_content\");",
									"pm.environment.unset(\"schema_loccamp_content\");",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"location-units",
								"institutions"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f7463ae5-2c8e-462c-b8da-319cf59e011b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3cd1b95c-ad30-49b0-9bb1-84211ed68777",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "34888741-85cf-420d-b669-d0edcfd7f90e",
			"key": "mod_name",
			"value": "mod-inventory-storage",
			"type": "string"
		},
		{
			"id": "81c7424c-72c9-4c42-8a75-2e17d3b5b955",
			"key": "mod_version",
			"value": "master",
			"type": "string"
		},
		{
			"id": "c6c51813-d987-4d54-99ba-c1c6347d46c7",
			"key": "raml_version",
			"value": "bf5b23978b71776c59eca1fd6b33c7fb315b0f2a",
			"type": "string"
		},
		{
			"id": "b979f3e4-d0af-4064-92a7-89d46a2eaf1f",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "3a16e5be-55aa-440c-93e1-f3d4343ce9c5",
			"key": "schema_location",
			"value": "location.json",
			"type": "string"
		},
		{
			"id": "7cc22871-9078-4045-8345-7f97255a457b",
			"key": "schema_locations",
			"value": "locations.json",
			"type": "string"
		},
		{
			"id": "98ece27e-df4e-4a25-be80-be8df10a50d5",
			"key": "schema_locinsts",
			"value": "locinsts.json",
			"type": "string"
		},
		{
			"id": "6f61582c-c0f0-45f6-8fb8-e463609e06c3",
			"key": "schema_locinst",
			"value": "locinst.json",
			"type": "string"
		},
		{
			"id": "6f9f0ab2-678f-4b45-ad74-8ada660c0487",
			"key": "schema_loccamps",
			"value": "loccamps.json",
			"type": "string"
		},
		{
			"id": "5db802d3-4d50-4d05-bf55-fe84eb941178",
			"key": "schema_loccamp",
			"value": "loccamp.json",
			"type": "string"
		},
		{
			"id": "43f9267c-494c-4e08-ba27-995c10502d19",
			"key": "schema_loclibs",
			"value": "loclibs.json",
			"type": "string"
		},
		{
			"id": "bc4c9df1-30da-4066-b85e-5306d5519c7a",
			"key": "schema_loclib",
			"value": "loclib.json",
			"type": "string"
		},
		{
			"id": "bb18ecae-4c2b-4dc5-b454-e2f9cb99c043",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "f49e2fde-b3f5-4e54-97e9-242e5b5bafad",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "2666668e-3604-418e-94fd-779b85b7f5ae",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "f119b4ca-dcba-4a96-94ab-0adaf99170af",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "da41d8e3-fbfb-4686-9dd2-0d1292e38cc1",
			"key": "schema_service_points",
			"value": "servicepoints.json",
			"type": "string"
		},
		{
			"id": "a28ae56e-bde4-4466-aa30-be5c804cd8b6",
			"key": "schema_service_point",
			"value": "servicepoint.json",
			"type": "string"
		}
	]
}