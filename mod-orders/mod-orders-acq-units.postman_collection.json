{
	"info": {
		"_postman_id": "d6d32a10-cac3-4781-b9fc-2543a96d5917",
		"name": "mod-orders-acq-units",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "458e788d-f4f1-4a2e-bf7f-dce99511f09a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b46996e-04ac-475d-8d3a-fe8947e8db87",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-orders\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let user = globals.testData.users.admin.user;",
											"utils.sendGetRequest(\"/authn/credentials?query=userId=\" + user.id, (err, res) => {",
											"    // If user already has credentials and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        utils.sendDeleteRequest(\"/authn/credentials/\" + res.json().credentials[0].id, (err, res) => {",
											"            pm.test(user.username + \" user's credentials deleted\", () => {",
											"                pm.expect(res.code).to.eql(204);",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/perms/users?query=userId==\" + globals.testData.users.admin.user.id, (err, res) => {",
											"    // If user already has permissions and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        utils.sendDeleteRequest(\"/perms/users/\" + res.json().permissionUsers[0].id, (err, res) => {",
											"            pm.test(globals.testData.users.admin.user.username + \" user's permissions deleted\", () => {",
											"                pm.expect(res.code).to.eql(204);",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"utils.sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-orders with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"testConfigs.configNames.forEach(configName => utils.createOrdersConfig(configName));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare required external data",
					"item": [
						{
							"name": "Create vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Vendor is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ISBN identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"ISBN is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\":\"ISBN\",\r\n  \"source\": \"folio\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create units",
					"item": [
						{
							"name": "Fully protected",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let body = globals.testData.unit;",
											"body.name += \" - Fully protected\";",
											"",
											"pm.variables.set(\"unitBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"fullyProtectedUnitId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{unitBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let body = globals.testData.unit;",
											"body.name += \" - Read open\";",
											"body.protectRead = false;",
											"",
											"pm.variables.set(\"unitBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"readOpenUnitId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{unitBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let body = globals.testData.unit;",
											"body.name += \" - Create open\";",
											"body.protectCreate = false;",
											"",
											"pm.variables.set(\"unitBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"createOpenUnitId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{unitBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create protect",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let body = globals.testData.unit;",
											"body.name += \" - Create protect\";",
											"body.protectRead = false;",
											"body.protectUpdate = false;",
											"body.protectDelete = false;",
											"body.protectCreate = true;",
											"",
											"pm.variables.set(\"unitBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"createProtectUnitId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{unitBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update protect",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let body = globals.testData.unit;",
											"body.name += \" - Update protect\";",
											"body.protectRead = false;",
											"body.protectUpdate = true;",
											"body.protectDelete = false;",
											"body.protectCreate = false;",
											"",
											"pm.variables.set(\"unitBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"updateProtectUnitId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{unitBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let body = globals.testData.unit;",
											"body.name += \" - Update open\";",
											"body.protectUpdate = false;",
											"",
											"pm.variables.set(\"unitBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"updateOpenUnitId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{unitBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete protect",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let body = globals.testData.unit;",
											"body.name += \" - Delete protect\";",
											"body.protectRead = false;",
											"body.protectUpdate = false;",
											"body.protectDelete = true;",
											"body.protectCreate = false;",
											"",
											"pm.variables.set(\"unitBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"deleteProtectUnitId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{unitBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let body = globals.testData.unit;",
											"body.name += \" - Delete open\";",
											"body.protectDelete = false;",
											"",
											"pm.variables.set(\"unitBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"deleteOpenUnitId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{unitBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"units"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create limited user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.limited.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.users.limited.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.limited.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.users.limited.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.limited.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-limitedUser\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.limited.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Test protectGet",
					"item": [
						{
							"name": "Create Open order with 1 line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"    // Set Open status and leave only one line",
											"    order.compositePoLines.pop();",
											"    order.workflowStatus = \"Open\";",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"firstOrderId\", jsonData.id); ",
											"    pm.environment.set(\"firstOrderFirstLineId\", jsonData.compositePoLines[0].id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Get order with 1 line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{firstOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{firstOrderId}}"
									]
								},
								"description": "There is no any acq unit assigned to this order so view is not restricted"
							},
							"response": []
						},
						{
							"name": "Get line of order with 1 line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order line can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{firstOrderFirstLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{firstOrderFirstLineId}}"
									]
								},
								"description": "There is no any acq unit assigned to this order so view is not restricted"
							},
							"response": []
						},
						{
							"name": "Create Draft order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(res.json())));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"secondOrderId\", jsonData.id); ",
											"    pm.environment.set(\"secondOrderFirstLineId\", jsonData.compositePoLines[0].id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Get order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{secondOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{secondOrderId}}"
									]
								},
								"description": "There is no any acq unit assigned to this order so view is not restricted"
							},
							"response": []
						},
						{
							"name": "Get line of order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{secondOrderFirstLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{secondOrderFirstLineId}}"
									]
								},
								"description": "There is no any acq unit assigned to this order so view is not restricted"
							},
							"response": []
						},
						{
							"name": "Get list of orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"2 orders should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totalRecords).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=cql.allRecords=1 sortBy poNumber/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "cql.allRecords=1 sortBy poNumber/sort.ascending"
										}
									]
								},
								"description": "There is no any order with assigned acq unit"
							},
							"response": []
						},
						{
							"name": "Get list of lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"3 lines should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totalRecords).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?query=cql.allRecords=1 sortBy poLineNumber/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "cql.allRecords=1 sortBy poLineNumber/sort.ascending"
										}
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of pieces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"4 pieces should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totalRecords).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=cql.allRecords=1 sortBy title/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "cql.allRecords=1 sortBy title/sort.ascending"
										}
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Assign fully protected unit to an order with 1 line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"firstOrderId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"        order.acqUnitIds.push(pm.environment.get(\"fullyProtectedUnitId\"));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{firstOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{firstOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order with 1 line - forbidden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can not be viewed\",  () => {",
											"    pm.response.to.be.forbidden;",
											"",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors.length).to.eql(1);",
											"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{firstOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{firstOrderId}}"
									]
								},
								"description": "Fully protected acq unit is assigned to this order so view is forbidden"
							},
							"response": []
						},
						{
							"name": "Get line of order with 1 line - forbidden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order line can not be viewed\",  () => {",
											"    pm.response.to.be.forbidden;",
											"",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors.length).to.eql(1);",
											"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{firstOrderFirstLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{firstOrderFirstLineId}}"
									]
								},
								"description": "There is no any acq unit assigned to this order so view is not restricted"
							},
							"response": []
						},
						{
							"name": "Assign read-only unit to an order with 2 lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"secondOrderId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"        order.acqUnitIds.push(pm.environment.get(\"readOpenUnitId\"));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{secondOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{secondOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order with 2 lines - success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{secondOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{secondOrderId}}"
									]
								},
								"description": "There is one acq unit assigned to this order but it does not restrict \"view\""
							},
							"response": []
						},
						{
							"name": "Get line of order with 2 lines - success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{secondOrderFirstLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{secondOrderFirstLineId}}"
									]
								},
								"description": "There is no any acq unit assigned to this order so view is not restricted"
							},
							"response": []
						},
						{
							"name": "Get list of orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Only one order should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totalRecords).to.eql(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=approved==false or approved==true sortBy poNumber/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "approved==false or approved==true sortBy poNumber/sort.ascending"
										}
									]
								},
								"description": "One order is now protected so user should not get it in the response"
							},
							"response": []
						},
						{
							"name": "Get list of lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"2 lines should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totalRecords).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?query=approved==false or approved==true sortBy poLineNumber/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "approved==false or approved==true sortBy poLineNumber/sort.ascending"
										}
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of pieces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"4 pieces should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.receivingHistory).to.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=cql.allRecords=1 sortBy title/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "cql.allRecords=1 sortBy title/sort.ascending"
										}
									]
								},
								"description": "Open order is now protected"
							},
							"response": []
						},
						{
							"name": "Assign user to protected unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92915c1b-6bde-4a36-9433-bc8f257b567d",
										"exec": [
											"var jsonData = {};",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"protectedUnitMembershipId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f1a616f-fd38-4215-96ab-50a48a033dec",
										"exec": [
											"let body = {};",
											"",
											"body.userId = globals.testData.users.regular.user.id;",
											"body.acquisitionsUnitId = pm.environment.get(\"fullyProtectedUnitId\");",
											"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{membershipBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/memberships",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"memberships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order with 1 line - success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{firstOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{firstOrderId}}"
									]
								},
								"description": "Fully protected acq unit is assigned to this order but user belongs to it so view is allowed"
							},
							"response": []
						},
						{
							"name": "Get line of order with 1 line - success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order line can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{firstOrderFirstLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{firstOrderFirstLineId}}"
									]
								},
								"description": "Fully protected acq unit is assigned to this order but user belongs to it so view is allowed"
							},
							"response": []
						},
						{
							"name": "Get order with 2 lines - success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{secondOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{secondOrderId}}"
									]
								},
								"description": "There is one acq unit assigned to this order but it does not restrict \"view\""
							},
							"response": []
						},
						{
							"name": "Get line of order with 2 lines - success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order can be viewed\",  () => pm.response.to.be.ok);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{secondOrderFirstLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{secondOrderFirstLineId}}"
									]
								},
								"description": "There is one acq unit assigned to this order but it does not restrict \"view\""
							},
							"response": []
						},
						{
							"name": "Get list of orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"2 orders should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totalRecords).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"3 lines should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totalRecords).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of pieces",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"4 pieces should be found\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.totalRecords).to.eql(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Unassign user from protected unit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/memberships/{{protectedUnitMembershipId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"memberships",
										"{{protectedUnitMembershipId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Test protectCreate",
					"item": [
						{
							"name": "Create order withous acq units by user without unit and assignment permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0e31459-5477-4f72-a9d3-9cc347090686",
										"exec": [
											"pm.test(\"Order is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"notAssignedOrderId\", jsonData.id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e7a1cdc-439f-42da-bbea-3f23e6e474e9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"    // Set Open status and leave only one line",
											"    order.compositePoLines = [];",
											"    order.workflowStatus = \"Pending\";",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create unassinged order line by user without units permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var line = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/minimalContent.json\", function (err, res) {",
											"    var line = utils.preparePoLine(res.json());",
											"    line.purchaseOrderId = pm.environment.get(\"notAssignedOrderId\"); ",
											"    pm.variables.set(\"minimal_content_line\", JSON.stringify(line));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"notAssignedLineId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{minimal_content_line}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create unassigned pieceby user without units permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var piece = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    var piece = utils.preparePoLine(res.json());",
											"    piece.poLineId = pm.environment.get(\"notAssignedLineId\"); ",
											"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Piece is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{piece_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Try to create order and assing to create open unit by user without units permission, without assignment permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    var order = utils.prepareOrder(res.json());",
											"    order.acqUnitIds = [pm.environment.get(\"readOpenUnitId\")];",
											"   // order.acqUnitIds.push(pm.environment.get(\"fullyProtectedUnitId\"));",
											"    order.compositePoLines = [];",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var error = {};",
											"pm.test(\"Order creation is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoAcqUnitsPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoAcqUnitsPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Try to create order and assing to protected unit by user without units permissions, with assignment permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    var order = utils.prepareOrder(res.json());",
											"    order.acqUnitIds = [pm.environment.get(\"fullyProtectedUnitId\")];",
											"    order.compositePoLines = [];",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var error = {};",
											"pm.test(\"Order creation is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Assign regular user to create protect unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92915c1b-6bde-4a36-9433-bc8f257b567d",
										"exec": [
											"var jsonData = {};",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"createProtectUnitMembershipId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f1a616f-fd38-4215-96ab-50a48a033dec",
										"exec": [
											"let body = {};",
											"",
											"body.userId = globals.testData.users.regular.user.id;",
											"body.acquisitionsUnitId = pm.environment.get(\"createProtectUnitId\");",
											"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{membershipBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/memberships",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"memberships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order and assing to fully-protected and create-protect units by user with create protect unit and assignment permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    var order = utils.prepareOrder(res.json());",
											"    order.acqUnitIds = [pm.environment.get(\"fullyProtectedUnitId\"), pm.environment.get(\"createProtectUnitId\")];",
											"    order.compositePoLines = [];",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"protectedOrderId\", jsonData.id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Try to create order line from fully protected and create-protect units by user without units permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var line = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/minimalContent.json\", function (err, res) {",
											"    var line = utils.preparePoLine(res.json());",
											"    line.purchaseOrderId = pm.environment.get(\"protectedOrderId\"); ",
											"    pm.variables.set(\"minimal_content_line\", JSON.stringify(line));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var error = {};",
											"pm.test(\"Line creation is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{minimal_content_line}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create order line from fully protected and create-protect unit by user with create protect units permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var line = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/minimalContent.json\", function (err, res) {",
											"    var line = utils.preparePoLine(res.json());",
											"    line.purchaseOrderId = pm.environment.get(\"protectedOrderId\"); ",
											"    pm.variables.set(\"minimal_content_line\", JSON.stringify(line));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"protectedLineId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{minimal_content_line}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Try to create piece from fully protected and create-protect unit by user without units permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var piece = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    var piece = utils.preparePoLine(res.json());",
											"    piece.poLineId = pm.environment.get(\"protectedLineId\"); ",
											"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece creation is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{piece_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create piece from fully-protected and create open unit by user with create protect units permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var piece = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    var piece = utils.preparePoLine(res.json());",
											"    piece.poLineId = pm.environment.get(\"protectedLineId\"); ",
											"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Piece is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{piece_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Assign create open unit to protected order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"protectedOrderId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"        order.acqUnitIds.push(pm.environment.get(\"createOpenUnitId\"));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{protectedOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{protectedOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order line from protected units and create open unit by user without units permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var line = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/minimalContent.json\", function (err, res) {",
											"    var line = utils.preparePoLine(res.json());",
											"    line.purchaseOrderId = pm.environment.get(\"protectedOrderId\"); ",
											"    pm.variables.set(\"minimal_content_line\", JSON.stringify(line));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"createOpenLineId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{minimal_content_line}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create piece from protected units and create open unit by user without units permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var piece = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    var piece = utils.preparePoLine(res.json());",
											"    piece.poLineId = pm.environment.get(\"createOpenLineId\"); ",
											"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Piece is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{piece_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Unassign user from create protected unit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/memberships/{{createProtectUnitMembershipId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"memberships",
										"{{createProtectUnitMembershipId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create unassigned pieceby user without units permissions Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var piece = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    var piece = utils.preparePoLine(res.json());",
											"    piece.poLineId = pm.environment.get(\"notAssignedLineId\"); ",
											"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Piece is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{piece_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Test protectUpdate",
					"item": [
						{
							"name": "Create order withous acq units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0e31459-5477-4f72-a9d3-9cc347090686",
										"exec": [
											"pm.test(\"Order is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"orderForUpdateId\", jsonData.id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e7a1cdc-439f-42da-bbea-3f23e6e474e9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"    // Set Open status and leave only one line",
											"    order.workflowStatus = \"Pending\";",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create unassinged order line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var line = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/minimalContent.json\", function (err, res) {",
											"    var line = utils.preparePoLine(res.json());",
											"    line.purchaseOrderId = pm.environment.get(\"orderForUpdateId\"); ",
											"    pm.variables.set(\"minimal_content_line\", JSON.stringify(line));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"lineForUpdateId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{minimal_content_line}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create unassigned piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var piece = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    var piece = utils.preparePoLine(res.json());",
											"    piece.poLineId = pm.environment.get(\"lineForUpdateId\"); ",
											"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Piece is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"pieceForUpdateId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{piece_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Update unsassigned order by  unassigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change an order",
											"        let order = res.json();",
											"        order.approved = (order.approved != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update unassigned po line by unassigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Line is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + pm.environment.get(\"lineForUpdateId\"), (err, res) => {",
											"    pm.test(\"Line is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change a line",
											"        let line = res.json();",
											"        line.checkinItems = (line.checkinItems != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(line));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{lineForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update unassigned piece by unassigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Line is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces/\" + pm.environment.get(\"pieceForUpdateId\"), (err, res) => {",
											"    pm.test(\"Piece is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change a piece",
											"        let piece = res.json();",
											"        piece.supplement = (piece.supplement != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(piece));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign regular user to fully protected unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92915c1b-6bde-4a36-9433-bc8f257b567d",
										"exec": [
											"var jsonData = {};",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"protectedUnitMembershipId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f1a616f-fd38-4215-96ab-50a48a033dec",
										"exec": [
											"let body = {};",
											"",
											"body.userId = globals.testData.users.regular.user.id;",
											"body.acquisitionsUnitId = pm.environment.get(\"fullyProtectedUnitId\");",
											"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{membershipBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/memberships",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"memberships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign regular user to update open unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92915c1b-6bde-4a36-9433-bc8f257b567d",
										"exec": [
											"var jsonData = {};",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"updateOpenUnitMembershipId\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f1a616f-fd38-4215-96ab-50a48a033dec",
										"exec": [
											"let body = {};",
											"",
											"body.userId = globals.testData.users.regular.user.id;",
											"body.acquisitionsUnitId = pm.environment.get(\"updateOpenUnitId\");",
											"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{membershipBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/memberships",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"acquisitions-units",
										"memberships"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign update protected unit to order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"        order.acqUnitIds = [pm.environment.get(\"updateProtectUnitId\")];",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update \"update protected\" order by user assigned to another units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece update is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change an order",
											"        let order = res.json();",
											"        order.approved = (order.approved != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update \"update protected\" line by user assigned to another units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece update is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + pm.environment.get(\"lineForUpdateId\"), (err, res) => {",
											"    pm.test(\"Line is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change a line",
											"        let line = res.json();",
											"        line.checkinItems = (line.checkinItems != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(line));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{lineForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to update \"update protected\" piece by user assigned to another units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece update is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces/\" + pm.environment.get(\"pieceForUpdateId\"), (err, res) => {",
											"    pm.test(\"Piece is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change a piece",
											"        let piece = res.json();",
											"        piece.supplement = (piece.supplement != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(piece));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign delete protected unit to order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/purchase-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"        order.acqUnitIds = [pm.environment.get(\"deleteProtectUnitId\")];",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/purchase-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"purchase-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to Delete line  with update  order assigned to delete protect unit to delete by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece update is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change an order",
											"        let order = res.json();",
											"        order.compositePoLines.shift();",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign create protected unit to order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/purchase-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"        order.acqUnitIds = [pm.environment.get(\"createProtectUnitId\")];",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/purchase-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"purchase-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to add new line  with update  order assigned to create protect unit to delete by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece update is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change an order",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign fully protected unit to order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/purchase-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"         order.acqUnitIds.push(pm.environment.get(\"fullyProtectedUnitId\"));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/purchase-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"purchase-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fully and update protected order by user assigned to fully protected unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change an order",
											"        let order = res.json();",
											"        order.approved = (order.approved != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fully and update protected line by user assigned to fully protected unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Line is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + pm.environment.get(\"lineForUpdateId\"), (err, res) => {",
											"    pm.test(\"Line is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change a line",
											"        let line = res.json();",
											"        line.checkinItems = (line.checkinItems != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(line));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{lineForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fully and update protected piece by user assigned to fully protected unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Line is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces/\" + pm.environment.get(\"pieceForUpdateId\"), (err, res) => {",
											"    pm.test(\"Piece is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change a piece",
											"        let piece = res.json();",
											"        piece.supplement = (piece.supplement != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(piece));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign \"delete protect\" and fully protected units to order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/purchase-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"         order.acqUnitIds = [pm.environment.get(\"deleteProtectUnitId\"), pm.environment.get(\"fullyProtectedUnitId\")];",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/purchase-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"purchase-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  order assigned to delete protect unit by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change an order",
											"        let order = res.json();",
											"        order.approved = (order.approved != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  line assigned to delete protect unit by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Line is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + pm.environment.get(\"lineForUpdateId\"), (err, res) => {",
											"    pm.test(\"Line is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change a line",
											"        let line = res.json();",
											"        line.checkinItems = (line.checkinItems != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(line));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{lineForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  piece assigned to delete protect unit by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Line is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces/\" + pm.environment.get(\"pieceForUpdateId\"), (err, res) => {",
											"    pm.test(\"Piece is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change a piece",
											"        let piece = res.json();",
											"        piece.supplement = (piece.supplement != 'true');",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(piece));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceForUpdateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  order assigned changing acqUnitIds by user without acq-manage permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Order creation is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoAcqUnitsPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoAcqUnitsPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.environment.get(\"orderForUpdateId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Change an order",
											"        let order = res.json();",
											"        order.acqUnitIds = [];",
											"",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUpdateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUpdateId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Test protectDelete",
					"item": [
						{
							"name": "Create order with delete protect unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0e31459-5477-4f72-a9d3-9cc347090686",
										"exec": [
											"pm.test(\"Order is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"orderForDeleteId\", jsonData.id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e7a1cdc-439f-42da-bbea-3f23e6e474e9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"     order.workflowStatus = \"Pending\";",
											"    order.acqUnitIds = [pm.environment.get(\"deleteProtectUnitId\")];",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create delete protect order line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var line = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/minimalContent.json\", function (err, res) {",
											"    var line = utils.preparePoLine(res.json());",
											"    line.purchaseOrderId = pm.environment.get(\"orderForDeleteId\"); ",
											"    pm.variables.set(\"minimal_content_line\", JSON.stringify(line));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"lineForDeleteId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{minimal_content_line}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create delete protect piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var piece = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    var piece = utils.preparePoLine(res.json());",
											"    piece.poLineId = pm.environment.get(\"lineForDeleteId\"); ",
											"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Piece is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"pieceForDeleteId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{piece_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Try to delete \"delete protected\" piece by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece deletion is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete \"delete protected\" line by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece deletion is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{lineForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete \"delete protected\" order by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece deletion is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete \"delete protected\" piece by user assigned to another units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece deletion is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete \"delete protected\" line by user assigned to another units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece deletion is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{lineForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Try to delete \"delete protected\" order by user assigned to another units",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"var error = {};",
											"pm.test(\"Piece deletion is restricted\", function () {",
											"    pm.response.to.be.forbidden;",
											"});",
											"",
											"pm.test(\"Response contains error with userHasNoPermission code\", function () {",
											"    pm.expect(pm.response.json().errors.length).to.eql(1);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.eql(\"userHasNoPermission\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign \"delete protect\" and \"fully protected\" units to order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is updated successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders-storage/purchase-orders/\" + pm.environment.get(\"orderForDeleteId\"), (err, res) => {",
											"    pm.test(\"Order is successfully retrieved and ready for updates\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"",
											"        // Assign unit to an order",
											"        let order = res.json();",
											"         order.acqUnitIds = [pm.environment.get(\"deleteProtectUnitId\"), pm.environment.get(\"fullyProtectedUnitId\")];",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/purchase-orders/{{orderForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"purchase-orders",
										"{{orderForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete \"delete protected\" and \"fully protected\" piece by user assigned to fully protected unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Piece is deleted successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete \"delete protected\" and \"fully protected\" line by user assigned to fully protected unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Line is deleted successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{lineForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete \"delete protected\" and \"fully protected\" order by user assigned to fully protected unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is deleted successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order with delete open unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0e31459-5477-4f72-a9d3-9cc347090686",
										"exec": [
											"pm.test(\"Order is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"orderForDeleteId\", jsonData.id); ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e7a1cdc-439f-42da-bbea-3f23e6e474e9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"",
											"    order.compositePoLines = [];",
											"    order.workflowStatus = \"Pending\";",
											"    order.acqUnitIds = [pm.environment.get(\"deleteOpenUnitId\"), pm.environment.get(\"createOpenUnitId\")];",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create delete open order line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var line = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/minimalContent.json\", function (err, res) {",
											"    var line = utils.preparePoLine(res.json());",
											"    line.purchaseOrderId = pm.environment.get(\"orderForDeleteId\"); ",
											"    pm.variables.set(\"minimal_content_line\", JSON.stringify(line));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"lineForDeleteId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{minimal_content_line}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Create delete open piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var piece = {};",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    var piece = utils.preparePoLine(res.json());",
											"    piece.poLineId = pm.environment.get(\"lineForDeleteId\"); ",
											"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Piece is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.environment.set(\"pieceForDeleteId\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{piece_content}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Delete \"delete open\"  piece by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Piece is deleted successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete \"delete open\" line by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Line is deleted successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{lineForDeleteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete \"delete open\" order by not assigned user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22db4a42-1333-4e75-8b19-cd0a22abd3bf",
										"exec": [
											"pm.test(\"Order is deleted successfully\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88e653b2-8f2e-4418-95a5-144412c51786",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-limitedUser}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForDeleteId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Delete create protect unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-testAdmin}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units/units/{{createProtectUnitId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"acquisitions-units",
								"units",
								"{{createProtectUnitId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create order and assign to deleted unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
									"    var order = utils.prepareOrder(res.json());",
									"    order.acqUnitIds = [pm.environment.get(\"createProtectUnitId\")];",
									"    order.compositePoLines = [];",
									"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var error = {};",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response contains error with orderUnitsNotFound code\", function () {",
									"    pm.expect(pm.response.json().errors.length).to.eql(1);",
									"    error = pm.response.json().errors[0];",
									"    pm.expect(error.code).to.eql(\"orderUnitsNotFound\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders"
							]
						},
						"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
					},
					"response": []
				},
				{
					"name": "Try to create order line from assigned to deleted unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"var line = {};",
									"",
									"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/minimalContent.json\", function (err, res) {",
									"    var line = utils.preparePoLine(res.json());",
									"    line.purchaseOrderId = pm.environment.get(\"protectedOrderId\"); ",
									"    pm.variables.set(\"minimal_content_line\", JSON.stringify(line));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var error = {};",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response contains error with orderUnitsNotFound code\", function () {",
									"    pm.expect(pm.response.json().errors.length).to.eql(1);",
									"    error = pm.response.json().errors[0];",
									"    pm.expect(error.code).to.eql(\"orderUnitsNotFound\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-limitedUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{minimal_content_line}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines"
							]
						},
						"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
					},
					"response": []
				},
				{
					"name": "Try to create piece assigned to deleted unit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"var piece = {};",
									"",
									"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
									"    var piece = utils.preparePoLine(res.json());",
									"    piece.poLineId = pm.environment.get(\"protectedLineId\"); ",
									"    pm.variables.set(\"piece_content\", JSON.stringify(piece));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"var error = {};",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response contains error with orderUnitsNotFound code\", function () {",
									"    pm.expect(pm.response.json().errors.length).to.eql(1);",
									"    error = pm.response.json().errors[0];",
									"    pm.expect(error.code).to.eql(\"orderUnitsNotFound\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-limitedUser}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{piece_content}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"pieces"
							]
						},
						"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Cleanup test tenant",
					"item": [
						{
							"name": "Purge and disable all module for created tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
											"    pm.test(\"Preparing request to disable modules\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res.code).to.equal(200);",
											"        let modulesToDisable = res.json();",
											"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"",
											"        console.log(modulesToDisable);",
											"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Disable all modules for test tenant\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToDisable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									],
									"query": [
										{
											"key": "purge",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "458e788d-f4f1-4a2e-bf7f-dce99511f09a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b46996e-04ac-475d-8d3a-fe8947e8db87",
										"exec": [
											"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Remove all created variables",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [\"poLines-limit\"],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    unit: {",
					"        name: \"ACQ units API tests\",",
					"        protectCreate: true,",
					"        protectRead: true,",
					"        protectUpdate: true,",
					"        protectDelete: true",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Orders API - Admin\",",
					"                    \"lastName\": \"Orders Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\"",
					"                ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Orders API\",",
					"                    \"lastName\": \"Orders Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\"",
					"                ]",
					"            }",
					"        },",
					"        limited: {",
					"            user: {",
					"                \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-limited\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Orders API limited\",",
					"                    \"lastName\": \"Orders Tests limited\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-limited\",",
					"                \"password\": \"mod-orders-limited-password\"",
					"            },",
					"              permissions: {",
					"                \"userId\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.collection.get\",",
					"                    \"orders.item.post\",",
					"                    \"orders.item.get\",",
					"                    \"orders.item.put\",",
					"                    \"orders.item.delete\",",
					"                    \"orders.po-lines.collection.get\",",
					"                    \"orders.po-lines.item.post\",",
					"                    \"orders.po-lines.item.get\",",
					"                    \"orders.po-lines.item.put\",",
					"                    \"orders.po-lines.item.delete\",",
					"                    \"orders.receiving.collection.post\",",
					"                    \"orders.check-in.collection.post\",",
					"                    \"orders.receiving-history.collection.get\",",
					"                    \"orders.pieces.item.post\",",
					"                    \"orders.pieces.item.put\",",
					"                    \"orders.pieces.item.delete\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test orders tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    /**",
					"     * Builds Postman Request base data",
					"     */",
					"    utils.buildPmRequest = function(path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        delete order.poNumber;",
					"        order.workflowStatus = \"Pending\";",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        for (var i = 0; i < order.compositePoLines.length; i++) {",
					"            utils.preparePoLine(order.compositePoLines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"    ",
					"     /**",
					"     * Build PO line with minimal required fields.",
					"     */",
					"    utils.buildPoLineWithMinContent = function(orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Physical Resource\",",
					"            \"physical\":{",
					"\t             \"createInventory\": \"None\"",
					"\t        },",
					"\t        \"cost\":{",
					"\t            \"currency\":\"USD\",",
					"\t            \"listUnitPrice\": 1,",
					"\t            \"quantityPhysical\":1",
					"\t        },",
					"\t        \"title\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function(poLine) {",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        delete poLine.fundDistribution;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.createInventory = \"None\";",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.createInventory = \"None\";",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\")) {",
					"            delete poLine.details.productIds;",
					"        }",
					"",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Build unit assignment",
					"     */",
					"    utils.buildAssignmentContent = function(orderId, acqUnitId) {",
					"        return {",
					"            \"recordId\": orderId,",
					"            \"acquisitionsUnitId\": acqUnitId",
					"        };",
					"    };",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function(configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function(configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function(configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.createOrdersConfig = function(configName) {",
					"        let body = utils.copyJsonObj(globals.testData.configs.bodyTemplate);",
					"        body.configName = configName;",
					"        body.value = pm.variables.get(configName);",
					"        utils.createConfig(body);",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function(err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"",
					"        pm.environment.unset(\"activeVendorId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"firstOrderId\");",
					"        pm.environment.unset(\"firstOrderFirstLineId\");",
					"        pm.environment.unset(\"fullyProtectedUnitId\");",
					"        pm.environment.unset(\"readOpenUnitId\");",
					"        pm.environment.unset(\"createOpenUnitId\");",
					"        pm.environment.unset(\"xokapitoken-limitedUesr\");",
					"        pm.environment.unset(\"secondOrderId\");",
					"        pm.environment.unset(\"secondOrderFirstLineId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"xokapitoken-limitedUesr\");",
					"        pm.environment.unset(\"protectedUnitMembershipId\");",
					"        pm.environment.unset(\"notAssignedOrderId\");",
					"        pm.environment.unset(\"createProtectUnitId\");",
					"        pm.environment.unset(\"notAssignedLineId\");",
					"        pm.environment.unset(\"createProtectUnitMembershipId\");",
					"        pm.environment.unset(\"protectedOrderId\");",
					"        pm.environment.unset(\"protectedLineId\");",
					"        pm.environment.unset(\"createOpenLineId\");",
					"        pm.environment.unset(\"orderForDeleteId\");",
					"        pm.environment.unset(\"lineForDeleteId\");",
					"        pm.environment.unset(\"pieceForDeleteId\");",
					"        pm.environment.unset(\"lineForUpdateId\");",
					"        pm.environment.unset(\"orderForUpdateId\");",
					"        pm.environment.unset(\"pieceForUpdateId\");",
					"        pm.environment.unset(\"updateProtectUnitId\");",
					"        pm.environment.unset(\"updateOpenUnitId\");",
					"        pm.environment.unset(\"deleteProtectUnitId\");",
					"        pm.environment.unset(\"deleteOpenUnitId\");",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "1e1d6aad-b081-4b5c-ae84-a3d6bc0d5234",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "b34020e7-13f9-4bf8-9644-7c45902c1229",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		},
		{
			"id": "878494bc-9934-4235-8c52-6455e0baf1eb",
			"key": "testTenant",
			"value": "orders_acq_units_test",
			"type": "string"
		}
	]
}